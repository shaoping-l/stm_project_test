
stm_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004abc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08004dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004cc  24000010  08004dbc  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  240004dc  08004dbc  000204dc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015f72  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002808  00000000  00000000  00035fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d38  00000000  00000000  000387b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c30  00000000  00000000  000394f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034ec7  00000000  00000000  0003a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001072a  00000000  00000000  0006efe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00145f81  00000000  00000000  0007f711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c5692  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035e0  00000000  00000000  001c56e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000010 	.word	0x24000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08004d74 	.word	0x08004d74

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000014 	.word	0x24000014
 800030c:	08004d74 	.word	0x08004d74

08000310 <HAL_TIM_PeriodElapsedCallback>:
#include "chassis_DCmotor.h"
#include "chassis_kinetic_model.h"



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a87      	ldr	r2, [pc, #540]	; (800053c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800031e:	4293      	cmp	r3, r2
 8000320:	f040 8107 	bne.w	8000532 <HAL_TIM_PeriodElapsedCallback+0x222>
		a++;
 8000324:	4b86      	ldr	r3, [pc, #536]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	4a85      	ldr	r2, [pc, #532]	; (8000540 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800032c:	6013      	str	r3, [r2, #0]
		Mecanum_O::inverse_kinetics(&FL.SP,&BL.SP,&BR.SP,&FR.SP);
 800032e:	4b85      	ldr	r3, [pc, #532]	; (8000544 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000330:	4a85      	ldr	r2, [pc, #532]	; (8000548 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000332:	4986      	ldr	r1, [pc, #536]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000334:	4886      	ldr	r0, [pc, #536]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000336:	f000 fb5f 	bl	80009f8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_>

		/*1. DC_motor FL*/
		FL.PV = FL.encoder(&htim2);
 800033a:	4986      	ldr	r1, [pc, #536]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800033c:	4886      	ldr	r0, [pc, #536]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800033e:	f000 f9c3 	bl	80006c8 <_ZN8DC_motor7encoderEP17TIM_HandleTypeDef>
 8000342:	eeb0 7b40 	vmov.f64	d7, d0
 8000346:	4b84      	ldr	r3, [pc, #528]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000348:	ed83 7b08 	vstr	d7, [r3, #32]
		FL.pulse = FL.PID_PWM_Convertor(FL.SP, FL.PV);
 800034c:	4b82      	ldr	r3, [pc, #520]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800034e:	ed93 7b06 	vldr	d7, [r3, #24]
 8000352:	4b81      	ldr	r3, [pc, #516]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000354:	ed93 6b08 	vldr	d6, [r3, #32]
 8000358:	eeb0 1b46 	vmov.f64	d1, d6
 800035c:	eeb0 0b47 	vmov.f64	d0, d7
 8000360:	487d      	ldr	r0, [pc, #500]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000362:	f000 f9f1 	bl	8000748 <_ZN8DC_motor17PID_PWM_ConvertorEdd>
 8000366:	4603      	mov	r3, r0
 8000368:	4a7b      	ldr	r2, [pc, #492]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800036a:	6493      	str	r3, [r2, #72]	; 0x48

		if (FL.pulse > 0) {
 800036c:	4b7a      	ldr	r3, [pc, #488]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800036e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000370:	2b00      	cmp	r3, #0
 8000372:	dd0c      	ble.n	800038e <HAL_TIM_PeriodElapsedCallback+0x7e>
			HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037a:	4878      	ldr	r0, [pc, #480]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800037c:	f002 f908 	bl	8002590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000386:	4875      	ldr	r0, [pc, #468]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000388:	f002 f902 	bl	8002590 <HAL_GPIO_WritePin>
 800038c:	e00b      	b.n	80003a6 <HAL_TIM_PeriodElapsedCallback+0x96>
		}
		else{
			HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	4871      	ldr	r0, [pc, #452]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000396:	f002 f8fb 	bl	8002590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a0:	486e      	ldr	r0, [pc, #440]	; (800055c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80003a2:	f002 f8f5 	bl	8002590 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, abs(FL.pulse));
 80003a6:	4b6c      	ldr	r3, [pc, #432]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80003a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003aa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80003ae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80003b2:	4b6b      	ldr	r3, [pc, #428]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	639a      	str	r2, [r3, #56]	; 0x38

		/*2. DC_motor BL*/
		BL.PV = BL.encoder(&htim5);
 80003b8:	496a      	ldr	r1, [pc, #424]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80003ba:	486b      	ldr	r0, [pc, #428]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80003bc:	f000 f984 	bl	80006c8 <_ZN8DC_motor7encoderEP17TIM_HandleTypeDef>
 80003c0:	eeb0 7b40 	vmov.f64	d7, d0
 80003c4:	4b68      	ldr	r3, [pc, #416]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80003c6:	ed83 7b08 	vstr	d7, [r3, #32]
		BL.pulse = BL.PID_PWM_Convertor(BL.SP, BL.PV);
 80003ca:	4b67      	ldr	r3, [pc, #412]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80003cc:	ed93 7b06 	vldr	d7, [r3, #24]
 80003d0:	4b65      	ldr	r3, [pc, #404]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80003d2:	ed93 6b08 	vldr	d6, [r3, #32]
 80003d6:	eeb0 1b46 	vmov.f64	d1, d6
 80003da:	eeb0 0b47 	vmov.f64	d0, d7
 80003de:	4862      	ldr	r0, [pc, #392]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80003e0:	f000 f9b2 	bl	8000748 <_ZN8DC_motor17PID_PWM_ConvertorEdd>
 80003e4:	4603      	mov	r3, r0
 80003e6:	4a60      	ldr	r2, [pc, #384]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80003e8:	6493      	str	r3, [r2, #72]	; 0x48

		if (BL.pulse > 0) {
 80003ea:	4b5f      	ldr	r3, [pc, #380]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80003ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dd0c      	ble.n	800040c <HAL_TIM_PeriodElapsedCallback+0xfc>
			HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f8:	485c      	ldr	r0, [pc, #368]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80003fa:	f002 f8c9 	bl	8002590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000404:	4859      	ldr	r0, [pc, #356]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000406:	f002 f8c3 	bl	8002590 <HAL_GPIO_WritePin>
 800040a:	e00b      	b.n	8000424 <HAL_TIM_PeriodElapsedCallback+0x114>
		}
		else{
			HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000412:	4856      	ldr	r0, [pc, #344]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000414:	f002 f8bc 	bl	8002590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	4853      	ldr	r0, [pc, #332]	; (800056c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000420:	f002 f8b6 	bl	8002590 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, abs(BL.pulse));
 8000424:	4b50      	ldr	r3, [pc, #320]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000428:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800042c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000430:	4b4b      	ldr	r3, [pc, #300]	; (8000560 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	635a      	str	r2, [r3, #52]	; 0x34

		/*3. DC_motor BR*/
		BR.PV = BR.encoder(&htim3);
 8000436:	494e      	ldr	r1, [pc, #312]	; (8000570 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000438:	484e      	ldr	r0, [pc, #312]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800043a:	f000 f945 	bl	80006c8 <_ZN8DC_motor7encoderEP17TIM_HandleTypeDef>
 800043e:	eeb0 7b40 	vmov.f64	d7, d0
 8000442:	4b4c      	ldr	r3, [pc, #304]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000444:	ed83 7b08 	vstr	d7, [r3, #32]
		BR.pulse = BR.PID_PWM_Convertor(BR.SP, BR.PV);
 8000448:	4b4a      	ldr	r3, [pc, #296]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800044a:	ed93 7b06 	vldr	d7, [r3, #24]
 800044e:	4b49      	ldr	r3, [pc, #292]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000450:	ed93 6b08 	vldr	d6, [r3, #32]
 8000454:	eeb0 1b46 	vmov.f64	d1, d6
 8000458:	eeb0 0b47 	vmov.f64	d0, d7
 800045c:	4845      	ldr	r0, [pc, #276]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800045e:	f000 f973 	bl	8000748 <_ZN8DC_motor17PID_PWM_ConvertorEdd>
 8000462:	4603      	mov	r3, r0
 8000464:	4a43      	ldr	r2, [pc, #268]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000466:	6493      	str	r3, [r2, #72]	; 0x48

		if (BR.pulse > 0) {
 8000468:	4b42      	ldr	r3, [pc, #264]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800046a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800046c:	2b00      	cmp	r3, #0
 800046e:	dd0a      	ble.n	8000486 <HAL_TIM_PeriodElapsedCallback+0x176>
			HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2104      	movs	r1, #4
 8000474:	4840      	ldr	r0, [pc, #256]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000476:	f002 f88b 	bl	8002590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2108      	movs	r1, #8
 800047e:	483e      	ldr	r0, [pc, #248]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000480:	f002 f886 	bl	8002590 <HAL_GPIO_WritePin>
 8000484:	e009      	b.n	800049a <HAL_TIM_PeriodElapsedCallback+0x18a>
		}
		else{
			HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2104      	movs	r1, #4
 800048a:	483b      	ldr	r0, [pc, #236]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800048c:	f002 f880 	bl	8002590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2108      	movs	r1, #8
 8000494:	4838      	ldr	r0, [pc, #224]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000496:	f002 f87b 	bl	8002590 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, abs(BR.pulse));
 800049a:	4b36      	ldr	r3, [pc, #216]	; (8000574 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800049c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800049e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80004a2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80004a6:	4b35      	ldr	r3, [pc, #212]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	635a      	str	r2, [r3, #52]	; 0x34

		/*4. DC_motor FR*/
		FR.PV = FR.encoder(&htim4);
 80004ac:	4934      	ldr	r1, [pc, #208]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80004ae:	4835      	ldr	r0, [pc, #212]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004b0:	f000 f90a 	bl	80006c8 <_ZN8DC_motor7encoderEP17TIM_HandleTypeDef>
 80004b4:	eeb0 7b40 	vmov.f64	d7, d0
 80004b8:	4b32      	ldr	r3, [pc, #200]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004ba:	ed83 7b08 	vstr	d7, [r3, #32]
		FR.pulse = FR.PID_PWM_Convertor(FR.SP, FR.PV);
 80004be:	4b31      	ldr	r3, [pc, #196]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004c0:	ed93 7b06 	vldr	d7, [r3, #24]
 80004c4:	4b2f      	ldr	r3, [pc, #188]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004c6:	ed93 6b08 	vldr	d6, [r3, #32]
 80004ca:	eeb0 1b46 	vmov.f64	d1, d6
 80004ce:	eeb0 0b47 	vmov.f64	d0, d7
 80004d2:	482c      	ldr	r0, [pc, #176]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004d4:	f000 f938 	bl	8000748 <_ZN8DC_motor17PID_PWM_ConvertorEdd>
 80004d8:	4603      	mov	r3, r0
 80004da:	4a2a      	ldr	r2, [pc, #168]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004dc:	6493      	str	r3, [r2, #72]	; 0x48

		if (FR.pulse > 0) {
 80004de:	4b29      	ldr	r3, [pc, #164]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80004e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	dd0b      	ble.n	80004fe <HAL_TIM_PeriodElapsedCallback+0x1ee>
			HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2110      	movs	r1, #16
 80004ea:	4823      	ldr	r0, [pc, #140]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80004ec:	f002 f850 	bl	8002590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	4824      	ldr	r0, [pc, #144]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80004f8:	f002 f84a 	bl	8002590 <HAL_GPIO_WritePin>
 80004fc:	e00a      	b.n	8000514 <HAL_TIM_PeriodElapsedCallback+0x204>
		}
		else{
			HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2110      	movs	r1, #16
 8000502:	481d      	ldr	r0, [pc, #116]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000504:	f002 f844 	bl	8002590 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050e:	481e      	ldr	r0, [pc, #120]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000510:	f002 f83e 	bl	8002590 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, abs(FR.pulse));
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000518:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800051c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	639a      	str	r2, [r3, #56]	; 0x38

		Mecanum_O::forward_kinetics(&FL.PV,&BL.PV,&BR.PV,&FR.PV);
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000528:	4a19      	ldr	r2, [pc, #100]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800052a:	491a      	ldr	r1, [pc, #104]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800052c:	481a      	ldr	r0, [pc, #104]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800052e:	f000 fadf 	bl	8000af0 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_>
	}
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010000 	.word	0x40010000
 8000540:	2400002c 	.word	0x2400002c
 8000544:	240001b0 	.word	0x240001b0
 8000548:	24000138 	.word	0x24000138
 800054c:	240000c0 	.word	0x240000c0
 8000550:	24000048 	.word	0x24000048
 8000554:	2400028c 	.word	0x2400028c
 8000558:	24000030 	.word	0x24000030
 800055c:	58020c00 	.word	0x58020c00
 8000560:	240003bc 	.word	0x240003bc
 8000564:	24000370 	.word	0x24000370
 8000568:	240000a8 	.word	0x240000a8
 800056c:	58020400 	.word	0x58020400
 8000570:	240002d8 	.word	0x240002d8
 8000574:	24000120 	.word	0x24000120
 8000578:	58021000 	.word	0x58021000
 800057c:	24000408 	.word	0x24000408
 8000580:	24000324 	.word	0x24000324
 8000584:	24000198 	.word	0x24000198
 8000588:	58020800 	.word	0x58020800
 800058c:	240001b8 	.word	0x240001b8
 8000590:	24000140 	.word	0x24000140
 8000594:	240000c8 	.word	0x240000c8
 8000598:	24000050 	.word	0x24000050

0800059c <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 80005a0:	2100      	movs	r1, #0
 80005a2:	4818      	ldr	r0, [pc, #96]	; (8000604 <_Z13DC_motor_initv+0x68>)
 80005a4:	f003 fa1e 	bl	80039e4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 80005a8:	2104      	movs	r1, #4
 80005aa:	4816      	ldr	r0, [pc, #88]	; (8000604 <_Z13DC_motor_initv+0x68>)
 80005ac:	f003 fa1a 	bl	80039e4 <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 80005b0:	2104      	movs	r1, #4
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <_Z13DC_motor_initv+0x6c>)
 80005b4:	f003 f854 	bl	8003660 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 80005b8:	2100      	movs	r1, #0
 80005ba:	4814      	ldr	r0, [pc, #80]	; (800060c <_Z13DC_motor_initv+0x70>)
 80005bc:	f003 fa12 	bl	80039e4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 80005c0:	2104      	movs	r1, #4
 80005c2:	4812      	ldr	r0, [pc, #72]	; (800060c <_Z13DC_motor_initv+0x70>)
 80005c4:	f003 fa0e 	bl	80039e4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 80005c8:	2100      	movs	r1, #0
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <_Z13DC_motor_initv+0x6c>)
 80005cc:	f003 f848 	bl	8003660 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 80005d0:	2100      	movs	r1, #0
 80005d2:	480f      	ldr	r0, [pc, #60]	; (8000610 <_Z13DC_motor_initv+0x74>)
 80005d4:	f003 fa06 	bl	80039e4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 80005d8:	2104      	movs	r1, #4
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <_Z13DC_motor_initv+0x74>)
 80005dc:	f003 fa02 	bl	80039e4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 80005e0:	2100      	movs	r1, #0
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <_Z13DC_motor_initv+0x78>)
 80005e4:	f003 f83c 	bl	8003660 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <_Z13DC_motor_initv+0x7c>)
 80005ec:	f003 f9fa 	bl	80039e4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 80005f0:	2104      	movs	r1, #4
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <_Z13DC_motor_initv+0x7c>)
 80005f4:	f003 f9f6 	bl	80039e4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 80005f8:	2104      	movs	r1, #4
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <_Z13DC_motor_initv+0x78>)
 80005fc:	f003 f830 	bl	8003660 <HAL_TIM_PWM_Start>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2400028c 	.word	0x2400028c
 8000608:	240003bc 	.word	0x240003bc
 800060c:	24000370 	.word	0x24000370
 8000610:	240002d8 	.word	0x240002d8
 8000614:	24000408 	.word	0x24000408
 8000618:	24000324 	.word	0x24000324

0800061c <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 800061c:	b480      	push	{r7}
 800061e:	b08f      	sub	sp, #60	; 0x3c
 8000620:	af00      	add	r7, sp, #0
 8000622:	6378      	str	r0, [r7, #52]	; 0x34
 8000624:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000628:	ed87 1b08 	vstr	d1, [r7, #32]
 800062c:	ed87 2b06 	vstr	d2, [r7, #24]
 8000630:	ed87 3b04 	vstr	d3, [r7, #16]
 8000634:	ed87 4b02 	vstr	d4, [r7, #8]
 8000638:	ed87 5b00 	vstr	d5, [r7]
 800063c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800063e:	f04f 0200 	mov.w	r2, #0
 8000642:	f04f 0300 	mov.w	r3, #0
 8000646:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800064a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800064c:	f04f 0200 	mov.w	r2, #0
 8000650:	f04f 0300 	mov.w	r3, #0
 8000654:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8000658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800065a:	f04f 0200 	mov.w	r2, #0
 800065e:	f04f 0300 	mov.w	r3, #0
 8000662:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8000666:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000668:	f04f 0200 	mov.w	r2, #0
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 8000674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800067a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 800067e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000680:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000684:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 8000688:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800068a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800068e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 8000692:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000694:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000698:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 800069c:	ed97 7b02 	vldr	d7, [r7, #8]
 80006a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80006a4:	ee17 2a90 	vmov	r2, s15
 80006a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006aa:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 80006ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80006ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006b2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 80006b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006b8:	4618      	mov	r0, r3
 80006ba:	373c      	adds	r7, #60	; 0x3c
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	0000      	movs	r0, r0
	...

080006c8 <_ZN8DC_motor7encoderEP17TIM_HandleTypeDef>:
//using angular velocity
double DC_motor::encoder(TIM_HandleTypeDef *htim){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	enc = __HAL_TIM_GetCounter(htim);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SetCounter(htim,0);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
	return (double) enc/(4*resolution*reduction_ratio*TIM_IT_span*2*pi);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	ed93 7b02 	vldr	d7, [r3, #8]
 8000706:	ee25 7b07 	vmul.f64	d7, d5, d7
 800070a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000738 <_ZN8DC_motor7encoderEP17TIM_HandleTypeDef+0x70>
 800070e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000712:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000716:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000740 <_ZN8DC_motor7encoderEP17TIM_HandleTypeDef+0x78>
 800071a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800071e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000722:	eeb0 7b45 	vmov.f64	d7, d5
}
 8000726:	eeb0 0b47 	vmov.f64	d0, d7
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	f3af 8000 	nop.w
 8000738:	d2f1a9fc 	.word	0xd2f1a9fc
 800073c:	3f50624d 	.word	0x3f50624d
 8000740:	54442d18 	.word	0x54442d18
 8000744:	400921fb 	.word	0x400921fb

08000748 <_ZN8DC_motor17PID_PWM_ConvertorEdd>:
int DC_motor::PID_PWM_Convertor(double set_point,double present_var){
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6178      	str	r0, [r7, #20]
 8000750:	ed87 0b02 	vstr	d0, [r7, #8]
 8000754:	ed87 1b00 	vstr	d1, [r7]
	//Proportion
	error = set_point - present_var;
 8000758:	ed97 6b02 	vldr	d6, [r7, #8]
 800075c:	ed97 7b00 	vldr	d7, [r7]
 8000760:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	//integal
	integral += error * TIM_IT_span;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000776:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80008c8 <_ZN8DC_motor17PID_PWM_ConvertorEdd+0x180>
 800077a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800077e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	if (ki * integral > 1) integral = 1/ki;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000794:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000798:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800079c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80007a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a4:	dd0a      	ble.n	80007bc <_ZN8DC_motor17PID_PWM_ConvertorEdd+0x74>
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80007ac:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80007b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
 80007ba:	e018      	b.n	80007ee <_ZN8DC_motor17PID_PWM_ConvertorEdd+0xa6>
	else if (ki * integral < -1) integral = -1/ki;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 80007c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007cc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80007d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80007d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d8:	d509      	bpl.n	80007ee <_ZN8DC_motor17PID_PWM_ConvertorEdd+0xa6>
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 80007e0:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80007e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	//differential
	differential = (u - prev_u) / TIM_IT_span;
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80007fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80007fe:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80008c8 <_ZN8DC_motor17PID_PWM_ConvertorEdd+0x180>
 8000802:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	prev_u = u;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000812:	6979      	ldr	r1, [r7, #20]
 8000814:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	//PWM_Ratio
	u = kp * error + ki * integral + kd * differential;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000824:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	ed93 5b0c 	vldr	d5, [r3, #48]	; 0x30
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8000834:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000838:	ee36 6b07 	vadd.f64	d6, d6, d7
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000848:	ee25 7b07 	vmul.f64	d7, d5, d7
 800084c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	if (u > 1) u = 1;
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800085c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000860:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000868:	dd06      	ble.n	8000878 <_ZN8DC_motor17PID_PWM_ConvertorEdd+0x130>
 800086a:	6979      	ldr	r1, [r7, #20]
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <_ZN8DC_motor17PID_PWM_ConvertorEdd+0x188>)
 8000872:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8000876:	e00f      	b.n	8000898 <_ZN8DC_motor17PID_PWM_ConvertorEdd+0x150>
	else if (u < -1) u = -1;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800087e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000882:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088a:	d505      	bpl.n	8000898 <_ZN8DC_motor17PID_PWM_ConvertorEdd+0x150>
 800088c:	6979      	ldr	r1, [r7, #20]
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <_ZN8DC_motor17PID_PWM_ConvertorEdd+0x18c>)
 8000894:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	return (int) u*ARR;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800089e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80008ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80008b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008b4:	ee17 3a90 	vmov	r3, s15
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	371c      	adds	r7, #28
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	f3af 8000 	nop.w
 80008c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80008cc:	3f50624d 	.word	0x3f50624d
 80008d0:	3ff00000 	.word	0x3ff00000
 80008d4:	bff00000 	.word	0xbff00000

080008d8 <_Z41__static_initialization_and_destruction_0ii>:
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d140      	bne.n	800096a <_Z41__static_initialization_and_destruction_0ii+0x92>
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d13b      	bne.n	800096a <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 80008f2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000978 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80008f6:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000980 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80008fa:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000988 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80008fe:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000990 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000902:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8000998 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000906:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80009a0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800090a:	4833      	ldr	r0, [pc, #204]	; (80009d8 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800090c:	f7ff fe86 	bl	800061c <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 8000910:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000978 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000914:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000980 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000918:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000988 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800091c:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000990 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000920:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80009a8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000924:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80009b0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000928:	482c      	ldr	r0, [pc, #176]	; (80009dc <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800092a:	f7ff fe77 	bl	800061c <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 800092e:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000978 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000932:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000980 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000936:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000988 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800093a:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8000990 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800093e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 80009b8 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8000942:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 80009c0 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 8000946:	4826      	ldr	r0, [pc, #152]	; (80009e0 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8000948:	f7ff fe68 	bl	800061c <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 800094c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000978 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000950:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000980 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000954:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000988 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000958:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000990 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800095c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80009c8 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8000960:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80009d0 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 8000964:	481f      	ldr	r0, [pc, #124]	; (80009e4 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8000966:	f7ff fe59 	bl	800061c <_ZN8DC_motorC1Edddddd>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	f3af 8000 	nop.w
 8000978:	00000000 	.word	0x00000000
 800097c:	408f4000 	.word	0x408f4000
 8000980:	00000000 	.word	0x00000000
 8000984:	40800000 	.word	0x40800000
 8000988:	00000000 	.word	0x00000000
 800098c:	406b0000 	.word	0x406b0000
	...
 8000998:	89b64cae 	.word	0x89b64cae
 800099c:	403fb7ac 	.word	0x403fb7ac
 80009a0:	d059ca21 	.word	0xd059ca21
 80009a4:	402fee62 	.word	0x402fee62
 80009a8:	76ca36c5 	.word	0x76ca36c5
 80009ac:	4056ec15 	.word	0x4056ec15
 80009b0:	420d6ba3 	.word	0x420d6ba3
 80009b4:	40382ecc 	.word	0x40382ecc
 80009b8:	e191aae3 	.word	0xe191aae3
 80009bc:	40490b21 	.word	0x40490b21
 80009c0:	f4097cab 	.word	0xf4097cab
 80009c4:	4035320d 	.word	0x4035320d
 80009c8:	06469611 	.word	0x06469611
 80009cc:	40535cd8 	.word	0x40535cd8
 80009d0:	0ae388d1 	.word	0x0ae388d1
 80009d4:	40404f39 	.word	0x40404f39
 80009d8:	24000030 	.word	0x24000030
 80009dc:	240000a8 	.word	0x240000a8
 80009e0:	24000120 	.word	0x24000120
 80009e4:	24000198 	.word	0x24000198

080009e8 <_GLOBAL__sub_I_FL>:
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff ff71 	bl	80008d8 <_Z41__static_initialization_and_destruction_0ii>
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_>:
Chassis_data cmd_vel;
Chassis_data realspeed;


//Mecanum_O
void Mecanum_O::inverse_kinetics(double* m1_SP, double* m2_SP, double* m3_SP, double* m4_SP){
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	603b      	str	r3, [r7, #0]
	*m1_SP= (cmd_vel.Vx-cmd_vel.Vy-cmd_vel.w*(Mecanum_O::lx+Mecanum_O::ly))/Mecanum_O::radius;
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a08:	ed93 6b00 	vldr	d6, [r3]
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a0e:	ed93 7b02 	vldr	d7, [r3, #8]
 8000a12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a18:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a1c:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 8000ad8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xe0>
 8000a20:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a24:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000a28:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8000ae0 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xe8>
 8000a2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	ed83 7b00 	vstr	d7, [r3]
	*m2_SP= (cmd_vel.Vx+cmd_vel.Vy-cmd_vel.w*(Mecanum_O::lx+Mecanum_O::ly))/Mecanum_O::radius;
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a38:	ed93 6b00 	vldr	d6, [r3]
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a3e:	ed93 7b02 	vldr	d7, [r3, #8]
 8000a42:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a46:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a48:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a4c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8000ad8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xe0>
 8000a50:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a54:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000a58:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000ae0 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xe8>
 8000a5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	ed83 7b00 	vstr	d7, [r3]
	*m3_SP= (cmd_vel.Vx-cmd_vel.Vy+cmd_vel.w*(Mecanum_O::lx+Mecanum_O::ly))/Mecanum_O::radius;
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a68:	ed93 6b00 	vldr	d6, [r3]
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a6e:	ed93 7b02 	vldr	d7, [r3, #8]
 8000a72:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a78:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a7c:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8000ad8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xe0>
 8000a80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a88:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000ae0 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xe8>
 8000a8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	ed83 7b00 	vstr	d7, [r3]
	*m4_SP= (cmd_vel.Vx+cmd_vel.Vy+cmd_vel.w*(Mecanum_O::lx+Mecanum_O::ly))/Mecanum_O::radius;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a98:	ed93 6b00 	vldr	d6, [r3]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000a9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8000aa2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xf0>)
 8000aa8:	ed93 7b04 	vldr	d7, [r3, #16]
 8000aac:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000ad8 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xe0>
 8000ab0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ab4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ab8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000ae0 <_ZN9Mecanum_O16inverse_kineticsEPdS0_S0_S0_+0xe8>
 8000abc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	ed83 7b00 	vstr	d7, [r3]
}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	f3af 8000 	nop.w
 8000ad8:	b851eb85 	.word	0xb851eb85
 8000adc:	407adf1e 	.word	0x407adf1e
 8000ae0:	00000000 	.word	0x00000000
 8000ae4:	40602000 	.word	0x40602000
 8000ae8:	24000210 	.word	0x24000210
 8000aec:	00000000 	.word	0x00000000

08000af0 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_>:
void Mecanum_O::forward_kinetics(double* m1_PV, double* m2_PV, double* m3_PV, double* m4_PV){
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	603b      	str	r3, [r7, #0]
	realspeed.Vx= (*m1_PV+*m2_PV+*m3_PV+*m4_PV)/4*Mecanum_O::radius;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	ed93 6b00 	vldr	d6, [r3]
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	ed93 7b00 	vldr	d7, [r3]
 8000b0a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	ed93 7b00 	vldr	d7, [r3]
 8000b14:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	ed93 7b00 	vldr	d7, [r3]
 8000b1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b22:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000b26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b2a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000bc0 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_+0xd0>
 8000b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_+0xe0>)
 8000b34:	ed83 7b00 	vstr	d7, [r3]
	realspeed.Vy= (-*m1_PV+*m2_PV-*m3_PV+*m4_PV)/4*Mecanum_O::radius;
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	ed93 6b00 	vldr	d6, [r3]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	ed93 7b00 	vldr	d7, [r3]
 8000b44:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	ed93 7b00 	vldr	d7, [r3]
 8000b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	ed93 7b00 	vldr	d7, [r3]
 8000b58:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b5c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000b60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b64:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000bc0 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_+0xd0>
 8000b68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_+0xe0>)
 8000b6e:	ed83 7b02 	vstr	d7, [r3, #8]
	realspeed.w= (-*m1_PV-*m2_PV+*m3_PV+*m4_PV)/(4*(Mecanum_O::lx+Mecanum_O::ly))*Mecanum_O::radius;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	ed93 7b00 	vldr	d7, [r3]
 8000b78:	eeb1 6b47 	vneg.f64	d6, d7
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	ed93 7b00 	vldr	d7, [r3]
 8000b82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	ed93 7b00 	vldr	d7, [r3]
 8000b8c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	ed93 7b00 	vldr	d7, [r3]
 8000b96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b9a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000bc8 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_+0xd8>
 8000b9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ba2:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8000bc0 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_+0xd0>
 8000ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <_ZN9Mecanum_O16forward_kineticsEPdS0_S0_S0_+0xe0>)
 8000bac:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	f3af 8000 	nop.w
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	40602000 	.word	0x40602000
 8000bc8:	b851eb85 	.word	0xb851eb85
 8000bcc:	409adf1e 	.word	0x409adf1e
 8000bd0:	24000228 	.word	0x24000228

08000bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd8:	f001 f96c 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 f814 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 fafc 	bl	80011dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000be4:	f000 f8c2 	bl	8000d6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000be8:	f000 f914 	bl	8000e14 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bec:	f000 f968 	bl	8000ec0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000bf0:	f000 f9bc 	bl	8000f6c <MX_TIM5_Init>
  MX_TIM12_Init();
 8000bf4:	f000 fa10 	bl	8001018 <MX_TIM12_Init>
  MX_TIM15_Init();
 8000bf8:	f000 fa5e 	bl	80010b8 <MX_TIM15_Init>
  MX_TIM1_Init();
 8000bfc:	f000 f862 	bl	8000cc4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000c00:	f000 fbcc 	bl	800139c <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <main+0x30>
	...

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b09c      	sub	sp, #112	; 0x70
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	224c      	movs	r2, #76	; 0x4c
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 f8a4 	bl	8004d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2220      	movs	r2, #32
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 f89e 	bl	8004d64 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f001 fccb 	bl	80025c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <SystemClock_Config+0xb8>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c3a:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <SystemClock_Config+0xb8>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6193      	str	r3, [r2, #24]
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <SystemClock_Config+0xb8>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c4e:	bf00      	nop
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <SystemClock_Config+0xb8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c5c:	d1f8      	bne.n	8000c50 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c66:	2340      	movs	r3, #64	; 0x40
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fce0 	bl	8002638 <HAL_RCC_OscConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c7e:	f000 fb65 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c82:	233f      	movs	r3, #63	; 0x3f
 8000c84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c92:	2340      	movs	r3, #64	; 0x40
 8000c94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 f873 	bl	8002d94 <HAL_RCC_ClockConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000cb4:	f000 fb4a 	bl	800134c <Error_Handler>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	3770      	adds	r7, #112	; 0x70
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	58024800 	.word	0x58024800

08000cc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ce2:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000ce4:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <MX_TIM1_Init+0xa4>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000cea:	223f      	movs	r2, #63	; 0x3f
 8000cec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000cf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d0e:	4815      	ldr	r0, [pc, #84]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d10:	f002 fb70 	bl	80033f4 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d1a:	f000 fb17 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d2c:	f003 f93c 	bl	8003fa8 <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d36:	f000 fb09 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <MX_TIM1_Init+0xa0>)
 8000d4c:	f003 fe8c 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d56:	f000 faf9 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	24000240 	.word	0x24000240
 8000d68:	40010000 	.word	0x40010000

08000d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	; 0x30
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2224      	movs	r2, #36	; 0x24
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 fff2 	bl	8004d64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	463b      	mov	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_TIM2_Init+0xa4>)
 8000d8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <MX_TIM2_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <MX_TIM2_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_TIM2_Init+0xa4>)
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295
 8000da4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_TIM2_Init+0xa4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_TIM2_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <MX_TIM2_Init+0xa4>)
 8000dde:	f002 fd5b 	bl	8003898 <HAL_TIM_Encoder_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000de8:	f000 fab0 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_TIM2_Init+0xa4>)
 8000dfa:	f003 fe35 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e04:	f000 faa2 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3730      	adds	r7, #48	; 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2400028c 	.word	0x2400028c

08000e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2224      	movs	r2, #36	; 0x24
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 ff9e 	bl	8004d64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_TIM3_Init+0xa4>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <MX_TIM3_Init+0xa8>)
 8000e36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_TIM3_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_TIM3_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MX_TIM3_Init+0xa4>)
 8000e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM3_Init+0xa4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_TIM3_Init+0xa4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e60:	2301      	movs	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e70:	2301      	movs	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <MX_TIM3_Init+0xa4>)
 8000e84:	f002 fd08 	bl	8003898 <HAL_TIM_Encoder_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e8e:	f000 fa5d 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <MX_TIM3_Init+0xa4>)
 8000ea0:	f003 fde2 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000eaa:	f000 fa4f 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	3730      	adds	r7, #48	; 0x30
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240002d8 	.word	0x240002d8
 8000ebc:	40000400 	.word	0x40000400

08000ec0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2224      	movs	r2, #36	; 0x24
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 ff48 	bl	8004d64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_TIM4_Init+0xa4>)
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <MX_TIM4_Init+0xa8>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_TIM4_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_TIM4_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_TIM4_Init+0xa4>)
 8000ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM4_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_TIM4_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_TIM4_Init+0xa4>)
 8000f30:	f002 fcb2 	bl	8003898 <HAL_TIM_Encoder_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f3a:	f000 fa07 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM4_Init+0xa4>)
 8000f4c:	f003 fd8c 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f56:	f000 f9f9 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	3730      	adds	r7, #48	; 0x30
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	24000324 	.word	0x24000324
 8000f68:	40000800 	.word	0x40000800

08000f6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2224      	movs	r2, #36	; 0x24
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fef2 	bl	8004d64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_TIM5_Init+0xa4>)
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <MX_TIM5_Init+0xa8>)
 8000f8e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_TIM5_Init+0xa4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_TIM5_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_TIM5_Init+0xa4>)
 8000f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_TIM5_Init+0xa4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_TIM5_Init+0xa4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <MX_TIM5_Init+0xa4>)
 8000fdc:	f002 fc5c 	bl	8003898 <HAL_TIM_Encoder_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000fe6:	f000 f9b1 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_TIM5_Init+0xa4>)
 8000ff8:	f003 fd36 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001002:	f000 f9a3 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	; 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24000370 	.word	0x24000370
 8001014:	40000c00 	.word	0x40000c00

08001018 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
 800102c:	615a      	str	r2, [r3, #20]
 800102e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_TIM12_Init+0x98>)
 8001032:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <MX_TIM12_Init+0x9c>)
 8001034:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 63;
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_TIM12_Init+0x98>)
 8001038:	223f      	movs	r2, #63	; 0x3f
 800103a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_TIM12_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_TIM12_Init+0x98>)
 8001044:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001048:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_TIM12_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_TIM12_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001056:	4816      	ldr	r0, [pc, #88]	; (80010b0 <MX_TIM12_Init+0x98>)
 8001058:	f002 faaa 	bl	80035b0 <HAL_TIM_PWM_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001062:	f000 f973 	bl	800134c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001066:	2360      	movs	r3, #96	; 0x60
 8001068:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	; (80010b0 <MX_TIM12_Init+0x98>)
 800107e:	f002 fe7f 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001088:	f000 f960 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2204      	movs	r2, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_TIM12_Init+0x98>)
 8001094:	f002 fe74 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800109e:	f000 f955 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_TIM12_Init+0x98>)
 80010a4:	f000 fdae 	bl	8001c04 <HAL_TIM_MspPostInit>

}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	240003bc 	.word	0x240003bc
 80010b4:	40001800 	.word	0x40001800

080010b8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b098      	sub	sp, #96	; 0x60
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2234      	movs	r2, #52	; 0x34
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fe3d 	bl	8004d64 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010ea:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <MX_TIM15_Init+0x11c>)
 80010ec:	4a3a      	ldr	r2, [pc, #232]	; (80011d8 <MX_TIM15_Init+0x120>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 80010f0:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <MX_TIM15_Init+0x11c>)
 80010f2:	223f      	movs	r2, #63	; 0x3f
 80010f4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <MX_TIM15_Init+0x11c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <MX_TIM15_Init+0x11c>)
 80010fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001102:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <MX_TIM15_Init+0x11c>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800110a:	4b32      	ldr	r3, [pc, #200]	; (80011d4 <MX_TIM15_Init+0x11c>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <MX_TIM15_Init+0x11c>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001116:	482f      	ldr	r0, [pc, #188]	; (80011d4 <MX_TIM15_Init+0x11c>)
 8001118:	f002 fa4a 	bl	80035b0 <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001122:	f000 f913 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800112e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001132:	4619      	mov	r1, r3
 8001134:	4827      	ldr	r0, [pc, #156]	; (80011d4 <MX_TIM15_Init+0x11c>)
 8001136:	f003 fc97 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001140:	f000 f904 	bl	800134c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	; 0x60
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	481a      	ldr	r0, [pc, #104]	; (80011d4 <MX_TIM15_Init+0x11c>)
 800116a:	f002 fe09 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001174:	f000 f8ea 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001178:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800117c:	2204      	movs	r2, #4
 800117e:	4619      	mov	r1, r3
 8001180:	4814      	ldr	r0, [pc, #80]	; (80011d4 <MX_TIM15_Init+0x11c>)
 8001182:	f002 fdfd 	bl	8003d80 <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 800118c:	f000 f8de 	bl	800134c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	; (80011d4 <MX_TIM15_Init+0x11c>)
 80011b8:	f003 fcf2 	bl	8004ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80011c2:	f000 f8c3 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80011c6:	4803      	ldr	r0, [pc, #12]	; (80011d4 <MX_TIM15_Init+0x11c>)
 80011c8:	f000 fd1c 	bl	8001c04 <HAL_TIM_MspPostInit>

}
 80011cc:	bf00      	nop
 80011ce:	3760      	adds	r7, #96	; 0x60
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	24000408 	.word	0x24000408
 80011d8:	40014000 	.word	0x40014000

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f2:	4b51      	ldr	r3, [pc, #324]	; (8001338 <MX_GPIO_Init+0x15c>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <MX_GPIO_Init+0x15c>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001202:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001210:	4b49      	ldr	r3, [pc, #292]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a48      	ldr	r2, [pc, #288]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b45      	ldr	r3, [pc, #276]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b42      	ldr	r3, [pc, #264]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a40      	ldr	r2, [pc, #256]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b3e      	ldr	r3, [pc, #248]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <MX_GPIO_Init+0x15c>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a39      	ldr	r2, [pc, #228]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <MX_GPIO_Init+0x15c>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	4b33      	ldr	r3, [pc, #204]	; (8001338 <MX_GPIO_Init+0x15c>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a31      	ldr	r2, [pc, #196]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <MX_GPIO_Init+0x15c>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001288:	2200      	movs	r2, #0
 800128a:	f646 319c 	movw	r1, #27548	; 0x6b9c
 800128e:	482b      	ldr	r0, [pc, #172]	; (800133c <MX_GPIO_Init+0x160>)
 8001290:	f001 f97e 	bl	8002590 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129a:	4829      	ldr	r0, [pc, #164]	; (8001340 <MX_GPIO_Init+0x164>)
 800129c:	f001 f978 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 80012a6:	4827      	ldr	r0, [pc, #156]	; (8001344 <MX_GPIO_Init+0x168>)
 80012a8:	f001 f972 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80012b2:	4825      	ldr	r0, [pc, #148]	; (8001348 <MX_GPIO_Init+0x16c>)
 80012b4:	f001 f96c 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE7
                           PE8 PE9 PE11 PE13
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 80012b8:	f646 339c 	movw	r3, #27548	; 0x6b9c
 80012bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	481a      	ldr	r0, [pc, #104]	; (800133c <MX_GPIO_Init+0x160>)
 80012d2:	f000 ffb5 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <MX_GPIO_Init+0x164>)
 80012f0:	f000 ffa6 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 80012f4:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_GPIO_Init+0x168>)
 800130e:	f000 ff97 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001312:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_GPIO_Init+0x16c>)
 800132c:	f000 ff88 	bl	8002240 <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	58024400 	.word	0x58024400
 800133c:	58021000 	.word	0x58021000
 8001340:	58020800 	.word	0x58020800
 8001344:	58020400 	.word	0x58020400
 8001348:	58020c00 	.word	0x58020c00

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>

08001356 <_ZN6PUSHERC1Ev>:
#define PUSHER_D_IN2_PORT GPIOE
#define PUSHER_D_IN2_PIN GPIO_PIN_8

#define PUSHER_SPEED 33.6

class PUSHER{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9c1 2300 	strd	r2, r3, [r1]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <main_function>:
#include "stm32h7xx_hal.h"

int b=0;

extern TIM_HandleTypeDef htim1;
void main_function(){
 800139c:	b580      	push	{r7, lr}
 800139e:	b0a0      	sub	sp, #128	; 0x80
 80013a0:	af00      	add	r7, sp, #0
	PUSHER pusher_A;
 80013a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ffd5 	bl	8001356 <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 80013ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffd0 	bl	8001356 <_ZN6PUSHERC1Ev>
	PUSHER pusher_C;
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ffcb 	bl	8001356 <_ZN6PUSHERC1Ev>
	PUSHER pusher_D;
 80013c0:	463b      	mov	r3, r7
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff ffc7 	bl	8001356 <_ZN6PUSHERC1Ev>

	stm_setup();
 80013c8:	f000 f828 	bl	800141c <stm_setup>
	while(1){
		pusher_A.distence();
 80013cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f82f 	bl	8001434 <_ZN6PUSHER8distenceEv>
		pusher_A.pusher_move();
 80013d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f878 	bl	80014d0 <_ZN6PUSHER11pusher_moveEv>
		pusher_B.distence();
 80013e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 f825 	bl	8001434 <_ZN6PUSHER8distenceEv>
		pusher_B.pusher_move();
 80013ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f86e 	bl	80014d0 <_ZN6PUSHER11pusher_moveEv>
		pusher_C.distence();
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f81b 	bl	8001434 <_ZN6PUSHER8distenceEv>
		pusher_C.pusher_move();
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f864 	bl	80014d0 <_ZN6PUSHER11pusher_moveEv>
		pusher_D.distence();
 8001408:	463b      	mov	r3, r7
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f812 	bl	8001434 <_ZN6PUSHER8distenceEv>
		pusher_D.pusher_move();
 8001410:	463b      	mov	r3, r7
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f85c 	bl	80014d0 <_ZN6PUSHER11pusher_moveEv>
		pusher_A.distence();
 8001418:	e7d8      	b.n	80013cc <main_function+0x30>
	...

0800141c <stm_setup>:
	}
}
void stm_setup(void){
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);//main Timer
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <stm_setup+0x14>)
 8001422:	f002 f83f 	bl	80034a4 <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 8001426:	f7ff f8b9 	bl	800059c <_Z13DC_motor_initv>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	24000240 	.word	0x24000240

08001434 <_ZN6PUSHER8distenceEv>:
PUSHER pusher_A;
PUSHER pusher_B;
PUSHER pusher_C;
PUSHER pusher_D;

void PUSHER::distence(){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <_ZN6PUSHER8distenceEv+0x8c>)
 800143e:	ed93 6b00 	vldr	d6, [r3]
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <_ZN6PUSHER8distenceEv+0x8c>)
 8001444:	ed93 7b02 	vldr	d7, [r3, #8]
 8001448:	ee36 7b47 	vsub.f64	d7, d6, d7
 800144c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001450:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <_ZN6PUSHER8distenceEv+0x8c>)
 8001456:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <_ZN6PUSHER8distenceEv+0x90>)
 800145c:	ed93 6b00 	vldr	d6, [r3]
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <_ZN6PUSHER8distenceEv+0x90>)
 8001462:	ed93 7b02 	vldr	d7, [r3, #8]
 8001466:	ee36 7b47 	vsub.f64	d7, d6, d7
 800146a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800146e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <_ZN6PUSHER8distenceEv+0x90>)
 8001474:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_C.d = (pusher_C.state - pusher_C.p_state)*10;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <_ZN6PUSHER8distenceEv+0x94>)
 800147a:	ed93 6b00 	vldr	d6, [r3]
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <_ZN6PUSHER8distenceEv+0x94>)
 8001480:	ed93 7b02 	vldr	d7, [r3, #8]
 8001484:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001488:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800148c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <_ZN6PUSHER8distenceEv+0x94>)
 8001492:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_D.d = (pusher_D.state - pusher_D.p_state)*10;
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <_ZN6PUSHER8distenceEv+0x98>)
 8001498:	ed93 6b00 	vldr	d6, [r3]
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <_ZN6PUSHER8distenceEv+0x98>)
 800149e:	ed93 7b02 	vldr	d7, [r3, #8]
 80014a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014a6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80014aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <_ZN6PUSHER8distenceEv+0x98>)
 80014b0:	ed83 7b04 	vstr	d7, [r3, #16]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	24000458 	.word	0x24000458
 80014c4:	24000478 	.word	0x24000478
 80014c8:	24000498 	.word	0x24000498
 80014cc:	240004b8 	.word	0x240004b8

080014d0 <_ZN6PUSHER11pusher_moveEv>:
void PUSHER::pusher_move(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	/*pusher down*/
	if(pusher_A.d >0){
 80014d8:	4bc7      	ldr	r3, [pc, #796]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 80014da:	ed93 7b04 	vldr	d7, [r3, #16]
 80014de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	dd22      	ble.n	800152e <_ZN6PUSHER11pusher_moveEv+0x5e>
		HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ee:	48c3      	ldr	r0, [pc, #780]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80014f0:	f001 f84e 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fa:	48c0      	ldr	r0, [pc, #768]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80014fc:	f001 f848 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_Delay(pusher_A.d*1000/PUSHER_SPEED);
 8001500:	4bbd      	ldr	r3, [pc, #756]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 8001502:	ed93 7b04 	vldr	d7, [r3, #16]
 8001506:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 80017e8 <_ZN6PUSHER11pusher_moveEv+0x318>
 800150a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800150e:	ed9f 5bb8 	vldr	d5, [pc, #736]	; 80017f0 <_ZN6PUSHER11pusher_moveEv+0x320>
 8001512:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001516:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800151a:	ee17 0a90 	vmov	r0, s15
 800151e:	f000 fd5b 	bl	8001fd8 <HAL_Delay>
		pusher_A.p_state = pusher_A.state;
 8001522:	4bb5      	ldr	r3, [pc, #724]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	49b3      	ldr	r1, [pc, #716]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 800152a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_B.d >0){
 800152e:	4bb4      	ldr	r3, [pc, #720]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 8001530:	ed93 7b04 	vldr	d7, [r3, #16]
 8001534:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	dd22      	ble.n	8001584 <_ZN6PUSHER11pusher_moveEv+0xb4>
		HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001544:	48ad      	ldr	r0, [pc, #692]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001546:	f001 f823 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001550:	48aa      	ldr	r0, [pc, #680]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001552:	f001 f81d 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_Delay(pusher_B.d*1000/PUSHER_SPEED);
 8001556:	4baa      	ldr	r3, [pc, #680]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 8001558:	ed93 7b04 	vldr	d7, [r3, #16]
 800155c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80017e8 <_ZN6PUSHER11pusher_moveEv+0x318>
 8001560:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001564:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 80017f0 <_ZN6PUSHER11pusher_moveEv+0x320>
 8001568:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800156c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f000 fd30 	bl	8001fd8 <HAL_Delay>
		pusher_B.p_state = pusher_B.state;
 8001578:	4ba1      	ldr	r3, [pc, #644]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	49a0      	ldr	r1, [pc, #640]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 8001580:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_C.d >0){
 8001584:	4b9f      	ldr	r3, [pc, #636]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 8001586:	ed93 7b04 	vldr	d7, [r3, #16]
 800158a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	dd20      	ble.n	80015d6 <_ZN6PUSHER11pusher_moveEv+0x106>
		HAL_GPIO_WritePin(PUSHER_C_IN1_PORT, PUSHER_C_IN1_PIN, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	489b      	ldr	r0, [pc, #620]	; (8001808 <_ZN6PUSHER11pusher_moveEv+0x338>)
 800159a:	f000 fff9 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_C_IN2_PORT, PUSHER_C_IN2_PIN, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	4899      	ldr	r0, [pc, #612]	; (8001808 <_ZN6PUSHER11pusher_moveEv+0x338>)
 80015a4:	f000 fff4 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_Delay(pusher_C.d*1000/PUSHER_SPEED);
 80015a8:	4b96      	ldr	r3, [pc, #600]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 80015aa:	ed93 7b04 	vldr	d7, [r3, #16]
 80015ae:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 80017e8 <_ZN6PUSHER11pusher_moveEv+0x318>
 80015b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015b6:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 80017f0 <_ZN6PUSHER11pusher_moveEv+0x320>
 80015ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015c2:	ee17 0a90 	vmov	r0, s15
 80015c6:	f000 fd07 	bl	8001fd8 <HAL_Delay>
		pusher_C.p_state = pusher_C.state;
 80015ca:	4b8e      	ldr	r3, [pc, #568]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	498c      	ldr	r1, [pc, #560]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 80015d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_D.d >0){
 80015d6:	4b8d      	ldr	r3, [pc, #564]	; (800180c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 80015d8:	ed93 7b04 	vldr	d7, [r3, #16]
 80015dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	dd21      	ble.n	800162a <_ZN6PUSHER11pusher_moveEv+0x15a>
		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_SET);
 80015e6:	2201      	movs	r2, #1
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	4884      	ldr	r0, [pc, #528]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80015ec:	f000 ffd0 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	4881      	ldr	r0, [pc, #516]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80015f8:	f000 ffca 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_Delay(pusher_D.d*1000/PUSHER_SPEED);
 80015fc:	4b83      	ldr	r3, [pc, #524]	; (800180c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 80015fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8001602:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80017e8 <_ZN6PUSHER11pusher_moveEv+0x318>
 8001606:	ee27 6b06 	vmul.f64	d6, d7, d6
 800160a:	ed9f 5b79 	vldr	d5, [pc, #484]	; 80017f0 <_ZN6PUSHER11pusher_moveEv+0x320>
 800160e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001612:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001616:	ee17 0a90 	vmov	r0, s15
 800161a:	f000 fcdd 	bl	8001fd8 <HAL_Delay>
		pusher_D.p_state = pusher_D.state;
 800161e:	4b7b      	ldr	r3, [pc, #492]	; (800180c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	4979      	ldr	r1, [pc, #484]	; (800180c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 8001626:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	/*pusher up*/
	if(pusher_A.d <0){
 800162a:	4b73      	ldr	r3, [pc, #460]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 800162c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001630:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	d524      	bpl.n	8001684 <_ZN6PUSHER11pusher_moveEv+0x1b4>
		HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	486e      	ldr	r0, [pc, #440]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001642:	f000 ffa5 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800164c:	486b      	ldr	r0, [pc, #428]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 800164e:	f000 ff9f 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_Delay(-pusher_A.d*1000/PUSHER_SPEED);
 8001652:	4b69      	ldr	r3, [pc, #420]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 8001654:	ed93 7b04 	vldr	d7, [r3, #16]
 8001658:	eeb1 7b47 	vneg.f64	d7, d7
 800165c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80017e8 <_ZN6PUSHER11pusher_moveEv+0x318>
 8001660:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001664:	ed9f 5b62 	vldr	d5, [pc, #392]	; 80017f0 <_ZN6PUSHER11pusher_moveEv+0x320>
 8001668:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800166c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001670:	ee17 0a90 	vmov	r0, s15
 8001674:	f000 fcb0 	bl	8001fd8 <HAL_Delay>
		pusher_A.p_state = pusher_A.state;
 8001678:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	495e      	ldr	r1, [pc, #376]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 8001680:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_B.d <0){
 8001684:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 8001686:	ed93 7b04 	vldr	d7, [r3, #16]
 800168a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d524      	bpl.n	80016de <_ZN6PUSHER11pusher_moveEv+0x20e>
		HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169a:	4858      	ldr	r0, [pc, #352]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 800169c:	f000 ff78 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a6:	4855      	ldr	r0, [pc, #340]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80016a8:	f000 ff72 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_Delay(-pusher_B.d*1000/PUSHER_SPEED);
 80016ac:	4b54      	ldr	r3, [pc, #336]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80016ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80016b2:	eeb1 7b47 	vneg.f64	d7, d7
 80016b6:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 80017e8 <_ZN6PUSHER11pusher_moveEv+0x318>
 80016ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016be:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 80017f0 <_ZN6PUSHER11pusher_moveEv+0x320>
 80016c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016ca:	ee17 0a90 	vmov	r0, s15
 80016ce:	f000 fc83 	bl	8001fd8 <HAL_Delay>
		pusher_B.p_state = pusher_B.state;
 80016d2:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	4949      	ldr	r1, [pc, #292]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80016da:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_C.d <0){
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 80016e0:	ed93 7b04 	vldr	d7, [r3, #16]
 80016e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80016e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ec:	d522      	bpl.n	8001734 <_ZN6PUSHER11pusher_moveEv+0x264>
		HAL_GPIO_WritePin(PUSHER_C_IN1_PORT, PUSHER_C_IN1_PIN, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	4845      	ldr	r0, [pc, #276]	; (8001808 <_ZN6PUSHER11pusher_moveEv+0x338>)
 80016f4:	f000 ff4c 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_C_IN2_PORT, PUSHER_C_IN2_PIN, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	4842      	ldr	r0, [pc, #264]	; (8001808 <_ZN6PUSHER11pusher_moveEv+0x338>)
 80016fe:	f000 ff47 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_Delay(-pusher_C.d*1000/PUSHER_SPEED);
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 8001704:	ed93 7b04 	vldr	d7, [r3, #16]
 8001708:	eeb1 7b47 	vneg.f64	d7, d7
 800170c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80017e8 <_ZN6PUSHER11pusher_moveEv+0x318>
 8001710:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001714:	ed9f 5b36 	vldr	d5, [pc, #216]	; 80017f0 <_ZN6PUSHER11pusher_moveEv+0x320>
 8001718:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800171c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001720:	ee17 0a90 	vmov	r0, s15
 8001724:	f000 fc58 	bl	8001fd8 <HAL_Delay>
		pusher_C.p_state = pusher_C.state;
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	4935      	ldr	r1, [pc, #212]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 8001730:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_D.d <0){
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 8001736:	ed93 7b04 	vldr	d7, [r3, #16]
 800173a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	d523      	bpl.n	800178c <_ZN6PUSHER11pusher_moveEv+0x2bc>
		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
 8001744:	2200      	movs	r2, #0
 8001746:	2180      	movs	r1, #128	; 0x80
 8001748:	482c      	ldr	r0, [pc, #176]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 800174a:	f000 ff21 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001754:	4829      	ldr	r0, [pc, #164]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001756:	f000 ff1b 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_Delay(-pusher_D.d*1000/PUSHER_SPEED);
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 800175c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001760:	eeb1 7b47 	vneg.f64	d7, d7
 8001764:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80017e8 <_ZN6PUSHER11pusher_moveEv+0x318>
 8001768:	ee27 6b06 	vmul.f64	d6, d7, d6
 800176c:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80017f0 <_ZN6PUSHER11pusher_moveEv+0x320>
 8001770:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001778:	ee17 0a90 	vmov	r0, s15
 800177c:	f000 fc2c 	bl	8001fd8 <HAL_Delay>
		pusher_D.p_state = pusher_D.state;
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	4921      	ldr	r1, [pc, #132]	; (800180c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 8001788:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	/*pusher stop*/
	if(pusher_A.d ==0){
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <_ZN6PUSHER11pusher_moveEv+0x328>)
 800178e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001792:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179a:	d10b      	bne.n	80017b4 <_ZN6PUSHER11pusher_moveEv+0x2e4>
		HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a2:	4816      	ldr	r0, [pc, #88]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80017a4:	f000 fef4 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80017b0:	f000 feee 	bl	8002590 <HAL_GPIO_WritePin>

	}

	if(pusher_B.d ==0){
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80017b6:	ed93 7b04 	vldr	d7, [r3, #16]
 80017ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d10b      	bne.n	80017dc <_ZN6PUSHER11pusher_moveEv+0x30c>
		HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80017cc:	f000 fee0 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80017d8:	f000 feda 	bl	8002590 <HAL_GPIO_WritePin>

	}

	if(pusher_C.d ==0){
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <_ZN6PUSHER11pusher_moveEv+0x334>)
 80017de:	ed93 7b04 	vldr	d7, [r3, #16]
 80017e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80017e6:	e013      	b.n	8001810 <_ZN6PUSHER11pusher_moveEv+0x340>
 80017e8:	00000000 	.word	0x00000000
 80017ec:	408f4000 	.word	0x408f4000
 80017f0:	cccccccd 	.word	0xcccccccd
 80017f4:	4040cccc 	.word	0x4040cccc
 80017f8:	24000458 	.word	0x24000458
 80017fc:	58021000 	.word	0x58021000
 8001800:	24000478 	.word	0x24000478
 8001804:	24000498 	.word	0x24000498
 8001808:	58020400 	.word	0x58020400
 800180c:	240004b8 	.word	0x240004b8
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d109      	bne.n	800182a <_ZN6PUSHER11pusher_moveEv+0x35a>
		HAL_GPIO_WritePin(PUSHER_C_IN1_PORT, PUSHER_C_IN1_PIN, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	2140      	movs	r1, #64	; 0x40
 800181a:	480f      	ldr	r0, [pc, #60]	; (8001858 <_ZN6PUSHER11pusher_moveEv+0x388>)
 800181c:	f000 feb8 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_C_IN2_PORT, PUSHER_C_IN2_PIN, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <_ZN6PUSHER11pusher_moveEv+0x388>)
 8001826:	f000 feb3 	bl	8002590 <HAL_GPIO_WritePin>

	}

	if(pusher_D.d ==0){
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <_ZN6PUSHER11pusher_moveEv+0x38c>)
 800182c:	ed93 7b04 	vldr	d7, [r3, #16]
 8001830:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d10a      	bne.n	8001850 <_ZN6PUSHER11pusher_moveEv+0x380>
		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <_ZN6PUSHER11pusher_moveEv+0x390>)
 8001840:	f000 fea6 	bl	8002590 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <_ZN6PUSHER11pusher_moveEv+0x390>)
 800184c:	f000 fea0 	bl	8002590 <HAL_GPIO_WritePin>

	}
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	58020400 	.word	0x58020400
 800185c:	240004b8 	.word	0x240004b8
 8001860:	58021000 	.word	0x58021000

08001864 <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
		HAL_Delay(5000);
		pusher_A.p_state = 0;
		pusher_A.state = 0;
	}
}
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d110      	bne.n	8001896 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187a:	4293      	cmp	r3, r2
 800187c:	d10b      	bne.n	8001896 <_Z41__static_initialization_and_destruction_0ii+0x32>
PUSHER pusher_A;
 800187e:	4808      	ldr	r0, [pc, #32]	; (80018a0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001880:	f7ff fd69 	bl	8001356 <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 8001884:	4807      	ldr	r0, [pc, #28]	; (80018a4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001886:	f7ff fd66 	bl	8001356 <_ZN6PUSHERC1Ev>
PUSHER pusher_C;
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800188c:	f7ff fd63 	bl	8001356 <_ZN6PUSHERC1Ev>
PUSHER pusher_D;
 8001890:	4806      	ldr	r0, [pc, #24]	; (80018ac <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8001892:	f7ff fd60 	bl	8001356 <_ZN6PUSHERC1Ev>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000458 	.word	0x24000458
 80018a4:	24000478 	.word	0x24000478
 80018a8:	24000498 	.word	0x24000498
 80018ac:	240004b8 	.word	0x240004b8

080018b0 <_GLOBAL__sub_I_pusher_A>:
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff ffd3 	bl	8001864 <_Z41__static_initialization_and_destruction_0ii>
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_MspInit+0x30>)
 80018c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_MspInit+0x30>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_MspInit+0x30>)
 80018d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	58024400 	.word	0x58024400

080018f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1a      	ldr	r2, [pc, #104]	; (800196c <HAL_TIM_Base_MspInit+0x78>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d12e      	bne.n	8001964 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_TIM_Base_MspInit+0x7c>)
 8001908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800190c:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_TIM_Base_MspInit+0x7c>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_TIM_Base_MspInit+0x7c>)
 8001918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2018      	movs	r0, #24
 800192a:	f000 fc54 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800192e:	2018      	movs	r0, #24
 8001930:	f000 fc6b 	bl	800220a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2019      	movs	r0, #25
 800193a:	f000 fc4c 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800193e:	2019      	movs	r0, #25
 8001940:	f000 fc63 	bl	800220a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	201a      	movs	r0, #26
 800194a:	f000 fc44 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800194e:	201a      	movs	r0, #26
 8001950:	f000 fc5b 	bl	800220a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	201b      	movs	r0, #27
 800195a:	f000 fc3c 	bl	80021d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800195e:	201b      	movs	r0, #27
 8001960:	f000 fc53 	bl	800220a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40010000 	.word	0x40010000
 8001970:	58024400 	.word	0x58024400

08001974 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b090      	sub	sp, #64	; 0x40
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d14e      	bne.n	8001a34 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800199c:	4a75      	ldr	r2, [pc, #468]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019a6:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 80019a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b6f      	ldr	r3, [pc, #444]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	4a6e      	ldr	r2, [pc, #440]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c4:	4b6b      	ldr	r3, [pc, #428]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e2:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a02:	2301      	movs	r3, #1
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	485a      	ldr	r0, [pc, #360]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a0e:	f000 fc17 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a12:	2308      	movs	r3, #8
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a22:	2301      	movs	r3, #1
 8001a24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4853      	ldr	r0, [pc, #332]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x208>)
 8001a2e:	f000 fc07 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001a32:	e09b      	b.n	8001b6c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12e      	bne.n	8001a9c <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a44:	4a4b      	ldr	r2, [pc, #300]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5c:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a62:	4a44      	ldr	r2, [pc, #272]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001a64:	f043 0302 	orr.w	r3, r3, #2
 8001a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6c:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
 8001a78:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a7a:	2330      	movs	r3, #48	; 0x30
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4839      	ldr	r0, [pc, #228]	; (8001b7c <HAL_TIM_Encoder_MspInit+0x208>)
 8001a96:	f000 fbd3 	bl	8002240 <HAL_GPIO_Init>
}
 8001a9a:	e067      	b.n	8001b6c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a38      	ldr	r2, [pc, #224]	; (8001b84 <HAL_TIM_Encoder_MspInit+0x210>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12f      	bne.n	8001b06 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa6:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aac:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ae2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001af4:	2302      	movs	r3, #2
 8001af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afc:	4619      	mov	r1, r3
 8001afe:	4822      	ldr	r0, [pc, #136]	; (8001b88 <HAL_TIM_Encoder_MspInit+0x214>)
 8001b00:	f000 fb9e 	bl	8002240 <HAL_GPIO_Init>
}
 8001b04:	e032      	b.n	8001b6c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <HAL_TIM_Encoder_MspInit+0x218>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d12d      	bne.n	8001b6c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b16:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b64:	4619      	mov	r1, r3
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <HAL_TIM_Encoder_MspInit+0x204>)
 8001b68:	f000 fb6a 	bl	8002240 <HAL_GPIO_Init>
}
 8001b6c:	bf00      	nop
 8001b6e:	3740      	adds	r7, #64	; 0x40
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58020000 	.word	0x58020000
 8001b7c:	58020400 	.word	0x58020400
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800
 8001b88:	58020c00 	.word	0x58020c00
 8001b8c:	40000c00 	.word	0x40000c00

08001b90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a16      	ldr	r2, [pc, #88]	; (8001bf8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10f      	bne.n	8001bc2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_TIM_PWM_MspInit+0x6c>)
 8001ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <HAL_TIM_PWM_MspInit+0x6c>)
 8001baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_TIM_PWM_MspInit+0x6c>)
 8001bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001bc0:	e013      	b.n	8001bea <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <HAL_TIM_PWM_MspInit+0x70>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d10e      	bne.n	8001bea <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_TIM_PWM_MspInit+0x6c>)
 8001bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_TIM_PWM_MspInit+0x6c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_TIM_PWM_MspInit+0x6c>)
 8001bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40001800 	.word	0x40001800
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	40014000 	.word	0x40014000

08001c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a25      	ldr	r2, [pc, #148]	; (8001cb8 <HAL_TIM_MspPostInit+0xb4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d120      	bne.n	8001c68 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_TIM_MspPostInit+0xb8>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <HAL_TIM_MspPostInit+0xb8>)
 8001c2e:	f043 0302 	orr.w	r3, r3, #2
 8001c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_TIM_MspPostInit+0xb8>)
 8001c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001c56:	2302      	movs	r3, #2
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4817      	ldr	r0, [pc, #92]	; (8001cc0 <HAL_TIM_MspPostInit+0xbc>)
 8001c62:	f000 faed 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001c66:	e023      	b.n	8001cb0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <HAL_TIM_MspPostInit+0xc0>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d11e      	bne.n	8001cb0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_TIM_MspPostInit+0xb8>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <HAL_TIM_MspPostInit+0xb8>)
 8001c7a:	f043 0310 	orr.w	r3, r3, #16
 8001c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_TIM_MspPostInit+0xb8>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c90:	2360      	movs	r3, #96	; 0x60
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <HAL_TIM_MspPostInit+0xc4>)
 8001cac:	f000 fac8 	bl	8002240 <HAL_GPIO_Init>
}
 8001cb0:	bf00      	nop
 8001cb2:	3728      	adds	r7, #40	; 0x28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40001800 	.word	0x40001800
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020400 	.word	0x58020400
 8001cc4:	40014000 	.word	0x40014000
 8001cc8:	58021000 	.word	0x58021000

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f000 f93e 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM1_BRK_IRQHandler+0x10>)
 8001d26:	f001 ff0b 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	24000240 	.word	0x24000240

08001d34 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <TIM1_UP_IRQHandler+0x10>)
 8001d3a:	f001 ff01 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	24000240 	.word	0x24000240

08001d48 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001d4e:	f001 fef7 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	24000240 	.word	0x24000240

08001d5c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <TIM1_CC_IRQHandler+0x10>)
 8001d62:	f001 feed 	bl	8003b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	24000240 	.word	0x24000240

08001d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d74:	4b32      	ldr	r3, [pc, #200]	; (8001e40 <SystemInit+0xd0>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <SystemInit+0xd0>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d84:	4b2f      	ldr	r3, [pc, #188]	; (8001e44 <SystemInit+0xd4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d807      	bhi.n	8001da0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d90:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <SystemInit+0xd4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 030f 	bic.w	r3, r3, #15
 8001d98:	4a2a      	ldr	r2, [pc, #168]	; (8001e44 <SystemInit+0xd4>)
 8001d9a:	f043 0307 	orr.w	r3, r3, #7
 8001d9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <SystemInit+0xd8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a28      	ldr	r2, [pc, #160]	; (8001e48 <SystemInit+0xd8>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dac:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <SystemInit+0xd8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <SystemInit+0xd8>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4924      	ldr	r1, [pc, #144]	; (8001e48 <SystemInit+0xd8>)
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <SystemInit+0xdc>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <SystemInit+0xd4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <SystemInit+0xd4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 030f 	bic.w	r3, r3, #15
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <SystemInit+0xd4>)
 8001dd4:	f043 0307 	orr.w	r3, r3, #7
 8001dd8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <SystemInit+0xd8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <SystemInit+0xd8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <SystemInit+0xd8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <SystemInit+0xd8>)
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <SystemInit+0xe0>)
 8001df0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <SystemInit+0xd8>)
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <SystemInit+0xe4>)
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <SystemInit+0xd8>)
 8001dfa:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <SystemInit+0xe8>)
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <SystemInit+0xd8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <SystemInit+0xd8>)
 8001e06:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <SystemInit+0xe8>)
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <SystemInit+0xd8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <SystemInit+0xd8>)
 8001e12:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <SystemInit+0xe8>)
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <SystemInit+0xd8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <SystemInit+0xd8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <SystemInit+0xd8>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <SystemInit+0xd8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <SystemInit+0xec>)
 8001e30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	52002000 	.word	0x52002000
 8001e48:	58024400 	.word	0x58024400
 8001e4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e50:	02020200 	.word	0x02020200
 8001e54:	01ff0000 	.word	0x01ff0000
 8001e58:	01010280 	.word	0x01010280
 8001e5c:	52004000 	.word	0x52004000

08001e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e64:	f7ff ff84 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e6a:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f002 ff45 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e92:	f7fe fe9f 	bl	8000bd4 <main>
  bx  lr
 8001e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e98:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001e9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ea0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001ea4:	08004dac 	.word	0x08004dac
  ldr r2, =_sbss
 8001ea8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001eac:	240004dc 	.word	0x240004dc

08001eb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC3_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eba:	2003      	movs	r0, #3
 8001ebc:	f000 f980 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ec0:	f001 f91e 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_Init+0x68>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	4913      	ldr	r1, [pc, #76]	; (8001f20 <HAL_Init+0x6c>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	f003 031f 	and.w	r3, r3, #31
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_Init+0x68>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_Init+0x6c>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_Init+0x70>)
 8001ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ef8:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <HAL_Init+0x74>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001efe:	200f      	movs	r0, #15
 8001f00:	f000 f814 	bl	8001f2c <HAL_InitTick>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e002      	b.n	8001f14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f0e:	f7ff fcd7 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	08004d8c 	.word	0x08004d8c
 8001f24:	24000004 	.word	0x24000004
 8001f28:	24000000 	.word	0x24000000

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f34:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_InitTick+0x60>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e021      	b.n	8001f84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_InitTick+0x64>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_InitTick+0x60>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f965 	bl	8002226 <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295
 8001f74:	f000 f92f 	bl	80021d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_InitTick+0x68>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2400000c 	.word	0x2400000c
 8001f90:	24000000 	.word	0x24000000
 8001f94:	24000008 	.word	0x24000008

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	2400000c 	.word	0x2400000c
 8001fbc:	240004d8 	.word	0x240004d8

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	240004d8 	.word	0x240004d8

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2400000c 	.word	0x2400000c

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <__NVIC_SetPriorityGrouping+0x40>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	4313      	orrs	r3, r2
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x40>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	05fa0000 	.word	0x05fa0000

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <__NVIC_EnableIRQ+0x38>)
 800209e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	db0a      	blt.n	80020ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	490c      	ldr	r1, [pc, #48]	; (800210c <__NVIC_SetPriority+0x4c>)
 80020da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020de:	0112      	lsls	r2, r2, #4
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	440b      	add	r3, r1
 80020e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e8:	e00a      	b.n	8002100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4908      	ldr	r1, [pc, #32]	; (8002110 <__NVIC_SetPriority+0x50>)
 80020f0:	88fb      	ldrh	r3, [r7, #6]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3b04      	subs	r3, #4
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	440b      	add	r3, r1
 80020fe:	761a      	strb	r2, [r3, #24]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1c3 0307 	rsb	r3, r3, #7
 800212e:	2b04      	cmp	r3, #4
 8002130:	bf28      	it	cs
 8002132:	2304      	movcs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3304      	adds	r3, #4
 800213a:	2b06      	cmp	r3, #6
 800213c:	d902      	bls.n	8002144 <NVIC_EncodePriority+0x30>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b03      	subs	r3, #3
 8002142:	e000      	b.n	8002146 <NVIC_EncodePriority+0x32>
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	401a      	ands	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43d9      	mvns	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	4313      	orrs	r3, r2
         );
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff8e 	bl	80020c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff29 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021e4:	f7ff ff40 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	6978      	ldr	r0, [r7, #20]
 80021f0:	f7ff ff90 	bl	8002114 <NVIC_EncodePriority>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff5f 	bl	80020c0 <__NVIC_SetPriority>
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff33 	bl	8002084 <__NVIC_EnableIRQ>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffa4 	bl	800217c <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800224e:	4b86      	ldr	r3, [pc, #536]	; (8002468 <HAL_GPIO_Init+0x228>)
 8002250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002252:	e18c      	b.n	800256e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 817e 	beq.w	8002568 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d005      	beq.n	8002284 <HAL_GPIO_Init+0x44>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d130      	bne.n	80022e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ba:	2201      	movs	r2, #1
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	f003 0201 	and.w	r2, r3, #1
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d017      	beq.n	8002322 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d123      	bne.n	8002376 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	69b9      	ldr	r1, [r7, #24]
 8002372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80d8 	beq.w	8002568 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <HAL_GPIO_Init+0x22c>)
 80023ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023be:	4a2b      	ldr	r2, [pc, #172]	; (800246c <HAL_GPIO_Init+0x22c>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023c8:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_GPIO_Init+0x22c>)
 80023ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d6:	4a26      	ldr	r2, [pc, #152]	; (8002470 <HAL_GPIO_Init+0x230>)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	220f      	movs	r2, #15
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_GPIO_Init+0x234>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d04a      	beq.n	8002498 <HAL_GPIO_Init+0x258>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_GPIO_Init+0x238>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d02b      	beq.n	8002462 <HAL_GPIO_Init+0x222>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_GPIO_Init+0x23c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d025      	beq.n	800245e <HAL_GPIO_Init+0x21e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a1a      	ldr	r2, [pc, #104]	; (8002480 <HAL_GPIO_Init+0x240>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d01f      	beq.n	800245a <HAL_GPIO_Init+0x21a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_GPIO_Init+0x244>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x216>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_GPIO_Init+0x248>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x212>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_GPIO_Init+0x24c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x20e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_GPIO_Init+0x250>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x20a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a15      	ldr	r2, [pc, #84]	; (8002494 <HAL_GPIO_Init+0x254>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x206>
 8002442:	2309      	movs	r3, #9
 8002444:	e029      	b.n	800249a <HAL_GPIO_Init+0x25a>
 8002446:	230a      	movs	r3, #10
 8002448:	e027      	b.n	800249a <HAL_GPIO_Init+0x25a>
 800244a:	2307      	movs	r3, #7
 800244c:	e025      	b.n	800249a <HAL_GPIO_Init+0x25a>
 800244e:	2306      	movs	r3, #6
 8002450:	e023      	b.n	800249a <HAL_GPIO_Init+0x25a>
 8002452:	2305      	movs	r3, #5
 8002454:	e021      	b.n	800249a <HAL_GPIO_Init+0x25a>
 8002456:	2304      	movs	r3, #4
 8002458:	e01f      	b.n	800249a <HAL_GPIO_Init+0x25a>
 800245a:	2303      	movs	r3, #3
 800245c:	e01d      	b.n	800249a <HAL_GPIO_Init+0x25a>
 800245e:	2302      	movs	r3, #2
 8002460:	e01b      	b.n	800249a <HAL_GPIO_Init+0x25a>
 8002462:	2301      	movs	r3, #1
 8002464:	e019      	b.n	800249a <HAL_GPIO_Init+0x25a>
 8002466:	bf00      	nop
 8002468:	58000080 	.word	0x58000080
 800246c:	58024400 	.word	0x58024400
 8002470:	58000400 	.word	0x58000400
 8002474:	58020000 	.word	0x58020000
 8002478:	58020400 	.word	0x58020400
 800247c:	58020800 	.word	0x58020800
 8002480:	58020c00 	.word	0x58020c00
 8002484:	58021000 	.word	0x58021000
 8002488:	58021400 	.word	0x58021400
 800248c:	58021800 	.word	0x58021800
 8002490:	58021c00 	.word	0x58021c00
 8002494:	58022400 	.word	0x58022400
 8002498:	2300      	movs	r3, #0
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	f002 0203 	and.w	r2, r2, #3
 80024a0:	0092      	lsls	r2, r2, #2
 80024a2:	4093      	lsls	r3, r2
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024aa:	4938      	ldr	r1, [pc, #224]	; (800258c <HAL_GPIO_Init+0x34c>)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800250c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f ae6b 	bne.w	8002254 <HAL_GPIO_Init+0x14>
  }
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	3724      	adds	r7, #36	; 0x24
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	58000400 	.word	0x58000400

08002590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025ac:	e003      	b.n	80025b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	041a      	lsls	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	619a      	str	r2, [r3, #24]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_PWREx_ConfigSupply+0x70>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d00a      	beq.n	80025ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_PWREx_ConfigSupply+0x70>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e01f      	b.n	800262a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e01d      	b.n	800262a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025ee:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HAL_PWREx_ConfigSupply+0x70>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	490f      	ldr	r1, [pc, #60]	; (8002634 <HAL_PWREx_ConfigSupply+0x70>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025fe:	f7ff fcdf 	bl	8001fc0 <HAL_GetTick>
 8002602:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002604:	e009      	b.n	800261a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002606:	f7ff fcdb 	bl	8001fc0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002614:	d901      	bls.n	800261a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e007      	b.n	800262a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_PWREx_ConfigSupply+0x70>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002626:	d1ee      	bne.n	8002606 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	58024800 	.word	0x58024800

08002638 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e39d      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8087 	beq.w	8002766 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002658:	4b88      	ldr	r3, [pc, #544]	; (800287c <HAL_RCC_OscConfig+0x244>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002662:	4b86      	ldr	r3, [pc, #536]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	2b10      	cmp	r3, #16
 800266c:	d007      	beq.n	800267e <HAL_RCC_OscConfig+0x46>
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	2b18      	cmp	r3, #24
 8002672:	d110      	bne.n	8002696 <HAL_RCC_OscConfig+0x5e>
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d10b      	bne.n	8002696 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267e:	4b7f      	ldr	r3, [pc, #508]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d06c      	beq.n	8002764 <HAL_RCC_OscConfig+0x12c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d168      	bne.n	8002764 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e377      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x76>
 80026a0:	4b76      	ldr	r3, [pc, #472]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a75      	ldr	r2, [pc, #468]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e02e      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x98>
 80026b6:	4b71      	ldr	r3, [pc, #452]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a70      	ldr	r2, [pc, #448]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b6e      	ldr	r3, [pc, #440]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6d      	ldr	r2, [pc, #436]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0xbc>
 80026da:	4b68      	ldr	r3, [pc, #416]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a67      	ldr	r2, [pc, #412]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b65      	ldr	r3, [pc, #404]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a64      	ldr	r2, [pc, #400]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xd4>
 80026f4:	4b61      	ldr	r3, [pc, #388]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a60      	ldr	r2, [pc, #384]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b5e      	ldr	r3, [pc, #376]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a5d      	ldr	r2, [pc, #372]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff fc54 	bl	8001fc0 <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff fc50 	bl	8001fc0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e32b      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800272e:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xe4>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7ff fc40 	bl	8001fc0 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff fc3c 	bl	8001fc0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e317      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002756:	4b49      	ldr	r3, [pc, #292]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x10c>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 808c 	beq.w	800288c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002774:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800277c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800277e:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_RCC_OscConfig+0x162>
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	2b18      	cmp	r3, #24
 800278e:	d137      	bne.n	8002800 <HAL_RCC_OscConfig+0x1c8>
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d132      	bne.n	8002800 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_RCC_OscConfig+0x244>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x17a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e2e9      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027b2:	4b32      	ldr	r3, [pc, #200]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0219 	bic.w	r2, r3, #25
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	492f      	ldr	r1, [pc, #188]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027c4:	f7ff fbfc 	bl	8001fc0 <HAL_GetTick>
 80027c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027cc:	f7ff fbf8 	bl	8001fc0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e2d3      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027de:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	4b24      	ldr	r3, [pc, #144]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	4920      	ldr	r1, [pc, #128]	; (800287c <HAL_RCC_OscConfig+0x244>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027fe:	e045      	b.n	800288c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d026      	beq.n	8002856 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002808:	4b1c      	ldr	r3, [pc, #112]	; (800287c <HAL_RCC_OscConfig+0x244>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 0219 	bic.w	r2, r3, #25
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4919      	ldr	r1, [pc, #100]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7ff fbd1 	bl	8001fc0 <HAL_GetTick>
 800281e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002822:	f7ff fbcd 	bl	8001fc0 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e2a8      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	490b      	ldr	r1, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	e01a      	b.n	800288c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_OscConfig+0x244>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_RCC_OscConfig+0x244>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7ff fbad 	bl	8001fc0 <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286a:	f7ff fba9 	bl	8001fc0 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d903      	bls.n	8002880 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e284      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
 800287c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002880:	4b96      	ldr	r3, [pc, #600]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d06a      	beq.n	800296e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002898:	4b90      	ldr	r3, [pc, #576]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028a2:	4b8e      	ldr	r3, [pc, #568]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d007      	beq.n	80028be <HAL_RCC_OscConfig+0x286>
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b18      	cmp	r3, #24
 80028b2:	d11b      	bne.n	80028ec <HAL_RCC_OscConfig+0x2b4>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028be:	4b87      	ldr	r3, [pc, #540]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x29e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2b80      	cmp	r3, #128	; 0x80
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e257      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028d6:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	061b      	lsls	r3, r3, #24
 80028e4:	497d      	ldr	r1, [pc, #500]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ea:	e040      	b.n	800296e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d023      	beq.n	800293c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028f4:	4b79      	ldr	r3, [pc, #484]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a78      	ldr	r2, [pc, #480]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80028fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff fb5e 	bl	8001fc0 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002908:	f7ff fb5a 	bl	8001fc0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e235      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291a:	4b70      	ldr	r3, [pc, #448]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002926:	4b6d      	ldr	r3, [pc, #436]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	061b      	lsls	r3, r3, #24
 8002934:	4969      	ldr	r1, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002936:	4313      	orrs	r3, r2
 8002938:	60cb      	str	r3, [r1, #12]
 800293a:	e018      	b.n	800296e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800293c:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a66      	ldr	r2, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff fb3a 	bl	8001fc0 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002950:	f7ff fb36 	bl	8001fc0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e211      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002962:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b00      	cmp	r3, #0
 8002978:	d036      	beq.n	80029e8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d019      	beq.n	80029b6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002982:	4b56      	ldr	r3, [pc, #344]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002986:	4a55      	ldr	r2, [pc, #340]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298e:	f7ff fb17 	bl	8001fc0 <HAL_GetTick>
 8002992:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002996:	f7ff fb13 	bl	8001fc0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e1ee      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029a8:	4b4c      	ldr	r3, [pc, #304]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x35e>
 80029b4:	e018      	b.n	80029e8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b6:	4b49      	ldr	r3, [pc, #292]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ba:	4a48      	ldr	r2, [pc, #288]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c2:	f7ff fafd 	bl	8001fc0 <HAL_GetTick>
 80029c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ca:	f7ff faf9 	bl	8001fc0 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1d4      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029dc:	4b3f      	ldr	r3, [pc, #252]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80029de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d036      	beq.n	8002a62 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d019      	beq.n	8002a30 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029fc:	4b37      	ldr	r3, [pc, #220]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a36      	ldr	r2, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a08:	f7ff fada 	bl	8001fc0 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a10:	f7ff fad6 	bl	8001fc0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e1b1      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a22:	4b2e      	ldr	r3, [pc, #184]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x3d8>
 8002a2e:	e018      	b.n	8002a62 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a30:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a29      	ldr	r2, [pc, #164]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a3c:	f7ff fac0 	bl	8001fc0 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a44:	f7ff fabc 	bl	8001fc0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e197      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a56:	4b21      	ldr	r3, [pc, #132]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8086 	beq.w	8002b7c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_RCC_OscConfig+0x4a8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <HAL_RCC_OscConfig+0x4a8>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a7c:	f7ff faa0 	bl	8001fc0 <HAL_GetTick>
 8002a80:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a84:	f7ff fa9c 	bl	8001fc0 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e177      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_RCC_OscConfig+0x4a8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d106      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x480>
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4ac>
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002ac6:	f023 0301 	bic.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a02      	ldr	r2, [pc, #8]	; (8002adc <HAL_RCC_OscConfig+0x4a4>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	e021      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e6>
 8002ada:	bf00      	nop
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	58024800 	.word	0x58024800
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x4ce>
 8002aec:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a82      	ldr	r2, [pc, #520]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
 8002af8:	4b80      	ldr	r3, [pc, #512]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a7f      	ldr	r2, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e6>
 8002b06:	4b7d      	ldr	r3, [pc, #500]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	4a79      	ldr	r2, [pc, #484]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b26:	f7ff fa4b 	bl	8001fc0 <HAL_GetTick>
 8002b2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7ff fa47 	bl	8001fc0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e120      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b44:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCC_OscConfig+0x4f6>
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7ff fa35 	bl	8001fc0 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7ff fa31 	bl	8001fc0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e10a      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b70:	4b62      	ldr	r3, [pc, #392]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80ff 	beq.w	8002d84 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b86:	4b5d      	ldr	r3, [pc, #372]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b8e:	2b18      	cmp	r3, #24
 8002b90:	f000 80ba 	beq.w	8002d08 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	f040 8095 	bne.w	8002cc8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7ff fa09 	bl	8001fc0 <HAL_GetTick>
 8002bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7ff fa05 	bl	8001fc0 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0e0      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc4:	4b4d      	ldr	r3, [pc, #308]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd0:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_RCC_OscConfig+0x6c8>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002be0:	0112      	lsls	r2, r2, #4
 8002be2:	430a      	orrs	r2, r1
 8002be4:	4945      	ldr	r1, [pc, #276]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	628b      	str	r3, [r1, #40]	; 0x28
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	025b      	lsls	r3, r3, #9
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	3b01      	subs	r3, #1
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c1a:	4938      	ldr	r1, [pc, #224]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	4a35      	ldr	r2, [pc, #212]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c2c:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c30:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_OscConfig+0x6cc>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c38:	00d2      	lsls	r2, r2, #3
 8002c3a:	4930      	ldr	r1, [pc, #192]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	f023 020c 	bic.w	r2, r3, #12
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	492b      	ldr	r1, [pc, #172]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c52:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f023 0202 	bic.w	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4927      	ldr	r1, [pc, #156]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c68:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c88:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7ff f98e 	bl	8001fc0 <HAL_GetTick>
 8002ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7ff f98a 	bl	8001fc0 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e065      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x670>
 8002cc6:	e05d      	b.n	8002d84 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7ff f974 	bl	8001fc0 <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7ff f970 	bl	8001fc0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e04b      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cee:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <HAL_RCC_OscConfig+0x6c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x6a4>
 8002cfa:	e043      	b.n	8002d84 <HAL_RCC_OscConfig+0x74c>
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	fffffc0c 	.word	0xfffffc0c
 8002d04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_RCC_OscConfig+0x758>)
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_RCC_OscConfig+0x758>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d031      	beq.n	8002d80 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f003 0203 	and.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d12a      	bne.n	8002d80 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d122      	bne.n	8002d80 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d11a      	bne.n	8002d80 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	0a5b      	lsrs	r3, r3, #9
 8002d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d111      	bne.n	8002d80 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	0c1b      	lsrs	r3, r3, #16
 8002d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d108      	bne.n	8002d80 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	0e1b      	lsrs	r3, r3, #24
 8002d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3730      	adds	r7, #48	; 0x30
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	58024400 	.word	0x58024400

08002d94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e19c      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da8:	4b8a      	ldr	r3, [pc, #552]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 030f 	and.w	r3, r3, #15
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d910      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db6:	4b87      	ldr	r3, [pc, #540]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 020f 	bic.w	r2, r3, #15
 8002dbe:	4985      	ldr	r1, [pc, #532]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b83      	ldr	r3, [pc, #524]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e184      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	4b7b      	ldr	r3, [pc, #492]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002df4:	4b78      	ldr	r3, [pc, #480]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	4975      	ldr	r1, [pc, #468]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d010      	beq.n	8002e34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d908      	bls.n	8002e34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e22:	4b6d      	ldr	r3, [pc, #436]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	496a      	ldr	r1, [pc, #424]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d010      	beq.n	8002e62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	4b64      	ldr	r3, [pc, #400]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d908      	bls.n	8002e62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e50:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	495e      	ldr	r1, [pc, #376]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d908      	bls.n	8002e90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e7e:	4b56      	ldr	r3, [pc, #344]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4953      	ldr	r1, [pc, #332]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4b4d      	ldr	r3, [pc, #308]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d908      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f023 020f 	bic.w	r2, r3, #15
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4947      	ldr	r1, [pc, #284]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d055      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eca:	4b43      	ldr	r3, [pc, #268]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	4940      	ldr	r1, [pc, #256]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee4:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d121      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0f6      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002efc:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d115      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0ea      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f14:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0de      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f24:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e0d6      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f023 0207 	bic.w	r2, r3, #7
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4925      	ldr	r1, [pc, #148]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7ff f83b 	bl	8001fc0 <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4e:	f7ff f837 	bl	8001fc0 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0be      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d1eb      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d208      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f023 020f 	bic.w	r2, r3, #15
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d214      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 020f 	bic.w	r2, r3, #15
 8002fba:	4906      	ldr	r1, [pc, #24]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <HAL_RCC_ClockConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e086      	b.n	80030e2 <HAL_RCC_ClockConfig+0x34e>
 8002fd4:	52002000 	.word	0x52002000
 8002fd8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d010      	beq.n	800300a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d208      	bcs.n	800300a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	4939      	ldr	r1, [pc, #228]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003006:	4313      	orrs	r3, r2
 8003008:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003022:	429a      	cmp	r2, r3
 8003024:	d208      	bcs.n	8003038 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003026:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	492e      	ldr	r1, [pc, #184]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003034:	4313      	orrs	r3, r2
 8003036:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d010      	beq.n	8003066 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003050:	429a      	cmp	r2, r3
 8003052:	d208      	bcs.n	8003066 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4922      	ldr	r1, [pc, #136]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003062:	4313      	orrs	r3, r2
 8003064:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800307e:	429a      	cmp	r2, r3
 8003080:	d208      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4917      	ldr	r1, [pc, #92]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 8003090:	4313      	orrs	r3, r2
 8003092:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003094:	f000 f834 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	0a1b      	lsrs	r3, r3, #8
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	4912      	ldr	r1, [pc, #72]	; (80030f0 <HAL_RCC_ClockConfig+0x35c>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
 80030b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x358>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_RCC_ClockConfig+0x35c>)
 80030bc:	5cd3      	ldrb	r3, [r2, r3]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x360>)
 80030ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_RCC_ClockConfig+0x364>)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x368>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe ff28 	bl	8001f2c <HAL_InitTick>
 80030dc:	4603      	mov	r3, r0
 80030de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
 80030f0:	08004d8c 	.word	0x08004d8c
 80030f4:	24000004 	.word	0x24000004
 80030f8:	24000000 	.word	0x24000000
 80030fc:	24000008 	.word	0x24000008

08003100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003106:	4bb3      	ldr	r3, [pc, #716]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800310e:	2b18      	cmp	r3, #24
 8003110:	f200 8155 	bhi.w	80033be <HAL_RCC_GetSysClockFreq+0x2be>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003181 	.word	0x08003181
 8003120:	080033bf 	.word	0x080033bf
 8003124:	080033bf 	.word	0x080033bf
 8003128:	080033bf 	.word	0x080033bf
 800312c:	080033bf 	.word	0x080033bf
 8003130:	080033bf 	.word	0x080033bf
 8003134:	080033bf 	.word	0x080033bf
 8003138:	080033bf 	.word	0x080033bf
 800313c:	080031a7 	.word	0x080031a7
 8003140:	080033bf 	.word	0x080033bf
 8003144:	080033bf 	.word	0x080033bf
 8003148:	080033bf 	.word	0x080033bf
 800314c:	080033bf 	.word	0x080033bf
 8003150:	080033bf 	.word	0x080033bf
 8003154:	080033bf 	.word	0x080033bf
 8003158:	080033bf 	.word	0x080033bf
 800315c:	080031ad 	.word	0x080031ad
 8003160:	080033bf 	.word	0x080033bf
 8003164:	080033bf 	.word	0x080033bf
 8003168:	080033bf 	.word	0x080033bf
 800316c:	080033bf 	.word	0x080033bf
 8003170:	080033bf 	.word	0x080033bf
 8003174:	080033bf 	.word	0x080033bf
 8003178:	080033bf 	.word	0x080033bf
 800317c:	080031b3 	.word	0x080031b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003180:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800318c:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	08db      	lsrs	r3, r3, #3
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	4a90      	ldr	r2, [pc, #576]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800319e:	e111      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031a0:	4b8d      	ldr	r3, [pc, #564]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a2:	61bb      	str	r3, [r7, #24]
    break;
 80031a4:	e10e      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031a6:	4b8d      	ldr	r3, [pc, #564]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031a8:	61bb      	str	r3, [r7, #24]
    break;
 80031aa:	e10b      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031ac:	4b8c      	ldr	r3, [pc, #560]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031ae:	61bb      	str	r3, [r7, #24]
    break;
 80031b0:	e108      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031bc:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031c8:	4b82      	ldr	r3, [pc, #520]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031d2:	4b80      	ldr	r3, [pc, #512]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	08db      	lsrs	r3, r3, #3
 80031d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80e1 	beq.w	80033b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	f000 8083 	beq.w	8003304 <HAL_RCC_GetSysClockFreq+0x204>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b02      	cmp	r3, #2
 8003202:	f200 80a1 	bhi.w	8003348 <HAL_RCC_GetSysClockFreq+0x248>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x114>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d056      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003212:	e099      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003214:	4b6f      	ldr	r3, [pc, #444]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02d      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003220:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	08db      	lsrs	r3, r3, #3
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	4a6b      	ldr	r2, [pc, #428]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
 8003230:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325a:	ed97 6a02 	vldr	s12, [r7, #8]
 800325e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800326e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003276:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800327a:	e087      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800328a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328e:	4b51      	ldr	r3, [pc, #324]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329e:	ed97 6a02 	vldr	s12, [r7, #8]
 80032a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032be:	e065      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80032ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032d2:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003302:	e043      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003326:	ed97 6a02 	vldr	s12, [r7, #8]
 800332a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800332e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800333a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003346:	e021      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8003356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800336a:	ed97 6a02 	vldr	s12, [r7, #8]
 800336e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800337a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800337e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800338a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	0a5b      	lsrs	r3, r3, #9
 8003392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003396:	3301      	adds	r3, #1
 8003398:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	ee07 3a90 	vmov	s15, r3
 80033a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b0:	ee17 3a90 	vmov	r3, s15
 80033b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
    break;
 80033bc:	e002      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033c0:	61bb      	str	r3, [r7, #24]
    break;
 80033c2:	bf00      	nop
  }

  return sysclockfreq;
 80033c4:	69bb      	ldr	r3, [r7, #24]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	58024400 	.word	0x58024400
 80033d8:	03d09000 	.word	0x03d09000
 80033dc:	003d0900 	.word	0x003d0900
 80033e0:	017d7840 	.word	0x017d7840
 80033e4:	46000000 	.word	0x46000000
 80033e8:	4c742400 	.word	0x4c742400
 80033ec:	4a742400 	.word	0x4a742400
 80033f0:	4bbebc20 	.word	0x4bbebc20

080033f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e049      	b.n	800349a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fe fa6a 	bl	80018f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f000 fed8 	bl	80041e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d001      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e05e      	b.n	800357a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_TIM_Base_Start_IT+0xe4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d02c      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d027      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a27      	ldr	r2, [pc, #156]	; (800358c <HAL_TIM_Base_Start_IT+0xe8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a26      	ldr	r2, [pc, #152]	; (8003590 <HAL_TIM_Base_Start_IT+0xec>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a24      	ldr	r2, [pc, #144]	; (8003594 <HAL_TIM_Base_Start_IT+0xf0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a23      	ldr	r2, [pc, #140]	; (8003598 <HAL_TIM_Base_Start_IT+0xf4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_TIM_Base_Start_IT+0xf8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <HAL_TIM_Base_Start_IT+0xfc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_TIM_Base_Start_IT+0x100>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIM_Base_Start_IT+0x94>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <HAL_TIM_Base_Start_IT+0x104>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d115      	bne.n	8003564 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_TIM_Base_Start_IT+0x108>)
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b06      	cmp	r3, #6
 8003548:	d015      	beq.n	8003576 <HAL_TIM_Base_Start_IT+0xd2>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003550:	d011      	beq.n	8003576 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	e008      	b.n	8003576 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e000      	b.n	8003578 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40010000 	.word	0x40010000
 800358c:	40000400 	.word	0x40000400
 8003590:	40000800 	.word	0x40000800
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40010400 	.word	0x40010400
 800359c:	40001800 	.word	0x40001800
 80035a0:	40014000 	.word	0x40014000
 80035a4:	4000e000 	.word	0x4000e000
 80035a8:	4000e400 	.word	0x4000e400
 80035ac:	00010007 	.word	0x00010007

080035b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e049      	b.n	8003656 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fe fada 	bl	8001b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 fdfa 	bl	80041e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_TIM_PWM_Start+0x24>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e03c      	b.n	80036fe <HAL_TIM_PWM_Start+0x9e>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d109      	bne.n	800369e <HAL_TIM_PWM_Start+0x3e>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	bf14      	ite	ne
 8003696:	2301      	movne	r3, #1
 8003698:	2300      	moveq	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	e02f      	b.n	80036fe <HAL_TIM_PWM_Start+0x9e>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d109      	bne.n	80036b8 <HAL_TIM_PWM_Start+0x58>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e022      	b.n	80036fe <HAL_TIM_PWM_Start+0x9e>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d109      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x72>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e015      	b.n	80036fe <HAL_TIM_PWM_Start+0x9e>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b10      	cmp	r3, #16
 80036d6:	d109      	bne.n	80036ec <HAL_TIM_PWM_Start+0x8c>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e008      	b.n	80036fe <HAL_TIM_PWM_Start+0x9e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0ab      	b.n	800385e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0xb6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003714:	e023      	b.n	800375e <HAL_TIM_PWM_Start+0xfe>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d104      	bne.n	8003726 <HAL_TIM_PWM_Start+0xc6>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003724:	e01b      	b.n	800375e <HAL_TIM_PWM_Start+0xfe>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d104      	bne.n	8003736 <HAL_TIM_PWM_Start+0xd6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003734:	e013      	b.n	800375e <HAL_TIM_PWM_Start+0xfe>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d104      	bne.n	8003746 <HAL_TIM_PWM_Start+0xe6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003744:	e00b      	b.n	800375e <HAL_TIM_PWM_Start+0xfe>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b10      	cmp	r3, #16
 800374a:	d104      	bne.n	8003756 <HAL_TIM_PWM_Start+0xf6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003754:	e003      	b.n	800375e <HAL_TIM_PWM_Start+0xfe>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2201      	movs	r2, #1
 8003764:	6839      	ldr	r1, [r7, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f001 f958 	bl	8004a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <HAL_TIM_PWM_Start+0x208>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_TIM_PWM_Start+0x13e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a3c      	ldr	r2, [pc, #240]	; (800386c <HAL_TIM_PWM_Start+0x20c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00e      	beq.n	800379e <HAL_TIM_PWM_Start+0x13e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <HAL_TIM_PWM_Start+0x210>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_TIM_PWM_Start+0x13e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a39      	ldr	r2, [pc, #228]	; (8003874 <HAL_TIM_PWM_Start+0x214>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_TIM_PWM_Start+0x13e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a37      	ldr	r2, [pc, #220]	; (8003878 <HAL_TIM_PWM_Start+0x218>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_TIM_PWM_Start+0x142>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_TIM_PWM_Start+0x144>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <HAL_TIM_PWM_Start+0x208>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02c      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ca:	d027      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2a      	ldr	r2, [pc, #168]	; (800387c <HAL_TIM_PWM_Start+0x21c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a29      	ldr	r2, [pc, #164]	; (8003880 <HAL_TIM_PWM_Start+0x220>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01d      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a27      	ldr	r2, [pc, #156]	; (8003884 <HAL_TIM_PWM_Start+0x224>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_TIM_PWM_Start+0x20c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a23      	ldr	r2, [pc, #140]	; (8003888 <HAL_TIM_PWM_Start+0x228>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_TIM_PWM_Start+0x210>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <HAL_TIM_PWM_Start+0x22c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_TIM_PWM_Start+0x1bc>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <HAL_TIM_PWM_Start+0x230>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d115      	bne.n	8003848 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_TIM_PWM_Start+0x234>)
 8003824:	4013      	ands	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2b06      	cmp	r3, #6
 800382c:	d015      	beq.n	800385a <HAL_TIM_PWM_Start+0x1fa>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003834:	d011      	beq.n	800385a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003846:	e008      	b.n	800385a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e000      	b.n	800385c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40010000 	.word	0x40010000
 800386c:	40010400 	.word	0x40010400
 8003870:	40014000 	.word	0x40014000
 8003874:	40014400 	.word	0x40014400
 8003878:	40014800 	.word	0x40014800
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40001800 	.word	0x40001800
 800388c:	4000e000 	.word	0x4000e000
 8003890:	4000e400 	.word	0x4000e400
 8003894:	00010007 	.word	0x00010007

08003898 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e08f      	b.n	80039cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fe f857 	bl	8001974 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6899      	ldr	r1, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b3e      	ldr	r3, [pc, #248]	; (80039d4 <HAL_TIM_Encoder_Init+0x13c>)
 80038da:	400b      	ands	r3, r1
 80038dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f000 fc7d 	bl	80041e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_TIM_Encoder_Init+0x140>)
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	4313      	orrs	r3, r2
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_TIM_Encoder_Init+0x144>)
 800392e:	4013      	ands	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <HAL_TIM_Encoder_Init+0x148>)
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	4313      	orrs	r3, r2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	011a      	lsls	r2, r3, #4
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	031b      	lsls	r3, r3, #12
 8003958:	4313      	orrs	r3, r2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003966:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	4313      	orrs	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	fffebff8 	.word	0xfffebff8
 80039d8:	fffffcfc 	.word	0xfffffcfc
 80039dc:	fffff3f3 	.word	0xfffff3f3
 80039e0:	ffff0f0f 	.word	0xffff0f0f

080039e4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d110      	bne.n	8003a36 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d102      	bne.n	8003a20 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a1a:	7b7b      	ldrb	r3, [r7, #13]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d001      	beq.n	8003a24 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e089      	b.n	8003b38 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a34:	e031      	b.n	8003a9a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d110      	bne.n	8003a5e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d102      	bne.n	8003a48 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a42:	7b3b      	ldrb	r3, [r7, #12]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d001      	beq.n	8003a4c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e075      	b.n	8003b38 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a5c:	e01d      	b.n	8003a9a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d108      	bne.n	8003a76 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a64:	7bbb      	ldrb	r3, [r7, #14]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d105      	bne.n	8003a76 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a6a:	7b7b      	ldrb	r3, [r7, #13]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d102      	bne.n	8003a76 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a70:	7b3b      	ldrb	r3, [r7, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d001      	beq.n	8003a7a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e05e      	b.n	8003b38 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d010      	beq.n	8003ac8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003aa6:	e01f      	b.n	8003ae8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 ffb3 	bl	8004a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0202 	orr.w	r2, r2, #2
 8003ac4:	60da      	str	r2, [r3, #12]
      break;
 8003ac6:	e02e      	b.n	8003b26 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2201      	movs	r2, #1
 8003ace:	2104      	movs	r1, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 ffa3 	bl	8004a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0204 	orr.w	r2, r2, #4
 8003ae4:	60da      	str	r2, [r3, #12]
      break;
 8003ae6:	e01e      	b.n	8003b26 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 ff93 	bl	8004a1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	2104      	movs	r1, #4
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 ff8c 	bl	8004a1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0202 	orr.w	r2, r2, #2
 8003b12:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0204 	orr.w	r2, r2, #4
 8003b22:	60da      	str	r2, [r3, #12]
      break;
 8003b24:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0201 	orr.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0202 	mvn.w	r2, #2
 8003b6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fb12 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fb04 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fb15 	bl	80041c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d122      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d11b      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0204 	mvn.w	r2, #4
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fae8 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fada 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 faeb 	bl	80041c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d122      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0208 	mvn.w	r2, #8
 8003c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fabe 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fab0 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fac1 	bl	80041c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d122      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0210 	mvn.w	r2, #16
 8003c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa94 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa86 	bl	8004198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fa97 	bl	80041c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0201 	mvn.w	r2, #1
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fc fb26 	bl	8000310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cdc:	2b80      	cmp	r3, #128	; 0x80
 8003cde:	d107      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f001 f802 	bl	8004cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfe:	d10e      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b80      	cmp	r3, #128	; 0x80
 8003d0c:	d107      	bne.n	8003d1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fff5 	bl	8004d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	d10e      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d107      	bne.n	8003d4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fa45 	bl	80041d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d10e      	bne.n	8003d76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d107      	bne.n	8003d76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0220 	mvn.w	r2, #32
 8003d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 ffb5 	bl	8004ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0ff      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b14      	cmp	r3, #20
 8003daa:	f200 80f0 	bhi.w	8003f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003e09 	.word	0x08003e09
 8003db8:	08003f8f 	.word	0x08003f8f
 8003dbc:	08003f8f 	.word	0x08003f8f
 8003dc0:	08003f8f 	.word	0x08003f8f
 8003dc4:	08003e49 	.word	0x08003e49
 8003dc8:	08003f8f 	.word	0x08003f8f
 8003dcc:	08003f8f 	.word	0x08003f8f
 8003dd0:	08003f8f 	.word	0x08003f8f
 8003dd4:	08003e8b 	.word	0x08003e8b
 8003dd8:	08003f8f 	.word	0x08003f8f
 8003ddc:	08003f8f 	.word	0x08003f8f
 8003de0:	08003f8f 	.word	0x08003f8f
 8003de4:	08003ecb 	.word	0x08003ecb
 8003de8:	08003f8f 	.word	0x08003f8f
 8003dec:	08003f8f 	.word	0x08003f8f
 8003df0:	08003f8f 	.word	0x08003f8f
 8003df4:	08003f0d 	.word	0x08003f0d
 8003df8:	08003f8f 	.word	0x08003f8f
 8003dfc:	08003f8f 	.word	0x08003f8f
 8003e00:	08003f8f 	.word	0x08003f8f
 8003e04:	08003f4d 	.word	0x08003f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fa90 	bl	8004334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0208 	orr.w	r2, r2, #8
 8003e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0204 	bic.w	r2, r2, #4
 8003e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6999      	ldr	r1, [r3, #24]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	619a      	str	r2, [r3, #24]
      break;
 8003e46:	e0a5      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb00 	bl	8004454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6999      	ldr	r1, [r3, #24]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	619a      	str	r2, [r3, #24]
      break;
 8003e88:	e084      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fb69 	bl	8004568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0208 	orr.w	r2, r2, #8
 8003ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0204 	bic.w	r2, r2, #4
 8003eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69d9      	ldr	r1, [r3, #28]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	61da      	str	r2, [r3, #28]
      break;
 8003ec8:	e064      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fbd1 	bl	8004678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69d9      	ldr	r1, [r3, #28]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	021a      	lsls	r2, r3, #8
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	61da      	str	r2, [r3, #28]
      break;
 8003f0a:	e043      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fc1a 	bl	800474c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0204 	bic.w	r2, r2, #4
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f4a:	e023      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fc5e 	bl	8004814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	021a      	lsls	r2, r3, #8
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f8c:	e002      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	75fb      	strb	r3, [r7, #23]
      break;
 8003f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop

08003fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0dc      	b.n	800417e <HAL_TIM_ConfigClockSource+0x1d6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	4b6a      	ldr	r3, [pc, #424]	; (8004188 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a64      	ldr	r2, [pc, #400]	; (800418c <HAL_TIM_ConfigClockSource+0x1e4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	f000 80a9 	beq.w	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 8004000:	4a62      	ldr	r2, [pc, #392]	; (800418c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	f200 80ae 	bhi.w	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004008:	4a61      	ldr	r2, [pc, #388]	; (8004190 <HAL_TIM_ConfigClockSource+0x1e8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	f000 80a1 	beq.w	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 8004010:	4a5f      	ldr	r2, [pc, #380]	; (8004190 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	f200 80a6 	bhi.w	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004018:	4a5e      	ldr	r2, [pc, #376]	; (8004194 <HAL_TIM_ConfigClockSource+0x1ec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	f000 8099 	beq.w	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 8004020:	4a5c      	ldr	r2, [pc, #368]	; (8004194 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004022:	4293      	cmp	r3, r2
 8004024:	f200 809e 	bhi.w	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004028:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800402c:	f000 8091 	beq.w	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 8004030:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004034:	f200 8096 	bhi.w	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403c:	f000 8089 	beq.w	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 8004040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004044:	f200 808e 	bhi.w	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404c:	d03e      	beq.n	80040cc <HAL_TIM_ConfigClockSource+0x124>
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004052:	f200 8087 	bhi.w	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	f000 8086 	beq.w	800416a <HAL_TIM_ConfigClockSource+0x1c2>
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d87f      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004064:	2b70      	cmp	r3, #112	; 0x70
 8004066:	d01a      	beq.n	800409e <HAL_TIM_ConfigClockSource+0xf6>
 8004068:	2b70      	cmp	r3, #112	; 0x70
 800406a:	d87b      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d050      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x16a>
 8004070:	2b60      	cmp	r3, #96	; 0x60
 8004072:	d877      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004074:	2b50      	cmp	r3, #80	; 0x50
 8004076:	d03c      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x14a>
 8004078:	2b50      	cmp	r3, #80	; 0x50
 800407a:	d873      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d058      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0x18a>
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d86f      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d064      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d86b      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d060      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d867      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05c      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 8004098:	2b10      	cmp	r3, #16
 800409a:	d05a      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x1aa>
 800409c:	e062      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6899      	ldr	r1, [r3, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f000 fc95 	bl	80049dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	609a      	str	r2, [r3, #8]
      break;
 80040ca:	e04f      	b.n	800416c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6899      	ldr	r1, [r3, #8]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f000 fc7e 	bl	80049dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ee:	609a      	str	r2, [r3, #8]
      break;
 80040f0:	e03c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6859      	ldr	r1, [r3, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	461a      	mov	r2, r3
 8004100:	f000 fbee 	bl	80048e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2150      	movs	r1, #80	; 0x50
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fc48 	bl	80049a0 <TIM_ITRx_SetConfig>
      break;
 8004110:	e02c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6859      	ldr	r1, [r3, #4]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	461a      	mov	r2, r3
 8004120:	f000 fc0d 	bl	800493e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2160      	movs	r1, #96	; 0x60
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fc38 	bl	80049a0 <TIM_ITRx_SetConfig>
      break;
 8004130:	e01c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	461a      	mov	r2, r3
 8004140:	f000 fbce 	bl	80048e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fc28 	bl	80049a0 <TIM_ITRx_SetConfig>
      break;
 8004150:	e00c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f000 fc1f 	bl	80049a0 <TIM_ITRx_SetConfig>
      break;
 8004162:	e003      	b.n	800416c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e000      	b.n	800416c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800416a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	ffceff88 	.word	0xffceff88
 800418c:	00100040 	.word	0x00100040
 8004190:	00100030 	.word	0x00100030
 8004194:	00100020 	.word	0x00100020

08004198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a44      	ldr	r2, [pc, #272]	; (800430c <TIM_Base_SetConfig+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004206:	d00f      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a41      	ldr	r2, [pc, #260]	; (8004310 <TIM_Base_SetConfig+0x128>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00b      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a40      	ldr	r2, [pc, #256]	; (8004314 <TIM_Base_SetConfig+0x12c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3f      	ldr	r2, [pc, #252]	; (8004318 <TIM_Base_SetConfig+0x130>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_Base_SetConfig+0x40>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a3e      	ldr	r2, [pc, #248]	; (800431c <TIM_Base_SetConfig+0x134>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d108      	bne.n	800423a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a33      	ldr	r2, [pc, #204]	; (800430c <TIM_Base_SetConfig+0x124>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d027      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004248:	d023      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a30      	ldr	r2, [pc, #192]	; (8004310 <TIM_Base_SetConfig+0x128>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d01f      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <TIM_Base_SetConfig+0x12c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01b      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a2e      	ldr	r2, [pc, #184]	; (8004318 <TIM_Base_SetConfig+0x130>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d017      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a2d      	ldr	r2, [pc, #180]	; (800431c <TIM_Base_SetConfig+0x134>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a2c      	ldr	r2, [pc, #176]	; (8004320 <TIM_Base_SetConfig+0x138>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <TIM_Base_SetConfig+0x13c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <TIM_Base_SetConfig+0x140>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a29      	ldr	r2, [pc, #164]	; (800432c <TIM_Base_SetConfig+0x144>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0xaa>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a28      	ldr	r2, [pc, #160]	; (8004330 <TIM_Base_SetConfig+0x148>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a10      	ldr	r2, [pc, #64]	; (800430c <TIM_Base_SetConfig+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00f      	beq.n	80042f0 <TIM_Base_SetConfig+0x108>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <TIM_Base_SetConfig+0x134>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00b      	beq.n	80042f0 <TIM_Base_SetConfig+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a11      	ldr	r2, [pc, #68]	; (8004320 <TIM_Base_SetConfig+0x138>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0x108>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a10      	ldr	r2, [pc, #64]	; (8004324 <TIM_Base_SetConfig+0x13c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0x108>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <TIM_Base_SetConfig+0x140>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d103      	bne.n	80042f8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	615a      	str	r2, [r3, #20]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40010400 	.word	0x40010400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800
 800432c:	4000e000 	.word	0x4000e000
 8004330:	4000e400 	.word	0x4000e400

08004334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4b37      	ldr	r3, [pc, #220]	; (800443c <TIM_OC1_SetConfig+0x108>)
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0303 	bic.w	r3, r3, #3
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f023 0302 	bic.w	r3, r3, #2
 800437c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a2d      	ldr	r2, [pc, #180]	; (8004440 <TIM_OC1_SetConfig+0x10c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00f      	beq.n	80043b0 <TIM_OC1_SetConfig+0x7c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <TIM_OC1_SetConfig+0x110>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00b      	beq.n	80043b0 <TIM_OC1_SetConfig+0x7c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <TIM_OC1_SetConfig+0x114>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d007      	beq.n	80043b0 <TIM_OC1_SetConfig+0x7c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a2a      	ldr	r2, [pc, #168]	; (800444c <TIM_OC1_SetConfig+0x118>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d003      	beq.n	80043b0 <TIM_OC1_SetConfig+0x7c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a29      	ldr	r2, [pc, #164]	; (8004450 <TIM_OC1_SetConfig+0x11c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10c      	bne.n	80043ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0308 	bic.w	r3, r3, #8
 80043b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <TIM_OC1_SetConfig+0x10c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00f      	beq.n	80043f2 <TIM_OC1_SetConfig+0xbe>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <TIM_OC1_SetConfig+0x110>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00b      	beq.n	80043f2 <TIM_OC1_SetConfig+0xbe>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <TIM_OC1_SetConfig+0x114>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d007      	beq.n	80043f2 <TIM_OC1_SetConfig+0xbe>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <TIM_OC1_SetConfig+0x118>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d003      	beq.n	80043f2 <TIM_OC1_SetConfig+0xbe>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a18      	ldr	r2, [pc, #96]	; (8004450 <TIM_OC1_SetConfig+0x11c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d111      	bne.n	8004416 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	fffeff8f 	.word	0xfffeff8f
 8004440:	40010000 	.word	0x40010000
 8004444:	40010400 	.word	0x40010400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f023 0210 	bic.w	r2, r3, #16
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4b34      	ldr	r3, [pc, #208]	; (8004550 <TIM_OC2_SetConfig+0xfc>)
 8004480:	4013      	ands	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0320 	bic.w	r3, r3, #32
 800449e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a29      	ldr	r2, [pc, #164]	; (8004554 <TIM_OC2_SetConfig+0x100>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_OC2_SetConfig+0x68>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <TIM_OC2_SetConfig+0x104>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d10d      	bne.n	80044d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <TIM_OC2_SetConfig+0x100>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00f      	beq.n	8004500 <TIM_OC2_SetConfig+0xac>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <TIM_OC2_SetConfig+0x104>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00b      	beq.n	8004500 <TIM_OC2_SetConfig+0xac>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a1c      	ldr	r2, [pc, #112]	; (800455c <TIM_OC2_SetConfig+0x108>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d007      	beq.n	8004500 <TIM_OC2_SetConfig+0xac>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <TIM_OC2_SetConfig+0x10c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_OC2_SetConfig+0xac>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a1a      	ldr	r2, [pc, #104]	; (8004564 <TIM_OC2_SetConfig+0x110>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d113      	bne.n	8004528 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800450e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	621a      	str	r2, [r3, #32]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	feff8fff 	.word	0xfeff8fff
 8004554:	40010000 	.word	0x40010000
 8004558:	40010400 	.word	0x40010400
 800455c:	40014000 	.word	0x40014000
 8004560:	40014400 	.word	0x40014400
 8004564:	40014800 	.word	0x40014800

08004568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4b33      	ldr	r3, [pc, #204]	; (8004660 <TIM_OC3_SetConfig+0xf8>)
 8004594:	4013      	ands	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a28      	ldr	r2, [pc, #160]	; (8004664 <TIM_OC3_SetConfig+0xfc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_OC3_SetConfig+0x66>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <TIM_OC3_SetConfig+0x100>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10d      	bne.n	80045ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <TIM_OC3_SetConfig+0xfc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00f      	beq.n	8004612 <TIM_OC3_SetConfig+0xaa>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <TIM_OC3_SetConfig+0x100>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00b      	beq.n	8004612 <TIM_OC3_SetConfig+0xaa>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1b      	ldr	r2, [pc, #108]	; (800466c <TIM_OC3_SetConfig+0x104>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d007      	beq.n	8004612 <TIM_OC3_SetConfig+0xaa>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <TIM_OC3_SetConfig+0x108>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_OC3_SetConfig+0xaa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a19      	ldr	r2, [pc, #100]	; (8004674 <TIM_OC3_SetConfig+0x10c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d113      	bne.n	800463a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	621a      	str	r2, [r3, #32]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	fffeff8f 	.word	0xfffeff8f
 8004664:	40010000 	.word	0x40010000
 8004668:	40010400 	.word	0x40010400
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400
 8004674:	40014800 	.word	0x40014800

08004678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <TIM_OC4_SetConfig+0xbc>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a19      	ldr	r2, [pc, #100]	; (8004738 <TIM_OC4_SetConfig+0xc0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <TIM_OC4_SetConfig+0x80>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <TIM_OC4_SetConfig+0xc4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_OC4_SetConfig+0x80>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <TIM_OC4_SetConfig+0xc8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_OC4_SetConfig+0x80>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a16      	ldr	r2, [pc, #88]	; (8004744 <TIM_OC4_SetConfig+0xcc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC4_SetConfig+0x80>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <TIM_OC4_SetConfig+0xd0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d109      	bne.n	800470c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	019b      	lsls	r3, r3, #6
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	feff8fff 	.word	0xfeff8fff
 8004738:	40010000 	.word	0x40010000
 800473c:	40010400 	.word	0x40010400
 8004740:	40014000 	.word	0x40014000
 8004744:	40014400 	.word	0x40014400
 8004748:	40014800 	.word	0x40014800

0800474c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4b21      	ldr	r3, [pc, #132]	; (80047fc <TIM_OC5_SetConfig+0xb0>)
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800478c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a18      	ldr	r2, [pc, #96]	; (8004800 <TIM_OC5_SetConfig+0xb4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00f      	beq.n	80047c2 <TIM_OC5_SetConfig+0x76>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a17      	ldr	r2, [pc, #92]	; (8004804 <TIM_OC5_SetConfig+0xb8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00b      	beq.n	80047c2 <TIM_OC5_SetConfig+0x76>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a16      	ldr	r2, [pc, #88]	; (8004808 <TIM_OC5_SetConfig+0xbc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <TIM_OC5_SetConfig+0x76>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <TIM_OC5_SetConfig+0xc0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d003      	beq.n	80047c2 <TIM_OC5_SetConfig+0x76>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a14      	ldr	r2, [pc, #80]	; (8004810 <TIM_OC5_SetConfig+0xc4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d109      	bne.n	80047d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	621a      	str	r2, [r3, #32]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	fffeff8f 	.word	0xfffeff8f
 8004800:	40010000 	.word	0x40010000
 8004804:	40010400 	.word	0x40010400
 8004808:	40014000 	.word	0x40014000
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800

08004814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <TIM_OC6_SetConfig+0xb4>)
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	051b      	lsls	r3, r3, #20
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a19      	ldr	r2, [pc, #100]	; (80048cc <TIM_OC6_SetConfig+0xb8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_OC6_SetConfig+0x78>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <TIM_OC6_SetConfig+0xbc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_OC6_SetConfig+0x78>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <TIM_OC6_SetConfig+0xc0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_OC6_SetConfig+0x78>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <TIM_OC6_SetConfig+0xc4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC6_SetConfig+0x78>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a15      	ldr	r2, [pc, #84]	; (80048dc <TIM_OC6_SetConfig+0xc8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d109      	bne.n	80048a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	029b      	lsls	r3, r3, #10
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	feff8fff 	.word	0xfeff8fff
 80048cc:	40010000 	.word	0x40010000
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40014400 	.word	0x40014400
 80048dc:	40014800 	.word	0x40014800

080048e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 030a 	bic.w	r3, r3, #10
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0210 	bic.w	r2, r3, #16
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	031b      	lsls	r3, r3, #12
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <TIM_ITRx_SetConfig+0x38>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	f043 0307 	orr.w	r3, r3, #7
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	609a      	str	r2, [r3, #8]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	ffcfff8f 	.word	0xffcfff8f

080049dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	021a      	lsls	r2, r3, #8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	371c      	adds	r7, #28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2201      	movs	r2, #1
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a1a      	ldr	r2, [r3, #32]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e077      	b.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a35      	ldr	r2, [pc, #212]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a34      	ldr	r2, [pc, #208]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a25      	ldr	r2, [pc, #148]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d02c      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af2:	d027      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d022      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d01d      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d018      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1a      	ldr	r2, [pc, #104]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00e      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d10c      	bne.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	40010000 	.word	0x40010000
 8004b80:	40010400 	.word	0x40010400
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800
 8004b8c:	40000c00 	.word	0x40000c00
 8004b90:	40001800 	.word	0x40001800
 8004b94:	40014000 	.word	0x40014000
 8004b98:	4000e000 	.word	0x4000e000
 8004b9c:	4000e400 	.word	0x4000e400

08004ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e087      	b.n	8004ccc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a27      	ldr	r2, [pc, #156]	; (8004cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d106      	bne.n	8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d126      	bne.n	8004cba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	051b      	lsls	r3, r3, #20
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0e      	ldr	r2, [pc, #56]	; (8004cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a0d      	ldr	r2, [pc, #52]	; (8004cdc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d106      	bne.n	8004cba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40010400 	.word	0x40010400

08004ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4d0d      	ldr	r5, [pc, #52]	; (8004d54 <__libc_init_array+0x38>)
 8004d20:	4c0d      	ldr	r4, [pc, #52]	; (8004d58 <__libc_init_array+0x3c>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	2600      	movs	r6, #0
 8004d28:	42a6      	cmp	r6, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	4d0b      	ldr	r5, [pc, #44]	; (8004d5c <__libc_init_array+0x40>)
 8004d2e:	4c0c      	ldr	r4, [pc, #48]	; (8004d60 <__libc_init_array+0x44>)
 8004d30:	f000 f820 	bl	8004d74 <_init>
 8004d34:	1b64      	subs	r4, r4, r5
 8004d36:	10a4      	asrs	r4, r4, #2
 8004d38:	2600      	movs	r6, #0
 8004d3a:	42a6      	cmp	r6, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d44:	4798      	blx	r3
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4e:	4798      	blx	r3
 8004d50:	3601      	adds	r6, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	08004d9c 	.word	0x08004d9c
 8004d58:	08004d9c 	.word	0x08004d9c
 8004d5c:	08004d9c 	.word	0x08004d9c
 8004d60:	08004da8 	.word	0x08004da8

08004d64 <memset>:
 8004d64:	4402      	add	r2, r0
 8004d66:	4603      	mov	r3, r0
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d100      	bne.n	8004d6e <memset+0xa>
 8004d6c:	4770      	bx	lr
 8004d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d72:	e7f9      	b.n	8004d68 <memset+0x4>

08004d74 <_init>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr

08004d80 <_fini>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr
