
stm_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e04  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  24000000  080050f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000518  240001d8  080052cc  000201d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  240006f0  080052cc  000206f0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018e88  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a63  00000000  00000000  0003908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d80  00000000  00000000  0003baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c68  00000000  00000000  0003c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035668  00000000  00000000  0003d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011d24  00000000  00000000  00072b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001461be  00000000  00000000  0008486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001caa2a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000369c  00000000  00000000  001caa7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080050bc 	.word	0x080050bc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	080050bc 	.word	0x080050bc

08000310 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
};

void pidCtrl(int i){
 8000310:	b490      	push	{r4, r7}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000318:	49cd      	ldr	r1, [pc, #820]	; (8000650 <pidCtrl+0x340>)
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	4613      	mov	r3, r2
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	1a9b      	subs	r3, r3, r2
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	440b      	add	r3, r1
 8000326:	3318      	adds	r3, #24
 8000328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800032c:	ee07 3a90 	vmov	s15, r3
 8000330:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000334:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8000628 <pidCtrl+0x318>
 8000338:	ee27 7b06 	vmul.f64	d7, d7, d6
 800033c:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8000630 <pidCtrl+0x320>
 8000340:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio * belt_ratio) * frequency;
 8000344:	ed9f 5bbc 	vldr	d5, [pc, #752]	; 8000638 <pidCtrl+0x328>
 8000348:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800034c:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8000640 <pidCtrl+0x330>
 8000350:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000354:	49be      	ldr	r1, [pc, #760]	; (8000650 <pidCtrl+0x340>)
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4613      	mov	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	1a9b      	subs	r3, r3, r2
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	440b      	add	r3, r1
 8000362:	3328      	adds	r3, #40	; 0x28
 8000364:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 8000368:	49b9      	ldr	r1, [pc, #740]	; (8000650 <pidCtrl+0x340>)
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4613      	mov	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	011b      	lsls	r3, r3, #4
 8000374:	440b      	add	r3, r1
 8000376:	3320      	adds	r3, #32
 8000378:	ed93 6b00 	vldr	d6, [r3]
 800037c:	49b4      	ldr	r1, [pc, #720]	; (8000650 <pidCtrl+0x340>)
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	4613      	mov	r3, r2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	011b      	lsls	r3, r3, #4
 8000388:	440b      	add	r3, r1
 800038a:	3328      	adds	r3, #40	; 0x28
 800038c:	ed93 7b00 	vldr	d7, [r3]
 8000390:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000394:	49ae      	ldr	r1, [pc, #696]	; (8000650 <pidCtrl+0x340>)
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4613      	mov	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	011b      	lsls	r3, r3, #4
 80003a0:	440b      	add	r3, r1
 80003a2:	3330      	adds	r3, #48	; 0x30
 80003a4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 80003a8:	49a9      	ldr	r1, [pc, #676]	; (8000650 <pidCtrl+0x340>)
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	4613      	mov	r3, r2
 80003ae:	00db      	lsls	r3, r3, #3
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	011b      	lsls	r3, r3, #4
 80003b4:	440b      	add	r3, r1
 80003b6:	ed93 6b00 	vldr	d6, [r3]
 80003ba:	49a5      	ldr	r1, [pc, #660]	; (8000650 <pidCtrl+0x340>)
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	011b      	lsls	r3, r3, #4
 80003c6:	440b      	add	r3, r1
 80003c8:	3330      	adds	r3, #48	; 0x30
 80003ca:	ed93 7b00 	vldr	d7, [r3]
 80003ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80003d2:	499f      	ldr	r1, [pc, #636]	; (8000650 <pidCtrl+0x340>)
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4613      	mov	r3, r2
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	440b      	add	r3, r1
 80003e0:	3348      	adds	r3, #72	; 0x48
 80003e2:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 80003e6:	499a      	ldr	r1, [pc, #616]	; (8000650 <pidCtrl+0x340>)
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	4613      	mov	r3, r2
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	011b      	lsls	r3, r3, #4
 80003f2:	440b      	add	r3, r1
 80003f4:	3350      	adds	r3, #80	; 0x50
 80003f6:	ed93 6b00 	vldr	d6, [r3]
 80003fa:	4995      	ldr	r1, [pc, #596]	; (8000650 <pidCtrl+0x340>)
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4613      	mov	r3, r2
 8000400:	00db      	lsls	r3, r3, #3
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	011b      	lsls	r3, r3, #4
 8000406:	440b      	add	r3, r1
 8000408:	3308      	adds	r3, #8
 800040a:	ed93 5b00 	vldr	d5, [r3]
 800040e:	4990      	ldr	r1, [pc, #576]	; (8000650 <pidCtrl+0x340>)
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4613      	mov	r3, r2
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	1a9b      	subs	r3, r3, r2
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	440b      	add	r3, r1
 800041c:	3338      	adds	r3, #56	; 0x38
 800041e:	ed93 7b00 	vldr	d7, [r3]
 8000422:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000426:	ed9f 4b86 	vldr	d4, [pc, #536]	; 8000640 <pidCtrl+0x330>
 800042a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800042e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000432:	4987      	ldr	r1, [pc, #540]	; (8000650 <pidCtrl+0x340>)
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	4613      	mov	r3, r2
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	011b      	lsls	r3, r3, #4
 800043e:	440b      	add	r3, r1
 8000440:	3350      	adds	r3, #80	; 0x50
 8000442:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui = 0;
 8000446:	4982      	ldr	r1, [pc, #520]	; (8000650 <pidCtrl+0x340>)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4613      	mov	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	1a9b      	subs	r3, r3, r2
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	440b      	add	r3, r1
 8000454:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8000458:	f04f 0200 	mov.w	r2, #0
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e9c1 2300 	strd	r2, r3, [r1]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 8000464:	497a      	ldr	r1, [pc, #488]	; (8000650 <pidCtrl+0x340>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	4613      	mov	r3, r2
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	440b      	add	r3, r1
 8000472:	3310      	adds	r3, #16
 8000474:	ed93 6b00 	vldr	d6, [r3]
 8000478:	4975      	ldr	r1, [pc, #468]	; (8000650 <pidCtrl+0x340>)
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	4613      	mov	r3, r2
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	440b      	add	r3, r1
 8000486:	3330      	adds	r3, #48	; 0x30
 8000488:	ed93 5b00 	vldr	d5, [r3]
 800048c:	4970      	ldr	r1, [pc, #448]	; (8000650 <pidCtrl+0x340>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4613      	mov	r3, r2
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	011b      	lsls	r3, r3, #4
 8000498:	440b      	add	r3, r1
 800049a:	3338      	adds	r3, #56	; 0x38
 800049c:	ed93 7b00 	vldr	d7, [r3]
 80004a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80004a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80004a8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8000640 <pidCtrl+0x330>
 80004ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004b0:	4967      	ldr	r1, [pc, #412]	; (8000650 <pidCtrl+0x340>)
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	4613      	mov	r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	440b      	add	r3, r1
 80004be:	3358      	adds	r3, #88	; 0x58
 80004c0:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 80004c4:	4962      	ldr	r1, [pc, #392]	; (8000650 <pidCtrl+0x340>)
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	4613      	mov	r3, r2
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	011b      	lsls	r3, r3, #4
 80004d0:	440b      	add	r3, r1
 80004d2:	3350      	adds	r3, #80	; 0x50
 80004d4:	ed93 7b00 	vldr	d7, [r3]
 80004d8:	eeb0 7bc7 	vabs.f64	d7, d7
 80004dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80004e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80004e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004e8:	dd1f      	ble.n	800052a <pidCtrl+0x21a>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 80004ea:	4959      	ldr	r1, [pc, #356]	; (8000650 <pidCtrl+0x340>)
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4613      	mov	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	1a9b      	subs	r3, r3, r2
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	440b      	add	r3, r1
 80004f8:	3350      	adds	r3, #80	; 0x50
 80004fa:	ed93 7b00 	vldr	d7, [r3]
 80004fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000506:	db03      	blt.n	8000510 <pidCtrl+0x200>
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4951      	ldr	r1, [pc, #324]	; (8000654 <pidCtrl+0x344>)
 800050e:	e002      	b.n	8000516 <pidCtrl+0x206>
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	4950      	ldr	r1, [pc, #320]	; (8000658 <pidCtrl+0x348>)
 8000516:	4c4e      	ldr	r4, [pc, #312]	; (8000650 <pidCtrl+0x340>)
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4613      	mov	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	1a9b      	subs	r3, r3, r2
 8000520:	011b      	lsls	r3, r3, #4
 8000522:	4423      	add	r3, r4
 8000524:	3350      	adds	r3, #80	; 0x50
 8000526:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800052a:	4949      	ldr	r1, [pc, #292]	; (8000650 <pidCtrl+0x340>)
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4613      	mov	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	1a9b      	subs	r3, r3, r2
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	440b      	add	r3, r1
 8000538:	3348      	adds	r3, #72	; 0x48
 800053a:	ed93 6b00 	vldr	d6, [r3]
 800053e:	4944      	ldr	r1, [pc, #272]	; (8000650 <pidCtrl+0x340>)
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4613      	mov	r3, r2
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	1a9b      	subs	r3, r3, r2
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	440b      	add	r3, r1
 800054c:	3350      	adds	r3, #80	; 0x50
 800054e:	ed93 7b00 	vldr	d7, [r3]
 8000552:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000556:	493e      	ldr	r1, [pc, #248]	; (8000650 <pidCtrl+0x340>)
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4613      	mov	r3, r2
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	440b      	add	r3, r1
 8000564:	3358      	adds	r3, #88	; 0x58
 8000566:	ed93 7b00 	vldr	d7, [r3]
 800056a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800056e:	4938      	ldr	r1, [pc, #224]	; (8000650 <pidCtrl+0x340>)
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4613      	mov	r3, r2
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	440b      	add	r3, r1
 800057c:	3340      	adds	r3, #64	; 0x40
 800057e:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 8000582:	4933      	ldr	r1, [pc, #204]	; (8000650 <pidCtrl+0x340>)
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4613      	mov	r3, r2
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	440b      	add	r3, r1
 8000590:	3330      	adds	r3, #48	; 0x30
 8000592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000596:	4c2e      	ldr	r4, [pc, #184]	; (8000650 <pidCtrl+0x340>)
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4613      	mov	r3, r2
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	4423      	add	r3, r4
 80005a4:	3338      	adds	r3, #56	; 0x38
 80005a6:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80005aa:	4929      	ldr	r1, [pc, #164]	; (8000650 <pidCtrl+0x340>)
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4613      	mov	r3, r2
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	440b      	add	r3, r1
 80005b8:	3340      	adds	r3, #64	; 0x40
 80005ba:	ed93 7b00 	vldr	d7, [r3]
 80005be:	eeb0 7bc7 	vabs.f64	d7, d7
 80005c2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000648 <pidCtrl+0x338>
 80005c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005ca:	4921      	ldr	r1, [pc, #132]	; (8000650 <pidCtrl+0x340>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4613      	mov	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	440b      	add	r3, r1
 80005d8:	3360      	adds	r3, #96	; 0x60
 80005da:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 80005de:	491c      	ldr	r1, [pc, #112]	; (8000650 <pidCtrl+0x340>)
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4613      	mov	r3, r2
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	440b      	add	r3, r1
 80005ec:	3360      	adds	r3, #96	; 0x60
 80005ee:	ed93 7b00 	vldr	d7, [r3]
 80005f2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000648 <pidCtrl+0x338>
 80005f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80005fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fe:	dc00      	bgt.n	8000602 <pidCtrl+0x2f2>
}
 8000600:	e00d      	b.n	800061e <pidCtrl+0x30e>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000602:	4913      	ldr	r1, [pc, #76]	; (8000650 <pidCtrl+0x340>)
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4613      	mov	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	440b      	add	r3, r1
 8000610:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000614:	f04f 0200 	mov.w	r2, #0
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <pidCtrl+0x34c>)
 800061a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bc90      	pop	{r4, r7}
 8000626:	4770      	bx	lr
 8000628:	54cadf99 	.word	0x54cadf99
 800062c:	400921fb 	.word	0x400921fb
 8000630:	cccccccd 	.word	0xcccccccd
 8000634:	4029cccc 	.word	0x4029cccc
 8000638:	00000000 	.word	0x00000000
 800063c:	410b0000 	.word	0x410b0000
 8000640:	00000000 	.word	0x00000000
 8000644:	407f4000 	.word	0x407f4000
 8000648:	00000000 	.word	0x00000000
 800064c:	408f4000 	.word	0x408f4000
 8000650:	24000000 	.word	0x24000000
 8000654:	3ff00000 	.word	0x3ff00000
 8000658:	bff00000 	.word	0xbff00000
 800065c:	408f4000 	.word	0x408f4000

08000660 <HAL_TIM_PeriodElapsedCallback>:
extern PUSHER pusher_A;
extern PUSHER pusher_B;
extern PUSHER pusher_C;
extern PUSHER pusher_D;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4aa6      	ldr	r2, [pc, #664]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800066e:	4293      	cmp	r3, r2
 8000670:	f040 8177 	bne.w	8000962 <HAL_TIM_PeriodElapsedCallback+0x302>

		Kpid[0].goalVel = Vx + Vy + (W * coeffab);
 8000674:	4ba5      	ldr	r3, [pc, #660]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000676:	ed93 6b00 	vldr	d6, [r3]
 800067a:	4ba5      	ldr	r3, [pc, #660]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800067c:	ed93 7b00 	vldr	d7, [r3]
 8000680:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000684:	4ba3      	ldr	r3, [pc, #652]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000686:	ed93 5b00 	vldr	d5, [r3]
 800068a:	4ba3      	ldr	r3, [pc, #652]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800068c:	ed93 7b00 	vldr	d7, [r3]
 8000690:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000694:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000698:	4ba0      	ldr	r3, [pc, #640]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800069a:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vx - Vy - (W * coeffab);
 800069e:	4b9b      	ldr	r3, [pc, #620]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006a0:	ed93 6b00 	vldr	d6, [r3]
 80006a4:	4b9a      	ldr	r3, [pc, #616]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80006a6:	ed93 7b00 	vldr	d7, [r3]
 80006aa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80006ae:	4b99      	ldr	r3, [pc, #612]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80006b0:	ed93 5b00 	vldr	d5, [r3]
 80006b4:	4b98      	ldr	r3, [pc, #608]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80006b6:	ed93 7b00 	vldr	d7, [r3]
 80006ba:	ee25 7b07 	vmul.f64	d7, d5, d7
 80006be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006c2:	4b96      	ldr	r3, [pc, #600]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80006c4:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vx + Vy - (W * coeffab);
 80006c8:	4b90      	ldr	r3, [pc, #576]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006ca:	ed93 6b00 	vldr	d6, [r3]
 80006ce:	4b90      	ldr	r3, [pc, #576]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80006d0:	ed93 7b00 	vldr	d7, [r3]
 80006d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80006d8:	4b8e      	ldr	r3, [pc, #568]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80006da:	ed93 5b00 	vldr	d5, [r3]
 80006de:	4b8e      	ldr	r3, [pc, #568]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80006e0:	ed93 7b00 	vldr	d7, [r3]
 80006e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80006e8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006ec:	4b8b      	ldr	r3, [pc, #556]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80006ee:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vx - Vy + (W * coeffab);
 80006f2:	4b86      	ldr	r3, [pc, #536]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80006f4:	ed93 6b00 	vldr	d6, [r3]
 80006f8:	4b85      	ldr	r3, [pc, #532]	; (8000910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80006fa:	ed93 7b00 	vldr	d7, [r3]
 80006fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000702:	4b84      	ldr	r3, [pc, #528]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000704:	ed93 5b00 	vldr	d5, [r3]
 8000708:	4b83      	ldr	r3, [pc, #524]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800070a:	ed93 7b00 	vldr	d7, [r3]
 800070e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000712:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000716:	4b81      	ldr	r3, [pc, #516]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000718:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(FR_ENC);
 800071c:	4b80      	ldr	r3, [pc, #512]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000722:	b21a      	sxth	r2, r3
 8000724:	4b7d      	ldr	r3, [pc, #500]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000726:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(FL_ENC);
 8000728:	4b7e      	ldr	r3, [pc, #504]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072e:	b21a      	sxth	r2, r3
 8000730:	4b7a      	ldr	r3, [pc, #488]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000732:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(BL_ENC) * -1;
 8000736:	4b7c      	ldr	r3, [pc, #496]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073c:	b29b      	uxth	r3, r3
 800073e:	425b      	negs	r3, r3
 8000740:	b29b      	uxth	r3, r3
 8000742:	b21a      	sxth	r2, r3
 8000744:	4b75      	ldr	r3, [pc, #468]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000746:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(BR_ENC) * -1;
 800074a:	4b78      	ldr	r3, [pc, #480]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000750:	b29b      	uxth	r3, r3
 8000752:	425b      	negs	r3, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	b21a      	sxth	r2, r3
 8000758:	4b70      	ldr	r3, [pc, #448]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800075a:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(FR_ENC, 0);
 800075e:	4b70      	ldr	r3, [pc, #448]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(FL_ENC, 0);
 8000766:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BL_ENC, 0);
 800076e:	4b6e      	ldr	r3, [pc, #440]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BR_ENC, 0);
 8000776:	4b6d      	ldr	r3, [pc, #436]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24



		for( int i = 0; i < 4; i ++){
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b03      	cmp	r3, #3
 8000786:	dc06      	bgt.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x136>
			pidCtrl(i);
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f7ff fdc1 	bl	8000310 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	e7f5      	b.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x122>
		}

		__HAL_TIM_SET_COMPARE(FR_PWM_TIMMER, FR_PWM_CHANNEL, Kpid[0].pulse);
 8000796:	4b61      	ldr	r3, [pc, #388]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000798:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800079c:	4b64      	ldr	r3, [pc, #400]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a4:	ee17 2a90 	vmov	r2, s15
 80007a8:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(FL_PWM_TIMMER, FL_PWM_CHANNEL, Kpid[1].pulse);
 80007aa:	4b5c      	ldr	r3, [pc, #368]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80007ac:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 80007b0:	4b5f      	ldr	r3, [pc, #380]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee17 2a90 	vmov	r2, s15
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BL_PWM_TIMMER, BL_PWM_CHANNEL, Kpid[2].pulse);
 80007be:	4b57      	ldr	r3, [pc, #348]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80007c0:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 80007c4:	4b5b      	ldr	r3, [pc, #364]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007cc:	ee17 2a90 	vmov	r2, s15
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BR_PWM_TIMMER, BR_PWM_CHANNEL, Kpid[3].pulse);
 80007d2:	4b52      	ldr	r3, [pc, #328]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80007d4:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 80007d8:	4b56      	ldr	r3, [pc, #344]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007e0:	ee17 2a90 	vmov	r2, s15
 80007e4:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ec:	4852      	ldr	r0, [pc, #328]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80007ee:	f002 f873 	bl	80028d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f8:	484f      	ldr	r0, [pc, #316]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80007fa:	f002 f86d 	bl	80028d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000804:	484d      	ldr	r0, [pc, #308]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000806:	f002 f867 	bl	80028d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	484a      	ldr	r0, [pc, #296]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000812:	f002 f861 	bl	80028d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2104      	movs	r1, #4
 800081a:	4849      	ldr	r0, [pc, #292]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800081c:	f002 f85c 	bl	80028d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2108      	movs	r1, #8
 8000824:	4846      	ldr	r0, [pc, #280]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000826:	f002 f857 	bl	80028d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000830:	4844      	ldr	r0, [pc, #272]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000832:	f002 f851 	bl	80028d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2110      	movs	r1, #16
 800083a:	4841      	ldr	r0, [pc, #260]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800083c:	f002 f84c 	bl	80028d8 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 8000840:	4b36      	ldr	r3, [pc, #216]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000842:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000846:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084e:	dd06      	ble.n	800085e <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000856:	4838      	ldr	r0, [pc, #224]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000858:	f002 f83e 	bl	80028d8 <HAL_GPIO_WritePin>
 800085c:	e00d      	b.n	800087a <HAL_TIM_PeriodElapsedCallback+0x21a>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000860:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000864:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086c:	d505      	bpl.n	800087a <HAL_TIM_PeriodElapsedCallback+0x21a>
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	4830      	ldr	r0, [pc, #192]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000876:	f002 f82f 	bl	80028d8 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 800087a:	4b28      	ldr	r3, [pc, #160]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800087c:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000880:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000888:	dd06      	ble.n	8000898 <HAL_TIM_PeriodElapsedCallback+0x238>
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000890:	482a      	ldr	r0, [pc, #168]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000892:	f002 f821 	bl	80028d8 <HAL_GPIO_WritePin>
 8000896:	e00d      	b.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x254>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800089a:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 800089e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a6:	d505      	bpl.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x254>
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ae:	4823      	ldr	r0, [pc, #140]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80008b0:	f002 f812 	bl	80028d8 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80008b6:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 80008ba:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c2:	dd05      	ble.n	80008d0 <HAL_TIM_PeriodElapsedCallback+0x270>
 80008c4:	2201      	movs	r2, #1
 80008c6:	2104      	movs	r1, #4
 80008c8:	481d      	ldr	r0, [pc, #116]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80008ca:	f002 f805 	bl	80028d8 <HAL_GPIO_WritePin>
 80008ce:	e00c      	b.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x28a>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80008d2:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 80008d6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008de:	d504      	bpl.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x28a>
 80008e0:	2201      	movs	r2, #1
 80008e2:	2108      	movs	r1, #8
 80008e4:	4816      	ldr	r0, [pc, #88]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80008e6:	f001 fff7 	bl	80028d8 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80008ec:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 80008f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f8:	dd26      	ble.n	8000948 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000902:	f001 ffe9 	bl	80028d8 <HAL_GPIO_WritePin>
 8000906:	e02c      	b.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x302>
 8000908:	40010000 	.word	0x40010000
 800090c:	240001f8 	.word	0x240001f8
 8000910:	24000200 	.word	0x24000200
 8000914:	24000208 	.word	0x24000208
 8000918:	240001c0 	.word	0x240001c0
 800091c:	24000000 	.word	0x24000000
 8000920:	24000444 	.word	0x24000444
 8000924:	24000528 	.word	0x24000528
 8000928:	24000490 	.word	0x24000490
 800092c:	240004dc 	.word	0x240004dc
 8000930:	240005c0 	.word	0x240005c0
 8000934:	2400060c 	.word	0x2400060c
 8000938:	58020c00 	.word	0x58020c00
 800093c:	58020400 	.word	0x58020400
 8000940:	58021000 	.word	0x58021000
 8000944:	58020800 	.word	0x58020800
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 8000948:	4b9d      	ldr	r3, [pc, #628]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x560>)
 800094a:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 800094e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000956:	d504      	bpl.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x302>
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4899      	ldr	r0, [pc, #612]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800095e:	f001 ffbb 	bl	80028d8 <HAL_GPIO_WritePin>
	}

	if(htim->Instance == TIM8){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a98      	ldr	r2, [pc, #608]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000968:	4293      	cmp	r3, r2
 800096a:	f040 810c 	bne.w	8000b86 <HAL_TIM_PeriodElapsedCallback+0x526>
		/*pusher down*/
		if(pusher_A.d > 0){
 800096e:	4b97      	ldr	r3, [pc, #604]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000970:	ed93 7b04 	vldr	d7, [r3, #16]
 8000974:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097c:	dd2f      	ble.n	80009de <HAL_TIM_PeriodElapsedCallback+0x37e>
			pusher_A.count++;
 800097e:	4b93      	ldr	r3, [pc, #588]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	3301      	adds	r3, #1
 8000984:	4a91      	ldr	r2, [pc, #580]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000986:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800098e:	488d      	ldr	r0, [pc, #564]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000990:	f001 ffa2 	bl	80028d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099a:	488a      	ldr	r0, [pc, #552]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800099c:	f001 ff9c 	bl	80028d8 <HAL_GPIO_WritePin>
			if(pusher_A.count > pusher_A.d*1000/PUSHER_SPEED){
 80009a0:	4b8a      	ldr	r3, [pc, #552]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009ac:	4b87      	ldr	r3, [pc, #540]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80009ae:	ed93 7b04 	vldr	d7, [r3, #16]
 80009b2:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000bb0 <HAL_TIM_PeriodElapsedCallback+0x550>
 80009b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80009ba:	ed9f 4b7f 	vldr	d4, [pc, #508]	; 8000bb8 <HAL_TIM_PeriodElapsedCallback+0x558>
 80009be:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80009c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80009c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ca:	dd08      	ble.n	80009de <HAL_TIM_PeriodElapsedCallback+0x37e>
				pusher_A.p_state = pusher_A.state;
 80009cc:	4b7f      	ldr	r3, [pc, #508]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80009ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d2:	497e      	ldr	r1, [pc, #504]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80009d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 80009d8:	4b7c      	ldr	r3, [pc, #496]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d > 0){
 80009de:	4b7c      	ldr	r3, [pc, #496]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80009e0:	ed93 7b04 	vldr	d7, [r3, #16]
 80009e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80009e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ec:	dd2f      	ble.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x3ee>
			pusher_B.count++;
 80009ee:	4b78      	ldr	r3, [pc, #480]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a76      	ldr	r2, [pc, #472]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80009f6:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fe:	4871      	ldr	r0, [pc, #452]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000a00:	f001 ff6a 	bl	80028d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0a:	486e      	ldr	r0, [pc, #440]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000a0c:	f001 ff64 	bl	80028d8 <HAL_GPIO_WritePin>
			if(pusher_B.count > pusher_B.d*1000/PUSHER_SPEED){
 8000a10:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000a1e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a22:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8000bb0 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000a26:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000a2a:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8000bb8 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000a2e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000a32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3a:	dd08      	ble.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x3ee>
				pusher_B.p_state = pusher_B.state;
 8000a3c:	4b64      	ldr	r3, [pc, #400]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a42:	4963      	ldr	r1, [pc, #396]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000a44:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000a48:	4b61      	ldr	r3, [pc, #388]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher up*/
		if(pusher_A.d < 0){
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000a50:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a54:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5c:	d531      	bpl.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x462>
			pusher_A.count++;
 8000a5e:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a59      	ldr	r2, [pc, #356]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000a66:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6e:	4855      	ldr	r0, [pc, #340]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000a70:	f001 ff32 	bl	80028d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7a:	4852      	ldr	r0, [pc, #328]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000a7c:	f001 ff2c 	bl	80028d8 <HAL_GPIO_WritePin>
			if(pusher_A.count > -pusher_A.d*1000/PUSHER_SPEED){
 8000a80:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a8c:	4b4f      	ldr	r3, [pc, #316]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000a8e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000a92:	eeb1 7b47 	vneg.f64	d7, d7
 8000a96:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8000bb0 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000a9a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000a9e:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8000bb8 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000aa2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000aa6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aae:	dd08      	ble.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x462>
				pusher_A.p_state = pusher_A.state;
 8000ab0:	4b46      	ldr	r3, [pc, #280]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab6:	4945      	ldr	r1, [pc, #276]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000ab8:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000abc:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d < 0){
 8000ac2:	4b43      	ldr	r3, [pc, #268]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000ac4:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ac8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad0:	d531      	bpl.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x4d6>
			pusher_B.count++;
 8000ad2:	4b3f      	ldr	r3, [pc, #252]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4a3d      	ldr	r2, [pc, #244]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000ada:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae2:	4838      	ldr	r0, [pc, #224]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000ae4:	f001 fef8 	bl	80028d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	4835      	ldr	r0, [pc, #212]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000af0:	f001 fef2 	bl	80028d8 <HAL_GPIO_WritePin>
			if(pusher_B.count > -pusher_B.d*1000/PUSHER_SPEED){
 8000af4:	4b36      	ldr	r3, [pc, #216]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	ee07 3a90 	vmov	s15, r3
 8000afc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b00:	4b33      	ldr	r3, [pc, #204]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000b02:	ed93 7b04 	vldr	d7, [r3, #16]
 8000b06:	eeb1 7b47 	vneg.f64	d7, d7
 8000b0a:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8000bb0 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000b0e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000b12:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8000bb8 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000b16:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000b1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b22:	dd08      	ble.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x4d6>
				pusher_B.p_state = pusher_B.state;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2a:	4929      	ldr	r1, [pc, #164]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000b2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher stop*/
		if(pusher_A.d == 0){
 8000b36:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000b38:	ed93 7b04 	vldr	d7, [r3, #16]
 8000b3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b44:	d10b      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x4fe>
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4c:	481d      	ldr	r0, [pc, #116]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000b4e:	f001 fec3 	bl	80028d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b58:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000b5a:	f001 febd 	bl	80028d8 <HAL_GPIO_WritePin>
		}
		if(pusher_B.d == 0){
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000b60:	ed93 7b04 	vldr	d7, [r3, #16]
 8000b64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6c:	d10b      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x526>
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000b76:	f001 feaf 	bl	80028d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b80:	4810      	ldr	r0, [pc, #64]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000b82:	f001 fea9 	bl	80028d8 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//		}
//
	}
	if(htim->Instance == TIM23){/*for script*/
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d108      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x542>
		if(delay_start!=0){
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d004      	beq.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x542>
			delay++;
 8000b98:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000ba0:	6013      	str	r3, [r2, #0]
//			script_wheel(0,0,0);
//			script_pusher(0,10,0,0);
//		}

	}
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	f3af 8000 	nop.w
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	408f4000 	.word	0x408f4000
 8000bb8:	cccccccd 	.word	0xcccccccd
 8000bbc:	4040cccc 	.word	0x4040cccc
 8000bc0:	24000000 	.word	0x24000000
 8000bc4:	58021000 	.word	0x58021000
 8000bc8:	40010400 	.word	0x40010400
 8000bcc:	240006a8 	.word	0x240006a8
 8000bd0:	240006c8 	.word	0x240006c8
 8000bd4:	4000e000 	.word	0x4000e000
 8000bd8:	24000210 	.word	0x24000210
 8000bdc:	24000214 	.word	0x24000214

08000be0 <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 8000be4:	2100      	movs	r1, #0
 8000be6:	4818      	ldr	r0, [pc, #96]	; (8000c48 <_Z13DC_motor_initv+0x68>)
 8000be8:	f003 f8a0 	bl	8003d2c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 8000bec:	2104      	movs	r1, #4
 8000bee:	4816      	ldr	r0, [pc, #88]	; (8000c48 <_Z13DC_motor_initv+0x68>)
 8000bf0:	f003 f89c 	bl	8003d2c <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4815      	ldr	r0, [pc, #84]	; (8000c4c <_Z13DC_motor_initv+0x6c>)
 8000bf8:	f002 fed6 	bl	80039a8 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <_Z13DC_motor_initv+0x70>)
 8000c00:	f003 f894 	bl	8003d2c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 8000c04:	2104      	movs	r1, #4
 8000c06:	4812      	ldr	r0, [pc, #72]	; (8000c50 <_Z13DC_motor_initv+0x70>)
 8000c08:	f003 f890 	bl	8003d2c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480f      	ldr	r0, [pc, #60]	; (8000c4c <_Z13DC_motor_initv+0x6c>)
 8000c10:	f002 feca 	bl	80039a8 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 8000c14:	2100      	movs	r1, #0
 8000c16:	480f      	ldr	r0, [pc, #60]	; (8000c54 <_Z13DC_motor_initv+0x74>)
 8000c18:	f003 f888 	bl	8003d2c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <_Z13DC_motor_initv+0x74>)
 8000c20:	f003 f884 	bl	8003d2c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 8000c24:	2100      	movs	r1, #0
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <_Z13DC_motor_initv+0x78>)
 8000c28:	f002 febe 	bl	80039a8 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <_Z13DC_motor_initv+0x7c>)
 8000c30:	f003 f87c 	bl	8003d2c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 8000c34:	2104      	movs	r1, #4
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <_Z13DC_motor_initv+0x7c>)
 8000c38:	f003 f878 	bl	8003d2c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <_Z13DC_motor_initv+0x78>)
 8000c40:	f002 feb2 	bl	80039a8 <HAL_TIM_PWM_Start>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000444 	.word	0x24000444
 8000c4c:	240005c0 	.word	0x240005c0
 8000c50:	24000528 	.word	0x24000528
 8000c54:	24000490 	.word	0x24000490
 8000c58:	2400060c 	.word	0x2400060c
 8000c5c:	240004dc 	.word	0x240004dc

08000c60 <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 8000c60:	b480      	push	{r7}
 8000c62:	b08f      	sub	sp, #60	; 0x3c
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6378      	str	r0, [r7, #52]	; 0x34
 8000c68:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000c6c:	ed87 1b08 	vstr	d1, [r7, #32]
 8000c70:	ed87 2b06 	vstr	d2, [r7, #24]
 8000c74:	ed87 3b04 	vstr	d3, [r7, #16]
 8000c78:	ed87 4b02 	vstr	d4, [r7, #8]
 8000c7c:	ed87 5b00 	vstr	d5, [r7]
 8000c80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c82:	f04f 0200 	mov.w	r2, #0
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000c8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c90:	f04f 0200 	mov.w	r2, #0
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8000c9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8000caa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 8000cb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000cbe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 8000cc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cc8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 8000ccc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000cd2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 8000cd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cdc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 8000ce0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ce4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ce8:	ee17 2a90 	vmov	r2, s15
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cee:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 8000cf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cf6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	373c      	adds	r7, #60	; 0x3c
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_Z41__static_initialization_and_destruction_0ii>:
	u = kp * error + ki * integral + kd * differential;
	if (u > 1) u = 1;
	else if (u < -1) u = -1;

	return (int) u*ARR;
}
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d140      	bne.n	8000d9a <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d13b      	bne.n	8000d9a <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 8000d22:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000da8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000d26:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000db0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000d2a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000db8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000d2e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000dc0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000d32:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8000dc8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000d36:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8000dd0 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000d3a:	4833      	ldr	r0, [pc, #204]	; (8000e08 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8000d3c:	f7ff ff90 	bl	8000c60 <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 8000d40:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000da8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000d44:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000db0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000d48:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000db8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000d4c:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000dc0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000d50:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8000dd8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000d54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8000de0 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000d58:	482c      	ldr	r0, [pc, #176]	; (8000e0c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8000d5a:	f7ff ff81 	bl	8000c60 <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 8000d5e:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000da8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000d62:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000db0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000d66:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000db8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000d6a:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8000dc0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000d6e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8000de8 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8000d72:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8000df0 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 8000d76:	4826      	ldr	r0, [pc, #152]	; (8000e10 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8000d78:	f7ff ff72 	bl	8000c60 <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 8000d7c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000da8 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000d80:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000db0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000d84:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000db8 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000d88:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000dc0 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000d8c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8000df8 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8000d90:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8000e00 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 8000d94:	481f      	ldr	r0, [pc, #124]	; (8000e14 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8000d96:	f7ff ff63 	bl	8000c60 <_ZN8DC_motorC1Edddddd>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	f3af 8000 	nop.w
 8000da8:	00000000 	.word	0x00000000
 8000dac:	408f4000 	.word	0x408f4000
 8000db0:	00000000 	.word	0x00000000
 8000db4:	40800000 	.word	0x40800000
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	406b0000 	.word	0x406b0000
	...
 8000dc8:	89b64cae 	.word	0x89b64cae
 8000dcc:	403fb7ac 	.word	0x403fb7ac
 8000dd0:	d059ca21 	.word	0xd059ca21
 8000dd4:	402fee62 	.word	0x402fee62
 8000dd8:	76ca36c5 	.word	0x76ca36c5
 8000ddc:	4056ec15 	.word	0x4056ec15
 8000de0:	420d6ba3 	.word	0x420d6ba3
 8000de4:	40382ecc 	.word	0x40382ecc
 8000de8:	e191aae3 	.word	0xe191aae3
 8000dec:	40490b21 	.word	0x40490b21
 8000df0:	f4097cab 	.word	0xf4097cab
 8000df4:	4035320d 	.word	0x4035320d
 8000df8:	06469611 	.word	0x06469611
 8000dfc:	40535cd8 	.word	0x40535cd8
 8000e00:	0ae388d1 	.word	0x0ae388d1
 8000e04:	40404f39 	.word	0x40404f39
 8000e08:	24000218 	.word	0x24000218
 8000e0c:	24000290 	.word	0x24000290
 8000e10:	24000308 	.word	0x24000308
 8000e14:	24000380 	.word	0x24000380

08000e18 <_GLOBAL__sub_I_FL>:
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff ff71 	bl	8000d08 <_Z41__static_initialization_and_destruction_0ii>
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2c:	f001 fa0a 	bl	8002244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e30:	f000 f818 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e34:	f000 fba2 	bl	800157c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e38:	f000 f8c6 	bl	8000fc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e3c:	f000 f918 	bl	8001070 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e40:	f000 f96c 	bl	800111c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e44:	f000 f9c0 	bl	80011c8 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000e48:	f000 fa68 	bl	800131c <MX_TIM12_Init>
  MX_TIM15_Init();
 8000e4c:	f000 fab6 	bl	80013bc <MX_TIM15_Init>
  MX_TIM1_Init();
 8000e50:	f000 f866 	bl	8000f20 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000e54:	f000 fa0e 	bl	8001274 <MX_TIM8_Init>
  MX_TIM23_Init();
 8000e58:	f000 fb42 	bl	80014e0 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000e5c:	f000 fcb8 	bl	80017d0 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <main+0x38>
	...

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b09c      	sub	sp, #112	; 0x70
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	224c      	movs	r2, #76	; 0x4c
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 f91a 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 f914 	bl	80050ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f001 fd41 	bl	800290c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <SystemClock_Config+0xb8>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <SystemClock_Config+0xb8>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9c:	6193      	str	r3, [r2, #24]
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <SystemClock_Config+0xb8>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eaa:	bf00      	nop
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <SystemClock_Config+0xb8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb8:	d1f8      	bne.n	8000eac <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec2:	2340      	movs	r3, #64	; 0x40
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fd56 	bl	8002980 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000eda:	f000 fc51 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	233f      	movs	r3, #63	; 0x3f
 8000ee0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eee:	2340      	movs	r3, #64	; 0x40
 8000ef0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ef2:	2340      	movs	r3, #64	; 0x40
 8000ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000efc:	2340      	movs	r3, #64	; 0x40
 8000efe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2101      	movs	r1, #1
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 f8e9 	bl	80030dc <HAL_RCC_ClockConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f10:	f000 fc36 	bl	8001780 <Error_Handler>
  }
}
 8000f14:	bf00      	nop
 8000f16:	3770      	adds	r7, #112	; 0x70
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58024800 	.word	0x58024800

08000f20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <MX_TIM1_Init+0xa4>)
 8000f42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f46:	223f      	movs	r2, #63	; 0x3f
 8000f48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f6a:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f6c:	f002 fbe6 	bl	800373c <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000f76:	f000 fc03 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000f88:	f003 f9b2 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000f92:	f000 fbf5 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <MX_TIM1_Init+0xa0>)
 8000fa8:	f003 ff02 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fb2:	f000 fbe5 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	240003f8 	.word	0x240003f8
 8000fc4:	40010000 	.word	0x40010000

08000fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2224      	movs	r2, #36	; 0x24
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f004 f868 	bl	80050ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <MX_TIM2_Init+0xa4>)
 8000fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_TIM2_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_TIM2_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <MX_TIM2_Init+0xa4>)
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <MX_TIM2_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_TIM2_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800100e:	2303      	movs	r3, #3
 8001010:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001026:	2301      	movs	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <MX_TIM2_Init+0xa4>)
 800103a:	f002 fdd1 	bl	8003be0 <HAL_TIM_Encoder_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001044:	f000 fb9c 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_TIM2_Init+0xa4>)
 8001056:	f003 feab 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001060:	f000 fb8e 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	; 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	24000444 	.word	0x24000444

08001070 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2224      	movs	r2, #36	; 0x24
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f004 f814 	bl	80050ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_TIM3_Init+0xa4>)
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <MX_TIM3_Init+0xa8>)
 8001092:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_TIM3_Init+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MX_TIM3_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_TIM3_Init+0xa4>)
 80010a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_TIM3_Init+0xa4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_TIM3_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010bc:	2301      	movs	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010cc:	2301      	movs	r3, #1
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <MX_TIM3_Init+0xa4>)
 80010e0:	f002 fd7e 	bl	8003be0 <HAL_TIM_Encoder_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80010ea:	f000 fb49 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	; (8001114 <MX_TIM3_Init+0xa4>)
 80010fc:	f003 fe58 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001106:	f000 fb3b 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3730      	adds	r7, #48	; 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	24000490 	.word	0x24000490
 8001118:	40000400 	.word	0x40000400

0800111c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2224      	movs	r2, #36	; 0x24
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f003 ffbe 	bl	80050ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_TIM4_Init+0xa4>)
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <MX_TIM4_Init+0xa8>)
 800113e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_TIM4_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_TIM4_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_TIM4_Init+0xa4>)
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_TIM4_Init+0xa4>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_TIM4_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001160:	2303      	movs	r3, #3
 8001162:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001178:	2301      	movs	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_TIM4_Init+0xa4>)
 800118c:	f002 fd28 	bl	8003be0 <HAL_TIM_Encoder_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001196:	f000 faf3 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_TIM4_Init+0xa4>)
 80011a8:	f003 fe02 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011b2:	f000 fae5 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	3730      	adds	r7, #48	; 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	240004dc 	.word	0x240004dc
 80011c4:	40000800 	.word	0x40000800

080011c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	2224      	movs	r2, #36	; 0x24
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 ff68 	bl	80050ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_TIM5_Init+0xa4>)
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_TIM5_Init+0xa8>)
 80011ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_TIM5_Init+0xa4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_TIM5_Init+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_TIM5_Init+0xa4>)
 80011fa:	f04f 32ff 	mov.w	r2, #4294967295
 80011fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_TIM5_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_TIM5_Init+0xa4>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800120c:	2303      	movs	r3, #3
 800120e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001224:	2301      	movs	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_TIM5_Init+0xa4>)
 8001238:	f002 fcd2 	bl	8003be0 <HAL_TIM_Encoder_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001242:	f000 fa9d 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <MX_TIM5_Init+0xa4>)
 8001254:	f003 fdac 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800125e:	f000 fa8f 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	; 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	24000528 	.word	0x24000528
 8001270:	40000c00 	.word	0x40000c00

08001274 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <MX_TIM8_Init+0xa0>)
 8001294:	4a20      	ldr	r2, [pc, #128]	; (8001318 <MX_TIM8_Init+0xa4>)
 8001296:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_TIM8_Init+0xa0>)
 800129a:	223f      	movs	r2, #63	; 0x3f
 800129c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_TIM8_Init+0xa0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_TIM8_Init+0xa0>)
 80012a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_TIM8_Init+0xa0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_TIM8_Init+0xa0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_TIM8_Init+0xa0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012be:	4815      	ldr	r0, [pc, #84]	; (8001314 <MX_TIM8_Init+0xa0>)
 80012c0:	f002 fa3c 	bl	800373c <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80012ca:	f000 fa59 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_TIM8_Init+0xa0>)
 80012dc:	f003 f808 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80012e6:	f000 fa4b 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	; (8001314 <MX_TIM8_Init+0xa0>)
 80012fc:	f003 fd58 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001306:	f000 fa3b 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	24000574 	.word	0x24000574
 8001318:	40010400 	.word	0x40010400

0800131c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <MX_TIM12_Init+0x98>)
 8001336:	4a20      	ldr	r2, [pc, #128]	; (80013b8 <MX_TIM12_Init+0x9c>)
 8001338:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 63;
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <MX_TIM12_Init+0x98>)
 800133c:	223f      	movs	r2, #63	; 0x3f
 800133e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <MX_TIM12_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_TIM12_Init+0x98>)
 8001348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800134c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <MX_TIM12_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_TIM12_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800135a:	4816      	ldr	r0, [pc, #88]	; (80013b4 <MX_TIM12_Init+0x98>)
 800135c:	f002 facc 	bl	80038f8 <HAL_TIM_PWM_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001366:	f000 fa0b 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	; 0x60
 800136c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <MX_TIM12_Init+0x98>)
 8001382:	f002 fea1 	bl	80040c8 <HAL_TIM_PWM_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800138c:	f000 f9f8 	bl	8001780 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2204      	movs	r2, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <MX_TIM12_Init+0x98>)
 8001398:	f002 fe96 	bl	80040c8 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80013a2:	f000 f9ed 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80013a6:	4803      	ldr	r0, [pc, #12]	; (80013b4 <MX_TIM12_Init+0x98>)
 80013a8:	f000 fdbe 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	240005c0 	.word	0x240005c0
 80013b8:	40001800 	.word	0x40001800

080013bc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b098      	sub	sp, #96	; 0x60
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2234      	movs	r2, #52	; 0x34
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fe5f 	bl	80050ac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <MX_TIM15_Init+0x11c>)
 80013f0:	4a3a      	ldr	r2, [pc, #232]	; (80014dc <MX_TIM15_Init+0x120>)
 80013f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <MX_TIM15_Init+0x11c>)
 80013f6:	223f      	movs	r2, #63	; 0x3f
 80013f8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <MX_TIM15_Init+0x11c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <MX_TIM15_Init+0x11c>)
 8001402:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001406:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <MX_TIM15_Init+0x11c>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <MX_TIM15_Init+0x11c>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <MX_TIM15_Init+0x11c>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800141a:	482f      	ldr	r0, [pc, #188]	; (80014d8 <MX_TIM15_Init+0x11c>)
 800141c:	f002 fa6c 	bl	80038f8 <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001426:	f000 f9ab 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001432:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001436:	4619      	mov	r1, r3
 8001438:	4827      	ldr	r0, [pc, #156]	; (80014d8 <MX_TIM15_Init+0x11c>)
 800143a:	f003 fcb9 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001444:	f000 f99c 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	; 0x60
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001454:	2300      	movs	r3, #0
 8001456:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	2300      	movs	r3, #0
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001464:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	481a      	ldr	r0, [pc, #104]	; (80014d8 <MX_TIM15_Init+0x11c>)
 800146e:	f002 fe2b 	bl	80040c8 <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001478:	f000 f982 	bl	8001780 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800147c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001480:	2204      	movs	r2, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4814      	ldr	r0, [pc, #80]	; (80014d8 <MX_TIM15_Init+0x11c>)
 8001486:	f002 fe1f 	bl	80040c8 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001490:	f000 f976 	bl	8001780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM15_Init+0x11c>)
 80014bc:	f003 fd14 	bl	8004ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80014c6:	f000 f95b 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM15_Init+0x11c>)
 80014cc:	f000 fd2c 	bl	8001f28 <HAL_TIM_MspPostInit>

}
 80014d0:	bf00      	nop
 80014d2:	3760      	adds	r7, #96	; 0x60
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2400060c 	.word	0x2400060c
 80014dc:	40014000 	.word	0x40014000

080014e0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_TIM23_Init+0x94>)
 8001500:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <MX_TIM23_Init+0x98>)
 8001502:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 63;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_TIM23_Init+0x94>)
 8001506:	223f      	movs	r2, #63	; 0x3f
 8001508:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_TIM23_Init+0x94>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_TIM23_Init+0x94>)
 8001512:	f242 720f 	movw	r2, #9999	; 0x270f
 8001516:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_TIM23_Init+0x94>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <MX_TIM23_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <MX_TIM23_Init+0x94>)
 8001526:	f002 f909 	bl	800373c <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 8001530:	f000 f926 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_TIM23_Init+0x94>)
 8001542:	f002 fed5 	bl	80042f0 <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 800154c:	f000 f918 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_TIM23_Init+0x94>)
 800155e:	f003 fc27 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8001568:	f000 f90a 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	24000658 	.word	0x24000658
 8001578:	4000e000 	.word	0x4000e000

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	; 0x30
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	4b74      	ldr	r3, [pc, #464]	; (8001764 <MX_GPIO_Init+0x1e8>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a72      	ldr	r2, [pc, #456]	; (8001764 <MX_GPIO_Init+0x1e8>)
 800159a:	f043 0310 	orr.w	r3, r3, #16
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b70      	ldr	r3, [pc, #448]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b6:	4a6b      	ldr	r2, [pc, #428]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	4a63      	ldr	r2, [pc, #396]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015de:	4b61      	ldr	r3, [pc, #388]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ec:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	4a5c      	ldr	r2, [pc, #368]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015f4:	f043 0320 	orr.w	r3, r3, #32
 80015f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <MX_GPIO_Init+0x1e8>)
 80015fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160a:	4b56      	ldr	r3, [pc, #344]	; (8001764 <MX_GPIO_Init+0x1e8>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	4a54      	ldr	r2, [pc, #336]	; (8001764 <MX_GPIO_Init+0x1e8>)
 8001612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161a:	4b52      	ldr	r3, [pc, #328]	; (8001764 <MX_GPIO_Init+0x1e8>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <MX_GPIO_Init+0x1e8>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <MX_GPIO_Init+0x1e8>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001638:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <MX_GPIO_Init+0x1e8>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <MX_GPIO_Init+0x1e8>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	4a45      	ldr	r2, [pc, #276]	; (8001764 <MX_GPIO_Init+0x1e8>)
 800164e:	f043 0308 	orr.w	r3, r3, #8
 8001652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001656:	4b43      	ldr	r3, [pc, #268]	; (8001764 <MX_GPIO_Init+0x1e8>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001664:	2200      	movs	r2, #0
 8001666:	f248 711c 	movw	r1, #34588	; 0x871c
 800166a:	483f      	ldr	r0, [pc, #252]	; (8001768 <MX_GPIO_Init+0x1ec>)
 800166c:	f001 f934 	bl	80028d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001676:	483d      	ldr	r0, [pc, #244]	; (800176c <MX_GPIO_Init+0x1f0>)
 8001678:	f001 f92e 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001682:	483b      	ldr	r0, [pc, #236]	; (8001770 <MX_GPIO_Init+0x1f4>)
 8001684:	f001 f928 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	2101      	movs	r1, #1
 800168c:	4839      	ldr	r0, [pc, #228]	; (8001774 <MX_GPIO_Init+0x1f8>)
 800168e:	f001 f923 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001698:	4837      	ldr	r0, [pc, #220]	; (8001778 <MX_GPIO_Init+0x1fc>)
 800169a:	f001 f91d 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80016a4:	4835      	ldr	r0, [pc, #212]	; (800177c <MX_GPIO_Init+0x200>)
 80016a6:	f001 f917 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE9 PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 80016aa:	f248 731c 	movw	r3, #34588	; 0x871c
 80016ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4829      	ldr	r0, [pc, #164]	; (8001768 <MX_GPIO_Init+0x1ec>)
 80016c4:	f000 ff60 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4822      	ldr	r0, [pc, #136]	; (800176c <MX_GPIO_Init+0x1f0>)
 80016e2:	f000 ff51 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016e6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	481c      	ldr	r0, [pc, #112]	; (8001770 <MX_GPIO_Init+0x1f4>)
 8001700:	f000 ff42 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001704:	2301      	movs	r3, #1
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4816      	ldr	r0, [pc, #88]	; (8001774 <MX_GPIO_Init+0x1f8>)
 800171c:	f000 ff34 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001720:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	480f      	ldr	r0, [pc, #60]	; (8001778 <MX_GPIO_Init+0x1fc>)
 800173a:	f000 ff25 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 800173e:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4809      	ldr	r0, [pc, #36]	; (800177c <MX_GPIO_Init+0x200>)
 8001758:	f000 ff16 	bl	8002588 <HAL_GPIO_Init>

}
 800175c:	bf00      	nop
 800175e:	3730      	adds	r7, #48	; 0x30
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	58024400 	.word	0x58024400
 8001768:	58021000 	.word	0x58021000
 800176c:	58020800 	.word	0x58020800
 8001770:	58021400 	.word	0x58021400
 8001774:	58021800 	.word	0x58021800
 8001778:	58020400 	.word	0x58020400
 800177c:	58020c00 	.word	0x58020c00

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>

0800178a <_ZN6PUSHERC1Ev>:
#define PUSHER_D_IN2_PIN GPIO_PIN_15

#define PUSHER_SPEED 33.6


class PUSHER{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9c1 2300 	strd	r2, r3, [r1]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <main_function>:

extern SCRIPT script_a;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim8;
extern TIM_HandleTypeDef htim23;
void main_function(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b090      	sub	sp, #64	; 0x40
 80017d4:	af00      	add	r7, sp, #0
	PUSHER pusher_A;
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ffd5 	bl	800178a <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 80017e0:	463b      	mov	r3, r7
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ffd1 	bl	800178a <_ZN6PUSHERC1Ev>
//	PUSHER pusher_C;
//	PUSHER pusher_D;
//	SCRIPT script_a;
	stm_setup();
 80017e8:	f000 f812 	bl	8001810 <stm_setup>
	script_a.scriptrun = 1;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <main_function+0x3c>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
	while(1){
		pusher_A.distence();
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f83c 	bl	8001874 <_ZN6PUSHER8distenceEv>
		pusher_B.distence();
 80017fc:	463b      	mov	r3, r7
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f838 	bl	8001874 <_ZN6PUSHER8distenceEv>
		script();
 8001804:	f000 f888 	bl	8001918 <_Z6scriptv>
		pusher_A.distence();
 8001808:	e7f3      	b.n	80017f2 <main_function+0x22>
 800180a:	bf00      	nop
 800180c:	240006e8 	.word	0x240006e8

08001810 <stm_setup>:
//						}
//
//		}
	}
}
void stm_setup(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8001814:	4806      	ldr	r0, [pc, #24]	; (8001830 <stm_setup+0x20>)
 8001816:	f001 ffe9 	bl	80037ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <stm_setup+0x24>)
 800181c:	f001 ffe6 	bl	80037ec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);//main Timer
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <stm_setup+0x28>)
 8001822:	f001 ffe3 	bl	80037ec <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 8001826:	f7ff f9db 	bl	8000be0 <_Z13DC_motor_initv>
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	240003f8 	.word	0x240003f8
 8001834:	24000574 	.word	0x24000574
 8001838:	24000658 	.word	0x24000658

0800183c <_Z13script_pusherdd>:
PUSHER pusher_A;
PUSHER pusher_B;
//PUSHER pusher_C;
//PUSHER pusher_D;

void script_pusher(double hight_a,double hight_b){
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	ed87 0b02 	vstr	d0, [r7, #8]
 8001846:	ed87 1b00 	vstr	d1, [r7]
	pusher_A.state = hight_a;
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <_Z13script_pusherdd+0x30>)
 800184c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001850:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_B.state = hight_b;
 8001854:	4906      	ldr	r1, [pc, #24]	; (8001870 <_Z13script_pusherdd+0x34>)
 8001856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800185a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	240006a8 	.word	0x240006a8
 8001870:	240006c8 	.word	0x240006c8

08001874 <_ZN6PUSHER8distenceEv>:

void PUSHER::distence(){
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_ZN6PUSHER8distenceEv+0x50>)
 800187e:	ed93 6b00 	vldr	d6, [r3]
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_ZN6PUSHER8distenceEv+0x50>)
 8001884:	ed93 7b02 	vldr	d7, [r3, #8]
 8001888:	ee36 7b47 	vsub.f64	d7, d6, d7
 800188c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001890:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <_ZN6PUSHER8distenceEv+0x50>)
 8001896:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <_ZN6PUSHER8distenceEv+0x54>)
 800189c:	ed93 6b00 	vldr	d6, [r3]
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <_ZN6PUSHER8distenceEv+0x54>)
 80018a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80018a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018aa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80018ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <_ZN6PUSHER8distenceEv+0x54>)
 80018b4:	ed83 7b04 	vstr	d7, [r3, #16]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	240006a8 	.word	0x240006a8
 80018c8:	240006c8 	.word	0x240006c8

080018cc <_Z41__static_initialization_and_destruction_0ii>:
//	if(pusher_D.d ==0){
//		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//
//	}
}
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10a      	bne.n	80018f2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d105      	bne.n	80018f2 <_Z41__static_initialization_and_destruction_0ii+0x26>
PUSHER pusher_A;
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80018e8:	f7ff ff4f 	bl	800178a <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80018ee:	f7ff ff4c 	bl	800178a <_ZN6PUSHERC1Ev>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	240006a8 	.word	0x240006a8
 8001900:	240006c8 	.word	0x240006c8

08001904 <_GLOBAL__sub_I_pusher_A>:
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
 8001908:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff ffdd 	bl	80018cc <_Z41__static_initialization_and_destruction_0ii>
 8001912:	bd80      	pop	{r7, pc}
 8001914:	0000      	movs	r0, r0
	...

08001918 <_Z6scriptv>:
SCRIPT script_a;
//extern PUSHER pusher_A;
//extern PUSHER pusher_B;
//extern PUSHER pusher_C;
//extern PUSHER pusher_D;
void script(){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	if(script_a.scriptrun == 1){
 800191c:	4b6e      	ldr	r3, [pc, #440]	; (8001ad8 <_Z6scriptv+0x1c0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f040 80d2 	bne.w	8001aca <_Z6scriptv+0x1b2>
		if(delay_start == 0){
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <_Z6scriptv+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d110      	bne.n	8001950 <_Z6scriptv+0x38>
			script_wheel(5,0,0);
 800192e:	ed9f 2b68 	vldr	d2, [pc, #416]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001932:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001936:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 800193a:	f000 f8d3 	bl	8001ae4 <_Z12script_wheelddd>
			script_pusher(5,5);
 800193e:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8001942:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 8001946:	f7ff ff79 	bl	800183c <_Z13script_pusherdd>
			delay_start = 1;
 800194a:	4b64      	ldr	r3, [pc, #400]	; (8001adc <_Z6scriptv+0x1c4>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]
		}
		if(delay == 250 && delay_start == 1){
 8001950:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <_Z6scriptv+0x1c8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2bfa      	cmp	r3, #250	; 0xfa
 8001956:	d10c      	bne.n	8001972 <_Z6scriptv+0x5a>
 8001958:	4b60      	ldr	r3, [pc, #384]	; (8001adc <_Z6scriptv+0x1c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d108      	bne.n	8001972 <_Z6scriptv+0x5a>
//			script_wheel(0,0,0);
			script_pusher(11,5);
 8001960:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8001964:	eeb2 0b06 	vmov.f64	d0, #38	; 0x41300000  11.0
 8001968:	f7ff ff68 	bl	800183c <_Z13script_pusherdd>
			delay_start = 2;
 800196c:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <_Z6scriptv+0x1c4>)
 800196e:	2202      	movs	r2, #2
 8001970:	601a      	str	r2, [r3, #0]
		}
		if(delay == 550 && delay_start == 2){
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <_Z6scriptv+0x1c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f240 2226 	movw	r2, #550	; 0x226
 800197a:	4293      	cmp	r3, r2
 800197c:	d10e      	bne.n	800199c <_Z6scriptv+0x84>
 800197e:	4b57      	ldr	r3, [pc, #348]	; (8001adc <_Z6scriptv+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d10a      	bne.n	800199c <_Z6scriptv+0x84>
			script_wheel(20,0,0);
 8001986:	ed9f 2b52 	vldr	d2, [pc, #328]	; 8001ad0 <_Z6scriptv+0x1b8>
 800198a:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8001ad0 <_Z6scriptv+0x1b8>
 800198e:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8001992:	f000 f8a7 	bl	8001ae4 <_Z12script_wheelddd>
			delay_start = 3;
 8001996:	4b51      	ldr	r3, [pc, #324]	; (8001adc <_Z6scriptv+0x1c4>)
 8001998:	2203      	movs	r2, #3
 800199a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 700 && delay_start == 3){
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <_Z6scriptv+0x1c8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80019a4:	d114      	bne.n	80019d0 <_Z6scriptv+0xb8>
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <_Z6scriptv+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d110      	bne.n	80019d0 <_Z6scriptv+0xb8>
			script_wheel(10,0,0);
 80019ae:	ed9f 2b48 	vldr	d2, [pc, #288]	; 8001ad0 <_Z6scriptv+0x1b8>
 80019b2:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8001ad0 <_Z6scriptv+0x1b8>
 80019b6:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80019ba:	f000 f893 	bl	8001ae4 <_Z12script_wheelddd>
			script_pusher(-2,5);
 80019be:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80019c2:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80019c6:	f7ff ff39 	bl	800183c <_Z13script_pusherdd>
			delay_start = 4;
 80019ca:	4b44      	ldr	r3, [pc, #272]	; (8001adc <_Z6scriptv+0x1c4>)
 80019cc:	2204      	movs	r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
		}
		if(delay == 900 && delay_start == 4){
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <_Z6scriptv+0x1c8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80019d8:	d114      	bne.n	8001a04 <_Z6scriptv+0xec>
 80019da:	4b40      	ldr	r3, [pc, #256]	; (8001adc <_Z6scriptv+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d110      	bne.n	8001a04 <_Z6scriptv+0xec>
			script_wheel(0,0,0);
 80019e2:	ed9f 2b3b 	vldr	d2, [pc, #236]	; 8001ad0 <_Z6scriptv+0x1b8>
 80019e6:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001ad0 <_Z6scriptv+0x1b8>
 80019ea:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8001ad0 <_Z6scriptv+0x1b8>
 80019ee:	f000 f879 	bl	8001ae4 <_Z12script_wheelddd>
			script_pusher(-2,10);
 80019f2:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 80019f6:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80019fa:	f7ff ff1f 	bl	800183c <_Z13script_pusherdd>
			delay_start = 5;
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <_Z6scriptv+0x1c4>)
 8001a00:	2205      	movs	r2, #5
 8001a02:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1050 && delay_start == 5){/*-50*/
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <_Z6scriptv+0x1c8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f240 421a 	movw	r2, #1050	; 0x41a
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d10e      	bne.n	8001a2e <_Z6scriptv+0x116>
 8001a10:	4b32      	ldr	r3, [pc, #200]	; (8001adc <_Z6scriptv+0x1c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d10a      	bne.n	8001a2e <_Z6scriptv+0x116>
//			script_pusher(-2,10);
			script_wheel(10,0,0);
 8001a18:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001a1c:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001a20:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001a24:	f000 f85e 	bl	8001ae4 <_Z12script_wheelddd>
			delay_start = 6;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <_Z6scriptv+0x1c4>)
 8001a2a:	2206      	movs	r2, #6
 8001a2c:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1250 && delay_start == 6){/*-50*/
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <_Z6scriptv+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d10c      	bne.n	8001a54 <_Z6scriptv+0x13c>
 8001a3a:	4b28      	ldr	r3, [pc, #160]	; (8001adc <_Z6scriptv+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d108      	bne.n	8001a54 <_Z6scriptv+0x13c>
			script_pusher(10,0);
 8001a42:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001a46:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001a4a:	f7ff fef7 	bl	800183c <_Z13script_pusherdd>
			delay_start = 7;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <_Z6scriptv+0x1c4>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
//		if(delay == 1700 && delay_start == 6){
//			script_wheel(0,0,0);
//			script_pusher(10,0);
//			delay_start = 7;
//		}
		if(delay == 1800 && delay_start == 7){
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <_Z6scriptv+0x1c8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001a5c:	d114      	bne.n	8001a88 <_Z6scriptv+0x170>
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <_Z6scriptv+0x1c4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b07      	cmp	r3, #7
 8001a64:	d110      	bne.n	8001a88 <_Z6scriptv+0x170>
			script_wheel(10,0,0);
 8001a66:	ed9f 2b1a 	vldr	d2, [pc, #104]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001a6a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001a6e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001a72:	f000 f837 	bl	8001ae4 <_Z12script_wheelddd>
			script_pusher(-2,10);
 8001a76:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 8001a7a:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8001a7e:	f7ff fedd 	bl	800183c <_Z13script_pusherdd>
			delay_start = 8;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <_Z6scriptv+0x1c4>)
 8001a84:	2208      	movs	r2, #8
 8001a86:	601a      	str	r2, [r3, #0]
//		}
//		if(delay == 2900 && delay_start == 9){
//			script_wheel(10,0,0);
//			delay_start = 10;
//		}
		if(delay == 2200 && delay_start == 8){
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <_Z6scriptv+0x1c8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f640 0298 	movw	r2, #2200	; 0x898
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d11a      	bne.n	8001aca <_Z6scriptv+0x1b2>
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_Z6scriptv+0x1c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d116      	bne.n	8001aca <_Z6scriptv+0x1b2>
			script_wheel(0,0,0);
 8001a9c:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001aa0:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001aa4:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001aa8:	f000 f81c 	bl	8001ae4 <_Z12script_wheelddd>
			script_pusher(-2,0);
 8001aac:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8001ad0 <_Z6scriptv+0x1b8>
 8001ab0:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8001ab4:	f7ff fec2 	bl	800183c <_Z13script_pusherdd>
			delay_start = 0;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_Z6scriptv+0x1c4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
			script_a.scriptrun = 0;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <_Z6scriptv+0x1c0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
			delay = 0;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <_Z6scriptv+0x1c8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
	...
 8001ad8:	240006e8 	.word	0x240006e8
 8001adc:	24000210 	.word	0x24000210
 8001ae0:	24000214 	.word	0x24000214

08001ae4 <_Z12script_wheelddd>:
void script_wheel(double s_Vx,double s_Vy,double s_w){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	ed87 0b04 	vstr	d0, [r7, #16]
 8001aee:	ed87 1b02 	vstr	d1, [r7, #8]
 8001af2:	ed87 2b00 	vstr	d2, [r7]
	Vx = s_Vx;
 8001af6:	490a      	ldr	r1, [pc, #40]	; (8001b20 <_Z12script_wheelddd+0x3c>)
 8001af8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001afc:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = s_Vy;
 8001b00:	4908      	ldr	r1, [pc, #32]	; (8001b24 <_Z12script_wheelddd+0x40>)
 8001b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b06:	e9c1 2300 	strd	r2, r3, [r1]
	W = s_w;
 8001b0a:	4907      	ldr	r1, [pc, #28]	; (8001b28 <_Z12script_wheelddd+0x44>)
 8001b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b10:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	240001f8 	.word	0x240001f8
 8001b24:	24000200 	.word	0x24000200
 8001b28:	24000208 	.word	0x24000208

08001b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_MspInit+0x30>)
 8001b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_MspInit+0x30>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_MspInit+0x30>)
 8001b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	58024400 	.word	0x58024400

08001b60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a43      	ldr	r2, [pc, #268]	; (8001c7c <HAL_TIM_Base_MspInit+0x11c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12f      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b78:	4a41      	ldr	r2, [pc, #260]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b82:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2100      	movs	r1, #0
 8001b94:	2018      	movs	r0, #24
 8001b96:	f000 fcc2 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001b9a:	2018      	movs	r0, #24
 8001b9c:	f000 fcd9 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2019      	movs	r0, #25
 8001ba6:	f000 fcba 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001baa:	2019      	movs	r0, #25
 8001bac:	f000 fcd1 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	201a      	movs	r0, #26
 8001bb6:	f000 fcb2 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001bba:	201a      	movs	r0, #26
 8001bbc:	f000 fcc9 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	201b      	movs	r0, #27
 8001bc6:	f000 fcaa 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bca:	201b      	movs	r0, #27
 8001bcc:	f000 fcc1 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001bd0:	e050      	b.n	8001c74 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <HAL_TIM_Base_MspInit+0x124>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d12f      	bne.n	8001c3c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001bde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be2:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	202b      	movs	r0, #43	; 0x2b
 8001c00:	f000 fc8d 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001c04:	202b      	movs	r0, #43	; 0x2b
 8001c06:	f000 fca4 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	202c      	movs	r0, #44	; 0x2c
 8001c10:	f000 fc85 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c14:	202c      	movs	r0, #44	; 0x2c
 8001c16:	f000 fc9c 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	202d      	movs	r0, #45	; 0x2d
 8001c20:	f000 fc7d 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c24:	202d      	movs	r0, #45	; 0x2d
 8001c26:	f000 fc94 	bl	8002552 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	202e      	movs	r0, #46	; 0x2e
 8001c30:	f000 fc75 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c34:	202e      	movs	r0, #46	; 0x2e
 8001c36:	f000 fc8c 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8001c3a:	e01b      	b.n	8001c74 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM23)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_TIM_Base_MspInit+0x128>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d116      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001c48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c4c:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c52:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_TIM_Base_MspInit+0x120>)
 8001c58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	20a1      	movs	r0, #161	; 0xa1
 8001c6a:	f000 fc58 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8001c6e:	20a1      	movs	r0, #161	; 0xa1
 8001c70:	f000 fc6f 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 8001c74:	bf00      	nop
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	58024400 	.word	0x58024400
 8001c84:	40010400 	.word	0x40010400
 8001c88:	4000e000 	.word	0x4000e000

08001c8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b090      	sub	sp, #64	; 0x40
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d14e      	bne.n	8001d4c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cae:	4b77      	ldr	r3, [pc, #476]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cb4:	4a75      	ldr	r2, [pc, #468]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	4a66      	ldr	r2, [pc, #408]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cfa:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	623b      	str	r3, [r7, #32]
 8001d06:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d22:	4619      	mov	r1, r3
 8001d24:	485a      	ldr	r0, [pc, #360]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x204>)
 8001d26:	f000 fc2f 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d42:	4619      	mov	r1, r3
 8001d44:	4853      	ldr	r0, [pc, #332]	; (8001e94 <HAL_TIM_Encoder_MspInit+0x208>)
 8001d46:	f000 fc1f 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d4a:	e09b      	b.n	8001e84 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a51      	ldr	r2, [pc, #324]	; (8001e98 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12e      	bne.n	8001db4 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d56:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d5c:	4a4b      	ldr	r2, [pc, #300]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d74:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7a:	4a44      	ldr	r2, [pc, #272]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d84:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d92:	2330      	movs	r3, #48	; 0x30
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da2:	2302      	movs	r3, #2
 8001da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001daa:	4619      	mov	r1, r3
 8001dac:	4839      	ldr	r0, [pc, #228]	; (8001e94 <HAL_TIM_Encoder_MspInit+0x208>)
 8001dae:	f000 fbeb 	bl	8002588 <HAL_GPIO_Init>
}
 8001db2:	e067      	b.n	8001e84 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a38      	ldr	r2, [pc, #224]	; (8001e9c <HAL_TIM_Encoder_MspInit+0x210>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12f      	bne.n	8001e1e <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dc4:	4a31      	ldr	r2, [pc, #196]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dce:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de2:	4a2a      	ldr	r2, [pc, #168]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001dfa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e14:	4619      	mov	r1, r3
 8001e16:	4822      	ldr	r0, [pc, #136]	; (8001ea0 <HAL_TIM_Encoder_MspInit+0x214>)
 8001e18:	f000 fbb6 	bl	8002588 <HAL_GPIO_Init>
}
 8001e1c:	e032      	b.n	8001e84 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <HAL_TIM_Encoder_MspInit+0x218>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d12d      	bne.n	8001e84 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_TIM_Encoder_MspInit+0x200>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e64:	2303      	movs	r3, #3
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001e74:	2302      	movs	r3, #2
 8001e76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <HAL_TIM_Encoder_MspInit+0x204>)
 8001e80:	f000 fb82 	bl	8002588 <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3740      	adds	r7, #64	; 0x40
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	58024400 	.word	0x58024400
 8001e90:	58020000 	.word	0x58020000
 8001e94:	58020400 	.word	0x58020400
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	58020c00 	.word	0x58020c00
 8001ea4:	40000c00 	.word	0x40000c00

08001ea8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <HAL_TIM_PWM_MspInit+0x74>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d117      	bne.n	8001eea <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_TIM_PWM_MspInit+0x78>)
 8001ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec0:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <HAL_TIM_PWM_MspInit+0x78>)
 8001ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_TIM_PWM_MspInit+0x78>)
 8001ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	202b      	movs	r0, #43	; 0x2b
 8001ede:	f000 fb1e 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ee2:	202b      	movs	r0, #43	; 0x2b
 8001ee4:	f000 fb35 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001ee8:	e013      	b.n	8001f12 <HAL_TIM_PWM_MspInit+0x6a>
  else if(htim_pwm->Instance==TIM15)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a0d      	ldr	r2, [pc, #52]	; (8001f24 <HAL_TIM_PWM_MspInit+0x7c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d10e      	bne.n	8001f12 <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_TIM_PWM_MspInit+0x78>)
 8001ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_TIM_PWM_MspInit+0x78>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_TIM_PWM_MspInit+0x78>)
 8001f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40001800 	.word	0x40001800
 8001f20:	58024400 	.word	0x58024400
 8001f24:	40014000 	.word	0x40014000

08001f28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <HAL_TIM_MspPostInit+0xb4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d120      	bne.n	8001f8c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_TIM_MspPostInit+0xb8>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f50:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_TIM_MspPostInit+0xb8>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f5a:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_TIM_MspPostInit+0xb8>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <HAL_TIM_MspPostInit+0xbc>)
 8001f86:	f000 faff 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001f8a:	e023      	b.n	8001fd4 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <HAL_TIM_MspPostInit+0xc0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d11e      	bne.n	8001fd4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_TIM_MspPostInit+0xb8>)
 8001f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9c:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_TIM_MspPostInit+0xb8>)
 8001f9e:	f043 0310 	orr.w	r3, r3, #16
 8001fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_TIM_MspPostInit+0xb8>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001fb4:	2360      	movs	r3, #96	; 0x60
 8001fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4807      	ldr	r0, [pc, #28]	; (8001fec <HAL_TIM_MspPostInit+0xc4>)
 8001fd0:	f000 fada 	bl	8002588 <HAL_GPIO_Init>
}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40001800 	.word	0x40001800
 8001fe0:	58024400 	.word	0x58024400
 8001fe4:	58020400 	.word	0x58020400
 8001fe8:	40014000 	.word	0x40014000
 8001fec:	58021000 	.word	0x58021000

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <MemManage_Handler+0x4>

08002002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <BusFault_Handler+0x4>

08002008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <UsageFault_Handler+0x4>

0800200e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203c:	f000 f974 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIM1_BRK_IRQHandler+0x10>)
 800204a:	f001 ff1d 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	240003f8 	.word	0x240003f8

08002058 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <TIM1_UP_IRQHandler+0x10>)
 800205e:	f001 ff13 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	240003f8 	.word	0x240003f8

0800206c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002072:	f001 ff09 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	240003f8 	.word	0x240003f8

08002080 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <TIM1_CC_IRQHandler+0x10>)
 8002086:	f001 feff 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	240003f8 	.word	0x240003f8

08002094 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800209a:	f001 fef5 	bl	8003e88 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800209e:	4803      	ldr	r0, [pc, #12]	; (80020ac <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80020a0:	f001 fef2 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	24000574 	.word	0x24000574
 80020ac:	240005c0 	.word	0x240005c0

080020b0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80020b6:	f001 fee7 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	24000574 	.word	0x24000574

080020c4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80020ca:	f001 fedd 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	24000574 	.word	0x24000574

080020d8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <TIM8_CC_IRQHandler+0x10>)
 80020de:	f001 fed3 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	24000574 	.word	0x24000574

080020ec <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM23_IRQHandler+0x10>)
 80020f2:	f001 fec9 	bl	8003e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	24000658 	.word	0x24000658

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <SystemInit+0xd0>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	4a31      	ldr	r2, [pc, #196]	; (80021d0 <SystemInit+0xd0>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002114:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <SystemInit+0xd4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	2b06      	cmp	r3, #6
 800211e:	d807      	bhi.n	8002130 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002120:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <SystemInit+0xd4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 030f 	bic.w	r3, r3, #15
 8002128:	4a2a      	ldr	r2, [pc, #168]	; (80021d4 <SystemInit+0xd4>)
 800212a:	f043 0307 	orr.w	r3, r3, #7
 800212e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <SystemInit+0xd8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a28      	ldr	r2, [pc, #160]	; (80021d8 <SystemInit+0xd8>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <SystemInit+0xd8>)
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <SystemInit+0xd8>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4924      	ldr	r1, [pc, #144]	; (80021d8 <SystemInit+0xd8>)
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <SystemInit+0xdc>)
 800214a:	4013      	ands	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <SystemInit+0xd4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <SystemInit+0xd4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 030f 	bic.w	r3, r3, #15
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <SystemInit+0xd4>)
 8002164:	f043 0307 	orr.w	r3, r3, #7
 8002168:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <SystemInit+0xd8>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <SystemInit+0xd8>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <SystemInit+0xd8>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <SystemInit+0xd8>)
 800217e:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <SystemInit+0xe0>)
 8002180:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <SystemInit+0xd8>)
 8002184:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <SystemInit+0xe4>)
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <SystemInit+0xd8>)
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <SystemInit+0xe8>)
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <SystemInit+0xd8>)
 8002190:	2200      	movs	r2, #0
 8002192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <SystemInit+0xd8>)
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <SystemInit+0xe8>)
 8002198:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <SystemInit+0xd8>)
 800219c:	2200      	movs	r2, #0
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <SystemInit+0xd8>)
 80021a2:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <SystemInit+0xe8>)
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80021a6:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <SystemInit+0xd8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <SystemInit+0xd8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <SystemInit+0xd8>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <SystemInit+0xd8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <SystemInit+0xec>)
 80021c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80021c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00
 80021d4:	52002000 	.word	0x52002000
 80021d8:	58024400 	.word	0x58024400
 80021dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80021e0:	02020200 	.word	0x02020200
 80021e4:	01ff0000 	.word	0x01ff0000
 80021e8:	01010280 	.word	0x01010280
 80021ec:	52004000 	.word	0x52004000

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002228 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021f4:	f7ff ff84 	bl	8002100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	; (800222c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	; (8002230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	; (800223c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221e:	f002 ff21 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7fe fe01 	bl	8000e28 <main>
  bx  lr
 8002226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002228:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800222c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002230:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8002234:	080050f4 	.word	0x080050f4
  ldr r2, =_sbss
 8002238:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800223c:	240006f0 	.word	0x240006f0

08002240 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC3_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224a:	2003      	movs	r0, #3
 800224c:	f000 f95c 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002250:	f001 f8fa 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_Init+0x68>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	4913      	ldr	r1, [pc, #76]	; (80022b0 <HAL_Init+0x6c>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_Init+0x68>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_Init+0x6c>)
 8002278:	5cd3      	ldrb	r3, [r2, r3]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
 8002284:	4a0b      	ldr	r2, [pc, #44]	; (80022b4 <HAL_Init+0x70>)
 8002286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002288:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_Init+0x74>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228e:	200f      	movs	r0, #15
 8002290:	f000 f814 	bl	80022bc <HAL_InitTick>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e002      	b.n	80022a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800229e:	f7ff fc45 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	58024400 	.word	0x58024400
 80022b0:	080050d4 	.word	0x080050d4
 80022b4:	240001cc 	.word	0x240001cc
 80022b8:	240001c8 	.word	0x240001c8

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_InitTick+0x60>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e021      	b.n	8002314 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_InitTick+0x64>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_InitTick+0x60>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022de:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f941 	bl	800256e <HAL_SYSTICK_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00e      	b.n	8002314 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d80a      	bhi.n	8002312 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f000 f90b 	bl	800251e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <HAL_InitTick+0x68>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	240001d4 	.word	0x240001d4
 8002320:	240001c8 	.word	0x240001c8
 8002324:	240001d0 	.word	0x240001d0

08002328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x20>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_IncTick+0x24>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4413      	add	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_IncTick+0x24>)
 800233a:	6013      	str	r3, [r2, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	240001d4 	.word	0x240001d4
 800234c:	240006ec 	.word	0x240006ec

08002350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_GetTick+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	240006ec 	.word	0x240006ec

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <__NVIC_SetPriorityGrouping+0x40>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	4313      	orrs	r3, r2
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00
 80023ac:	05fa0000 	.word	0x05fa0000

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db0b      	blt.n	80023f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <__NVIC_EnableIRQ+0x38>)
 80023e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d4:	d301      	bcc.n	80024da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00f      	b.n	80024fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <SysTick_Config+0x40>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e2:	210f      	movs	r1, #15
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f7ff ff8e 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <SysTick_Config+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <SysTick_Config+0x40>)
 80024f4:	2207      	movs	r2, #7
 80024f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000e010 	.word	0xe000e010

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff29 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff40 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff90 	bl	800245c <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5f 	bl	8002408 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff33 	bl	80023cc <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa4 	bl	80024c4 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002596:	4b86      	ldr	r3, [pc, #536]	; (80027b0 <HAL_GPIO_Init+0x228>)
 8002598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800259a:	e18c      	b.n	80028b6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 817e 	beq.w	80028b0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d005      	beq.n	80025cc <HAL_GPIO_Init+0x44>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d130      	bne.n	800262e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002602:	2201      	movs	r2, #1
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 0201 	and.w	r2, r3, #1
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b03      	cmp	r3, #3
 8002638:	d017      	beq.n	800266a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d123      	bne.n	80026be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	220f      	movs	r2, #15
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	69b9      	ldr	r1, [r7, #24]
 80026ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0203 	and.w	r2, r3, #3
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80d8 	beq.w	80028b0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002700:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_GPIO_Init+0x22c>)
 8002702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002706:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <HAL_GPIO_Init+0x22c>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_GPIO_Init+0x22c>)
 8002712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271e:	4a26      	ldr	r2, [pc, #152]	; (80027b8 <HAL_GPIO_Init+0x230>)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	220f      	movs	r2, #15
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_GPIO_Init+0x234>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d04a      	beq.n	80027e0 <HAL_GPIO_Init+0x258>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <HAL_GPIO_Init+0x238>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <HAL_GPIO_Init+0x222>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1b      	ldr	r2, [pc, #108]	; (80027c4 <HAL_GPIO_Init+0x23c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d025      	beq.n	80027a6 <HAL_GPIO_Init+0x21e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <HAL_GPIO_Init+0x240>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01f      	beq.n	80027a2 <HAL_GPIO_Init+0x21a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_GPIO_Init+0x244>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d019      	beq.n	800279e <HAL_GPIO_Init+0x216>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_GPIO_Init+0x248>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_GPIO_Init+0x212>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a17      	ldr	r2, [pc, #92]	; (80027d4 <HAL_GPIO_Init+0x24c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00d      	beq.n	8002796 <HAL_GPIO_Init+0x20e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_GPIO_Init+0x250>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <HAL_GPIO_Init+0x20a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a15      	ldr	r2, [pc, #84]	; (80027dc <HAL_GPIO_Init+0x254>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_GPIO_Init+0x206>
 800278a:	2309      	movs	r3, #9
 800278c:	e029      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 800278e:	230a      	movs	r3, #10
 8002790:	e027      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 8002792:	2307      	movs	r3, #7
 8002794:	e025      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 8002796:	2306      	movs	r3, #6
 8002798:	e023      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 800279a:	2305      	movs	r3, #5
 800279c:	e021      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 800279e:	2304      	movs	r3, #4
 80027a0:	e01f      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e01d      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e01b      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e019      	b.n	80027e2 <HAL_GPIO_Init+0x25a>
 80027ae:	bf00      	nop
 80027b0:	58000080 	.word	0x58000080
 80027b4:	58024400 	.word	0x58024400
 80027b8:	58000400 	.word	0x58000400
 80027bc:	58020000 	.word	0x58020000
 80027c0:	58020400 	.word	0x58020400
 80027c4:	58020800 	.word	0x58020800
 80027c8:	58020c00 	.word	0x58020c00
 80027cc:	58021000 	.word	0x58021000
 80027d0:	58021400 	.word	0x58021400
 80027d4:	58021800 	.word	0x58021800
 80027d8:	58021c00 	.word	0x58021c00
 80027dc:	58022400 	.word	0x58022400
 80027e0:	2300      	movs	r3, #0
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f002 0203 	and.w	r2, r2, #3
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	4093      	lsls	r3, r2
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f2:	4938      	ldr	r1, [pc, #224]	; (80028d4 <HAL_GPIO_Init+0x34c>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002826:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	3301      	adds	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f ae6b 	bne.w	800259c <HAL_GPIO_Init+0x14>
  }
}
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
 80028ca:	3724      	adds	r7, #36	; 0x24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	58000400 	.word	0x58000400

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028f4:	e003      	b.n	80028fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	619a      	str	r2, [r3, #24]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_PWREx_ConfigSupply+0x70>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d00a      	beq.n	8002936 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002920:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_PWREx_ConfigSupply+0x70>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d001      	beq.n	8002932 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e01f      	b.n	8002972 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e01d      	b.n	8002972 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_PWREx_ConfigSupply+0x70>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	490f      	ldr	r1, [pc, #60]	; (800297c <HAL_PWREx_ConfigSupply+0x70>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4313      	orrs	r3, r2
 8002944:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002946:	f7ff fd03 	bl	8002350 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800294c:	e009      	b.n	8002962 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800294e:	f7ff fcff 	bl	8002350 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800295c:	d901      	bls.n	8002962 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e007      	b.n	8002972 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_PWREx_ConfigSupply+0x70>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296e:	d1ee      	bne.n	800294e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	58024800 	.word	0x58024800

08002980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e39d      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8087 	beq.w	8002aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a0:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029aa:	4b86      	ldr	r3, [pc, #536]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d007      	beq.n	80029c6 <HAL_RCC_OscConfig+0x46>
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2b18      	cmp	r3, #24
 80029ba:	d110      	bne.n	80029de <HAL_RCC_OscConfig+0x5e>
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d10b      	bne.n	80029de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d06c      	beq.n	8002aac <HAL_RCC_OscConfig+0x12c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d168      	bne.n	8002aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e377      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x76>
 80029e8:	4b76      	ldr	r3, [pc, #472]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a75      	ldr	r2, [pc, #468]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 80029ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e02e      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x98>
 80029fe:	4b71      	ldr	r3, [pc, #452]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a70      	ldr	r2, [pc, #448]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6d      	ldr	r2, [pc, #436]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e01d      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0xbc>
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a67      	ldr	r2, [pc, #412]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a64      	ldr	r2, [pc, #400]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0xd4>
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a60      	ldr	r2, [pc, #384]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5d      	ldr	r2, [pc, #372]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fc78 	bl	8002350 <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a64:	f7ff fc74 	bl	8002350 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e32b      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a76:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0xe4>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7ff fc64 	bl	8002350 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7ff fc60 	bl	8002350 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e317      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a9e:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x10c>
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 808c 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abc:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac6:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x162>
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	2b18      	cmp	r3, #24
 8002ad6:	d137      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1c8>
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d132      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x17a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e2e9      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002afa:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0219 	bic.w	r2, r3, #25
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	492f      	ldr	r1, [pc, #188]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b0c:	f7ff fc20 	bl	8002350 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b14:	f7ff fc1c 	bl	8002350 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e2d3      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	4920      	ldr	r1, [pc, #128]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b46:	e045      	b.n	8002bd4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d026      	beq.n	8002b9e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 0219 	bic.w	r2, r3, #25
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4919      	ldr	r1, [pc, #100]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7ff fbf5 	bl	8002350 <HAL_GetTick>
 8002b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7ff fbf1 	bl	8002350 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e2a8      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	061b      	lsls	r3, r3, #24
 8002b96:	490b      	ldr	r1, [pc, #44]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
 8002b9c:	e01a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_RCC_OscConfig+0x244>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7ff fbd1 	bl	8002350 <HAL_GetTick>
 8002bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7ff fbcd 	bl	8002350 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d903      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e284      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
 8002bc4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bc8:	4b96      	ldr	r3, [pc, #600]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d06a      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be0:	4b90      	ldr	r3, [pc, #576]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002be8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bea:	4b8e      	ldr	r3, [pc, #568]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d007      	beq.n	8002c06 <HAL_RCC_OscConfig+0x286>
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b18      	cmp	r3, #24
 8002bfa:	d11b      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2b4>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d116      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c06:	4b87      	ldr	r3, [pc, #540]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_RCC_OscConfig+0x29e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b80      	cmp	r3, #128	; 0x80
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e257      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c1e:	4b81      	ldr	r3, [pc, #516]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	061b      	lsls	r3, r3, #24
 8002c2c:	497d      	ldr	r1, [pc, #500]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c32:	e040      	b.n	8002cb6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d023      	beq.n	8002c84 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c3c:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a78      	ldr	r2, [pc, #480]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7ff fb82 	bl	8002350 <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c50:	f7ff fb7e 	bl	8002350 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e235      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c62:	4b70      	ldr	r3, [pc, #448]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c6e:	4b6d      	ldr	r3, [pc, #436]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	4969      	ldr	r1, [pc, #420]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]
 8002c82:	e018      	b.n	8002cb6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c84:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a66      	ldr	r2, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7ff fb5e 	bl	8002350 <HAL_GetTick>
 8002c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c98:	f7ff fb5a 	bl	8002350 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e211      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002caa:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d036      	beq.n	8002d30 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d019      	beq.n	8002cfe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cce:	4a55      	ldr	r2, [pc, #340]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7ff fb3b 	bl	8002350 <HAL_GetTick>
 8002cda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cde:	f7ff fb37 	bl	8002350 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e1ee      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x35e>
 8002cfc:	e018      	b.n	8002d30 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7ff fb21 	bl	8002350 <HAL_GetTick>
 8002d0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d12:	f7ff fb1d 	bl	8002350 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e1d4      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d24:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d036      	beq.n	8002daa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d019      	beq.n	8002d78 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d44:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d50:	f7ff fafe 	bl	8002350 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d58:	f7ff fafa 	bl	8002350 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1b1      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x3d8>
 8002d76:	e018      	b.n	8002daa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d78:	4b2a      	ldr	r3, [pc, #168]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d84:	f7ff fae4 	bl	8002350 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d8c:	f7ff fae0 	bl	8002350 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e197      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8086 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <HAL_RCC_OscConfig+0x4a8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <HAL_RCC_OscConfig+0x4a8>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc4:	f7ff fac4 	bl	8002350 <HAL_GetTick>
 8002dc8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7ff fac0 	bl	8002350 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e177      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_OscConfig+0x4a8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d106      	bne.n	8002e00 <HAL_RCC_OscConfig+0x480>
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfe:	e032      	b.n	8002e66 <HAL_RCC_OscConfig+0x4e6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d111      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4ac>
 8002e08:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	6713      	str	r3, [r2, #112]	; 0x70
 8002e14:	4b03      	ldr	r3, [pc, #12]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	4a02      	ldr	r2, [pc, #8]	; (8002e24 <HAL_RCC_OscConfig+0x4a4>)
 8002e1a:	f023 0304 	bic.w	r3, r3, #4
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e20:	e021      	b.n	8002e66 <HAL_RCC_OscConfig+0x4e6>
 8002e22:	bf00      	nop
 8002e24:	58024400 	.word	0x58024400
 8002e28:	58024800 	.word	0x58024800
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCC_OscConfig+0x4ce>
 8002e34:	4b83      	ldr	r3, [pc, #524]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a82      	ldr	r2, [pc, #520]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	4b80      	ldr	r3, [pc, #512]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a7f      	ldr	r2, [pc, #508]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e00b      	b.n	8002e66 <HAL_RCC_OscConfig+0x4e6>
 8002e4e:	4b7d      	ldr	r3, [pc, #500]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a7c      	ldr	r2, [pc, #496]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	4b7a      	ldr	r3, [pc, #488]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a79      	ldr	r2, [pc, #484]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e60:	f023 0304 	bic.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d015      	beq.n	8002e9a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7ff fa6f 	bl	8002350 <HAL_GetTick>
 8002e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7ff fa6b 	bl	8002350 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e120      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e8c:	4b6d      	ldr	r3, [pc, #436]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4f6>
 8002e98:	e014      	b.n	8002ec4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7ff fa59 	bl	8002350 <HAL_GetTick>
 8002e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7ff fa55 	bl	8002350 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e10a      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eb8:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80ff 	beq.w	80030cc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed6:	2b18      	cmp	r3, #24
 8002ed8:	f000 80ba 	beq.w	8003050 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	f040 8095 	bne.w	8003010 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b57      	ldr	r3, [pc, #348]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a56      	ldr	r2, [pc, #344]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7ff fa2d 	bl	8002350 <HAL_GetTick>
 8002ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efa:	f7ff fa29 	bl	8002350 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e0e0      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f0c:	4b4d      	ldr	r3, [pc, #308]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f18:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1c:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCC_OscConfig+0x6c8>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	4945      	ldr	r1, [pc, #276]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	628b      	str	r3, [r1, #40]	; 0x28
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	3b01      	subs	r3, #1
 8002f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	3b01      	subs	r3, #1
 8002f42:	025b      	lsls	r3, r3, #9
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	061b      	lsls	r3, r3, #24
 8002f5e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f62:	4938      	ldr	r1, [pc, #224]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	4a35      	ldr	r2, [pc, #212]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f74:	4b33      	ldr	r3, [pc, #204]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <HAL_RCC_OscConfig+0x6cc>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	4930      	ldr	r1, [pc, #192]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f88:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f023 020c 	bic.w	r2, r3, #12
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	492b      	ldr	r1, [pc, #172]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f023 0202 	bic.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	4927      	ldr	r1, [pc, #156]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	4a24      	ldr	r2, [pc, #144]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	4a21      	ldr	r2, [pc, #132]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8002fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7ff f9b2 	bl	8002350 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7ff f9ae 	bl	8002350 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e065      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x670>
 800300e:	e05d      	b.n	80030cc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8003016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7ff f998 	bl	8002350 <HAL_GetTick>
 8003020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7ff f994 	bl	8002350 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e04b      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_OscConfig+0x6c4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x6a4>
 8003042:	e043      	b.n	80030cc <HAL_RCC_OscConfig+0x74c>
 8003044:	58024400 	.word	0x58024400
 8003048:	fffffc0c 	.word	0xfffffc0c
 800304c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCC_OscConfig+0x758>)
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_RCC_OscConfig+0x758>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	d031      	beq.n	80030c8 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0203 	and.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d12a      	bne.n	80030c8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d122      	bne.n	80030c8 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d11a      	bne.n	80030c8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	0a5b      	lsrs	r3, r3, #9
 8003096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d111      	bne.n	80030c8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d108      	bne.n	80030c8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	0e1b      	lsrs	r3, r3, #24
 80030ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3730      	adds	r7, #48	; 0x30
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	58024400 	.word	0x58024400

080030dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e19c      	b.n	800342a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f0:	4b8a      	ldr	r3, [pc, #552]	; (800331c <HAL_RCC_ClockConfig+0x240>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d910      	bls.n	8003120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b87      	ldr	r3, [pc, #540]	; (800331c <HAL_RCC_ClockConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 020f 	bic.w	r2, r3, #15
 8003106:	4985      	ldr	r1, [pc, #532]	; (800331c <HAL_RCC_ClockConfig+0x240>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b83      	ldr	r3, [pc, #524]	; (800331c <HAL_RCC_ClockConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e184      	b.n	800342a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	4b7b      	ldr	r3, [pc, #492]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003138:	429a      	cmp	r2, r3
 800313a:	d908      	bls.n	800314e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800313c:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	4975      	ldr	r1, [pc, #468]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800314a:	4313      	orrs	r3, r2
 800314c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003166:	429a      	cmp	r2, r3
 8003168:	d908      	bls.n	800317c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800316a:	4b6d      	ldr	r3, [pc, #436]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	496a      	ldr	r1, [pc, #424]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	4b64      	ldr	r3, [pc, #400]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003194:	429a      	cmp	r2, r3
 8003196:	d908      	bls.n	80031aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003198:	4b61      	ldr	r3, [pc, #388]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	495e      	ldr	r1, [pc, #376]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d010      	beq.n	80031d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d908      	bls.n	80031d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031c6:	4b56      	ldr	r3, [pc, #344]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	4953      	ldr	r1, [pc, #332]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4b4d      	ldr	r3, [pc, #308]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d908      	bls.n	8003206 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f023 020f 	bic.w	r2, r3, #15
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4947      	ldr	r1, [pc, #284]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 8003202:	4313      	orrs	r3, r2
 8003204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d055      	beq.n	80032be <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003212:	4b43      	ldr	r3, [pc, #268]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	4940      	ldr	r1, [pc, #256]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 8003220:	4313      	orrs	r3, r2
 8003222:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b02      	cmp	r3, #2
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800322c:	4b3c      	ldr	r3, [pc, #240]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d121      	bne.n	800327c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0f6      	b.n	800342a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003244:	4b36      	ldr	r3, [pc, #216]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d115      	bne.n	800327c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0ea      	b.n	800342a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800325c:	4b30      	ldr	r3, [pc, #192]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0de      	b.n	800342a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800326c:	4b2c      	ldr	r3, [pc, #176]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0d6      	b.n	800342a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327c:	4b28      	ldr	r3, [pc, #160]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f023 0207 	bic.w	r2, r3, #7
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4925      	ldr	r1, [pc, #148]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 800328a:	4313      	orrs	r3, r2
 800328c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7ff f85f 	bl	8002350 <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003294:	e00a      	b.n	80032ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003296:	f7ff f85b 	bl	8002350 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0be      	b.n	800342a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d1eb      	bne.n	8003296 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d010      	beq.n	80032ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d208      	bcs.n	80032ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f023 020f 	bic.w	r2, r3, #15
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	490e      	ldr	r1, [pc, #56]	; (8003320 <HAL_RCC_ClockConfig+0x244>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_ClockConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d214      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_RCC_ClockConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 020f 	bic.w	r2, r3, #15
 8003302:	4906      	ldr	r1, [pc, #24]	; (800331c <HAL_RCC_ClockConfig+0x240>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_RCC_ClockConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e086      	b.n	800342a <HAL_RCC_ClockConfig+0x34e>
 800331c:	52002000 	.word	0x52002000
 8003320:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d010      	beq.n	8003352 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	4b3f      	ldr	r3, [pc, #252]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800333c:	429a      	cmp	r2, r3
 800333e:	d208      	bcs.n	8003352 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003340:	4b3c      	ldr	r3, [pc, #240]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	4939      	ldr	r1, [pc, #228]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 800334e:	4313      	orrs	r3, r2
 8003350:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	4b34      	ldr	r3, [pc, #208]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800336a:	429a      	cmp	r2, r3
 800336c:	d208      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	492e      	ldr	r1, [pc, #184]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 800337c:	4313      	orrs	r3, r2
 800337e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d010      	beq.n	80033ae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699a      	ldr	r2, [r3, #24]
 8003390:	4b28      	ldr	r3, [pc, #160]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003398:	429a      	cmp	r2, r3
 800339a:	d208      	bcs.n	80033ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800339c:	4b25      	ldr	r3, [pc, #148]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	4922      	ldr	r1, [pc, #136]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d010      	beq.n	80033dc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d208      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033ca:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4917      	ldr	r1, [pc, #92]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033dc:	f000 f834 	bl	8003448 <HAL_RCC_GetSysClockFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	4912      	ldr	r1, [pc, #72]	; (8003438 <HAL_RCC_ClockConfig+0x35c>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <HAL_RCC_ClockConfig+0x358>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <HAL_RCC_ClockConfig+0x35c>)
 8003404:	5cd3      	ldrb	r3, [r2, r3]
 8003406:	f003 031f 	and.w	r3, r3, #31
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x360>)
 8003412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003414:	4a0a      	ldr	r2, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x364>)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_RCC_ClockConfig+0x368>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe ff4c 	bl	80022bc <HAL_InitTick>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	58024400 	.word	0x58024400
 8003438:	080050d4 	.word	0x080050d4
 800343c:	240001cc 	.word	0x240001cc
 8003440:	240001c8 	.word	0x240001c8
 8003444:	240001d0 	.word	0x240001d0

08003448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800344e:	4bb3      	ldr	r3, [pc, #716]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003456:	2b18      	cmp	r3, #24
 8003458:	f200 8155 	bhi.w	8003706 <HAL_RCC_GetSysClockFreq+0x2be>
 800345c:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <HAL_RCC_GetSysClockFreq+0x1c>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	080034c9 	.word	0x080034c9
 8003468:	08003707 	.word	0x08003707
 800346c:	08003707 	.word	0x08003707
 8003470:	08003707 	.word	0x08003707
 8003474:	08003707 	.word	0x08003707
 8003478:	08003707 	.word	0x08003707
 800347c:	08003707 	.word	0x08003707
 8003480:	08003707 	.word	0x08003707
 8003484:	080034ef 	.word	0x080034ef
 8003488:	08003707 	.word	0x08003707
 800348c:	08003707 	.word	0x08003707
 8003490:	08003707 	.word	0x08003707
 8003494:	08003707 	.word	0x08003707
 8003498:	08003707 	.word	0x08003707
 800349c:	08003707 	.word	0x08003707
 80034a0:	08003707 	.word	0x08003707
 80034a4:	080034f5 	.word	0x080034f5
 80034a8:	08003707 	.word	0x08003707
 80034ac:	08003707 	.word	0x08003707
 80034b0:	08003707 	.word	0x08003707
 80034b4:	08003707 	.word	0x08003707
 80034b8:	08003707 	.word	0x08003707
 80034bc:	08003707 	.word	0x08003707
 80034c0:	08003707 	.word	0x08003707
 80034c4:	080034fb 	.word	0x080034fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034c8:	4b94      	ldr	r3, [pc, #592]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034d4:	4b91      	ldr	r3, [pc, #580]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	08db      	lsrs	r3, r3, #3
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	4a90      	ldr	r2, [pc, #576]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
 80034e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034e6:	e111      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034e8:	4b8d      	ldr	r3, [pc, #564]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034ea:	61bb      	str	r3, [r7, #24]
    break;
 80034ec:	e10e      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034ee:	4b8d      	ldr	r3, [pc, #564]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034f0:	61bb      	str	r3, [r7, #24]
    break;
 80034f2:	e10b      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034f4:	4b8c      	ldr	r3, [pc, #560]	; (8003728 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034f6:	61bb      	str	r3, [r7, #24]
    break;
 80034f8:	e108      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034fa:	4b88      	ldr	r3, [pc, #544]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003504:	4b85      	ldr	r3, [pc, #532]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003510:	4b82      	ldr	r3, [pc, #520]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800351a:	4b80      	ldr	r3, [pc, #512]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	08db      	lsrs	r3, r3, #3
 8003520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80e1 	beq.w	8003700 <HAL_RCC_GetSysClockFreq+0x2b8>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b02      	cmp	r3, #2
 8003542:	f000 8083 	beq.w	800364c <HAL_RCC_GetSysClockFreq+0x204>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b02      	cmp	r3, #2
 800354a:	f200 80a1 	bhi.w	8003690 <HAL_RCC_GetSysClockFreq+0x248>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x114>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d056      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x1c0>
 800355a:	e099      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800355c:	4b6f      	ldr	r3, [pc, #444]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02d      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003568:	4b6c      	ldr	r3, [pc, #432]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	08db      	lsrs	r3, r3, #3
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	4a6b      	ldr	r2, [pc, #428]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003592:	4b62      	ldr	r3, [pc, #392]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800372c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035c2:	e087      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2e8>
 80035d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800372c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003606:	e065      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003612:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003734 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361a:	4b40      	ldr	r3, [pc, #256]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362a:	ed97 6a02 	vldr	s12, [r7, #8]
 800362e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800372c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364a:	e043      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003656:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003738 <HAL_RCC_GetSysClockFreq+0x2f0>
 800365a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365e:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003672:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800372c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800368e:	e021      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003734 <HAL_RCC_GetSysClockFreq+0x2ec>
 800369e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a2:	4b1e      	ldr	r3, [pc, #120]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800372c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	0a5b      	lsrs	r3, r3, #9
 80036da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036de:	3301      	adds	r3, #1
 80036e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80036f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f8:	ee17 3a90 	vmov	r3, s15
 80036fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036fe:	e005      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
    break;
 8003704:	e002      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003706:	4b07      	ldr	r3, [pc, #28]	; (8003724 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003708:	61bb      	str	r3, [r7, #24]
    break;
 800370a:	bf00      	nop
  }

  return sysclockfreq;
 800370c:	69bb      	ldr	r3, [r7, #24]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	58024400 	.word	0x58024400
 8003720:	03d09000 	.word	0x03d09000
 8003724:	003d0900 	.word	0x003d0900
 8003728:	017d7840 	.word	0x017d7840
 800372c:	46000000 	.word	0x46000000
 8003730:	4c742400 	.word	0x4c742400
 8003734:	4a742400 	.word	0x4a742400
 8003738:	4bbebc20 	.word	0x4bbebc20

0800373c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e049      	b.n	80037e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fe f9fc 	bl	8001b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 fed8 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d001      	beq.n	8003804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e05e      	b.n	80038c2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d02c      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382e:	d027      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a27      	ldr	r2, [pc, #156]	; (80038d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d022      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a26      	ldr	r2, [pc, #152]	; (80038d8 <HAL_TIM_Base_Start_IT+0xec>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d01d      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a24      	ldr	r2, [pc, #144]	; (80038dc <HAL_TIM_Base_Start_IT+0xf0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a23      	ldr	r2, [pc, #140]	; (80038e0 <HAL_TIM_Base_Start_IT+0xf4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <HAL_TIM_Base_Start_IT+0xf8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a20      	ldr	r2, [pc, #128]	; (80038e8 <HAL_TIM_Base_Start_IT+0xfc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <HAL_TIM_Base_Start_IT+0x100>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0x94>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <HAL_TIM_Base_Start_IT+0x104>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d115      	bne.n	80038ac <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <HAL_TIM_Base_Start_IT+0x108>)
 8003888:	4013      	ands	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d015      	beq.n	80038be <HAL_TIM_Base_Start_IT+0xd2>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d011      	beq.n	80038be <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038aa:	e008      	b.n	80038be <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	e000      	b.n	80038c0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40000400 	.word	0x40000400
 80038d8:	40000800 	.word	0x40000800
 80038dc:	40000c00 	.word	0x40000c00
 80038e0:	40010400 	.word	0x40010400
 80038e4:	40001800 	.word	0x40001800
 80038e8:	40014000 	.word	0x40014000
 80038ec:	4000e000 	.word	0x4000e000
 80038f0:	4000e400 	.word	0x4000e400
 80038f4:	00010007 	.word	0x00010007

080038f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e049      	b.n	800399e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe fac2 	bl	8001ea8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f000 fdfa 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <HAL_TIM_PWM_Start+0x24>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e03c      	b.n	8003a46 <HAL_TIM_PWM_Start+0x9e>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d109      	bne.n	80039e6 <HAL_TIM_PWM_Start+0x3e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	e02f      	b.n	8003a46 <HAL_TIM_PWM_Start+0x9e>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d109      	bne.n	8003a00 <HAL_TIM_PWM_Start+0x58>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	bf14      	ite	ne
 80039f8:	2301      	movne	r3, #1
 80039fa:	2300      	moveq	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	e022      	b.n	8003a46 <HAL_TIM_PWM_Start+0x9e>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d109      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x72>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e015      	b.n	8003a46 <HAL_TIM_PWM_Start+0x9e>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d109      	bne.n	8003a34 <HAL_TIM_PWM_Start+0x8c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	e008      	b.n	8003a46 <HAL_TIM_PWM_Start+0x9e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e0ab      	b.n	8003ba6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d104      	bne.n	8003a5e <HAL_TIM_PWM_Start+0xb6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a5c:	e023      	b.n	8003aa6 <HAL_TIM_PWM_Start+0xfe>
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d104      	bne.n	8003a6e <HAL_TIM_PWM_Start+0xc6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a6c:	e01b      	b.n	8003aa6 <HAL_TIM_PWM_Start+0xfe>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d104      	bne.n	8003a7e <HAL_TIM_PWM_Start+0xd6>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7c:	e013      	b.n	8003aa6 <HAL_TIM_PWM_Start+0xfe>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d104      	bne.n	8003a8e <HAL_TIM_PWM_Start+0xe6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a8c:	e00b      	b.n	8003aa6 <HAL_TIM_PWM_Start+0xfe>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b10      	cmp	r3, #16
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_PWM_Start+0xf6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a9c:	e003      	b.n	8003aa6 <HAL_TIM_PWM_Start+0xfe>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	6839      	ldr	r1, [r7, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 f958 	bl	8004d64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3d      	ldr	r2, [pc, #244]	; (8003bb0 <HAL_TIM_PWM_Start+0x208>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x13e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a3c      	ldr	r2, [pc, #240]	; (8003bb4 <HAL_TIM_PWM_Start+0x20c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x13e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a3a      	ldr	r2, [pc, #232]	; (8003bb8 <HAL_TIM_PWM_Start+0x210>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d009      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x13e>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a39      	ldr	r2, [pc, #228]	; (8003bbc <HAL_TIM_PWM_Start+0x214>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d004      	beq.n	8003ae6 <HAL_TIM_PWM_Start+0x13e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a37      	ldr	r2, [pc, #220]	; (8003bc0 <HAL_TIM_PWM_Start+0x218>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_PWM_Start+0x142>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_TIM_PWM_Start+0x144>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2a      	ldr	r2, [pc, #168]	; (8003bb0 <HAL_TIM_PWM_Start+0x208>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d02c      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d027      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <HAL_TIM_PWM_Start+0x21c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d022      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_TIM_PWM_Start+0x220>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d01d      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_TIM_PWM_Start+0x224>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_TIM_PWM_Start+0x20c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a23      	ldr	r2, [pc, #140]	; (8003bd0 <HAL_TIM_PWM_Start+0x228>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <HAL_TIM_PWM_Start+0x210>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <HAL_TIM_PWM_Start+0x22c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIM_PWM_Start+0x1bc>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <HAL_TIM_PWM_Start+0x230>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d115      	bne.n	8003b90 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <HAL_TIM_PWM_Start+0x234>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d015      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x1fa>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b7c:	d011      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8e:	e008      	b.n	8003ba2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e000      	b.n	8003ba4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40010000 	.word	0x40010000
 8003bb4:	40010400 	.word	0x40010400
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40000800 	.word	0x40000800
 8003bcc:	40000c00 	.word	0x40000c00
 8003bd0:	40001800 	.word	0x40001800
 8003bd4:	4000e000 	.word	0x4000e000
 8003bd8:	4000e400 	.word	0x4000e400
 8003bdc:	00010007 	.word	0x00010007

08003be0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e08f      	b.n	8003d14 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7fe f83f 	bl	8001c8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <HAL_TIM_Encoder_Init+0x13c>)
 8003c22:	400b      	ands	r3, r1
 8003c24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f000 fc7d 	bl	8004530 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4b31      	ldr	r3, [pc, #196]	; (8003d20 <HAL_TIM_Encoder_Init+0x140>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	021b      	lsls	r3, r3, #8
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_TIM_Encoder_Init+0x144>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <HAL_TIM_Encoder_Init+0x148>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68da      	ldr	r2, [r3, #12]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	011a      	lsls	r2, r3, #4
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	031b      	lsls	r3, r3, #12
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	fffebff8 	.word	0xfffebff8
 8003d20:	fffffcfc 	.word	0xfffffcfc
 8003d24:	fffff3f3 	.word	0xfffff3f3
 8003d28:	ffff0f0f 	.word	0xffff0f0f

08003d2c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d110      	bne.n	8003d7e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d102      	bne.n	8003d68 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d62:	7b7b      	ldrb	r3, [r7, #13]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d001      	beq.n	8003d6c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e089      	b.n	8003e80 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	e031      	b.n	8003de2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d110      	bne.n	8003da6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d84:	7bbb      	ldrb	r3, [r7, #14]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d8a:	7b3b      	ldrb	r3, [r7, #12]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d001      	beq.n	8003d94 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e075      	b.n	8003e80 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da4:	e01d      	b.n	8003de2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d108      	bne.n	8003dbe <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dac:	7bbb      	ldrb	r3, [r7, #14]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d105      	bne.n	8003dbe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003db2:	7b7b      	ldrb	r3, [r7, #13]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003db8:	7b3b      	ldrb	r3, [r7, #12]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d001      	beq.n	8003dc2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e05e      	b.n	8003e80 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d010      	beq.n	8003e10 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003dee:	e01f      	b.n	8003e30 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2201      	movs	r2, #1
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 ffb3 	bl	8004d64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0202 	orr.w	r2, r2, #2
 8003e0c:	60da      	str	r2, [r3, #12]
      break;
 8003e0e:	e02e      	b.n	8003e6e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2201      	movs	r2, #1
 8003e16:	2104      	movs	r1, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 ffa3 	bl	8004d64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0204 	orr.w	r2, r2, #4
 8003e2c:	60da      	str	r2, [r3, #12]
      break;
 8003e2e:	e01e      	b.n	8003e6e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2201      	movs	r2, #1
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 ff93 	bl	8004d64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2201      	movs	r2, #1
 8003e44:	2104      	movs	r1, #4
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 ff8c 	bl	8004d64 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0204 	orr.w	r2, r2, #4
 8003e6a:	60da      	str	r2, [r3, #12]
      break;
 8003e6c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d122      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0202 	mvn.w	r2, #2
 8003eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 fb12 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fb04 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fb15 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0204 	mvn.w	r2, #4
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fae8 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fada 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 faeb 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0208 	mvn.w	r2, #8
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fabe 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fab0 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fac1 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b10      	cmp	r3, #16
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0210 	mvn.w	r2, #16
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa94 	bl	80044f4 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa86 	bl	80044e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fa97 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d10e      	bne.n	800400c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0201 	mvn.w	r2, #1
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fc fb2a 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d10e      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d107      	bne.n	8004038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f001 f802 	bl	800503c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	d10e      	bne.n	8004066 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004052:	2b80      	cmp	r3, #128	; 0x80
 8004054:	d107      	bne.n	8004066 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800405e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fff5 	bl	8005050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d10e      	bne.n	8004092 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d107      	bne.n	8004092 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800408a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fa45 	bl	800451c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b20      	cmp	r3, #32
 800409e:	d10e      	bne.n	80040be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d107      	bne.n	80040be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0220 	mvn.w	r2, #32
 80040b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 ffb5 	bl	8005028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0ff      	b.n	80042e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b14      	cmp	r3, #20
 80040f2:	f200 80f0 	bhi.w	80042d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040f6:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004151 	.word	0x08004151
 8004100:	080042d7 	.word	0x080042d7
 8004104:	080042d7 	.word	0x080042d7
 8004108:	080042d7 	.word	0x080042d7
 800410c:	08004191 	.word	0x08004191
 8004110:	080042d7 	.word	0x080042d7
 8004114:	080042d7 	.word	0x080042d7
 8004118:	080042d7 	.word	0x080042d7
 800411c:	080041d3 	.word	0x080041d3
 8004120:	080042d7 	.word	0x080042d7
 8004124:	080042d7 	.word	0x080042d7
 8004128:	080042d7 	.word	0x080042d7
 800412c:	08004213 	.word	0x08004213
 8004130:	080042d7 	.word	0x080042d7
 8004134:	080042d7 	.word	0x080042d7
 8004138:	080042d7 	.word	0x080042d7
 800413c:	08004255 	.word	0x08004255
 8004140:	080042d7 	.word	0x080042d7
 8004144:	080042d7 	.word	0x080042d7
 8004148:	080042d7 	.word	0x080042d7
 800414c:	08004295 	.word	0x08004295
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fa90 	bl	800467c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0208 	orr.w	r2, r2, #8
 800416a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0204 	bic.w	r2, r2, #4
 800417a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6999      	ldr	r1, [r3, #24]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	430a      	orrs	r2, r1
 800418c:	619a      	str	r2, [r3, #24]
      break;
 800418e:	e0a5      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68b9      	ldr	r1, [r7, #8]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fb00 	bl	800479c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6999      	ldr	r1, [r3, #24]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	021a      	lsls	r2, r3, #8
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	619a      	str	r2, [r3, #24]
      break;
 80041d0:	e084      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fb69 	bl	80048b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0208 	orr.w	r2, r2, #8
 80041ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0204 	bic.w	r2, r2, #4
 80041fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69d9      	ldr	r1, [r3, #28]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	61da      	str	r2, [r3, #28]
      break;
 8004210:	e064      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fbd1 	bl	80049c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	69da      	ldr	r2, [r3, #28]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69d9      	ldr	r1, [r3, #28]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	021a      	lsls	r2, r3, #8
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	61da      	str	r2, [r3, #28]
      break;
 8004252:	e043      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68b9      	ldr	r1, [r7, #8]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fc1a 	bl	8004a94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0208 	orr.w	r2, r2, #8
 800426e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0204 	bic.w	r2, r2, #4
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004292:	e023      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fc5e 	bl	8004b5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	021a      	lsls	r2, r3, #8
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042d4:	e002      	b.n	80042dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
      break;
 80042da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop

080042f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIM_ConfigClockSource+0x1c>
 8004308:	2302      	movs	r3, #2
 800430a:	e0dc      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4b6a      	ldr	r3, [pc, #424]	; (80044d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004328:	4013      	ands	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a64      	ldr	r2, [pc, #400]	; (80044d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	f000 80a9 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 8004348:	4a62      	ldr	r2, [pc, #392]	; (80044d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	f200 80ae 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004350:	4a61      	ldr	r2, [pc, #388]	; (80044d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	f000 80a1 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 8004358:	4a5f      	ldr	r2, [pc, #380]	; (80044d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	f200 80a6 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004360:	4a5e      	ldr	r2, [pc, #376]	; (80044dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f000 8099 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 8004368:	4a5c      	ldr	r2, [pc, #368]	; (80044dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800436a:	4293      	cmp	r3, r2
 800436c:	f200 809e 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004370:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004374:	f000 8091 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 8004378:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800437c:	f200 8096 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004384:	f000 8089 	beq.w	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 8004388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438c:	f200 808e 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004394:	d03e      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0x124>
 8004396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439a:	f200 8087 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a2:	f000 8086 	beq.w	80044b2 <HAL_TIM_ConfigClockSource+0x1c2>
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043aa:	d87f      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 80043ac:	2b70      	cmp	r3, #112	; 0x70
 80043ae:	d01a      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0xf6>
 80043b0:	2b70      	cmp	r3, #112	; 0x70
 80043b2:	d87b      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 80043b4:	2b60      	cmp	r3, #96	; 0x60
 80043b6:	d050      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x16a>
 80043b8:	2b60      	cmp	r3, #96	; 0x60
 80043ba:	d877      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 80043bc:	2b50      	cmp	r3, #80	; 0x50
 80043be:	d03c      	beq.n	800443a <HAL_TIM_ConfigClockSource+0x14a>
 80043c0:	2b50      	cmp	r3, #80	; 0x50
 80043c2:	d873      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d058      	beq.n	800447a <HAL_TIM_ConfigClockSource+0x18a>
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d86f      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 80043cc:	2b30      	cmp	r3, #48	; 0x30
 80043ce:	d064      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d86b      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d060      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d867      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d05c      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d05a      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x1aa>
 80043e4:	e062      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f000 fc95 	bl	8004d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	609a      	str	r2, [r3, #8]
      break;
 8004412:	e04f      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6899      	ldr	r1, [r3, #8]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f000 fc7e 	bl	8004d24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004436:	609a      	str	r2, [r3, #8]
      break;
 8004438:	e03c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	461a      	mov	r2, r3
 8004448:	f000 fbee 	bl	8004c28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2150      	movs	r1, #80	; 0x50
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fc48 	bl	8004ce8 <TIM_ITRx_SetConfig>
      break;
 8004458:	e02c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	461a      	mov	r2, r3
 8004468:	f000 fc0d 	bl	8004c86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2160      	movs	r1, #96	; 0x60
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fc38 	bl	8004ce8 <TIM_ITRx_SetConfig>
      break;
 8004478:	e01c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	461a      	mov	r2, r3
 8004488:	f000 fbce 	bl	8004c28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2140      	movs	r1, #64	; 0x40
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fc28 	bl	8004ce8 <TIM_ITRx_SetConfig>
      break;
 8004498:	e00c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f000 fc1f 	bl	8004ce8 <TIM_ITRx_SetConfig>
      break;
 80044aa:	e003      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      break;
 80044b0:	e000      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80044b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	ffceff88 	.word	0xffceff88
 80044d4:	00100040 	.word	0x00100040
 80044d8:	00100030 	.word	0x00100030
 80044dc:	00100020 	.word	0x00100020

080044e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a44      	ldr	r2, [pc, #272]	; (8004654 <TIM_Base_SetConfig+0x124>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d00f      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a41      	ldr	r2, [pc, #260]	; (8004658 <TIM_Base_SetConfig+0x128>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a40      	ldr	r2, [pc, #256]	; (800465c <TIM_Base_SetConfig+0x12c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <TIM_Base_SetConfig+0x130>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3e      	ldr	r2, [pc, #248]	; (8004664 <TIM_Base_SetConfig+0x134>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a33      	ldr	r2, [pc, #204]	; (8004654 <TIM_Base_SetConfig+0x124>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d027      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d023      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a30      	ldr	r2, [pc, #192]	; (8004658 <TIM_Base_SetConfig+0x128>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01f      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2f      	ldr	r2, [pc, #188]	; (800465c <TIM_Base_SetConfig+0x12c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01b      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2e      	ldr	r2, [pc, #184]	; (8004660 <TIM_Base_SetConfig+0x130>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d017      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2d      	ldr	r2, [pc, #180]	; (8004664 <TIM_Base_SetConfig+0x134>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2c      	ldr	r2, [pc, #176]	; (8004668 <TIM_Base_SetConfig+0x138>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2b      	ldr	r2, [pc, #172]	; (800466c <TIM_Base_SetConfig+0x13c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <TIM_Base_SetConfig+0x140>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a29      	ldr	r2, [pc, #164]	; (8004674 <TIM_Base_SetConfig+0x144>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_Base_SetConfig+0xaa>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a28      	ldr	r2, [pc, #160]	; (8004678 <TIM_Base_SetConfig+0x148>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a10      	ldr	r2, [pc, #64]	; (8004654 <TIM_Base_SetConfig+0x124>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00f      	beq.n	8004638 <TIM_Base_SetConfig+0x108>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <TIM_Base_SetConfig+0x134>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0x108>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a11      	ldr	r2, [pc, #68]	; (8004668 <TIM_Base_SetConfig+0x138>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0x108>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a10      	ldr	r2, [pc, #64]	; (800466c <TIM_Base_SetConfig+0x13c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x108>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <TIM_Base_SetConfig+0x140>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d103      	bne.n	8004640 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	615a      	str	r2, [r3, #20]
}
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40010400 	.word	0x40010400
 8004668:	40014000 	.word	0x40014000
 800466c:	40014400 	.word	0x40014400
 8004670:	40014800 	.word	0x40014800
 8004674:	4000e000 	.word	0x4000e000
 8004678:	4000e400 	.word	0x4000e400

0800467c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <TIM_OC1_SetConfig+0x108>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 0302 	bic.w	r3, r3, #2
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a2d      	ldr	r2, [pc, #180]	; (8004788 <TIM_OC1_SetConfig+0x10c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <TIM_OC1_SetConfig+0x7c>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a2c      	ldr	r2, [pc, #176]	; (800478c <TIM_OC1_SetConfig+0x110>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_OC1_SetConfig+0x7c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <TIM_OC1_SetConfig+0x114>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_OC1_SetConfig+0x7c>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <TIM_OC1_SetConfig+0x118>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC1_SetConfig+0x7c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a29      	ldr	r2, [pc, #164]	; (8004798 <TIM_OC1_SetConfig+0x11c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10c      	bne.n	8004712 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0308 	bic.w	r3, r3, #8
 80046fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <TIM_OC1_SetConfig+0x10c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00f      	beq.n	800473a <TIM_OC1_SetConfig+0xbe>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1b      	ldr	r2, [pc, #108]	; (800478c <TIM_OC1_SetConfig+0x110>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00b      	beq.n	800473a <TIM_OC1_SetConfig+0xbe>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1a      	ldr	r2, [pc, #104]	; (8004790 <TIM_OC1_SetConfig+0x114>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d007      	beq.n	800473a <TIM_OC1_SetConfig+0xbe>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <TIM_OC1_SetConfig+0x118>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_OC1_SetConfig+0xbe>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a18      	ldr	r2, [pc, #96]	; (8004798 <TIM_OC1_SetConfig+0x11c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d111      	bne.n	800475e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	fffeff8f 	.word	0xfffeff8f
 8004788:	40010000 	.word	0x40010000
 800478c:	40010400 	.word	0x40010400
 8004790:	40014000 	.word	0x40014000
 8004794:	40014400 	.word	0x40014400
 8004798:	40014800 	.word	0x40014800

0800479c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0210 	bic.w	r2, r3, #16
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4b34      	ldr	r3, [pc, #208]	; (8004898 <TIM_OC2_SetConfig+0xfc>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f023 0320 	bic.w	r3, r3, #32
 80047e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a29      	ldr	r2, [pc, #164]	; (800489c <TIM_OC2_SetConfig+0x100>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_OC2_SetConfig+0x68>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a28      	ldr	r2, [pc, #160]	; (80048a0 <TIM_OC2_SetConfig+0x104>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d10d      	bne.n	8004820 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <TIM_OC2_SetConfig+0x100>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00f      	beq.n	8004848 <TIM_OC2_SetConfig+0xac>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <TIM_OC2_SetConfig+0x104>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_OC2_SetConfig+0xac>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a1c      	ldr	r2, [pc, #112]	; (80048a4 <TIM_OC2_SetConfig+0x108>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_OC2_SetConfig+0xac>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a1b      	ldr	r2, [pc, #108]	; (80048a8 <TIM_OC2_SetConfig+0x10c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_OC2_SetConfig+0xac>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a1a      	ldr	r2, [pc, #104]	; (80048ac <TIM_OC2_SetConfig+0x110>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d113      	bne.n	8004870 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800484e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	feff8fff 	.word	0xfeff8fff
 800489c:	40010000 	.word	0x40010000
 80048a0:	40010400 	.word	0x40010400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800

080048b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <TIM_OC3_SetConfig+0xf8>)
 80048dc:	4013      	ands	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <TIM_OC3_SetConfig+0xfc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_OC3_SetConfig+0x66>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <TIM_OC3_SetConfig+0x100>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10d      	bne.n	8004932 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800491c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <TIM_OC3_SetConfig+0xfc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00f      	beq.n	800495a <TIM_OC3_SetConfig+0xaa>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1c      	ldr	r2, [pc, #112]	; (80049b0 <TIM_OC3_SetConfig+0x100>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <TIM_OC3_SetConfig+0xaa>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <TIM_OC3_SetConfig+0x104>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_OC3_SetConfig+0xaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <TIM_OC3_SetConfig+0x108>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_OC3_SetConfig+0xaa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <TIM_OC3_SetConfig+0x10c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d113      	bne.n	8004982 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	621a      	str	r2, [r3, #32]
}
 800499c:	bf00      	nop
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	fffeff8f 	.word	0xfffeff8f
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40014400 	.word	0x40014400
 80049bc:	40014800 	.word	0x40014800

080049c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <TIM_OC4_SetConfig+0xbc>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	031b      	lsls	r3, r3, #12
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <TIM_OC4_SetConfig+0xc0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00f      	beq.n	8004a40 <TIM_OC4_SetConfig+0x80>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <TIM_OC4_SetConfig+0xc4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00b      	beq.n	8004a40 <TIM_OC4_SetConfig+0x80>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <TIM_OC4_SetConfig+0xc8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d007      	beq.n	8004a40 <TIM_OC4_SetConfig+0x80>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a16      	ldr	r2, [pc, #88]	; (8004a8c <TIM_OC4_SetConfig+0xcc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d003      	beq.n	8004a40 <TIM_OC4_SetConfig+0x80>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a15      	ldr	r2, [pc, #84]	; (8004a90 <TIM_OC4_SetConfig+0xd0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d109      	bne.n	8004a54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	019b      	lsls	r3, r3, #6
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	621a      	str	r2, [r3, #32]
}
 8004a6e:	bf00      	nop
 8004a70:	371c      	adds	r7, #28
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	feff8fff 	.word	0xfeff8fff
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40010400 	.word	0x40010400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <TIM_OC5_SetConfig+0xb0>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <TIM_OC5_SetConfig+0xb4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00f      	beq.n	8004b0a <TIM_OC5_SetConfig+0x76>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <TIM_OC5_SetConfig+0xb8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00b      	beq.n	8004b0a <TIM_OC5_SetConfig+0x76>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a16      	ldr	r2, [pc, #88]	; (8004b50 <TIM_OC5_SetConfig+0xbc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d007      	beq.n	8004b0a <TIM_OC5_SetConfig+0x76>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <TIM_OC5_SetConfig+0xc0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d003      	beq.n	8004b0a <TIM_OC5_SetConfig+0x76>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <TIM_OC5_SetConfig+0xc4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d109      	bne.n	8004b1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	621a      	str	r2, [r3, #32]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	fffeff8f 	.word	0xfffeff8f
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40010400 	.word	0x40010400
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4b22      	ldr	r3, [pc, #136]	; (8004c10 <TIM_OC6_SetConfig+0xb4>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	051b      	lsls	r3, r3, #20
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <TIM_OC6_SetConfig+0xb8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00f      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x78>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <TIM_OC6_SetConfig+0xbc>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x78>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <TIM_OC6_SetConfig+0xc0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d007      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x78>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a16      	ldr	r2, [pc, #88]	; (8004c20 <TIM_OC6_SetConfig+0xc4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC6_SetConfig+0x78>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <TIM_OC6_SetConfig+0xc8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d109      	bne.n	8004be8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	029b      	lsls	r3, r3, #10
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	feff8fff 	.word	0xfeff8fff
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40010400 	.word	0x40010400
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0201 	bic.w	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 030a 	bic.w	r3, r3, #10
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0210 	bic.w	r2, r3, #16
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	031b      	lsls	r3, r3, #12
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <TIM_ITRx_SetConfig+0x38>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f043 0307 	orr.w	r3, r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	609a      	str	r2, [r3, #8]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	ffcfff8f 	.word	0xffcfff8f

08004d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	021a      	lsls	r2, r3, #8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2201      	movs	r2, #1
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a1a      	ldr	r2, [r3, #32]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	43db      	mvns	r3, r3
 8004d86:	401a      	ands	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e077      	b.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a34      	ldr	r2, [pc, #208]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02c      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d027      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d01d      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a18      	ldr	r2, [pc, #96]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d10c      	bne.n	8004ea6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40001800 	.word	0x40001800
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	4000e000 	.word	0x4000e000
 8004ee4:	4000e400 	.word	0x4000e400

08004ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e087      	b.n	8005014 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a27      	ldr	r2, [pc, #156]	; (8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a25      	ldr	r2, [pc, #148]	; (8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d106      	bne.n	8004fa0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1e      	ldr	r2, [pc, #120]	; (8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1d      	ldr	r2, [pc, #116]	; (8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d126      	bne.n	8005002 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	051b      	lsls	r3, r3, #20
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a0e      	ldr	r2, [pc, #56]	; (8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a0d      	ldr	r2, [pc, #52]	; (8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d106      	bne.n	8005002 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40010000 	.word	0x40010000
 8005024:	40010400 	.word	0x40010400

08005028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4d0d      	ldr	r5, [pc, #52]	; (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2600      	movs	r6, #0
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4d0b      	ldr	r5, [pc, #44]	; (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	; (80050a8 <__libc_init_array+0x44>)
 8005078:	f000 f820 	bl	80050bc <_init>
 800507c:	1b64      	subs	r4, r4, r5
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2600      	movs	r6, #0
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	080050e4 	.word	0x080050e4
 80050a0:	080050e4 	.word	0x080050e4
 80050a4:	080050e4 	.word	0x080050e4
 80050a8:	080050f0 	.word	0x080050f0

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <_init>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr

080050c8 <_fini>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr
