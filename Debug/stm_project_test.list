
stm_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c50  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d8  24000000  08004f40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004b4  240001d8  08005118  000201d8  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  2400068c  08005118  0002068c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018e0d  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a6c  00000000  00000000  00039013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d50  00000000  00000000  0003ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c38  00000000  00000000  0003c7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003554f  00000000  00000000  0003d408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011b6c  00000000  00000000  00072957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00145fe0  00000000  00000000  000844c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ca4a3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000035e4  00000000  00000000  001ca4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08004f08 	.word	0x08004f08

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	08004f08 	.word	0x08004f08

08000310 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
};

void pidCtrl(int i){
 8000310:	b490      	push	{r4, r7}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000318:	49cb      	ldr	r1, [pc, #812]	; (8000648 <pidCtrl+0x338>)
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	4613      	mov	r3, r2
 800031e:	00db      	lsls	r3, r3, #3
 8000320:	1a9b      	subs	r3, r3, r2
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	440b      	add	r3, r1
 8000326:	3318      	adds	r3, #24
 8000328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800032c:	ee07 3a90 	vmov	s15, r3
 8000330:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000334:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8000628 <pidCtrl+0x318>
 8000338:	ee27 7b06 	vmul.f64	d7, d7, d6
 800033c:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8000630 <pidCtrl+0x320>
 8000340:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio) * frequency;
 8000344:	ed9f 5bbc 	vldr	d5, [pc, #752]	; 8000638 <pidCtrl+0x328>
 8000348:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800034c:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8000640 <pidCtrl+0x330>
 8000350:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000354:	49bc      	ldr	r1, [pc, #752]	; (8000648 <pidCtrl+0x338>)
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4613      	mov	r3, r2
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	1a9b      	subs	r3, r3, r2
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	440b      	add	r3, r1
 8000362:	3328      	adds	r3, #40	; 0x28
 8000364:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 8000368:	49b7      	ldr	r1, [pc, #732]	; (8000648 <pidCtrl+0x338>)
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	4613      	mov	r3, r2
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	011b      	lsls	r3, r3, #4
 8000374:	440b      	add	r3, r1
 8000376:	3320      	adds	r3, #32
 8000378:	ed93 6b00 	vldr	d6, [r3]
 800037c:	49b2      	ldr	r1, [pc, #712]	; (8000648 <pidCtrl+0x338>)
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	4613      	mov	r3, r2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	011b      	lsls	r3, r3, #4
 8000388:	440b      	add	r3, r1
 800038a:	3328      	adds	r3, #40	; 0x28
 800038c:	ed93 7b00 	vldr	d7, [r3]
 8000390:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000394:	49ac      	ldr	r1, [pc, #688]	; (8000648 <pidCtrl+0x338>)
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	4613      	mov	r3, r2
 800039a:	00db      	lsls	r3, r3, #3
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	011b      	lsls	r3, r3, #4
 80003a0:	440b      	add	r3, r1
 80003a2:	3330      	adds	r3, #48	; 0x30
 80003a4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 80003a8:	49a7      	ldr	r1, [pc, #668]	; (8000648 <pidCtrl+0x338>)
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	4613      	mov	r3, r2
 80003ae:	00db      	lsls	r3, r3, #3
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	011b      	lsls	r3, r3, #4
 80003b4:	440b      	add	r3, r1
 80003b6:	ed93 6b00 	vldr	d6, [r3]
 80003ba:	49a3      	ldr	r1, [pc, #652]	; (8000648 <pidCtrl+0x338>)
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4613      	mov	r3, r2
 80003c0:	00db      	lsls	r3, r3, #3
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	011b      	lsls	r3, r3, #4
 80003c6:	440b      	add	r3, r1
 80003c8:	3330      	adds	r3, #48	; 0x30
 80003ca:	ed93 7b00 	vldr	d7, [r3]
 80003ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80003d2:	499d      	ldr	r1, [pc, #628]	; (8000648 <pidCtrl+0x338>)
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4613      	mov	r3, r2
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	440b      	add	r3, r1
 80003e0:	3348      	adds	r3, #72	; 0x48
 80003e2:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 80003e6:	4998      	ldr	r1, [pc, #608]	; (8000648 <pidCtrl+0x338>)
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	4613      	mov	r3, r2
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	011b      	lsls	r3, r3, #4
 80003f2:	440b      	add	r3, r1
 80003f4:	3350      	adds	r3, #80	; 0x50
 80003f6:	ed93 6b00 	vldr	d6, [r3]
 80003fa:	4993      	ldr	r1, [pc, #588]	; (8000648 <pidCtrl+0x338>)
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4613      	mov	r3, r2
 8000400:	00db      	lsls	r3, r3, #3
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	011b      	lsls	r3, r3, #4
 8000406:	440b      	add	r3, r1
 8000408:	3308      	adds	r3, #8
 800040a:	ed93 5b00 	vldr	d5, [r3]
 800040e:	498e      	ldr	r1, [pc, #568]	; (8000648 <pidCtrl+0x338>)
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4613      	mov	r3, r2
 8000414:	00db      	lsls	r3, r3, #3
 8000416:	1a9b      	subs	r3, r3, r2
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	440b      	add	r3, r1
 800041c:	3338      	adds	r3, #56	; 0x38
 800041e:	ed93 7b00 	vldr	d7, [r3]
 8000422:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000426:	ed9f 4b86 	vldr	d4, [pc, #536]	; 8000640 <pidCtrl+0x330>
 800042a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800042e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000432:	4985      	ldr	r1, [pc, #532]	; (8000648 <pidCtrl+0x338>)
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	4613      	mov	r3, r2
 8000438:	00db      	lsls	r3, r3, #3
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	011b      	lsls	r3, r3, #4
 800043e:	440b      	add	r3, r1
 8000440:	3350      	adds	r3, #80	; 0x50
 8000442:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui = 0;
 8000446:	4980      	ldr	r1, [pc, #512]	; (8000648 <pidCtrl+0x338>)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4613      	mov	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	1a9b      	subs	r3, r3, r2
 8000450:	011b      	lsls	r3, r3, #4
 8000452:	440b      	add	r3, r1
 8000454:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8000458:	f04f 0200 	mov.w	r2, #0
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e9c1 2300 	strd	r2, r3, [r1]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 8000464:	4978      	ldr	r1, [pc, #480]	; (8000648 <pidCtrl+0x338>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	4613      	mov	r3, r2
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	440b      	add	r3, r1
 8000472:	3310      	adds	r3, #16
 8000474:	ed93 6b00 	vldr	d6, [r3]
 8000478:	4973      	ldr	r1, [pc, #460]	; (8000648 <pidCtrl+0x338>)
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	4613      	mov	r3, r2
 800047e:	00db      	lsls	r3, r3, #3
 8000480:	1a9b      	subs	r3, r3, r2
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	440b      	add	r3, r1
 8000486:	3330      	adds	r3, #48	; 0x30
 8000488:	ed93 5b00 	vldr	d5, [r3]
 800048c:	496e      	ldr	r1, [pc, #440]	; (8000648 <pidCtrl+0x338>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4613      	mov	r3, r2
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	011b      	lsls	r3, r3, #4
 8000498:	440b      	add	r3, r1
 800049a:	3338      	adds	r3, #56	; 0x38
 800049c:	ed93 7b00 	vldr	d7, [r3]
 80004a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80004a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80004a8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8000640 <pidCtrl+0x330>
 80004ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80004b0:	4965      	ldr	r1, [pc, #404]	; (8000648 <pidCtrl+0x338>)
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	4613      	mov	r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	011b      	lsls	r3, r3, #4
 80004bc:	440b      	add	r3, r1
 80004be:	3358      	adds	r3, #88	; 0x58
 80004c0:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 80004c4:	4960      	ldr	r1, [pc, #384]	; (8000648 <pidCtrl+0x338>)
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	4613      	mov	r3, r2
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	1a9b      	subs	r3, r3, r2
 80004ce:	011b      	lsls	r3, r3, #4
 80004d0:	440b      	add	r3, r1
 80004d2:	3350      	adds	r3, #80	; 0x50
 80004d4:	ed93 7b00 	vldr	d7, [r3]
 80004d8:	eeb0 7bc7 	vabs.f64	d7, d7
 80004dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80004e0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80004e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80004e8:	dd1f      	ble.n	800052a <pidCtrl+0x21a>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 80004ea:	4957      	ldr	r1, [pc, #348]	; (8000648 <pidCtrl+0x338>)
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	4613      	mov	r3, r2
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	1a9b      	subs	r3, r3, r2
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	440b      	add	r3, r1
 80004f8:	3350      	adds	r3, #80	; 0x50
 80004fa:	ed93 7b00 	vldr	d7, [r3]
 80004fe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000506:	db03      	blt.n	8000510 <pidCtrl+0x200>
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	494f      	ldr	r1, [pc, #316]	; (800064c <pidCtrl+0x33c>)
 800050e:	e002      	b.n	8000516 <pidCtrl+0x206>
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	494e      	ldr	r1, [pc, #312]	; (8000650 <pidCtrl+0x340>)
 8000516:	4c4c      	ldr	r4, [pc, #304]	; (8000648 <pidCtrl+0x338>)
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4613      	mov	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	1a9b      	subs	r3, r3, r2
 8000520:	011b      	lsls	r3, r3, #4
 8000522:	4423      	add	r3, r4
 8000524:	3350      	adds	r3, #80	; 0x50
 8000526:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800052a:	4947      	ldr	r1, [pc, #284]	; (8000648 <pidCtrl+0x338>)
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4613      	mov	r3, r2
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	1a9b      	subs	r3, r3, r2
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	440b      	add	r3, r1
 8000538:	3348      	adds	r3, #72	; 0x48
 800053a:	ed93 6b00 	vldr	d6, [r3]
 800053e:	4942      	ldr	r1, [pc, #264]	; (8000648 <pidCtrl+0x338>)
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	4613      	mov	r3, r2
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	1a9b      	subs	r3, r3, r2
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	440b      	add	r3, r1
 800054c:	3350      	adds	r3, #80	; 0x50
 800054e:	ed93 7b00 	vldr	d7, [r3]
 8000552:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000556:	493c      	ldr	r1, [pc, #240]	; (8000648 <pidCtrl+0x338>)
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4613      	mov	r3, r2
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	440b      	add	r3, r1
 8000564:	3358      	adds	r3, #88	; 0x58
 8000566:	ed93 7b00 	vldr	d7, [r3]
 800056a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800056e:	4936      	ldr	r1, [pc, #216]	; (8000648 <pidCtrl+0x338>)
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4613      	mov	r3, r2
 8000574:	00db      	lsls	r3, r3, #3
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	440b      	add	r3, r1
 800057c:	3340      	adds	r3, #64	; 0x40
 800057e:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 8000582:	4931      	ldr	r1, [pc, #196]	; (8000648 <pidCtrl+0x338>)
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4613      	mov	r3, r2
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	440b      	add	r3, r1
 8000590:	3330      	adds	r3, #48	; 0x30
 8000592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000596:	4c2c      	ldr	r4, [pc, #176]	; (8000648 <pidCtrl+0x338>)
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4613      	mov	r3, r2
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	011b      	lsls	r3, r3, #4
 80005a2:	4423      	add	r3, r4
 80005a4:	3338      	adds	r3, #56	; 0x38
 80005a6:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80005aa:	4927      	ldr	r1, [pc, #156]	; (8000648 <pidCtrl+0x338>)
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4613      	mov	r3, r2
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	440b      	add	r3, r1
 80005b8:	3340      	adds	r3, #64	; 0x40
 80005ba:	ed93 7b00 	vldr	d7, [r3]
 80005be:	eeb0 7bc7 	vabs.f64	d7, d7
 80005c2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8000640 <pidCtrl+0x330>
 80005c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005ca:	491f      	ldr	r1, [pc, #124]	; (8000648 <pidCtrl+0x338>)
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4613      	mov	r3, r2
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	440b      	add	r3, r1
 80005d8:	3360      	adds	r3, #96	; 0x60
 80005da:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 80005de:	491a      	ldr	r1, [pc, #104]	; (8000648 <pidCtrl+0x338>)
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4613      	mov	r3, r2
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	011b      	lsls	r3, r3, #4
 80005ea:	440b      	add	r3, r1
 80005ec:	3360      	adds	r3, #96	; 0x60
 80005ee:	ed93 7b00 	vldr	d7, [r3]
 80005f2:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000640 <pidCtrl+0x330>
 80005f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80005fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fe:	dc00      	bgt.n	8000602 <pidCtrl+0x2f2>
}
 8000600:	e00d      	b.n	800061e <pidCtrl+0x30e>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000602:	4911      	ldr	r1, [pc, #68]	; (8000648 <pidCtrl+0x338>)
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	4613      	mov	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	440b      	add	r3, r1
 8000610:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000614:	f04f 0200 	mov.w	r2, #0
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <pidCtrl+0x344>)
 800061a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bc90      	pop	{r4, r7}
 8000626:	4770      	bx	lr
 8000628:	54cadf99 	.word	0x54cadf99
 800062c:	400921fb 	.word	0x400921fb
 8000630:	6e978d50 	.word	0x6e978d50
 8000634:	3fc08312 	.word	0x3fc08312
 8000638:	00000000 	.word	0x00000000
 800063c:	411b0000 	.word	0x411b0000
 8000640:	00000000 	.word	0x00000000
 8000644:	408f4000 	.word	0x408f4000
 8000648:	24000000 	.word	0x24000000
 800064c:	3ff00000 	.word	0x3ff00000
 8000650:	bff00000 	.word	0xbff00000
 8000654:	408f4000 	.word	0x408f4000

08000658 <HAL_TIM_PeriodElapsedCallback>:
# include "PID.h"

double coeffab = 0.5 * (width + length);


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4aae      	ldr	r2, [pc, #696]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	f040 8155 	bne.w	8000916 <HAL_TIM_PeriodElapsedCallback+0x2be>

		Kpid[0].goalVel = Vx + Vy - (W * coeffab);
 800066c:	4bad      	ldr	r3, [pc, #692]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800066e:	ed93 6b00 	vldr	d6, [r3]
 8000672:	4bad      	ldr	r3, [pc, #692]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000674:	ed93 7b00 	vldr	d7, [r3]
 8000678:	ee36 6b07 	vadd.f64	d6, d6, d7
 800067c:	4bab      	ldr	r3, [pc, #684]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800067e:	ed93 5b00 	vldr	d5, [r3]
 8000682:	4bab      	ldr	r3, [pc, #684]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000684:	ed93 7b00 	vldr	d7, [r3]
 8000688:	ee25 7b07 	vmul.f64	d7, d5, d7
 800068c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000690:	4ba8      	ldr	r3, [pc, #672]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000692:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vx + Vy + (W * coeffab);
 8000696:	4ba3      	ldr	r3, [pc, #652]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000698:	ed93 6b00 	vldr	d6, [r3]
 800069c:	4ba2      	ldr	r3, [pc, #648]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800069e:	ed93 7b00 	vldr	d7, [r3]
 80006a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80006a6:	4ba1      	ldr	r3, [pc, #644]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006a8:	ed93 5b00 	vldr	d5, [r3]
 80006ac:	4ba0      	ldr	r3, [pc, #640]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80006ae:	ed93 7b00 	vldr	d7, [r3]
 80006b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80006b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006ba:	4b9e      	ldr	r3, [pc, #632]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006bc:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vx - Vy - (W * coeffab);
 80006c0:	4b98      	ldr	r3, [pc, #608]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006c2:	ed93 6b00 	vldr	d6, [r3]
 80006c6:	4b98      	ldr	r3, [pc, #608]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006c8:	ed93 7b00 	vldr	d7, [r3]
 80006cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80006d0:	4b96      	ldr	r3, [pc, #600]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006d2:	ed93 5b00 	vldr	d5, [r3]
 80006d6:	4b96      	ldr	r3, [pc, #600]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80006d8:	ed93 7b00 	vldr	d7, [r3]
 80006dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80006e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80006e4:	4b93      	ldr	r3, [pc, #588]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80006e6:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vx - Vy + (W * coeffab);
 80006ea:	4b8e      	ldr	r3, [pc, #568]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80006ec:	ed93 6b00 	vldr	d6, [r3]
 80006f0:	4b8d      	ldr	r3, [pc, #564]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80006f2:	ed93 7b00 	vldr	d7, [r3]
 80006f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80006fa:	4b8c      	ldr	r3, [pc, #560]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80006fc:	ed93 5b00 	vldr	d5, [r3]
 8000700:	4b8b      	ldr	r3, [pc, #556]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000702:	ed93 7b00 	vldr	d7, [r3]
 8000706:	ee25 7b07 	vmul.f64	d7, d5, d7
 800070a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800070e:	4b89      	ldr	r3, [pc, #548]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000710:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(&htim2);
 8000714:	4b88      	ldr	r3, [pc, #544]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071a:	b21a      	sxth	r2, r3
 800071c:	4b85      	ldr	r3, [pc, #532]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800071e:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(&htim3);
 8000720:	4b86      	ldr	r3, [pc, #536]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	b21a      	sxth	r2, r3
 8000728:	4b82      	ldr	r3, [pc, #520]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800072a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(&htim4);
 800072e:	4b84      	ldr	r3, [pc, #528]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000734:	b21a      	sxth	r2, r3
 8000736:	4b7f      	ldr	r3, [pc, #508]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000738:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(&htim5) * -1;
 800073c:	4b81      	ldr	r3, [pc, #516]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	b29b      	uxth	r3, r3
 8000744:	425b      	negs	r3, r3
 8000746:	b29b      	uxth	r3, r3
 8000748:	b21a      	sxth	r2, r3
 800074a:	4b7a      	ldr	r3, [pc, #488]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800074c:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(&htim2, 0);
 8000750:	4b79      	ldr	r3, [pc, #484]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim3, 0);
 8000758:	4b78      	ldr	r3, [pc, #480]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim4, 0);
 8000760:	4b77      	ldr	r3, [pc, #476]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2200      	movs	r2, #0
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(&htim5, 0);
 8000768:	4b76      	ldr	r3, [pc, #472]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24



		for( int i = 0; i < 4; i ++){
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b03      	cmp	r3, #3
 8000778:	dc06      	bgt.n	8000788 <HAL_TIM_PeriodElapsedCallback+0x130>
			pidCtrl(i);
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f7ff fdc8 	bl	8000310 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	3301      	adds	r3, #1
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e7f5      	b.n	8000774 <HAL_TIM_PeriodElapsedCallback+0x11c>
		}

		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, Kpid[0].pulse);
 8000788:	4b6a      	ldr	r3, [pc, #424]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800078a:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800078e:	4b6e      	ldr	r3, [pc, #440]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000796:	ee17 2a90 	vmov	r2, s15
 800079a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, Kpid[1].pulse);
 800079c:	4b65      	ldr	r3, [pc, #404]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800079e:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 80007a2:	4b69      	ldr	r3, [pc, #420]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007aa:	ee17 2a90 	vmov	r2, s15
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, Kpid[2].pulse);
 80007b0:	4b60      	ldr	r3, [pc, #384]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80007b2:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 80007b6:	4b65      	ldr	r3, [pc, #404]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007be:	ee17 2a90 	vmov	r2, s15
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, Kpid[3].pulse);
 80007c4:	4b5b      	ldr	r3, [pc, #364]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80007c6:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 80007ca:	4b60      	ldr	r3, [pc, #384]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d2:	ee17 2a90 	vmov	r2, s15
 80007d6:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007de:	485c      	ldr	r0, [pc, #368]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80007e0:	f001 ffa0 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ea:	4859      	ldr	r0, [pc, #356]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80007ec:	f001 ff9a 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f6:	4857      	ldr	r0, [pc, #348]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80007f8:	f001 ff94 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2110      	movs	r1, #16
 8000800:	4855      	ldr	r0, [pc, #340]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000802:	f001 ff8f 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800080c:	4853      	ldr	r0, [pc, #332]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800080e:	f001 ff89 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000818:	4850      	ldr	r0, [pc, #320]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x304>)
 800081a:	f001 ff83 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2104      	movs	r1, #4
 8000822:	484d      	ldr	r0, [pc, #308]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000824:	f001 ff7e 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2108      	movs	r1, #8
 800082c:	484a      	ldr	r0, [pc, #296]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x300>)
 800082e:	f001 ff79 	bl	8002724 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 8000832:	4b40      	ldr	r3, [pc, #256]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000834:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000838:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800083c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000840:	dd06      	ble.n	8000850 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000848:	4841      	ldr	r0, [pc, #260]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800084a:	f001 ff6b 	bl	8002724 <HAL_GPIO_WritePin>
 800084e:	e00d      	b.n	800086c <HAL_TIM_PeriodElapsedCallback+0x214>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 8000850:	4b38      	ldr	r3, [pc, #224]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000852:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000856:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800085a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085e:	d505      	bpl.n	800086c <HAL_TIM_PeriodElapsedCallback+0x214>
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000866:	483a      	ldr	r0, [pc, #232]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000868:	f001 ff5c 	bl	8002724 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800086e:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000872:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087a:	dd06      	ble.n	800088a <HAL_TIM_PeriodElapsedCallback+0x232>
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000882:	4834      	ldr	r0, [pc, #208]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000884:	f001 ff4e 	bl	8002724 <HAL_GPIO_WritePin>
 8000888:	e00c      	b.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x24c>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 800088a:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800088c:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000890:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000898:	d504      	bpl.n	80008a4 <HAL_TIM_PeriodElapsedCallback+0x24c>
 800089a:	2201      	movs	r2, #1
 800089c:	2110      	movs	r1, #16
 800089e:	482e      	ldr	r0, [pc, #184]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80008a0:	f001 ff40 	bl	8002724 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80008a6:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 80008aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b2:	dd06      	ble.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x26a>
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ba:	4828      	ldr	r0, [pc, #160]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80008bc:	f001 ff32 	bl	8002724 <HAL_GPIO_WritePin>
 80008c0:	e00d      	b.n	80008de <HAL_TIM_PeriodElapsedCallback+0x286>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80008c4:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 80008c8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d0:	d505      	bpl.n	80008de <HAL_TIM_PeriodElapsedCallback+0x286>
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d8:	4820      	ldr	r0, [pc, #128]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x304>)
 80008da:	f001 ff23 	bl	8002724 <HAL_GPIO_WritePin>
		if (Kpid[3].u < 0)HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80008e0:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 80008e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ec:	d505      	bpl.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x2a2>
 80008ee:	2201      	movs	r2, #1
 80008f0:	2104      	movs	r1, #4
 80008f2:	4819      	ldr	r0, [pc, #100]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80008f4:	f001 ff16 	bl	8002724 <HAL_GPIO_WritePin>
		else if (Kpid[3].u > 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
	}
}
 80008f8:	e00d      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x2be>
		else if (Kpid[3].u > 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80008fc:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000900:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000908:	dc00      	bgt.n	800090c <HAL_TIM_PeriodElapsedCallback+0x2b4>
}
 800090a:	e004      	b.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x2be>
		else if (Kpid[3].u > 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2108      	movs	r1, #8
 8000910:	4811      	ldr	r0, [pc, #68]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000912:	f001 ff07 	bl	8002724 <HAL_GPIO_WritePin>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40010000 	.word	0x40010000
 8000924:	240001f8 	.word	0x240001f8
 8000928:	24000200 	.word	0x24000200
 800092c:	24000208 	.word	0x24000208
 8000930:	240001c0 	.word	0x240001c0
 8000934:	24000000 	.word	0x24000000
 8000938:	2400043c 	.word	0x2400043c
 800093c:	24000488 	.word	0x24000488
 8000940:	240004d4 	.word	0x240004d4
 8000944:	24000520 	.word	0x24000520
 8000948:	2400056c 	.word	0x2400056c
 800094c:	240005b8 	.word	0x240005b8
 8000950:	58020c00 	.word	0x58020c00
 8000954:	58020800 	.word	0x58020800
 8000958:	58021000 	.word	0x58021000
 800095c:	58020400 	.word	0x58020400

08000960 <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 8000964:	2100      	movs	r1, #0
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <_Z13DC_motor_initv+0x68>)
 8000968:	f003 f906 	bl	8003b78 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 800096c:	2104      	movs	r1, #4
 800096e:	4816      	ldr	r0, [pc, #88]	; (80009c8 <_Z13DC_motor_initv+0x68>)
 8000970:	f003 f902 	bl	8003b78 <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 8000974:	2104      	movs	r1, #4
 8000976:	4815      	ldr	r0, [pc, #84]	; (80009cc <_Z13DC_motor_initv+0x6c>)
 8000978:	f002 ff3c 	bl	80037f4 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 800097c:	2100      	movs	r1, #0
 800097e:	4814      	ldr	r0, [pc, #80]	; (80009d0 <_Z13DC_motor_initv+0x70>)
 8000980:	f003 f8fa 	bl	8003b78 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 8000984:	2104      	movs	r1, #4
 8000986:	4812      	ldr	r0, [pc, #72]	; (80009d0 <_Z13DC_motor_initv+0x70>)
 8000988:	f003 f8f6 	bl	8003b78 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 800098c:	2100      	movs	r1, #0
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <_Z13DC_motor_initv+0x6c>)
 8000990:	f002 ff30 	bl	80037f4 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 8000994:	2100      	movs	r1, #0
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <_Z13DC_motor_initv+0x74>)
 8000998:	f003 f8ee 	bl	8003b78 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 800099c:	2104      	movs	r1, #4
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <_Z13DC_motor_initv+0x74>)
 80009a0:	f003 f8ea 	bl	8003b78 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 80009a4:	2100      	movs	r1, #0
 80009a6:	480c      	ldr	r0, [pc, #48]	; (80009d8 <_Z13DC_motor_initv+0x78>)
 80009a8:	f002 ff24 	bl	80037f4 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 80009ac:	2100      	movs	r1, #0
 80009ae:	480b      	ldr	r0, [pc, #44]	; (80009dc <_Z13DC_motor_initv+0x7c>)
 80009b0:	f003 f8e2 	bl	8003b78 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 80009b4:	2104      	movs	r1, #4
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <_Z13DC_motor_initv+0x7c>)
 80009b8:	f003 f8de 	bl	8003b78 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 80009bc:	2104      	movs	r1, #4
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <_Z13DC_motor_initv+0x78>)
 80009c0:	f002 ff18 	bl	80037f4 <HAL_TIM_PWM_Start>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2400043c 	.word	0x2400043c
 80009cc:	2400056c 	.word	0x2400056c
 80009d0:	24000520 	.word	0x24000520
 80009d4:	24000488 	.word	0x24000488
 80009d8:	240005b8 	.word	0x240005b8
 80009dc:	240004d4 	.word	0x240004d4

080009e0 <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 80009e0:	b480      	push	{r7}
 80009e2:	b08f      	sub	sp, #60	; 0x3c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6378      	str	r0, [r7, #52]	; 0x34
 80009e8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80009ec:	ed87 1b08 	vstr	d1, [r7, #32]
 80009f0:	ed87 2b06 	vstr	d2, [r7, #24]
 80009f4:	ed87 3b04 	vstr	d3, [r7, #16]
 80009f8:	ed87 4b02 	vstr	d4, [r7, #8]
 80009fc:	ed87 5b00 	vstr	d5, [r7]
 8000a00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	f04f 0300 	mov.w	r3, #0
 8000a0a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000a0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8000a1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a1e:	f04f 0200 	mov.w	r2, #0
 8000a22:	f04f 0300 	mov.w	r3, #0
 8000a26:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8000a2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a2c:	f04f 0200 	mov.w	r2, #0
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 8000a38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000a3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 8000a42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000a48:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 8000a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000a52:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 8000a56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000a5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 8000a60:	ed97 7b02 	vldr	d7, [r7, #8]
 8000a64:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a68:	ee17 2a90 	vmov	r2, s15
 8000a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6e:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 8000a70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a76:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	373c      	adds	r7, #60	; 0x3c
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <_Z41__static_initialization_and_destruction_0ii>:
	u = kp * error + ki * integral + kd * differential;
	if (u > 1) u = 1;
	else if (u < -1) u = -1;

	return (int) u*ARR;
}
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d140      	bne.n	8000b1a <_Z41__static_initialization_and_destruction_0ii+0x92>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d13b      	bne.n	8000b1a <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 8000aa2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000b28 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000aa6:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8000b30 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000aaa:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8000b38 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000aae:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8000b40 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000ab2:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8000b48 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8000ab6:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8000b50 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 8000aba:	4833      	ldr	r0, [pc, #204]	; (8000b88 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8000abc:	f7ff ff90 	bl	80009e0 <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 8000ac0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000b28 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000ac4:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8000b30 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000ac8:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8000b38 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000acc:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8000b40 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000ad0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8000b58 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8000ad4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8000b60 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8000ad8:	482c      	ldr	r0, [pc, #176]	; (8000b8c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8000ada:	f7ff ff81 	bl	80009e0 <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 8000ade:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000b28 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000ae2:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8000b30 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000ae6:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8000b38 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000aea:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8000b40 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000aee:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8000b68 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 8000af2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8000b70 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 8000af6:	4826      	ldr	r0, [pc, #152]	; (8000b90 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8000af8:	f7ff ff72 	bl	80009e0 <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 8000afc:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000b28 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8000b00:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8000b30 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8000b04:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8000b38 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8000b08:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8000b40 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 8000b0c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8000b78 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8000b10:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8000b80 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 8000b14:	481f      	ldr	r0, [pc, #124]	; (8000b94 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8000b16:	f7ff ff63 	bl	80009e0 <_ZN8DC_motorC1Edddddd>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	f3af 8000 	nop.w
 8000b28:	00000000 	.word	0x00000000
 8000b2c:	408f4000 	.word	0x408f4000
 8000b30:	00000000 	.word	0x00000000
 8000b34:	40800000 	.word	0x40800000
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	406b0000 	.word	0x406b0000
	...
 8000b48:	89b64cae 	.word	0x89b64cae
 8000b4c:	403fb7ac 	.word	0x403fb7ac
 8000b50:	d059ca21 	.word	0xd059ca21
 8000b54:	402fee62 	.word	0x402fee62
 8000b58:	76ca36c5 	.word	0x76ca36c5
 8000b5c:	4056ec15 	.word	0x4056ec15
 8000b60:	420d6ba3 	.word	0x420d6ba3
 8000b64:	40382ecc 	.word	0x40382ecc
 8000b68:	e191aae3 	.word	0xe191aae3
 8000b6c:	40490b21 	.word	0x40490b21
 8000b70:	f4097cab 	.word	0xf4097cab
 8000b74:	4035320d 	.word	0x4035320d
 8000b78:	06469611 	.word	0x06469611
 8000b7c:	40535cd8 	.word	0x40535cd8
 8000b80:	0ae388d1 	.word	0x0ae388d1
 8000b84:	40404f39 	.word	0x40404f39
 8000b88:	24000210 	.word	0x24000210
 8000b8c:	24000288 	.word	0x24000288
 8000b90:	24000300 	.word	0x24000300
 8000b94:	24000378 	.word	0x24000378

08000b98 <_GLOBAL__sub_I_FL>:
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ff71 	bl	8000a88 <_Z41__static_initialization_and_destruction_0ii>
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f001 fa4c 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f814 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fafc 	bl	80011b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bb8:	f000 f8c2 	bl	8000d40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bbc:	f000 f914 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bc0:	f000 f968 	bl	8000e94 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000bc4:	f000 f9bc 	bl	8000f40 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000bc8:	f000 fa10 	bl	8000fec <MX_TIM12_Init>
  MX_TIM15_Init();
 8000bcc:	f000 fa5e 	bl	800108c <MX_TIM15_Init>
  MX_TIM1_Init();
 8000bd0:	f000 f862 	bl	8000c98 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000bd4:	f000 fc16 	bl	8001404 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <main+0x30>
	...

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09c      	sub	sp, #112	; 0x70
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	224c      	movs	r2, #76	; 0x4c
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 f984 	bl	8004ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f004 f97e 	bl	8004ef8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f001 fdab 	bl	8002758 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <SystemClock_Config+0xb8>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <SystemClock_Config+0xb8>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <SystemClock_Config+0xb8>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c22:	bf00      	nop
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <SystemClock_Config+0xb8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c30:	d1f8      	bne.n	8000c24 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c32:	2302      	movs	r3, #2
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c36:	2301      	movs	r3, #1
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c3a:	2340      	movs	r3, #64	; 0x40
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fdc0 	bl	80027cc <HAL_RCC_OscConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c52:	f000 fbaf 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c56:	233f      	movs	r3, #63	; 0x3f
 8000c58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c66:	2340      	movs	r3, #64	; 0x40
 8000c68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c6a:	2340      	movs	r3, #64	; 0x40
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 f953 	bl	8002f28 <HAL_RCC_ClockConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c88:	f000 fb94 	bl	80013b4 <Error_Handler>
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3770      	adds	r7, #112	; 0x70
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	58024800 	.word	0x58024800

08000c98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000cb8:	4a20      	ldr	r2, [pc, #128]	; (8000d3c <MX_TIM1_Init+0xa4>)
 8000cba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000cbe:	223f      	movs	r2, #63	; 0x3f
 8000cc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000cca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce2:	4815      	ldr	r0, [pc, #84]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000ce4:	f002 fc50 	bl	8003588 <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000cee:	f000 fb61 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480e      	ldr	r0, [pc, #56]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000d00:	f003 fa1c 	bl	800413c <HAL_TIM_ConfigClockSource>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d0a:	f000 fb53 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <MX_TIM1_Init+0xa0>)
 8000d20:	f003 ff6c 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d2a:	f000 fb43 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	240003f0 	.word	0x240003f0
 8000d3c:	40010000 	.word	0x40010000

08000d40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	; 0x30
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	2224      	movs	r2, #36	; 0x24
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f004 f8d2 	bl	8004ef8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	463b      	mov	r3, r7
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_TIM2_Init+0xa4>)
 8000d60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_TIM2_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM2_Init+0xa4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_TIM2_Init+0xa4>)
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_TIM2_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM2_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM2_Init+0xa4>)
 8000db2:	f002 fe3b 	bl	8003a2c <HAL_TIM_Encoder_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000dbc:	f000 fafa 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM2_Init+0xa4>)
 8000dce:	f003 ff15 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000dd8:	f000 faec 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3730      	adds	r7, #48	; 0x30
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2400043c 	.word	0x2400043c

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08c      	sub	sp, #48	; 0x30
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2224      	movs	r2, #36	; 0x24
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 f87e 	bl	8004ef8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e08:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <MX_TIM3_Init+0xa8>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e34:	2301      	movs	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e44:	2301      	movs	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e58:	f002 fde8 	bl	8003a2c <HAL_TIM_Encoder_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e62:	f000 faa7 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	; (8000e8c <MX_TIM3_Init+0xa4>)
 8000e74:	f003 fec2 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e7e:	f000 fa99 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3730      	adds	r7, #48	; 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	24000488 	.word	0x24000488
 8000e90:	40000400 	.word	0x40000400

08000e94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2224      	movs	r2, #36	; 0x24
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 f828 	bl	8004ef8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb2:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <MX_TIM4_Init+0xa8>)
 8000eb6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000eb8:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000f04:	f002 fd92 	bl	8003a2c <HAL_TIM_Encoder_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f0e:	f000 fa51 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_TIM4_Init+0xa4>)
 8000f20:	f003 fe6c 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f2a:	f000 fa43 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3730      	adds	r7, #48	; 0x30
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	240004d4 	.word	0x240004d4
 8000f3c:	40000800 	.word	0x40000800

08000f40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2224      	movs	r2, #36	; 0x24
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 ffd2 	bl	8004ef8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <MX_TIM5_Init+0xa8>)
 8000f62:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295
 8000f76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000fb0:	f002 fd3c 	bl	8003a2c <HAL_TIM_Encoder_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000fba:	f000 f9fb 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_TIM5_Init+0xa4>)
 8000fcc:	f003 fe16 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000fd6:	f000 f9ed 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	24000520 	.word	0x24000520
 8000fe8:	40000c00 	.word	0x40000c00

08000fec <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_TIM12_Init+0x98>)
 8001006:	4a20      	ldr	r2, [pc, #128]	; (8001088 <MX_TIM12_Init+0x9c>)
 8001008:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 63;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_TIM12_Init+0x98>)
 800100c:	223f      	movs	r2, #63	; 0x3f
 800100e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_TIM12_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_TIM12_Init+0x98>)
 8001018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800101c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_TIM12_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_TIM12_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800102a:	4816      	ldr	r0, [pc, #88]	; (8001084 <MX_TIM12_Init+0x98>)
 800102c:	f002 fb8a 	bl	8003744 <HAL_TIM_PWM_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001036:	f000 f9bd 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800103a:	2360      	movs	r3, #96	; 0x60
 800103c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_TIM12_Init+0x98>)
 8001052:	f002 ff5f 	bl	8003f14 <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800105c:	f000 f9aa 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2204      	movs	r2, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM12_Init+0x98>)
 8001068:	f002 ff54 	bl	8003f14 <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001072:	f000 f99f 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM12_Init+0x98>)
 8001078:	f000 fe8e 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2400056c 	.word	0x2400056c
 8001088:	40001800 	.word	0x40001800

0800108c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b098      	sub	sp, #96	; 0x60
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001092:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2234      	movs	r2, #52	; 0x34
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 ff1d 	bl	8004ef8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <MX_TIM15_Init+0x11c>)
 80010c0:	4a3a      	ldr	r2, [pc, #232]	; (80011ac <MX_TIM15_Init+0x120>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <MX_TIM15_Init+0x11c>)
 80010c6:	223f      	movs	r2, #63	; 0x3f
 80010c8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <MX_TIM15_Init+0x11c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <MX_TIM15_Init+0x11c>)
 80010d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <MX_TIM15_Init+0x11c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <MX_TIM15_Init+0x11c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <MX_TIM15_Init+0x11c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010ea:	482f      	ldr	r0, [pc, #188]	; (80011a8 <MX_TIM15_Init+0x11c>)
 80010ec:	f002 fb2a 	bl	8003744 <HAL_TIM_PWM_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 f95d 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001102:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001106:	4619      	mov	r1, r3
 8001108:	4827      	ldr	r0, [pc, #156]	; (80011a8 <MX_TIM15_Init+0x11c>)
 800110a:	f003 fd77 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001114:	f000 f94e 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001118:	2360      	movs	r3, #96	; 0x60
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001124:	2300      	movs	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800112c:	2300      	movs	r3, #0
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	481a      	ldr	r0, [pc, #104]	; (80011a8 <MX_TIM15_Init+0x11c>)
 800113e:	f002 fee9 	bl	8003f14 <HAL_TIM_PWM_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001148:	f000 f934 	bl	80013b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800114c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001150:	2204      	movs	r2, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <MX_TIM15_Init+0x11c>)
 8001156:	f002 fedd 	bl	8003f14 <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001160:	f000 f928 	bl	80013b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_TIM15_Init+0x11c>)
 800118c:	f003 fdd2 	bl	8004d34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001196:	f000 f90d 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MX_TIM15_Init+0x11c>)
 800119c:	f000 fdfc 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 80011a0:	bf00      	nop
 80011a2:	3760      	adds	r7, #96	; 0x60
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240005b8 	.word	0x240005b8
 80011ac:	40014000 	.word	0x40014000

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c6:	4b74      	ldr	r3, [pc, #464]	; (8001398 <MX_GPIO_Init+0x1e8>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	4a72      	ldr	r2, [pc, #456]	; (8001398 <MX_GPIO_Init+0x1e8>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <MX_GPIO_Init+0x1e8>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e4:	4b6c      	ldr	r3, [pc, #432]	; (8001398 <MX_GPIO_Init+0x1e8>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	4a6b      	ldr	r2, [pc, #428]	; (8001398 <MX_GPIO_Init+0x1e8>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f4:	4b68      	ldr	r3, [pc, #416]	; (8001398 <MX_GPIO_Init+0x1e8>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b65      	ldr	r3, [pc, #404]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a63      	ldr	r2, [pc, #396]	; (8001398 <MX_GPIO_Init+0x1e8>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b61      	ldr	r3, [pc, #388]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001220:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	4a5c      	ldr	r2, [pc, #368]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001230:	4b59      	ldr	r3, [pc, #356]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	4a54      	ldr	r2, [pc, #336]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b4e      	ldr	r3, [pc, #312]	; (8001398 <MX_GPIO_Init+0x1e8>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	4a4d      	ldr	r2, [pc, #308]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126c:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <MX_GPIO_Init+0x1e8>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <MX_GPIO_Init+0x1e8>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	4a45      	ldr	r2, [pc, #276]	; (8001398 <MX_GPIO_Init+0x1e8>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <MX_GPIO_Init+0x1e8>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001298:	2200      	movs	r2, #0
 800129a:	f248 719c 	movw	r1, #34716	; 0x879c
 800129e:	483f      	ldr	r0, [pc, #252]	; (800139c <MX_GPIO_Init+0x1ec>)
 80012a0:	f001 fa40 	bl	8002724 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012aa:	483d      	ldr	r0, [pc, #244]	; (80013a0 <MX_GPIO_Init+0x1f0>)
 80012ac:	f001 fa3a 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b6:	483b      	ldr	r0, [pc, #236]	; (80013a4 <MX_GPIO_Init+0x1f4>)
 80012b8:	f001 fa34 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2103      	movs	r1, #3
 80012c0:	4839      	ldr	r0, [pc, #228]	; (80013a8 <MX_GPIO_Init+0x1f8>)
 80012c2:	f001 fa2f 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 80012cc:	4837      	ldr	r0, [pc, #220]	; (80013ac <MX_GPIO_Init+0x1fc>)
 80012ce:	f001 fa29 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80012d8:	4835      	ldr	r0, [pc, #212]	; (80013b0 <MX_GPIO_Init+0x200>)
 80012da:	f001 fa23 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE7
                           PE8 PE9 PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 80012de:	f248 739c 	movw	r3, #34716	; 0x879c
 80012e2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4829      	ldr	r0, [pc, #164]	; (800139c <MX_GPIO_Init+0x1ec>)
 80012f8:	f001 f86c 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4822      	ldr	r0, [pc, #136]	; (80013a0 <MX_GPIO_Init+0x1f0>)
 8001316:	f001 f85d 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800131a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	481c      	ldr	r0, [pc, #112]	; (80013a4 <MX_GPIO_Init+0x1f4>)
 8001334:	f001 f84e 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001338:	2303      	movs	r3, #3
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <MX_GPIO_Init+0x1f8>)
 8001350:	f001 f840 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001354:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <MX_GPIO_Init+0x1fc>)
 800136e:	f001 f831 	bl	80023d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001372:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4809      	ldr	r0, [pc, #36]	; (80013b0 <MX_GPIO_Init+0x200>)
 800138c:	f001 f822 	bl	80023d4 <HAL_GPIO_Init>

}
 8001390:	bf00      	nop
 8001392:	3730      	adds	r7, #48	; 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	58024400 	.word	0x58024400
 800139c:	58021000 	.word	0x58021000
 80013a0:	58020800 	.word	0x58020800
 80013a4:	58021400 	.word	0x58021400
 80013a8:	58021800 	.word	0x58021800
 80013ac:	58020400 	.word	0x58020400
 80013b0:	58020c00 	.word	0x58020c00

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>

080013be <_ZN6PUSHERC1Ev>:
#define PUSHER_D_IN2_PORT GPIOF
#define PUSHER_D_IN2_PIN GPIO_PIN_15

#define PUSHER_SPEED 33.6

class PUSHER{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9c1 2300 	strd	r2, r3, [r1]
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <main_function>:
#include "script.h"
int b=0;
int scriptrun =0;

extern TIM_HandleTypeDef htim1;
void main_function(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b0a0      	sub	sp, #128	; 0x80
 8001408:	af00      	add	r7, sp, #0
	PUSHER pusher_A;
 800140a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ffd5 	bl	80013be <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 8001414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ffd0 	bl	80013be <_ZN6PUSHERC1Ev>
	PUSHER pusher_C;
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffcb 	bl	80013be <_ZN6PUSHERC1Ev>
	PUSHER pusher_D;
 8001428:	463b      	mov	r3, r7
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ffc7 	bl	80013be <_ZN6PUSHERC1Ev>
	stm_setup();
 8001430:	f000 f82a 	bl	8001488 <stm_setup>
	while(1){
		script();
 8001434:	f000 fa80 	bl	8001938 <_Z6scriptv>
		pusher_A.distence();
 8001438:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f82f 	bl	80014a0 <_ZN6PUSHER8distenceEv>
		pusher_A.pusher_move();
 8001442:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f87a 	bl	8001540 <_ZN6PUSHER11pusher_moveEv>
		pusher_B.distence();
 800144c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f825 	bl	80014a0 <_ZN6PUSHER8distenceEv>
		pusher_B.pusher_move();
 8001456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f870 	bl	8001540 <_ZN6PUSHER11pusher_moveEv>
		pusher_C.distence();
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f81b 	bl	80014a0 <_ZN6PUSHER8distenceEv>
		pusher_C.pusher_move();
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f866 	bl	8001540 <_ZN6PUSHER11pusher_moveEv>
		pusher_D.distence();
 8001474:	463b      	mov	r3, r7
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f812 	bl	80014a0 <_ZN6PUSHER8distenceEv>
		pusher_D.pusher_move();
 800147c:	463b      	mov	r3, r7
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f85e 	bl	8001540 <_ZN6PUSHER11pusher_moveEv>
		script();
 8001484:	e7d6      	b.n	8001434 <main_function+0x30>
	...

08001488 <stm_setup>:
	}
}
void stm_setup(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);//main Timer
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <stm_setup+0x14>)
 800148e:	f002 f8d3 	bl	8003638 <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 8001492:	f7ff fa65 	bl	8000960 <_Z13DC_motor_initv>
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	240003f0 	.word	0x240003f0

080014a0 <_ZN6PUSHER8distenceEv>:
	pusher_B.state = hight_b;
	pusher_C.state = hight_c;
	pusher_D.state = hight_d;
}

void PUSHER::distence(){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <_ZN6PUSHER8distenceEv+0x8c>)
 80014aa:	ed93 6b00 	vldr	d6, [r3]
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <_ZN6PUSHER8distenceEv+0x8c>)
 80014b0:	ed93 7b02 	vldr	d7, [r3, #8]
 80014b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014b8:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80014bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <_ZN6PUSHER8distenceEv+0x8c>)
 80014c2:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <_ZN6PUSHER8distenceEv+0x90>)
 80014c8:	ed93 6b00 	vldr	d6, [r3]
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <_ZN6PUSHER8distenceEv+0x90>)
 80014ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80014d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014d6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80014da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <_ZN6PUSHER8distenceEv+0x90>)
 80014e0:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_C.d = (pusher_C.state - pusher_C.p_state)*10;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_ZN6PUSHER8distenceEv+0x94>)
 80014e6:	ed93 6b00 	vldr	d6, [r3]
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <_ZN6PUSHER8distenceEv+0x94>)
 80014ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80014f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014f4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80014f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <_ZN6PUSHER8distenceEv+0x94>)
 80014fe:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_D.d = (pusher_D.state - pusher_D.p_state)*10;
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <_ZN6PUSHER8distenceEv+0x98>)
 8001504:	ed93 6b00 	vldr	d6, [r3]
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <_ZN6PUSHER8distenceEv+0x98>)
 800150a:	ed93 7b02 	vldr	d7, [r3, #8]
 800150e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001512:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <_ZN6PUSHER8distenceEv+0x98>)
 800151c:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	24000608 	.word	0x24000608
 8001530:	24000628 	.word	0x24000628
 8001534:	24000648 	.word	0x24000648
 8001538:	24000668 	.word	0x24000668
 800153c:	00000000 	.word	0x00000000

08001540 <_ZN6PUSHER11pusher_moveEv>:
void PUSHER::pusher_move(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	/*pusher down*/
	if(pusher_A.d >0){
 8001548:	4bc7      	ldr	r3, [pc, #796]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 800154a:	ed93 7b04 	vldr	d7, [r3, #16]
 800154e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	dd22      	ble.n	800159e <_ZN6PUSHER11pusher_moveEv+0x5e>
		HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155e:	48c3      	ldr	r0, [pc, #780]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001560:	f001 f8e0 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156a:	48c0      	ldr	r0, [pc, #768]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 800156c:	f001 f8da 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_Delay(pusher_A.d*1000/PUSHER_SPEED);
 8001570:	4bbd      	ldr	r3, [pc, #756]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 8001572:	ed93 7b04 	vldr	d7, [r3, #16]
 8001576:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001858 <_ZN6PUSHER11pusher_moveEv+0x318>
 800157a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800157e:	ed9f 5bb8 	vldr	d5, [pc, #736]	; 8001860 <_ZN6PUSHER11pusher_moveEv+0x320>
 8001582:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001586:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800158a:	ee17 0a90 	vmov	r0, s15
 800158e:	f000 fded 	bl	800216c <HAL_Delay>
		pusher_A.p_state = pusher_A.state;
 8001592:	4bb5      	ldr	r3, [pc, #724]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	49b3      	ldr	r1, [pc, #716]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 800159a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_B.d >0){
 800159e:	4bb4      	ldr	r3, [pc, #720]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80015a0:	ed93 7b04 	vldr	d7, [r3, #16]
 80015a4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	dd22      	ble.n	80015f4 <_ZN6PUSHER11pusher_moveEv+0xb4>
		HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b4:	48ad      	ldr	r0, [pc, #692]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80015b6:	f001 f8b5 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c0:	48aa      	ldr	r0, [pc, #680]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80015c2:	f001 f8af 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_Delay(pusher_B.d*1000/PUSHER_SPEED);
 80015c6:	4baa      	ldr	r3, [pc, #680]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80015c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80015cc:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8001858 <_ZN6PUSHER11pusher_moveEv+0x318>
 80015d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015d4:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 8001860 <_ZN6PUSHER11pusher_moveEv+0x320>
 80015d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015e0:	ee17 0a90 	vmov	r0, s15
 80015e4:	f000 fdc2 	bl	800216c <HAL_Delay>
		pusher_B.p_state = pusher_B.state;
 80015e8:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	49a0      	ldr	r1, [pc, #640]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80015f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_C.d >0){
 80015f4:	4b9f      	ldr	r3, [pc, #636]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 80015f6:	ed93 7b04 	vldr	d7, [r3, #16]
 80015fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	dd20      	ble.n	8001646 <_ZN6PUSHER11pusher_moveEv+0x106>
		HAL_GPIO_WritePin(PUSHER_C_IN1_PORT, PUSHER_C_IN1_PIN, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	4898      	ldr	r0, [pc, #608]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 800160a:	f001 f88b 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_C_IN2_PORT, PUSHER_C_IN2_PIN, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	4899      	ldr	r0, [pc, #612]	; (8001878 <_ZN6PUSHER11pusher_moveEv+0x338>)
 8001614:	f001 f886 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_Delay(pusher_C.d*1000/PUSHER_SPEED);
 8001618:	4b96      	ldr	r3, [pc, #600]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 800161a:	ed93 7b04 	vldr	d7, [r3, #16]
 800161e:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8001858 <_ZN6PUSHER11pusher_moveEv+0x318>
 8001622:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001626:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8001860 <_ZN6PUSHER11pusher_moveEv+0x320>
 800162a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800162e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001632:	ee17 0a90 	vmov	r0, s15
 8001636:	f000 fd99 	bl	800216c <HAL_Delay>
		pusher_C.p_state = pusher_C.state;
 800163a:	4b8e      	ldr	r3, [pc, #568]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	498c      	ldr	r1, [pc, #560]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 8001642:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_D.d >0){
 8001646:	4b8d      	ldr	r3, [pc, #564]	; (800187c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 8001648:	ed93 7b04 	vldr	d7, [r3, #16]
 800164c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	dd21      	ble.n	800169a <_ZN6PUSHER11pusher_moveEv+0x15a>
		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_SET);
 8001656:	2201      	movs	r2, #1
 8001658:	2101      	movs	r1, #1
 800165a:	4887      	ldr	r0, [pc, #540]	; (8001878 <_ZN6PUSHER11pusher_moveEv+0x338>)
 800165c:	f001 f862 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001666:	4886      	ldr	r0, [pc, #536]	; (8001880 <_ZN6PUSHER11pusher_moveEv+0x340>)
 8001668:	f001 f85c 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_Delay(pusher_D.d*1000/PUSHER_SPEED);
 800166c:	4b83      	ldr	r3, [pc, #524]	; (800187c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 800166e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001672:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8001858 <_ZN6PUSHER11pusher_moveEv+0x318>
 8001676:	ee27 6b06 	vmul.f64	d6, d7, d6
 800167a:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8001860 <_ZN6PUSHER11pusher_moveEv+0x320>
 800167e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001682:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001686:	ee17 0a90 	vmov	r0, s15
 800168a:	f000 fd6f 	bl	800216c <HAL_Delay>
		pusher_D.p_state = pusher_D.state;
 800168e:	4b7b      	ldr	r3, [pc, #492]	; (800187c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	4979      	ldr	r1, [pc, #484]	; (800187c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 8001696:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	/*pusher up*/
	if(pusher_A.d <0){
 800169a:	4b73      	ldr	r3, [pc, #460]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 800169c:	ed93 7b04 	vldr	d7, [r3, #16]
 80016a0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80016a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a8:	d524      	bpl.n	80016f4 <_ZN6PUSHER11pusher_moveEv+0x1b4>
		HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b0:	486e      	ldr	r0, [pc, #440]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80016b2:	f001 f837 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016bc:	486b      	ldr	r0, [pc, #428]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 80016be:	f001 f831 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_Delay(-pusher_A.d*1000/PUSHER_SPEED);
 80016c2:	4b69      	ldr	r3, [pc, #420]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 80016c4:	ed93 7b04 	vldr	d7, [r3, #16]
 80016c8:	eeb1 7b47 	vneg.f64	d7, d7
 80016cc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001858 <_ZN6PUSHER11pusher_moveEv+0x318>
 80016d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016d4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8001860 <_ZN6PUSHER11pusher_moveEv+0x320>
 80016d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016e0:	ee17 0a90 	vmov	r0, s15
 80016e4:	f000 fd42 	bl	800216c <HAL_Delay>
		pusher_A.p_state = pusher_A.state;
 80016e8:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	495e      	ldr	r1, [pc, #376]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 80016f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_B.d <0){
 80016f4:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 80016f6:	ed93 7b04 	vldr	d7, [r3, #16]
 80016fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d524      	bpl.n	800174e <_ZN6PUSHER11pusher_moveEv+0x20e>
		HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800170a:	4858      	ldr	r0, [pc, #352]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 800170c:	f001 f80a 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 8001710:	2201      	movs	r2, #1
 8001712:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001716:	4855      	ldr	r0, [pc, #340]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001718:	f001 f804 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_Delay(-pusher_B.d*1000/PUSHER_SPEED);
 800171c:	4b54      	ldr	r3, [pc, #336]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 800171e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001722:	eeb1 7b47 	vneg.f64	d7, d7
 8001726:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8001858 <_ZN6PUSHER11pusher_moveEv+0x318>
 800172a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800172e:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8001860 <_ZN6PUSHER11pusher_moveEv+0x320>
 8001732:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001736:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800173a:	ee17 0a90 	vmov	r0, s15
 800173e:	f000 fd15 	bl	800216c <HAL_Delay>
		pusher_B.p_state = pusher_B.state;
 8001742:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	4949      	ldr	r1, [pc, #292]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 800174a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_C.d <0){
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 8001750:	ed93 7b04 	vldr	d7, [r3, #16]
 8001754:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	d522      	bpl.n	80017a4 <_ZN6PUSHER11pusher_moveEv+0x264>
		HAL_GPIO_WritePin(PUSHER_C_IN1_PORT, PUSHER_C_IN1_PIN, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	4842      	ldr	r0, [pc, #264]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001764:	f000 ffde 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_C_IN2_PORT, PUSHER_C_IN2_PIN, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2102      	movs	r1, #2
 800176c:	4842      	ldr	r0, [pc, #264]	; (8001878 <_ZN6PUSHER11pusher_moveEv+0x338>)
 800176e:	f000 ffd9 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_Delay(-pusher_C.d*1000/PUSHER_SPEED);
 8001772:	4b40      	ldr	r3, [pc, #256]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 8001774:	ed93 7b04 	vldr	d7, [r3, #16]
 8001778:	eeb1 7b47 	vneg.f64	d7, d7
 800177c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8001858 <_ZN6PUSHER11pusher_moveEv+0x318>
 8001780:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001784:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8001860 <_ZN6PUSHER11pusher_moveEv+0x320>
 8001788:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800178c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001790:	ee17 0a90 	vmov	r0, s15
 8001794:	f000 fcea 	bl	800216c <HAL_Delay>
		pusher_C.p_state = pusher_C.state;
 8001798:	4b36      	ldr	r3, [pc, #216]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	4935      	ldr	r1, [pc, #212]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 80017a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(pusher_D.d <0){
 80017a4:	4b35      	ldr	r3, [pc, #212]	; (800187c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 80017a6:	ed93 7b04 	vldr	d7, [r3, #16]
 80017aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80017ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b2:	d523      	bpl.n	80017fc <_ZN6PUSHER11pusher_moveEv+0x2bc>
		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	482f      	ldr	r0, [pc, #188]	; (8001878 <_ZN6PUSHER11pusher_moveEv+0x338>)
 80017ba:	f000 ffb3 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_SET);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c4:	482e      	ldr	r0, [pc, #184]	; (8001880 <_ZN6PUSHER11pusher_moveEv+0x340>)
 80017c6:	f000 ffad 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_Delay(-pusher_D.d*1000/PUSHER_SPEED);
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 80017cc:	ed93 7b04 	vldr	d7, [r3, #16]
 80017d0:	eeb1 7b47 	vneg.f64	d7, d7
 80017d4:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001858 <_ZN6PUSHER11pusher_moveEv+0x318>
 80017d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017dc:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8001860 <_ZN6PUSHER11pusher_moveEv+0x320>
 80017e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80017e8:	ee17 0a90 	vmov	r0, s15
 80017ec:	f000 fcbe 	bl	800216c <HAL_Delay>
		pusher_D.p_state = pusher_D.state;
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	4921      	ldr	r1, [pc, #132]	; (800187c <_ZN6PUSHER11pusher_moveEv+0x33c>)
 80017f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	/*pusher stop*/
	if(pusher_A.d ==0){
 80017fc:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <_ZN6PUSHER11pusher_moveEv+0x328>)
 80017fe:	ed93 7b04 	vldr	d7, [r3, #16]
 8001802:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	d10b      	bne.n	8001824 <_ZN6PUSHER11pusher_moveEv+0x2e4>
		HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 800180c:	2200      	movs	r2, #0
 800180e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001812:	4816      	ldr	r0, [pc, #88]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001814:	f000 ff86 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181e:	4813      	ldr	r0, [pc, #76]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001820:	f000 ff80 	bl	8002724 <HAL_GPIO_WritePin>

	}

	if(pusher_B.d ==0){
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <_ZN6PUSHER11pusher_moveEv+0x330>)
 8001826:	ed93 7b04 	vldr	d7, [r3, #16]
 800182a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	d10b      	bne.n	800184c <_ZN6PUSHER11pusher_moveEv+0x30c>
		HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800183a:	480c      	ldr	r0, [pc, #48]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 800183c:	f000 ff72 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001846:	4809      	ldr	r0, [pc, #36]	; (800186c <_ZN6PUSHER11pusher_moveEv+0x32c>)
 8001848:	f000 ff6c 	bl	8002724 <HAL_GPIO_WritePin>

	}

	if(pusher_C.d ==0){
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <_ZN6PUSHER11pusher_moveEv+0x334>)
 800184e:	ed93 7b04 	vldr	d7, [r3, #16]
 8001852:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001856:	e015      	b.n	8001884 <_ZN6PUSHER11pusher_moveEv+0x344>
 8001858:	00000000 	.word	0x00000000
 800185c:	408f4000 	.word	0x408f4000
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	4040cccc 	.word	0x4040cccc
 8001868:	24000608 	.word	0x24000608
 800186c:	58021000 	.word	0x58021000
 8001870:	24000628 	.word	0x24000628
 8001874:	24000648 	.word	0x24000648
 8001878:	58021800 	.word	0x58021800
 800187c:	24000668 	.word	0x24000668
 8001880:	58021400 	.word	0x58021400
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	d109      	bne.n	800189e <_ZN6PUSHER11pusher_moveEv+0x35e>
		HAL_GPIO_WritePin(PUSHER_C_IN1_PORT, PUSHER_C_IN1_PIN, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	480f      	ldr	r0, [pc, #60]	; (80018cc <_ZN6PUSHER11pusher_moveEv+0x38c>)
 8001890:	f000 ff48 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_C_IN2_PORT, PUSHER_C_IN2_PIN, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2102      	movs	r1, #2
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <_ZN6PUSHER11pusher_moveEv+0x390>)
 800189a:	f000 ff43 	bl	8002724 <HAL_GPIO_WritePin>

	}

	if(pusher_D.d ==0){
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <_ZN6PUSHER11pusher_moveEv+0x394>)
 80018a0:	ed93 7b04 	vldr	d7, [r3, #16]
 80018a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	d10a      	bne.n	80018c4 <_ZN6PUSHER11pusher_moveEv+0x384>
		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2101      	movs	r1, #1
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <_ZN6PUSHER11pusher_moveEv+0x390>)
 80018b4:	f000 ff36 	bl	8002724 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <_ZN6PUSHER11pusher_moveEv+0x398>)
 80018c0:	f000 ff30 	bl	8002724 <HAL_GPIO_WritePin>

	}
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	58021000 	.word	0x58021000
 80018d0:	58021800 	.word	0x58021800
 80018d4:	24000668 	.word	0x24000668
 80018d8:	58021400 	.word	0x58021400

080018dc <_Z41__static_initialization_and_destruction_0ii>:
		HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
		HAL_Delay(5000);
		pusher_A.p_state = 0;
		pusher_A.state = 0;
	}
}
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d110      	bne.n	800190e <_Z41__static_initialization_and_destruction_0ii+0x32>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d10b      	bne.n	800190e <_Z41__static_initialization_and_destruction_0ii+0x32>
PUSHER pusher_A;
 80018f6:	4808      	ldr	r0, [pc, #32]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80018f8:	f7ff fd61 	bl	80013be <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80018fe:	f7ff fd5e 	bl	80013be <_ZN6PUSHERC1Ev>
PUSHER pusher_C;
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001904:	f7ff fd5b 	bl	80013be <_ZN6PUSHERC1Ev>
PUSHER pusher_D;
 8001908:	4806      	ldr	r0, [pc, #24]	; (8001924 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800190a:	f7ff fd58 	bl	80013be <_ZN6PUSHERC1Ev>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	24000608 	.word	0x24000608
 800191c:	24000628 	.word	0x24000628
 8001920:	24000648 	.word	0x24000648
 8001924:	24000668 	.word	0x24000668

08001928 <_GLOBAL__sub_I_pusher_A>:
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
 800192c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001930:	2001      	movs	r0, #1
 8001932:	f7ff ffd3 	bl	80018dc <_Z41__static_initialization_and_destruction_0ii>
 8001936:	bd80      	pop	{r7, pc}

08001938 <_Z6scriptv>:
//PUSHER pusher_B;
//PUSHER pusher_C;
//PUSHER pusher_D;
//PUSHER pusher_t;
extern int scriptrun;
void script(){
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	if(scriptrun == 1){
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <_Z6scriptv+0xc0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d142      	bne.n	80019ca <_Z6scriptv+0x92>
		HAL_Delay(1000);
 8001944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001948:	f000 fc10 	bl	800216c <HAL_Delay>
		script_wheel(1,0,0,3000);
 800194c:	ed9f 3b20 	vldr	d3, [pc, #128]	; 80019d0 <_Z6scriptv+0x98>
 8001950:	ed9f 2b21 	vldr	d2, [pc, #132]	; 80019d8 <_Z6scriptv+0xa0>
 8001954:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80019d8 <_Z6scriptv+0xa0>
 8001958:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800195c:	f000 f84e 	bl	80019fc <_Z12script_wheeldddd>
		script_wheel(0,0,0,50);
 8001960:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 80019e0 <_Z6scriptv+0xa8>
 8001964:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 80019d8 <_Z6scriptv+0xa0>
 8001968:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80019d8 <_Z6scriptv+0xa0>
 800196c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80019d8 <_Z6scriptv+0xa0>
 8001970:	f000 f844 	bl	80019fc <_Z12script_wheeldddd>
		script_wheel(0,0,1,4500);
 8001974:	ed9f 3b1c 	vldr	d3, [pc, #112]	; 80019e8 <_Z6scriptv+0xb0>
 8001978:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800197c:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80019d8 <_Z6scriptv+0xa0>
 8001980:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80019d8 <_Z6scriptv+0xa0>
 8001984:	f000 f83a 	bl	80019fc <_Z12script_wheeldddd>
		script_wheel(0,0,0,50);
 8001988:	ed9f 3b15 	vldr	d3, [pc, #84]	; 80019e0 <_Z6scriptv+0xa8>
 800198c:	ed9f 2b12 	vldr	d2, [pc, #72]	; 80019d8 <_Z6scriptv+0xa0>
 8001990:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80019d8 <_Z6scriptv+0xa0>
 8001994:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80019d8 <_Z6scriptv+0xa0>
 8001998:	f000 f830 	bl	80019fc <_Z12script_wheeldddd>
		script_wheel(0,-1,0,4000);
 800199c:	ed9f 3b14 	vldr	d3, [pc, #80]	; 80019f0 <_Z6scriptv+0xb8>
 80019a0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 80019d8 <_Z6scriptv+0xa0>
 80019a4:	eebf 1b00 	vmov.f64	d1, #240	; 0xbf800000 -1.0
 80019a8:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80019d8 <_Z6scriptv+0xa0>
 80019ac:	f000 f826 	bl	80019fc <_Z12script_wheeldddd>
		script_wheel(0,0,0,50);
 80019b0:	ed9f 3b0b 	vldr	d3, [pc, #44]	; 80019e0 <_Z6scriptv+0xa8>
 80019b4:	ed9f 2b08 	vldr	d2, [pc, #32]	; 80019d8 <_Z6scriptv+0xa0>
 80019b8:	ed9f 1b07 	vldr	d1, [pc, #28]	; 80019d8 <_Z6scriptv+0xa0>
 80019bc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80019d8 <_Z6scriptv+0xa0>
 80019c0:	f000 f81c 	bl	80019fc <_Z12script_wheeldddd>
//		HAL_Delay(1000);
//		script_wheel(1,0,0,10000);
//		pusher_t.distence(10,5,5,10);
//		HAL_Delay(1000);
//		script_wheel(1,0,0,10000);
		scriptrun = 0;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <_Z6scriptv+0xc0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
	}
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	00000000 	.word	0x00000000
 80019d4:	40a77000 	.word	0x40a77000
	...
 80019e4:	40490000 	.word	0x40490000
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40b19400 	.word	0x40b19400
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40af4000 	.word	0x40af4000
 80019f8:	24000604 	.word	0x24000604

080019fc <_Z12script_wheeldddd>:
void script_wheel(double s_Vx,double s_Vy,double s_w,double T){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	ed87 0b06 	vstr	d0, [r7, #24]
 8001a06:	ed87 1b04 	vstr	d1, [r7, #16]
 8001a0a:	ed87 2b02 	vstr	d2, [r7, #8]
 8001a0e:	ed87 3b00 	vstr	d3, [r7]
	Vx = s_Vx;
 8001a12:	490d      	ldr	r1, [pc, #52]	; (8001a48 <_Z12script_wheeldddd+0x4c>)
 8001a14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a18:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = s_Vy;
 8001a1c:	490b      	ldr	r1, [pc, #44]	; (8001a4c <_Z12script_wheeldddd+0x50>)
 8001a1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a22:	e9c1 2300 	strd	r2, r3, [r1]
	W = s_w;
 8001a26:	490a      	ldr	r1, [pc, #40]	; (8001a50 <_Z12script_wheeldddd+0x54>)
 8001a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a2c:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(T);
 8001a30:	ed97 7b00 	vldr	d7, [r7]
 8001a34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a38:	ee17 0a90 	vmov	r0, s15
 8001a3c:	f000 fb96 	bl	800216c <HAL_Delay>
}
 8001a40:	bf00      	nop
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	240001f8 	.word	0x240001f8
 8001a4c:	24000200 	.word	0x24000200
 8001a50:	24000208 	.word	0x24000208

08001a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_MspInit+0x30>)
 8001a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a60:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_MspInit+0x30>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_MspInit+0x30>)
 8001a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58024400 	.word	0x58024400

08001a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_TIM_Base_MspInit+0x78>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12e      	bne.n	8001af8 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa0:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	2018      	movs	r0, #24
 8001abe:	f000 fc54 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001ac2:	2018      	movs	r0, #24
 8001ac4:	f000 fc6b 	bl	800239e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2019      	movs	r0, #25
 8001ace:	f000 fc4c 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ad2:	2019      	movs	r0, #25
 8001ad4:	f000 fc63 	bl	800239e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	201a      	movs	r0, #26
 8001ade:	f000 fc44 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001ae2:	201a      	movs	r0, #26
 8001ae4:	f000 fc5b 	bl	800239e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	201b      	movs	r0, #27
 8001aee:	f000 fc3c 	bl	800236a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001af2:	201b      	movs	r0, #27
 8001af4:	f000 fc53 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40010000 	.word	0x40010000
 8001b04:	58024400 	.word	0x58024400

08001b08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b090      	sub	sp, #64	; 0x40
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d14e      	bne.n	8001bc8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	4b77      	ldr	r3, [pc, #476]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b30:	4a75      	ldr	r2, [pc, #468]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b3a:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b46:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b6f      	ldr	r3, [pc, #444]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	4a6e      	ldr	r2, [pc, #440]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b58:	4b6b      	ldr	r3, [pc, #428]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a66      	ldr	r2, [pc, #408]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b96:	2301      	movs	r3, #1
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	485a      	ldr	r0, [pc, #360]	; (8001d0c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ba2:	f000 fc17 	bl	80023d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4853      	ldr	r0, [pc, #332]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x208>)
 8001bc2:	f000 fc07 	bl	80023d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001bc6:	e09b      	b.n	8001d00 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12e      	bne.n	8001c30 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd2:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001be4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf0:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf6:	4a44      	ldr	r2, [pc, #272]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c00:	4b41      	ldr	r3, [pc, #260]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c0e:	2330      	movs	r3, #48	; 0x30
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c26:	4619      	mov	r1, r3
 8001c28:	4839      	ldr	r0, [pc, #228]	; (8001d10 <HAL_TIM_Encoder_MspInit+0x208>)
 8001c2a:	f000 fbd3 	bl	80023d4 <HAL_GPIO_Init>
}
 8001c2e:	e067      	b.n	8001d00 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <HAL_TIM_Encoder_MspInit+0x210>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d12f      	bne.n	8001c9a <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c40:	4a31      	ldr	r2, [pc, #196]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c4a:	4b2f      	ldr	r3, [pc, #188]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5e:	4a2a      	ldr	r2, [pc, #168]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c90:	4619      	mov	r1, r3
 8001c92:	4822      	ldr	r0, [pc, #136]	; (8001d1c <HAL_TIM_Encoder_MspInit+0x214>)
 8001c94:	f000 fb9e 	bl	80023d4 <HAL_GPIO_Init>
}
 8001c98:	e032      	b.n	8001d00 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a20      	ldr	r2, [pc, #128]	; (8001d20 <HAL_TIM_Encoder_MspInit+0x218>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d12d      	bne.n	8001d00 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001caa:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001cb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	4a0f      	ldr	r2, [pc, #60]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_TIM_Encoder_MspInit+0x200>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4804      	ldr	r0, [pc, #16]	; (8001d0c <HAL_TIM_Encoder_MspInit+0x204>)
 8001cfc:	f000 fb6a 	bl	80023d4 <HAL_GPIO_Init>
}
 8001d00:	bf00      	nop
 8001d02:	3740      	adds	r7, #64	; 0x40
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	58020000 	.word	0x58020000
 8001d10:	58020400 	.word	0x58020400
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	58020c00 	.word	0x58020c00
 8001d20:	40000c00 	.word	0x40000c00

08001d24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_TIM_PWM_MspInit+0x68>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10f      	bne.n	8001d56 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d54:	e013      	b.n	8001d7e <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM15)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <HAL_TIM_PWM_MspInit+0x70>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d10e      	bne.n	8001d7e <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_TIM_PWM_MspInit+0x6c>)
 8001d72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40001800 	.word	0x40001800
 8001d90:	58024400 	.word	0x58024400
 8001d94:	40014000 	.word	0x40014000

08001d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <HAL_TIM_MspPostInit+0xb4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d120      	bne.n	8001dfc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_TIM_MspPostInit+0xb8>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc0:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_TIM_MspPostInit+0xb8>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_TIM_MspPostInit+0xb8>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001dd8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001dea:	2302      	movs	r3, #2
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4817      	ldr	r0, [pc, #92]	; (8001e54 <HAL_TIM_MspPostInit+0xbc>)
 8001df6:	f000 faed 	bl	80023d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001dfa:	e023      	b.n	8001e44 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <HAL_TIM_MspPostInit+0xc0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d11e      	bne.n	8001e44 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_TIM_MspPostInit+0xb8>)
 8001e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0c:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_TIM_MspPostInit+0xb8>)
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_TIM_MspPostInit+0xb8>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e24:	2360      	movs	r3, #96	; 0x60
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001e34:	2304      	movs	r3, #4
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	; (8001e5c <HAL_TIM_MspPostInit+0xc4>)
 8001e40:	f000 fac8 	bl	80023d4 <HAL_GPIO_Init>
}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40001800 	.word	0x40001800
 8001e50:	58024400 	.word	0x58024400
 8001e54:	58020400 	.word	0x58020400
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	58021000 	.word	0x58021000

08001e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <NMI_Handler+0x4>

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 f93e 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <TIM1_BRK_IRQHandler+0x10>)
 8001eba:	f001 ff0b 	bl	8003cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	240003f0 	.word	0x240003f0

08001ec8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <TIM1_UP_IRQHandler+0x10>)
 8001ece:	f001 ff01 	bl	8003cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	240003f0 	.word	0x240003f0

08001edc <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <TIM1_TRG_COM_IRQHandler+0x10>)
 8001ee2:	f001 fef7 	bl	8003cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	240003f0 	.word	0x240003f0

08001ef0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM1_CC_IRQHandler+0x10>)
 8001ef6:	f001 feed 	bl	8003cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	240003f0 	.word	0x240003f0

08001f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f08:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <SystemInit+0xd0>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	4a31      	ldr	r2, [pc, #196]	; (8001fd4 <SystemInit+0xd0>)
 8001f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f18:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <SystemInit+0xd4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d807      	bhi.n	8001f34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f24:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <SystemInit+0xd4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 030f 	bic.w	r3, r3, #15
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	; (8001fd8 <SystemInit+0xd4>)
 8001f2e:	f043 0307 	orr.w	r3, r3, #7
 8001f32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <SystemInit+0xd8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <SystemInit+0xd8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f40:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <SystemInit+0xd8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <SystemInit+0xd8>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4924      	ldr	r1, [pc, #144]	; (8001fdc <SystemInit+0xd8>)
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <SystemInit+0xdc>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <SystemInit+0xd4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d007      	beq.n	8001f6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <SystemInit+0xd4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 030f 	bic.w	r3, r3, #15
 8001f66:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <SystemInit+0xd4>)
 8001f68:	f043 0307 	orr.w	r3, r3, #7
 8001f6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <SystemInit+0xd8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <SystemInit+0xd8>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <SystemInit+0xd8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <SystemInit+0xd8>)
 8001f82:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <SystemInit+0xe0>)
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <SystemInit+0xd8>)
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <SystemInit+0xe4>)
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <SystemInit+0xd8>)
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <SystemInit+0xe8>)
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <SystemInit+0xd8>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <SystemInit+0xd8>)
 8001f9a:	4a14      	ldr	r2, [pc, #80]	; (8001fec <SystemInit+0xe8>)
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <SystemInit+0xd8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <SystemInit+0xd8>)
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <SystemInit+0xe8>)
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <SystemInit+0xd8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <SystemInit+0xd8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <SystemInit+0xd8>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <SystemInit+0xd8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <SystemInit+0xec>)
 8001fc4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001fc8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00
 8001fd8:	52002000 	.word	0x52002000
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fe4:	02020200 	.word	0x02020200
 8001fe8:	01ff0000 	.word	0x01ff0000
 8001fec:	01010280 	.word	0x01010280
 8001ff0:	52004000 	.word	0x52004000

08001ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800202c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ff8:	f7ff ff84 	bl	8001f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ffc:	480c      	ldr	r0, [pc, #48]	; (8002030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ffe:	490d      	ldr	r1, [pc, #52]	; (8002034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002014:	4c0a      	ldr	r4, [pc, #40]	; (8002040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002022:	f002 ff45 	bl	8004eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002026:	f7fe fdbf 	bl	8000ba8 <main>
  bx  lr
 800202a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800202c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002030:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002034:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8002038:	08004f40 	.word	0x08004f40
  ldr r2, =_sbss
 800203c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002040:	2400068c 	.word	0x2400068c

08002044 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC3_IRQHandler>
	...

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204e:	2003      	movs	r0, #3
 8002050:	f000 f980 	bl	8002354 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002054:	f001 f91e 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_Init+0x68>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	4913      	ldr	r1, [pc, #76]	; (80020b4 <HAL_Init+0x6c>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
 8002070:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_Init+0x68>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	4a0e      	ldr	r2, [pc, #56]	; (80020b4 <HAL_Init+0x6c>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	4a0b      	ldr	r2, [pc, #44]	; (80020b8 <HAL_Init+0x70>)
 800208a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_Init+0x74>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002092:	200f      	movs	r0, #15
 8002094:	f000 f814 	bl	80020c0 <HAL_InitTick>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e002      	b.n	80020a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020a2:	f7ff fcd7 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	58024400 	.word	0x58024400
 80020b4:	08004f20 	.word	0x08004f20
 80020b8:	240001cc 	.word	0x240001cc
 80020bc:	240001c8 	.word	0x240001c8

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_InitTick+0x60>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e021      	b.n	8002118 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_InitTick+0x64>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_InitTick+0x60>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f965 	bl	80023ba <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f000 f92f 	bl	800236a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_InitTick+0x68>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	240001d4 	.word	0x240001d4
 8002124:	240001c8 	.word	0x240001c8
 8002128:	240001d0 	.word	0x240001d0

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	240001d4 	.word	0x240001d4
 8002150:	24000688 	.word	0x24000688

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	24000688 	.word	0x24000688

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ffee 	bl	8002154 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffde 	bl	8002154 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	240001d4 	.word	0x240001d4

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <__NVIC_SetPriorityGrouping+0x40>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <__NVIC_SetPriorityGrouping+0x40>)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	60d3      	str	r3, [r2, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00
 80021f8:	05fa0000 	.word	0x05fa0000

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	; (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	; (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	; (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002320:	d301      	bcc.n	8002326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002322:	2301      	movs	r3, #1
 8002324:	e00f      	b.n	8002346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <SysTick_Config+0x40>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232e:	210f      	movs	r1, #15
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f7ff ff8e 	bl	8002254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SysTick_Config+0x40>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <SysTick_Config+0x40>)
 8002340:	2207      	movs	r2, #7
 8002342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	e000e010 	.word	0xe000e010

08002354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff29 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff40 	bl	80021fc <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff90 	bl	80022a8 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5f 	bl	8002254 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff33 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa4 	bl	8002310 <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023e2:	4b86      	ldr	r3, [pc, #536]	; (80025fc <HAL_GPIO_Init+0x228>)
 80023e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023e6:	e18c      	b.n	8002702 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	2101      	movs	r1, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 817e 	beq.w	80026fc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d005      	beq.n	8002418 <HAL_GPIO_Init+0x44>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d130      	bne.n	800247a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800244e:	2201      	movs	r2, #1
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 0201 	and.w	r2, r3, #1
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b03      	cmp	r3, #3
 8002484:	d017      	beq.n	80024b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d123      	bne.n	800250a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	08da      	lsrs	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3208      	adds	r2, #8
 80024ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	691a      	ldr	r2, [r3, #16]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	08da      	lsrs	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3208      	adds	r2, #8
 8002504:	69b9      	ldr	r1, [r7, #24]
 8002506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0203 	and.w	r2, r3, #3
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80d8 	beq.w	80026fc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254c:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <HAL_GPIO_Init+0x22c>)
 800254e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002552:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <HAL_GPIO_Init+0x22c>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_GPIO_Init+0x22c>)
 800255e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800256a:	4a26      	ldr	r2, [pc, #152]	; (8002604 <HAL_GPIO_Init+0x230>)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_GPIO_Init+0x234>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d04a      	beq.n	800262c <HAL_GPIO_Init+0x258>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1c      	ldr	r2, [pc, #112]	; (800260c <HAL_GPIO_Init+0x238>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02b      	beq.n	80025f6 <HAL_GPIO_Init+0x222>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_GPIO_Init+0x23c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d025      	beq.n	80025f2 <HAL_GPIO_Init+0x21e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_GPIO_Init+0x240>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01f      	beq.n	80025ee <HAL_GPIO_Init+0x21a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_GPIO_Init+0x244>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x216>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a18      	ldr	r2, [pc, #96]	; (800261c <HAL_GPIO_Init+0x248>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x212>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a17      	ldr	r2, [pc, #92]	; (8002620 <HAL_GPIO_Init+0x24c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a16      	ldr	r2, [pc, #88]	; (8002624 <HAL_GPIO_Init+0x250>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x20a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_GPIO_Init+0x254>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x206>
 80025d6:	2309      	movs	r3, #9
 80025d8:	e029      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025da:	230a      	movs	r3, #10
 80025dc:	e027      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025de:	2307      	movs	r3, #7
 80025e0:	e025      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e023      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e021      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e01f      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e01d      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e01b      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e019      	b.n	800262e <HAL_GPIO_Init+0x25a>
 80025fa:	bf00      	nop
 80025fc:	58000080 	.word	0x58000080
 8002600:	58024400 	.word	0x58024400
 8002604:	58000400 	.word	0x58000400
 8002608:	58020000 	.word	0x58020000
 800260c:	58020400 	.word	0x58020400
 8002610:	58020800 	.word	0x58020800
 8002614:	58020c00 	.word	0x58020c00
 8002618:	58021000 	.word	0x58021000
 800261c:	58021400 	.word	0x58021400
 8002620:	58021800 	.word	0x58021800
 8002624:	58021c00 	.word	0x58021c00
 8002628:	58022400 	.word	0x58022400
 800262c:	2300      	movs	r3, #0
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	f002 0203 	and.w	r2, r2, #3
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	4093      	lsls	r3, r2
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263e:	4938      	ldr	r1, [pc, #224]	; (8002720 <HAL_GPIO_Init+0x34c>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	f47f ae6b 	bne.w	80023e8 <HAL_GPIO_Init+0x14>
  }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3724      	adds	r7, #36	; 0x24
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	58000400 	.word	0x58000400

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002740:	e003      	b.n	800274a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002742:	887b      	ldrh	r3, [r7, #2]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b04      	cmp	r3, #4
 800276a:	d00a      	beq.n	8002782 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e01f      	b.n	80027be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e01d      	b.n	80027be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 0207 	bic.w	r2, r3, #7
 800278a:	490f      	ldr	r1, [pc, #60]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4313      	orrs	r3, r2
 8002790:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002792:	f7ff fcdf 	bl	8002154 <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002798:	e009      	b.n	80027ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800279a:	f7ff fcdb 	bl	8002154 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a8:	d901      	bls.n	80027ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e007      	b.n	80027be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_PWREx_ConfigSupply+0x70>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	d1ee      	bne.n	800279a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	58024800 	.word	0x58024800

080027cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e39d      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8087 	beq.w	80028fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ec:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027f6:	4b86      	ldr	r3, [pc, #536]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d007      	beq.n	8002812 <HAL_RCC_OscConfig+0x46>
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	2b18      	cmp	r3, #24
 8002806:	d110      	bne.n	800282a <HAL_RCC_OscConfig+0x5e>
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d10b      	bne.n	800282a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d06c      	beq.n	80028f8 <HAL_RCC_OscConfig+0x12c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d168      	bne.n	80028f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e377      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x76>
 8002834:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e02e      	b.n	80028a0 <HAL_RCC_OscConfig+0xd4>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x98>
 800284a:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a70      	ldr	r2, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6d      	ldr	r2, [pc, #436]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800285c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xd4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0xbc>
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a67      	ldr	r2, [pc, #412]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a64      	ldr	r2, [pc, #400]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xd4>
 8002888:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a60      	ldr	r2, [pc, #384]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a5d      	ldr	r2, [pc, #372]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7ff fc54 	bl	8002154 <HAL_GetTick>
 80028ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff fc50 	bl	8002154 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	; 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e32b      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028c2:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xe4>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff fc40 	bl	8002154 <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d8:	f7ff fc3c 	bl	8002154 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	; 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e317      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ea:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x10c>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 808c 	beq.w	8002a20 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002908:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002910:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_RCC_OscConfig+0x162>
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	2b18      	cmp	r3, #24
 8002922:	d137      	bne.n	8002994 <HAL_RCC_OscConfig+0x1c8>
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d132      	bne.n	8002994 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292e:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x17a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e2e9      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002946:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 0219 	bic.w	r2, r3, #25
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	492f      	ldr	r1, [pc, #188]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002958:	f7ff fbfc 	bl	8002154 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002960:	f7ff fbf8 	bl	8002154 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e2d3      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002972:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	061b      	lsls	r3, r3, #24
 800298c:	4920      	ldr	r1, [pc, #128]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002992:	e045      	b.n	8002a20 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d026      	beq.n	80029ea <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 0219 	bic.w	r2, r3, #25
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4919      	ldr	r1, [pc, #100]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7ff fbd1 	bl	8002154 <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b6:	f7ff fbcd 	bl	8002154 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e2a8      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	490b      	ldr	r1, [pc, #44]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
 80029e8:	e01a      	b.n	8002a20 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <HAL_RCC_OscConfig+0x244>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7ff fbad 	bl	8002154 <HAL_GetTick>
 80029fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fe:	f7ff fba9 	bl	8002154 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d903      	bls.n	8002a14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e284      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
 8002a10:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a14:	4b96      	ldr	r3, [pc, #600]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ee      	bne.n	80029fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d06a      	beq.n	8002b02 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2c:	4b90      	ldr	r3, [pc, #576]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a36:	4b8e      	ldr	r3, [pc, #568]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d007      	beq.n	8002a52 <HAL_RCC_OscConfig+0x286>
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b18      	cmp	r3, #24
 8002a46:	d11b      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2b4>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d116      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a52:	4b87      	ldr	r3, [pc, #540]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_RCC_OscConfig+0x29e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	2b80      	cmp	r3, #128	; 0x80
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e257      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a6a:	4b81      	ldr	r3, [pc, #516]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	497d      	ldr	r1, [pc, #500]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a7e:	e040      	b.n	8002b02 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d023      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a88:	4b79      	ldr	r3, [pc, #484]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a78      	ldr	r2, [pc, #480]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7ff fb5e 	bl	8002154 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a9c:	f7ff fb5a 	bl	8002154 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e235      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aae:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aba:	4b6d      	ldr	r3, [pc, #436]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	4969      	ldr	r1, [pc, #420]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60cb      	str	r3, [r1, #12]
 8002ace:	e018      	b.n	8002b02 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ad0:	4b67      	ldr	r3, [pc, #412]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a66      	ldr	r2, [pc, #408]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7ff fb3a 	bl	8002154 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ae4:	f7ff fb36 	bl	8002154 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e211      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002af6:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d036      	beq.n	8002b7c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d019      	beq.n	8002b4a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1a:	4a55      	ldr	r2, [pc, #340]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7ff fb17 	bl	8002154 <HAL_GetTick>
 8002b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2a:	f7ff fb13 	bl	8002154 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e1ee      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b3c:	4b4c      	ldr	r3, [pc, #304]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x35e>
 8002b48:	e018      	b.n	8002b7c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	4a48      	ldr	r2, [pc, #288]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b56:	f7ff fafd 	bl	8002154 <HAL_GetTick>
 8002b5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b5e:	f7ff faf9 	bl	8002154 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e1d4      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b70:	4b3f      	ldr	r3, [pc, #252]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d036      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d019      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b90:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a36      	ldr	r2, [pc, #216]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002b96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b9c:	f7ff fada 	bl	8002154 <HAL_GetTick>
 8002ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ba4:	f7ff fad6 	bl	8002154 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e1b1      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x3d8>
 8002bc2:	e018      	b.n	8002bf6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bd0:	f7ff fac0 	bl	8002154 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bd8:	f7ff fabc 	bl	8002154 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e197      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bea:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 8086 	beq.w	8002d10 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c04:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x4a8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <HAL_RCC_OscConfig+0x4a8>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c10:	f7ff faa0 	bl	8002154 <HAL_GetTick>
 8002c14:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7ff fa9c 	bl	8002154 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e177      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c2a:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_RCC_OscConfig+0x4a8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d106      	bne.n	8002c4c <HAL_RCC_OscConfig+0x480>
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	e032      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d111      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4ac>
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a05      	ldr	r2, [pc, #20]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_RCC_OscConfig+0x4a4>)
 8002c66:	f023 0304 	bic.w	r3, r3, #4
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	e021      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e6>
 8002c6e:	bf00      	nop
 8002c70:	58024400 	.word	0x58024400
 8002c74:	58024800 	.word	0x58024800
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCC_OscConfig+0x4ce>
 8002c80:	4b83      	ldr	r3, [pc, #524]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a82      	ldr	r2, [pc, #520]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002c86:	f043 0304 	orr.w	r3, r3, #4
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	4b80      	ldr	r3, [pc, #512]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a7f      	ldr	r2, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x4e6>
 8002c9a:	4b7d      	ldr	r3, [pc, #500]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a7c      	ldr	r2, [pc, #496]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	4b7a      	ldr	r3, [pc, #488]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a79      	ldr	r2, [pc, #484]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002cac:	f023 0304 	bic.w	r3, r3, #4
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7ff fa4b 	bl	8002154 <HAL_GetTick>
 8002cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7ff fa47 	bl	8002154 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e120      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd8:	4b6d      	ldr	r3, [pc, #436]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ee      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4f6>
 8002ce4:	e014      	b.n	8002d10 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce6:	f7ff fa35 	bl	8002154 <HAL_GetTick>
 8002cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cec:	e00a      	b.n	8002d04 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cee:	f7ff fa31 	bl	8002154 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e10a      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d04:	4b62      	ldr	r3, [pc, #392]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ee      	bne.n	8002cee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80ff 	beq.w	8002f18 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d22:	2b18      	cmp	r3, #24
 8002d24:	f000 80ba 	beq.w	8002e9c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	f040 8095 	bne.w	8002e5c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d32:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a56      	ldr	r2, [pc, #344]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7ff fa09 	bl	8002154 <HAL_GetTick>
 8002d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d46:	f7ff fa05 	bl	8002154 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e0e0      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d58:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d64:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d68:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <HAL_RCC_OscConfig+0x6c8>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	430a      	orrs	r2, r1
 8002d78:	4945      	ldr	r1, [pc, #276]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	628b      	str	r3, [r1, #40]	; 0x28
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	3b01      	subs	r3, #1
 8002d84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	025b      	lsls	r3, r3, #9
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	041b      	lsls	r3, r3, #16
 8002d9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	3b01      	subs	r3, #1
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002dae:	4938      	ldr	r1, [pc, #224]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	4a35      	ldr	r2, [pc, #212]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dc0:	4b33      	ldr	r3, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_RCC_OscConfig+0x6cc>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dcc:	00d2      	lsls	r2, r2, #3
 8002dce:	4930      	ldr	r1, [pc, #192]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	f023 020c 	bic.w	r2, r3, #12
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	492b      	ldr	r1, [pc, #172]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	f023 0202 	bic.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	4927      	ldr	r1, [pc, #156]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e04:	4b22      	ldr	r3, [pc, #136]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	4a21      	ldr	r2, [pc, #132]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	4a1b      	ldr	r2, [pc, #108]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7ff f98e 	bl	8002154 <HAL_GetTick>
 8002e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7ff f98a 	bl	8002154 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e065      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x670>
 8002e5a:	e05d      	b.n	8002f18 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff f974 	bl	8002154 <HAL_GetTick>
 8002e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7ff f970 	bl	8002154 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e04b      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e82:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_OscConfig+0x6c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x6a4>
 8002e8e:	e043      	b.n	8002f18 <HAL_RCC_OscConfig+0x74c>
 8002e90:	58024400 	.word	0x58024400
 8002e94:	fffffc0c 	.word	0xfffffc0c
 8002e98:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_RCC_OscConfig+0x758>)
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_RCC_OscConfig+0x758>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d031      	beq.n	8002f14 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d12a      	bne.n	8002f14 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d122      	bne.n	8002f14 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d11a      	bne.n	8002f14 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	0a5b      	lsrs	r3, r3, #9
 8002ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d111      	bne.n	8002f14 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	0e1b      	lsrs	r3, r3, #24
 8002f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3730      	adds	r7, #48	; 0x30
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	58024400 	.word	0x58024400

08002f28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e19c      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b87      	ldr	r3, [pc, #540]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 020f 	bic.w	r2, r3, #15
 8002f52:	4985      	ldr	r1, [pc, #532]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b83      	ldr	r3, [pc, #524]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e184      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d908      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f88:	4b78      	ldr	r3, [pc, #480]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	4975      	ldr	r1, [pc, #468]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d908      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	496a      	ldr	r1, [pc, #424]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d908      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fe4:	4b61      	ldr	r3, [pc, #388]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	495e      	ldr	r1, [pc, #376]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800300e:	429a      	cmp	r2, r3
 8003010:	d908      	bls.n	8003024 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003012:	4b56      	ldr	r3, [pc, #344]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4953      	ldr	r1, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003020:	4313      	orrs	r3, r2
 8003022:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	429a      	cmp	r2, r3
 800303e:	d908      	bls.n	8003052 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f023 020f 	bic.w	r2, r3, #15
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4947      	ldr	r1, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800304e:	4313      	orrs	r3, r2
 8003050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d055      	beq.n	800310a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4940      	ldr	r1, [pc, #256]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800306c:	4313      	orrs	r3, r2
 800306e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003078:	4b3c      	ldr	r3, [pc, #240]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d121      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0f6      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d115      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0ea      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030a8:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0de      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0d6      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f023 0207 	bic.w	r2, r3, #7
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4925      	ldr	r1, [pc, #148]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7ff f83b 	bl	8002154 <HAL_GetTick>
 80030de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e2:	f7ff f837 	bl	8002154 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0be      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	429a      	cmp	r2, r3
 8003108:	d1eb      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	429a      	cmp	r2, r3
 8003124:	d208      	bcs.n	8003138 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003134:	4313      	orrs	r3, r2
 8003136:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d214      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 020f 	bic.w	r2, r3, #15
 800314e:	4906      	ldr	r1, [pc, #24]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e086      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
 8003168:	52002000 	.word	0x52002000
 800316c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003188:	429a      	cmp	r2, r3
 800318a:	d208      	bcs.n	800319e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800318c:	4b3c      	ldr	r3, [pc, #240]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4939      	ldr	r1, [pc, #228]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800319a:	4313      	orrs	r3, r2
 800319c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d208      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ba:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	492e      	ldr	r1, [pc, #184]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d208      	bcs.n	80031fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4922      	ldr	r1, [pc, #136]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003212:	429a      	cmp	r2, r3
 8003214:	d208      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4917      	ldr	r1, [pc, #92]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003224:	4313      	orrs	r3, r2
 8003226:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003228:	f000 f834 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	4912      	ldr	r1, [pc, #72]	; (8003284 <HAL_RCC_ClockConfig+0x35c>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <HAL_RCC_ClockConfig+0x35c>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x360>)
 800325e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x364>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x368>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fe ff28 	bl	80020c0 <HAL_InitTick>
 8003270:	4603      	mov	r3, r0
 8003272:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	58024400 	.word	0x58024400
 8003284:	08004f20 	.word	0x08004f20
 8003288:	240001cc 	.word	0x240001cc
 800328c:	240001c8 	.word	0x240001c8
 8003290:	240001d0 	.word	0x240001d0

08003294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329a:	4bb3      	ldr	r3, [pc, #716]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a2:	2b18      	cmp	r3, #24
 80032a4:	f200 8155 	bhi.w	8003552 <HAL_RCC_GetSysClockFreq+0x2be>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	08003315 	.word	0x08003315
 80032b4:	08003553 	.word	0x08003553
 80032b8:	08003553 	.word	0x08003553
 80032bc:	08003553 	.word	0x08003553
 80032c0:	08003553 	.word	0x08003553
 80032c4:	08003553 	.word	0x08003553
 80032c8:	08003553 	.word	0x08003553
 80032cc:	08003553 	.word	0x08003553
 80032d0:	0800333b 	.word	0x0800333b
 80032d4:	08003553 	.word	0x08003553
 80032d8:	08003553 	.word	0x08003553
 80032dc:	08003553 	.word	0x08003553
 80032e0:	08003553 	.word	0x08003553
 80032e4:	08003553 	.word	0x08003553
 80032e8:	08003553 	.word	0x08003553
 80032ec:	08003553 	.word	0x08003553
 80032f0:	08003341 	.word	0x08003341
 80032f4:	08003553 	.word	0x08003553
 80032f8:	08003553 	.word	0x08003553
 80032fc:	08003553 	.word	0x08003553
 8003300:	08003553 	.word	0x08003553
 8003304:	08003553 	.word	0x08003553
 8003308:	08003553 	.word	0x08003553
 800330c:	08003553 	.word	0x08003553
 8003310:	08003347 	.word	0x08003347
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003314:	4b94      	ldr	r3, [pc, #592]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003320:	4b91      	ldr	r3, [pc, #580]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	4a90      	ldr	r2, [pc, #576]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003332:	e111      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003334:	4b8d      	ldr	r3, [pc, #564]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003336:	61bb      	str	r3, [r7, #24]
    break;
 8003338:	e10e      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800333a:	4b8d      	ldr	r3, [pc, #564]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800333c:	61bb      	str	r3, [r7, #24]
    break;
 800333e:	e10b      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003340:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003342:	61bb      	str	r3, [r7, #24]
    break;
 8003344:	e108      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003350:	4b85      	ldr	r3, [pc, #532]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800335a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800335c:	4b82      	ldr	r3, [pc, #520]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003366:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	08db      	lsrs	r3, r3, #3
 800336c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80e1 	beq.w	800354c <HAL_RCC_GetSysClockFreq+0x2b8>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b02      	cmp	r3, #2
 800338e:	f000 8083 	beq.w	8003498 <HAL_RCC_GetSysClockFreq+0x204>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f200 80a1 	bhi.w	80034dc <HAL_RCC_GetSysClockFreq+0x248>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x114>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d056      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033a6:	e099      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02d      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033b4:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	4a6b      	ldr	r2, [pc, #428]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b62      	ldr	r3, [pc, #392]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800340e:	e087      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800357c <HAL_RCC_GetSysClockFreq+0x2e8>
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a02 	vldr	s12, [r7, #8]
 8003436:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003452:	e065      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a02 	vldr	s12, [r7, #8]
 800347a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003496:	e043      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80034be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034da:	e021      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003502:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800351e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800352a:	3301      	adds	r3, #1
 800352c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003538:	edd7 6a07 	vldr	s13, [r7, #28]
 800353c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003544:	ee17 3a90 	vmov	r3, s15
 8003548:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800354a:	e005      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
    break;
 8003550:	e002      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003554:	61bb      	str	r3, [r7, #24]
    break;
 8003556:	bf00      	nop
  }

  return sysclockfreq;
 8003558:	69bb      	ldr	r3, [r7, #24]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	58024400 	.word	0x58024400
 800356c:	03d09000 	.word	0x03d09000
 8003570:	003d0900 	.word	0x003d0900
 8003574:	017d7840 	.word	0x017d7840
 8003578:	46000000 	.word	0x46000000
 800357c:	4c742400 	.word	0x4c742400
 8003580:	4a742400 	.word	0x4a742400
 8003584:	4bbebc20 	.word	0x4bbebc20

08003588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e049      	b.n	800362e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe fa6a 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	4619      	mov	r1, r3
 80035c6:	4610      	mov	r0, r2
 80035c8:	f000 fed8 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d001      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e05e      	b.n	800370e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2b      	ldr	r2, [pc, #172]	; (800371c <HAL_TIM_Base_Start_IT+0xe4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d02c      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367a:	d027      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <HAL_TIM_Base_Start_IT+0xe8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d022      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a26      	ldr	r2, [pc, #152]	; (8003724 <HAL_TIM_Base_Start_IT+0xec>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d01d      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a24      	ldr	r2, [pc, #144]	; (8003728 <HAL_TIM_Base_Start_IT+0xf0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d018      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a23      	ldr	r2, [pc, #140]	; (800372c <HAL_TIM_Base_Start_IT+0xf4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a21      	ldr	r2, [pc, #132]	; (8003730 <HAL_TIM_Base_Start_IT+0xf8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00e      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a20      	ldr	r2, [pc, #128]	; (8003734 <HAL_TIM_Base_Start_IT+0xfc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <HAL_TIM_Base_Start_IT+0x100>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x94>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_TIM_Base_Start_IT+0x104>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d115      	bne.n	80036f8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <HAL_TIM_Base_Start_IT+0x108>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d015      	beq.n	800370a <HAL_TIM_Base_Start_IT+0xd2>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d011      	beq.n	800370a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f6:	e008      	b.n	800370a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e000      	b.n	800370c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40010400 	.word	0x40010400
 8003730:	40001800 	.word	0x40001800
 8003734:	40014000 	.word	0x40014000
 8003738:	4000e000 	.word	0x4000e000
 800373c:	4000e400 	.word	0x4000e400
 8003740:	00010007 	.word	0x00010007

08003744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e049      	b.n	80037ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fada 	bl	8001d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fdfa 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_TIM_PWM_Start+0x24>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e03c      	b.n	8003892 <HAL_TIM_PWM_Start+0x9e>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b04      	cmp	r3, #4
 800381c:	d109      	bne.n	8003832 <HAL_TIM_PWM_Start+0x3e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e02f      	b.n	8003892 <HAL_TIM_PWM_Start+0x9e>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d109      	bne.n	800384c <HAL_TIM_PWM_Start+0x58>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e022      	b.n	8003892 <HAL_TIM_PWM_Start+0x9e>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b0c      	cmp	r3, #12
 8003850:	d109      	bne.n	8003866 <HAL_TIM_PWM_Start+0x72>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	bf14      	ite	ne
 800385e:	2301      	movne	r3, #1
 8003860:	2300      	moveq	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e015      	b.n	8003892 <HAL_TIM_PWM_Start+0x9e>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b10      	cmp	r3, #16
 800386a:	d109      	bne.n	8003880 <HAL_TIM_PWM_Start+0x8c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e008      	b.n	8003892 <HAL_TIM_PWM_Start+0x9e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0ab      	b.n	80039f2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_TIM_PWM_Start+0xb6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	e023      	b.n	80038f2 <HAL_TIM_PWM_Start+0xfe>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_PWM_Start+0xc6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b8:	e01b      	b.n	80038f2 <HAL_TIM_PWM_Start+0xfe>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d104      	bne.n	80038ca <HAL_TIM_PWM_Start+0xd6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c8:	e013      	b.n	80038f2 <HAL_TIM_PWM_Start+0xfe>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0xe6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038d8:	e00b      	b.n	80038f2 <HAL_TIM_PWM_Start+0xfe>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b10      	cmp	r3, #16
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0xf6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e8:	e003      	b.n	80038f2 <HAL_TIM_PWM_Start+0xfe>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 f958 	bl	8004bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a3d      	ldr	r2, [pc, #244]	; (80039fc <HAL_TIM_PWM_Start+0x208>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_TIM_PWM_Start+0x13e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3c      	ldr	r2, [pc, #240]	; (8003a00 <HAL_TIM_PWM_Start+0x20c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIM_PWM_Start+0x13e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a3a      	ldr	r2, [pc, #232]	; (8003a04 <HAL_TIM_PWM_Start+0x210>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_TIM_PWM_Start+0x13e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <HAL_TIM_PWM_Start+0x214>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIM_PWM_Start+0x13e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a37      	ldr	r2, [pc, #220]	; (8003a0c <HAL_TIM_PWM_Start+0x218>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d101      	bne.n	8003936 <HAL_TIM_PWM_Start+0x142>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_TIM_PWM_Start+0x144>
 8003936:	2300      	movs	r3, #0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <HAL_TIM_PWM_Start+0x208>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02c      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d027      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2a      	ldr	r2, [pc, #168]	; (8003a10 <HAL_TIM_PWM_Start+0x21c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d022      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <HAL_TIM_PWM_Start+0x220>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d01d      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a27      	ldr	r2, [pc, #156]	; (8003a18 <HAL_TIM_PWM_Start+0x224>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d018      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1f      	ldr	r2, [pc, #124]	; (8003a00 <HAL_TIM_PWM_Start+0x20c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <HAL_TIM_PWM_Start+0x228>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00e      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_TIM_PWM_Start+0x210>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1f      	ldr	r2, [pc, #124]	; (8003a20 <HAL_TIM_PWM_Start+0x22c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <HAL_TIM_PWM_Start+0x1bc>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <HAL_TIM_PWM_Start+0x230>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d115      	bne.n	80039dc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <HAL_TIM_PWM_Start+0x234>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d015      	beq.n	80039ee <HAL_TIM_PWM_Start+0x1fa>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c8:	d011      	beq.n	80039ee <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0201 	orr.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039da:	e008      	b.n	80039ee <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e000      	b.n	80039f0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40010400 	.word	0x40010400
 8003a04:	40014000 	.word	0x40014000
 8003a08:	40014400 	.word	0x40014400
 8003a0c:	40014800 	.word	0x40014800
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40001800 	.word	0x40001800
 8003a20:	4000e000 	.word	0x4000e000
 8003a24:	4000e400 	.word	0x4000e400
 8003a28:	00010007 	.word	0x00010007

08003a2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e08f      	b.n	8003b60 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fe f857 	bl	8001b08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6899      	ldr	r1, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_TIM_Encoder_Init+0x13c>)
 8003a6e:	400b      	ands	r3, r1
 8003a70:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f000 fc7d 	bl	800437c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4b31      	ldr	r3, [pc, #196]	; (8003b6c <HAL_TIM_Encoder_Init+0x140>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_TIM_Encoder_Init+0x144>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <HAL_TIM_Encoder_Init+0x148>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	011a      	lsls	r2, r3, #4
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	031b      	lsls	r3, r3, #12
 8003aec:	4313      	orrs	r3, r2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	fffebff8 	.word	0xfffebff8
 8003b6c:	fffffcfc 	.word	0xfffffcfc
 8003b70:	fffff3f3 	.word	0xfffff3f3
 8003b74:	ffff0f0f 	.word	0xffff0f0f

08003b78 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ba0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d110      	bne.n	8003bca <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d102      	bne.n	8003bb4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bae:	7b7b      	ldrb	r3, [r7, #13]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e089      	b.n	8003ccc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc8:	e031      	b.n	8003c2e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	d110      	bne.n	8003bf2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bd0:	7bbb      	ldrb	r3, [r7, #14]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d102      	bne.n	8003bdc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003bd6:	7b3b      	ldrb	r3, [r7, #12]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d001      	beq.n	8003be0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e075      	b.n	8003ccc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf0:	e01d      	b.n	8003c2e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bf2:	7bfb      	ldrb	r3, [r7, #15]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d108      	bne.n	8003c0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bf8:	7bbb      	ldrb	r3, [r7, #14]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d105      	bne.n	8003c0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bfe:	7b7b      	ldrb	r3, [r7, #13]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d102      	bne.n	8003c0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c04:	7b3b      	ldrb	r3, [r7, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d001      	beq.n	8003c0e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e05e      	b.n	8003ccc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2202      	movs	r2, #2
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d010      	beq.n	8003c5c <HAL_TIM_Encoder_Start_IT+0xe4>
 8003c3a:	e01f      	b.n	8003c7c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2201      	movs	r2, #1
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 ffb3 	bl	8004bb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f042 0202 	orr.w	r2, r2, #2
 8003c58:	60da      	str	r2, [r3, #12]
      break;
 8003c5a:	e02e      	b.n	8003cba <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2201      	movs	r2, #1
 8003c62:	2104      	movs	r1, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 ffa3 	bl	8004bb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0204 	orr.w	r2, r2, #4
 8003c78:	60da      	str	r2, [r3, #12]
      break;
 8003c7a:	e01e      	b.n	8003cba <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2201      	movs	r2, #1
 8003c82:	2100      	movs	r1, #0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 ff93 	bl	8004bb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	2104      	movs	r1, #4
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 ff8c 	bl	8004bb0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0202 	orr.w	r2, r2, #2
 8003ca6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0204 	orr.w	r2, r2, #4
 8003cb6:	60da      	str	r2, [r3, #12]
      break;
 8003cb8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0202 	mvn.w	r2, #2
 8003d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fb12 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fb04 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fb15 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d122      	bne.n	8003d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d11b      	bne.n	8003d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0204 	mvn.w	r2, #4
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fae8 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fada 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 faeb 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d122      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d11b      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0208 	mvn.w	r2, #8
 8003da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2204      	movs	r2, #4
 8003dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fabe 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003dc4:	e005      	b.n	8003dd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fab0 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fac1 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d122      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d11b      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0210 	mvn.w	r2, #16
 8003dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2208      	movs	r2, #8
 8003e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa94 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003e18:	e005      	b.n	8003e26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fa86 	bl	800432c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fa97 	bl	8004354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10e      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0201 	mvn.w	r2, #1
 8003e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fc fc00 	bl	8000658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b80      	cmp	r3, #128	; 0x80
 8003e64:	d10e      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e70:	2b80      	cmp	r3, #128	; 0x80
 8003e72:	d107      	bne.n	8003e84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f001 f802 	bl	8004e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e92:	d10e      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b80      	cmp	r3, #128	; 0x80
 8003ea0:	d107      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fff5 	bl	8004e9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d10e      	bne.n	8003ede <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d107      	bne.n	8003ede <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fa45 	bl	8004368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d10e      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d107      	bne.n	8003f0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0220 	mvn.w	r2, #32
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 ffb5 	bl	8004e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e0ff      	b.n	8004132 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b14      	cmp	r3, #20
 8003f3e:	f200 80f0 	bhi.w	8004122 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f9d 	.word	0x08003f9d
 8003f4c:	08004123 	.word	0x08004123
 8003f50:	08004123 	.word	0x08004123
 8003f54:	08004123 	.word	0x08004123
 8003f58:	08003fdd 	.word	0x08003fdd
 8003f5c:	08004123 	.word	0x08004123
 8003f60:	08004123 	.word	0x08004123
 8003f64:	08004123 	.word	0x08004123
 8003f68:	0800401f 	.word	0x0800401f
 8003f6c:	08004123 	.word	0x08004123
 8003f70:	08004123 	.word	0x08004123
 8003f74:	08004123 	.word	0x08004123
 8003f78:	0800405f 	.word	0x0800405f
 8003f7c:	08004123 	.word	0x08004123
 8003f80:	08004123 	.word	0x08004123
 8003f84:	08004123 	.word	0x08004123
 8003f88:	080040a1 	.word	0x080040a1
 8003f8c:	08004123 	.word	0x08004123
 8003f90:	08004123 	.word	0x08004123
 8003f94:	08004123 	.word	0x08004123
 8003f98:	080040e1 	.word	0x080040e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fa90 	bl	80044c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0208 	orr.w	r2, r2, #8
 8003fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0204 	bic.w	r2, r2, #4
 8003fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6999      	ldr	r1, [r3, #24]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	619a      	str	r2, [r3, #24]
      break;
 8003fda:	e0a5      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fb00 	bl	80045e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699a      	ldr	r2, [r3, #24]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6999      	ldr	r1, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	021a      	lsls	r2, r3, #8
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	619a      	str	r2, [r3, #24]
      break;
 800401c:	e084      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fb69 	bl	80046fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0208 	orr.w	r2, r2, #8
 8004038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0204 	bic.w	r2, r2, #4
 8004048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69d9      	ldr	r1, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	61da      	str	r2, [r3, #28]
      break;
 800405c:	e064      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fbd1 	bl	800480c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	69da      	ldr	r2, [r3, #28]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	021a      	lsls	r2, r3, #8
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	61da      	str	r2, [r3, #28]
      break;
 800409e:	e043      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fc1a 	bl	80048e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040de:	e023      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fc5e 	bl	80049a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004120:	e002      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
      break;
 8004126:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop

0800413c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_TIM_ConfigClockSource+0x1c>
 8004154:	2302      	movs	r3, #2
 8004156:	e0dc      	b.n	8004312 <HAL_TIM_ConfigClockSource+0x1d6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	4b6a      	ldr	r3, [pc, #424]	; (800431c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004174:	4013      	ands	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a64      	ldr	r2, [pc, #400]	; (8004320 <HAL_TIM_ConfigClockSource+0x1e4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	f000 80a9 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004194:	4a62      	ldr	r2, [pc, #392]	; (8004320 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	f200 80ae 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800419c:	4a61      	ldr	r2, [pc, #388]	; (8004324 <HAL_TIM_ConfigClockSource+0x1e8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	f000 80a1 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80041a4:	4a5f      	ldr	r2, [pc, #380]	; (8004324 <HAL_TIM_ConfigClockSource+0x1e8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	f200 80a6 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80041ac:	4a5e      	ldr	r2, [pc, #376]	; (8004328 <HAL_TIM_ConfigClockSource+0x1ec>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	f000 8099 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80041b4:	4a5c      	ldr	r2, [pc, #368]	; (8004328 <HAL_TIM_ConfigClockSource+0x1ec>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	f200 809e 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80041bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80041c0:	f000 8091 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80041c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80041c8:	f200 8096 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80041cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d0:	f000 8089 	beq.w	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 80041d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d8:	f200 808e 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80041dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e0:	d03e      	beq.n	8004260 <HAL_TIM_ConfigClockSource+0x124>
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e6:	f200 8087 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80041ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ee:	f000 8086 	beq.w	80042fe <HAL_TIM_ConfigClockSource+0x1c2>
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	d87f      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 80041f8:	2b70      	cmp	r3, #112	; 0x70
 80041fa:	d01a      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0xf6>
 80041fc:	2b70      	cmp	r3, #112	; 0x70
 80041fe:	d87b      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004200:	2b60      	cmp	r3, #96	; 0x60
 8004202:	d050      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0x16a>
 8004204:	2b60      	cmp	r3, #96	; 0x60
 8004206:	d877      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004208:	2b50      	cmp	r3, #80	; 0x50
 800420a:	d03c      	beq.n	8004286 <HAL_TIM_ConfigClockSource+0x14a>
 800420c:	2b50      	cmp	r3, #80	; 0x50
 800420e:	d873      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d058      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x18a>
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d86f      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d064      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800421c:	2b30      	cmp	r3, #48	; 0x30
 800421e:	d86b      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d060      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d867      	bhi.n	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05c      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800422c:	2b10      	cmp	r3, #16
 800422e:	d05a      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004230:	e062      	b.n	80042f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6899      	ldr	r1, [r3, #8]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f000 fc95 	bl	8004b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	609a      	str	r2, [r3, #8]
      break;
 800425e:	e04f      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f000 fc7e 	bl	8004b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004282:	609a      	str	r2, [r3, #8]
      break;
 8004284:	e03c      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	461a      	mov	r2, r3
 8004294:	f000 fbee 	bl	8004a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2150      	movs	r1, #80	; 0x50
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 fc48 	bl	8004b34 <TIM_ITRx_SetConfig>
      break;
 80042a4:	e02c      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f000 fc0d 	bl	8004ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2160      	movs	r1, #96	; 0x60
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fc38 	bl	8004b34 <TIM_ITRx_SetConfig>
      break;
 80042c4:	e01c      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f000 fbce 	bl	8004a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2140      	movs	r1, #64	; 0x40
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fc28 	bl	8004b34 <TIM_ITRx_SetConfig>
      break;
 80042e4:	e00c      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f000 fc1f 	bl	8004b34 <TIM_ITRx_SetConfig>
      break;
 80042f6:	e003      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      break;
 80042fc:	e000      	b.n	8004300 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80042fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	ffceff88 	.word	0xffceff88
 8004320:	00100040 	.word	0x00100040
 8004324:	00100030 	.word	0x00100030
 8004328:	00100020 	.word	0x00100020

0800432c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a44      	ldr	r2, [pc, #272]	; (80044a0 <TIM_Base_SetConfig+0x124>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439a:	d00f      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a41      	ldr	r2, [pc, #260]	; (80044a4 <TIM_Base_SetConfig+0x128>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a40      	ldr	r2, [pc, #256]	; (80044a8 <TIM_Base_SetConfig+0x12c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3f      	ldr	r2, [pc, #252]	; (80044ac <TIM_Base_SetConfig+0x130>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3e      	ldr	r2, [pc, #248]	; (80044b0 <TIM_Base_SetConfig+0x134>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a33      	ldr	r2, [pc, #204]	; (80044a0 <TIM_Base_SetConfig+0x124>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d027      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d023      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <TIM_Base_SetConfig+0x128>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01f      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <TIM_Base_SetConfig+0x12c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01b      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2e      	ldr	r2, [pc, #184]	; (80044ac <TIM_Base_SetConfig+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d017      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2d      	ldr	r2, [pc, #180]	; (80044b0 <TIM_Base_SetConfig+0x134>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2c      	ldr	r2, [pc, #176]	; (80044b4 <TIM_Base_SetConfig+0x138>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00f      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2b      	ldr	r2, [pc, #172]	; (80044b8 <TIM_Base_SetConfig+0x13c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2a      	ldr	r2, [pc, #168]	; (80044bc <TIM_Base_SetConfig+0x140>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <TIM_Base_SetConfig+0x144>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_Base_SetConfig+0xaa>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a28      	ldr	r2, [pc, #160]	; (80044c4 <TIM_Base_SetConfig+0x148>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d108      	bne.n	8004438 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <TIM_Base_SetConfig+0x124>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00f      	beq.n	8004484 <TIM_Base_SetConfig+0x108>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <TIM_Base_SetConfig+0x134>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00b      	beq.n	8004484 <TIM_Base_SetConfig+0x108>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a11      	ldr	r2, [pc, #68]	; (80044b4 <TIM_Base_SetConfig+0x138>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_Base_SetConfig+0x108>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a10      	ldr	r2, [pc, #64]	; (80044b8 <TIM_Base_SetConfig+0x13c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0x108>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <TIM_Base_SetConfig+0x140>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40010400 	.word	0x40010400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40014800 	.word	0x40014800
 80044c0:	4000e000 	.word	0x4000e000
 80044c4:	4000e400 	.word	0x4000e400

080044c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0201 	bic.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <TIM_OC1_SetConfig+0x108>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 0302 	bic.w	r3, r3, #2
 8004510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <TIM_OC1_SetConfig+0x10c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00f      	beq.n	8004544 <TIM_OC1_SetConfig+0x7c>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a2c      	ldr	r2, [pc, #176]	; (80045d8 <TIM_OC1_SetConfig+0x110>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00b      	beq.n	8004544 <TIM_OC1_SetConfig+0x7c>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a2b      	ldr	r2, [pc, #172]	; (80045dc <TIM_OC1_SetConfig+0x114>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d007      	beq.n	8004544 <TIM_OC1_SetConfig+0x7c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a2a      	ldr	r2, [pc, #168]	; (80045e0 <TIM_OC1_SetConfig+0x118>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d003      	beq.n	8004544 <TIM_OC1_SetConfig+0x7c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a29      	ldr	r2, [pc, #164]	; (80045e4 <TIM_OC1_SetConfig+0x11c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10c      	bne.n	800455e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f023 0308 	bic.w	r3, r3, #8
 800454a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 0304 	bic.w	r3, r3, #4
 800455c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <TIM_OC1_SetConfig+0x10c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00f      	beq.n	8004586 <TIM_OC1_SetConfig+0xbe>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1b      	ldr	r2, [pc, #108]	; (80045d8 <TIM_OC1_SetConfig+0x110>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00b      	beq.n	8004586 <TIM_OC1_SetConfig+0xbe>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <TIM_OC1_SetConfig+0x114>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d007      	beq.n	8004586 <TIM_OC1_SetConfig+0xbe>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <TIM_OC1_SetConfig+0x118>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d003      	beq.n	8004586 <TIM_OC1_SetConfig+0xbe>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <TIM_OC1_SetConfig+0x11c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800458c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	621a      	str	r2, [r3, #32]
}
 80045c4:	bf00      	nop
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	fffeff8f 	.word	0xfffeff8f
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40010400 	.word	0x40010400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800

080045e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f023 0210 	bic.w	r2, r3, #16
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <TIM_OC2_SetConfig+0xfc>)
 8004614:	4013      	ands	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0320 	bic.w	r3, r3, #32
 8004632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <TIM_OC2_SetConfig+0x100>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC2_SetConfig+0x68>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a28      	ldr	r2, [pc, #160]	; (80046ec <TIM_OC2_SetConfig+0x104>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10d      	bne.n	800466c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <TIM_OC2_SetConfig+0x100>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00f      	beq.n	8004694 <TIM_OC2_SetConfig+0xac>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <TIM_OC2_SetConfig+0x104>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00b      	beq.n	8004694 <TIM_OC2_SetConfig+0xac>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <TIM_OC2_SetConfig+0x108>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d007      	beq.n	8004694 <TIM_OC2_SetConfig+0xac>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <TIM_OC2_SetConfig+0x10c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_OC2_SetConfig+0xac>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <TIM_OC2_SetConfig+0x110>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d113      	bne.n	80046bc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	621a      	str	r2, [r3, #32]
}
 80046d6:	bf00      	nop
 80046d8:	371c      	adds	r7, #28
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	feff8fff 	.word	0xfeff8fff
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40010400 	.word	0x40010400
 80046f0:	40014000 	.word	0x40014000
 80046f4:	40014400 	.word	0x40014400
 80046f8:	40014800 	.word	0x40014800

080046fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <TIM_OC3_SetConfig+0xf8>)
 8004728:	4013      	ands	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <TIM_OC3_SetConfig+0xfc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_OC3_SetConfig+0x66>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a27      	ldr	r2, [pc, #156]	; (80047fc <TIM_OC3_SetConfig+0x100>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10d      	bne.n	800477e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800477c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <TIM_OC3_SetConfig+0xfc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_OC3_SetConfig+0xaa>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1c      	ldr	r2, [pc, #112]	; (80047fc <TIM_OC3_SetConfig+0x100>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_OC3_SetConfig+0xaa>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <TIM_OC3_SetConfig+0x104>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_OC3_SetConfig+0xaa>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <TIM_OC3_SetConfig+0x108>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_OC3_SetConfig+0xaa>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a19      	ldr	r2, [pc, #100]	; (8004808 <TIM_OC3_SetConfig+0x10c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d113      	bne.n	80047ce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	621a      	str	r2, [r3, #32]
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	fffeff8f 	.word	0xfffeff8f
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40010400 	.word	0x40010400
 8004800:	40014000 	.word	0x40014000
 8004804:	40014400 	.word	0x40014400
 8004808:	40014800 	.word	0x40014800

0800480c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <TIM_OC4_SetConfig+0xbc>)
 8004838:	4013      	ands	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a19      	ldr	r2, [pc, #100]	; (80048cc <TIM_OC4_SetConfig+0xc0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_OC4_SetConfig+0x80>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <TIM_OC4_SetConfig+0xc4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_OC4_SetConfig+0x80>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <TIM_OC4_SetConfig+0xc8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_OC4_SetConfig+0x80>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <TIM_OC4_SetConfig+0xcc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_OC4_SetConfig+0x80>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a15      	ldr	r2, [pc, #84]	; (80048dc <TIM_OC4_SetConfig+0xd0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d109      	bne.n	80048a0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	019b      	lsls	r3, r3, #6
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	feff8fff 	.word	0xfeff8fff
 80048cc:	40010000 	.word	0x40010000
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40014400 	.word	0x40014400
 80048dc:	40014800 	.word	0x40014800

080048e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4b21      	ldr	r3, [pc, #132]	; (8004990 <TIM_OC5_SetConfig+0xb0>)
 800490c:	4013      	ands	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004920:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a18      	ldr	r2, [pc, #96]	; (8004994 <TIM_OC5_SetConfig+0xb4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00f      	beq.n	8004956 <TIM_OC5_SetConfig+0x76>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <TIM_OC5_SetConfig+0xb8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00b      	beq.n	8004956 <TIM_OC5_SetConfig+0x76>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a16      	ldr	r2, [pc, #88]	; (800499c <TIM_OC5_SetConfig+0xbc>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_OC5_SetConfig+0x76>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <TIM_OC5_SetConfig+0xc0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_OC5_SetConfig+0x76>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <TIM_OC5_SetConfig+0xc4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d109      	bne.n	800496a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800495c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	fffeff8f 	.word	0xfffeff8f
 8004994:	40010000 	.word	0x40010000
 8004998:	40010400 	.word	0x40010400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800

080049a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <TIM_OC6_SetConfig+0xb4>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	021b      	lsls	r3, r3, #8
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	051b      	lsls	r3, r3, #20
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <TIM_OC6_SetConfig+0xb8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00f      	beq.n	8004a20 <TIM_OC6_SetConfig+0x78>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <TIM_OC6_SetConfig+0xbc>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00b      	beq.n	8004a20 <TIM_OC6_SetConfig+0x78>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <TIM_OC6_SetConfig+0xc0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d007      	beq.n	8004a20 <TIM_OC6_SetConfig+0x78>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a16      	ldr	r2, [pc, #88]	; (8004a6c <TIM_OC6_SetConfig+0xc4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC6_SetConfig+0x78>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <TIM_OC6_SetConfig+0xc8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d109      	bne.n	8004a34 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	621a      	str	r2, [r3, #32]
}
 8004a4e:	bf00      	nop
 8004a50:	371c      	adds	r7, #28
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	feff8fff 	.word	0xfeff8fff
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40010400 	.word	0x40010400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800

08004a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0201 	bic.w	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 030a 	bic.w	r3, r3, #10
 8004ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f023 0210 	bic.w	r2, r3, #16
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
	...

08004b34 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <TIM_ITRx_SetConfig+0x38>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f043 0307 	orr.w	r3, r3, #7
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	609a      	str	r2, [r3, #8]
}
 8004b5e:	bf00      	nop
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	ffcfff8f 	.word	0xffcfff8f

08004b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	021a      	lsls	r2, r3, #8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	609a      	str	r2, [r3, #8]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 031f 	and.w	r3, r3, #31
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1a      	ldr	r2, [r3, #32]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	fa01 f303 	lsl.w	r3, r1, r3
 8004be8:	431a      	orrs	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	621a      	str	r2, [r3, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e077      	b.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a35      	ldr	r2, [pc, #212]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a34      	ldr	r2, [pc, #208]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d108      	bne.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a25      	ldr	r2, [pc, #148]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d02c      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d027      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d022      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d01d      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d018      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d013      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00e      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d009      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40010400 	.word	0x40010400
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40001800 	.word	0x40001800
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	4000e000 	.word	0x4000e000
 8004d30:	4000e400 	.word	0x4000e400

08004d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e087      	b.n	8004e60 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d106      	bne.n	8004dec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1e      	ldr	r2, [pc, #120]	; (8004e6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d126      	bne.n	8004e4e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	051b      	lsls	r3, r3, #20
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d106      	bne.n	8004e4e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40010400 	.word	0x40010400

08004e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <__libc_init_array>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	4d0d      	ldr	r5, [pc, #52]	; (8004ee8 <__libc_init_array+0x38>)
 8004eb4:	4c0d      	ldr	r4, [pc, #52]	; (8004eec <__libc_init_array+0x3c>)
 8004eb6:	1b64      	subs	r4, r4, r5
 8004eb8:	10a4      	asrs	r4, r4, #2
 8004eba:	2600      	movs	r6, #0
 8004ebc:	42a6      	cmp	r6, r4
 8004ebe:	d109      	bne.n	8004ed4 <__libc_init_array+0x24>
 8004ec0:	4d0b      	ldr	r5, [pc, #44]	; (8004ef0 <__libc_init_array+0x40>)
 8004ec2:	4c0c      	ldr	r4, [pc, #48]	; (8004ef4 <__libc_init_array+0x44>)
 8004ec4:	f000 f820 	bl	8004f08 <_init>
 8004ec8:	1b64      	subs	r4, r4, r5
 8004eca:	10a4      	asrs	r4, r4, #2
 8004ecc:	2600      	movs	r6, #0
 8004ece:	42a6      	cmp	r6, r4
 8004ed0:	d105      	bne.n	8004ede <__libc_init_array+0x2e>
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed8:	4798      	blx	r3
 8004eda:	3601      	adds	r6, #1
 8004edc:	e7ee      	b.n	8004ebc <__libc_init_array+0xc>
 8004ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee2:	4798      	blx	r3
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	e7f2      	b.n	8004ece <__libc_init_array+0x1e>
 8004ee8:	08004f30 	.word	0x08004f30
 8004eec:	08004f30 	.word	0x08004f30
 8004ef0:	08004f30 	.word	0x08004f30
 8004ef4:	08004f3c 	.word	0x08004f3c

08004ef8 <memset>:
 8004ef8:	4402      	add	r2, r0
 8004efa:	4603      	mov	r3, r0
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d100      	bne.n	8004f02 <memset+0xa>
 8004f00:	4770      	bx	lr
 8004f02:	f803 1b01 	strb.w	r1, [r3], #1
 8004f06:	e7f9      	b.n	8004efc <memset+0x4>

08004f08 <_init>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr

08004f14 <_fini>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr
