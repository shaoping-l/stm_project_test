
stm_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f610  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  0800f8e0  0800f8e0  0001f8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fbc8  0800fbc8  0001fbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0800fbd0  0800fbd0  0001fbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fbe4  0800fbe4  0001fbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  24000000  0800fbe8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ecc  240000c8  0800fcb0  000200c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001f94  0800fcb0  00021f94  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aaba  00000000  00000000  000200f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004388  00000000  00000000  0004abb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015c0  00000000  00000000  0004ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001470  00000000  00000000  000504f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035da1  00000000  00000000  00051968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f28c  00000000  00000000  00087709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153f99  00000000  00000000  000a6995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fa92e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f70  00000000  00000000  001fa980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000c8 	.word	0x240000c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f8c8 	.word	0x0800f8c8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000cc 	.word	0x240000cc
 800030c:	0800f8c8 	.word	0x0800f8c8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	49c7      	ldr	r1, [pc, #796]	; (80009a8 <pidCtrl+0x328>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	440b      	add	r3, r1
 8000696:	3318      	adds	r3, #24
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000980 <pidCtrl+0x300>
 80006a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ac:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000988 <pidCtrl+0x308>
 80006b0:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio * belt_ratio) * frequency;
 80006b4:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8000990 <pidCtrl+0x310>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8000998 <pidCtrl+0x318>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c4:	49b8      	ldr	r1, [pc, #736]	; (80009a8 <pidCtrl+0x328>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	440b      	add	r3, r1
 80006d2:	3328      	adds	r3, #40	; 0x28
 80006d4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d8:	49b3      	ldr	r1, [pc, #716]	; (80009a8 <pidCtrl+0x328>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	440b      	add	r3, r1
 80006e6:	3320      	adds	r3, #32
 80006e8:	ed93 6b00 	vldr	d6, [r3]
 80006ec:	49ae      	ldr	r1, [pc, #696]	; (80009a8 <pidCtrl+0x328>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4613      	mov	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	3328      	adds	r3, #40	; 0x28
 80006fc:	ed93 7b00 	vldr	d7, [r3]
 8000700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000704:	49a8      	ldr	r1, [pc, #672]	; (80009a8 <pidCtrl+0x328>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	3330      	adds	r3, #48	; 0x30
 8000714:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000718:	49a3      	ldr	r1, [pc, #652]	; (80009a8 <pidCtrl+0x328>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	440b      	add	r3, r1
 8000726:	ed93 6b00 	vldr	d6, [r3]
 800072a:	499f      	ldr	r1, [pc, #636]	; (80009a8 <pidCtrl+0x328>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3330      	adds	r3, #48	; 0x30
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000742:	4999      	ldr	r1, [pc, #612]	; (80009a8 <pidCtrl+0x328>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	440b      	add	r3, r1
 8000750:	3348      	adds	r3, #72	; 0x48
 8000752:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000756:	4994      	ldr	r1, [pc, #592]	; (80009a8 <pidCtrl+0x328>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	440b      	add	r3, r1
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	ed93 6b00 	vldr	d6, [r3]
 800076a:	498f      	ldr	r1, [pc, #572]	; (80009a8 <pidCtrl+0x328>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	3308      	adds	r3, #8
 800077a:	ed93 5b00 	vldr	d5, [r3]
 800077e:	498a      	ldr	r1, [pc, #552]	; (80009a8 <pidCtrl+0x328>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	3338      	adds	r3, #56	; 0x38
 800078e:	ed93 7b00 	vldr	d7, [r3]
 8000792:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000796:	ed9f 4b80 	vldr	d4, [pc, #512]	; 8000998 <pidCtrl+0x318>
 800079a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800079e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007a2:	4981      	ldr	r1, [pc, #516]	; (80009a8 <pidCtrl+0x328>)
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	440b      	add	r3, r1
 80007b0:	3350      	adds	r3, #80	; 0x50
 80007b2:	ed83 7b00 	vstr	d7, [r3]
//	Kpid[i].ui = 0;
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007b6:	497c      	ldr	r1, [pc, #496]	; (80009a8 <pidCtrl+0x328>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	440b      	add	r3, r1
 80007c4:	3310      	adds	r3, #16
 80007c6:	ed93 6b00 	vldr	d6, [r3]
 80007ca:	4977      	ldr	r1, [pc, #476]	; (80009a8 <pidCtrl+0x328>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	011b      	lsls	r3, r3, #4
 80007d6:	440b      	add	r3, r1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	ed93 5b00 	vldr	d5, [r3]
 80007de:	4972      	ldr	r1, [pc, #456]	; (80009a8 <pidCtrl+0x328>)
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4613      	mov	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	440b      	add	r3, r1
 80007ec:	3338      	adds	r3, #56	; 0x38
 80007ee:	ed93 7b00 	vldr	d7, [r3]
 80007f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007fa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000998 <pidCtrl+0x318>
 80007fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000802:	4969      	ldr	r1, [pc, #420]	; (80009a8 <pidCtrl+0x328>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	1a9b      	subs	r3, r3, r2
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	440b      	add	r3, r1
 8000810:	3358      	adds	r3, #88	; 0x58
 8000812:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 8000816:	4964      	ldr	r1, [pc, #400]	; (80009a8 <pidCtrl+0x328>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	1a9b      	subs	r3, r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	440b      	add	r3, r1
 8000824:	3350      	adds	r3, #80	; 0x50
 8000826:	ed93 7b00 	vldr	d7, [r3]
 800082a:	eeb0 7bc7 	vabs.f64	d7, d7
 800082e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	dd1f      	ble.n	800087c <pidCtrl+0x1fc>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800083c:	495a      	ldr	r1, [pc, #360]	; (80009a8 <pidCtrl+0x328>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	1a9b      	subs	r3, r3, r2
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	440b      	add	r3, r1
 800084a:	3350      	adds	r3, #80	; 0x50
 800084c:	ed93 7b00 	vldr	d7, [r3]
 8000850:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000858:	db03      	blt.n	8000862 <pidCtrl+0x1e2>
 800085a:	f04f 0000 	mov.w	r0, #0
 800085e:	4953      	ldr	r1, [pc, #332]	; (80009ac <pidCtrl+0x32c>)
 8000860:	e002      	b.n	8000868 <pidCtrl+0x1e8>
 8000862:	f04f 0000 	mov.w	r0, #0
 8000866:	4952      	ldr	r1, [pc, #328]	; (80009b0 <pidCtrl+0x330>)
 8000868:	4c4f      	ldr	r4, [pc, #316]	; (80009a8 <pidCtrl+0x328>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4613      	mov	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4423      	add	r3, r4
 8000876:	3350      	adds	r3, #80	; 0x50
 8000878:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800087c:	494a      	ldr	r1, [pc, #296]	; (80009a8 <pidCtrl+0x328>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4613      	mov	r3, r2
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	440b      	add	r3, r1
 800088a:	3348      	adds	r3, #72	; 0x48
 800088c:	ed93 6b00 	vldr	d6, [r3]
 8000890:	4945      	ldr	r1, [pc, #276]	; (80009a8 <pidCtrl+0x328>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4613      	mov	r3, r2
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	440b      	add	r3, r1
 800089e:	3350      	adds	r3, #80	; 0x50
 80008a0:	ed93 7b00 	vldr	d7, [r3]
 80008a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008a8:	493f      	ldr	r1, [pc, #252]	; (80009a8 <pidCtrl+0x328>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4613      	mov	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	440b      	add	r3, r1
 80008b6:	3358      	adds	r3, #88	; 0x58
 80008b8:	ed93 7b00 	vldr	d7, [r3]
 80008bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008c0:	4939      	ldr	r1, [pc, #228]	; (80009a8 <pidCtrl+0x328>)
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	4613      	mov	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	1a9b      	subs	r3, r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	440b      	add	r3, r1
 80008ce:	3340      	adds	r3, #64	; 0x40
 80008d0:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008d4:	4934      	ldr	r1, [pc, #208]	; (80009a8 <pidCtrl+0x328>)
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4613      	mov	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	1a9b      	subs	r3, r3, r2
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	440b      	add	r3, r1
 80008e2:	3330      	adds	r3, #48	; 0x30
 80008e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008e8:	4c2f      	ldr	r4, [pc, #188]	; (80009a8 <pidCtrl+0x328>)
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4613      	mov	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	4423      	add	r3, r4
 80008f6:	3338      	adds	r3, #56	; 0x38
 80008f8:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 80008fc:	492a      	ldr	r1, [pc, #168]	; (80009a8 <pidCtrl+0x328>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	4613      	mov	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	440b      	add	r3, r1
 800090a:	3340      	adds	r3, #64	; 0x40
 800090c:	ed93 7b00 	vldr	d7, [r3]
 8000910:	eeb0 7bc7 	vabs.f64	d7, d7
 8000914:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80009a0 <pidCtrl+0x320>
 8000918:	ee27 7b06 	vmul.f64	d7, d7, d6
 800091c:	4922      	ldr	r1, [pc, #136]	; (80009a8 <pidCtrl+0x328>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4613      	mov	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	1a9b      	subs	r3, r3, r2
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	440b      	add	r3, r1
 800092a:	3360      	adds	r3, #96	; 0x60
 800092c:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000930:	491d      	ldr	r1, [pc, #116]	; (80009a8 <pidCtrl+0x328>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	011b      	lsls	r3, r3, #4
 800093c:	440b      	add	r3, r1
 800093e:	3360      	adds	r3, #96	; 0x60
 8000940:	ed93 7b00 	vldr	d7, [r3]
 8000944:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80009a0 <pidCtrl+0x320>
 8000948:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800094c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000950:	dc00      	bgt.n	8000954 <pidCtrl+0x2d4>
}
 8000952:	e00d      	b.n	8000970 <pidCtrl+0x2f0>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000954:	4914      	ldr	r1, [pc, #80]	; (80009a8 <pidCtrl+0x328>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	440b      	add	r3, r1
 8000962:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000966:	a30e      	add	r3, pc, #56	; (adr r3, 80009a0 <pidCtrl+0x320>)
 8000968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800096c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bc90      	pop	{r4, r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	f3af 8000 	nop.w
 8000980:	54cadf99 	.word	0x54cadf99
 8000984:	400921fb 	.word	0x400921fb
 8000988:	cccccccd 	.word	0xcccccccd
 800098c:	4029cccc 	.word	0x4029cccc
 8000990:	00000000 	.word	0x00000000
 8000994:	410b0000 	.word	0x410b0000
 8000998:	00000000 	.word	0x00000000
 800099c:	406f4000 	.word	0x406f4000
 80009a0:	00000000 	.word	0x00000000
 80009a4:	408f3800 	.word	0x408f3800
 80009a8:	24000108 	.word	0x24000108
 80009ac:	3ff00000 	.word	0x3ff00000
 80009b0:	bff00000 	.word	0xbff00000

080009b4 <_Z41__static_initialization_and_destruction_0ii>:
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d14c      	bne.n	8000a5e <_Z41__static_initialization_and_destruction_0ii+0xaa>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d147      	bne.n	8000a5e <_Z41__static_initialization_and_destruction_0ii+0xaa>
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009ce:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009d0:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009d4:	4926      	ldr	r1, [pc, #152]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009d6:	e9c1 2300 	strd	r2, r3, [r1]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80009dc:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009e0:	4923      	ldr	r1, [pc, #140]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {Kp[0], Ki[0], Kd[0], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80009e8:	e9d3 2300 	ldrd	r2, r3, [r3]
};
 80009ec:	4920      	ldr	r1, [pc, #128]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80009f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 80009f8:	491d      	ldr	r1, [pc, #116]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80009fa:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 8000a04:	491a      	ldr	r1, [pc, #104]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a06:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
};
 8000a10:	4917      	ldr	r1, [pc, #92]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a12:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a1c:	4914      	ldr	r1, [pc, #80]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a1e:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a28:	4911      	ldr	r1, [pc, #68]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a2a:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
};
 8000a34:	490e      	ldr	r1, [pc, #56]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a36:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000a3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a40:	490b      	ldr	r1, [pc, #44]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a42:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000a48:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a4c:	4908      	ldr	r1, [pc, #32]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a4e:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8000a54:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8000a58:	4905      	ldr	r1, [pc, #20]	; (8000a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000a5a:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	24000000 	.word	0x24000000
 8000a70:	24000108 	.word	0x24000108
 8000a74:	24000020 	.word	0x24000020
 8000a78:	240000e8 	.word	0x240000e8

08000a7c <_GLOBAL__sub_I_Kp>:
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff ff95 	bl	80009b4 <_Z41__static_initialization_and_destruction_0ii>
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	0000      	movs	r0, r0
	...

08000a90 <HAL_TIM_PeriodElapsedCallback>:
extern PUSHER pusher_B;
extern PUSHER pusher_C;
extern PUSHER pusher_D;
double corr_vy = (double)100/93;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4ab0      	ldr	r2, [pc, #704]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	f040 818d 	bne.w	8000dbe <HAL_TIM_PeriodElapsedCallback+0x32e>

		Kpid[0].goalVel = Vx + Vy * corr_vy + (W * coeffab);
 8000aa4:	4baf      	ldr	r3, [pc, #700]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000aa6:	ed93 6b00 	vldr	d6, [r3]
 8000aaa:	4baf      	ldr	r3, [pc, #700]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000aac:	ed93 7b00 	vldr	d7, [r3]
 8000ab0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ab4:	4bad      	ldr	r3, [pc, #692]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000ab6:	ed93 7b00 	vldr	d7, [r3]
 8000aba:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000abe:	4bac      	ldr	r3, [pc, #688]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000ac0:	ed93 5b00 	vldr	d5, [r3]
 8000ac4:	4bab      	ldr	r3, [pc, #684]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000ac6:	ed93 7b00 	vldr	d7, [r3]
 8000aca:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ace:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ad2:	4ba9      	ldr	r3, [pc, #676]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000ad4:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vx - Vy * corr_vy - (W * coeffab);
 8000ad8:	4ba4      	ldr	r3, [pc, #656]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000ada:	ed93 6b00 	vldr	d6, [r3]
 8000ade:	4ba1      	ldr	r3, [pc, #644]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000ae0:	ed93 5b00 	vldr	d5, [r3]
 8000ae4:	4ba0      	ldr	r3, [pc, #640]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000ae6:	ed93 7b00 	vldr	d7, [r3]
 8000aea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000aee:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000af2:	4b9f      	ldr	r3, [pc, #636]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000af4:	ed93 5b00 	vldr	d5, [r3]
 8000af8:	4b9e      	ldr	r3, [pc, #632]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000afa:	ed93 7b00 	vldr	d7, [r3]
 8000afe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b06:	4b9c      	ldr	r3, [pc, #624]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b08:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vx + Vy * corr_vy - (W * coeffab);
 8000b0c:	4b95      	ldr	r3, [pc, #596]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b0e:	ed93 6b00 	vldr	d6, [r3]
 8000b12:	4b95      	ldr	r3, [pc, #596]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b14:	ed93 7b00 	vldr	d7, [r3]
 8000b18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000b1c:	4b93      	ldr	r3, [pc, #588]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b1e:	ed93 7b00 	vldr	d7, [r3]
 8000b22:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b26:	4b92      	ldr	r3, [pc, #584]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b28:	ed93 5b00 	vldr	d5, [r3]
 8000b2c:	4b91      	ldr	r3, [pc, #580]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000b2e:	ed93 7b00 	vldr	d7, [r3]
 8000b32:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b3a:	4b8f      	ldr	r3, [pc, #572]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b3c:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vx - Vy * corr_vy + (W * coeffab);
 8000b40:	4b8a      	ldr	r3, [pc, #552]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b42:	ed93 6b00 	vldr	d6, [r3]
 8000b46:	4b87      	ldr	r3, [pc, #540]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b48:	ed93 5b00 	vldr	d5, [r3]
 8000b4c:	4b86      	ldr	r3, [pc, #536]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b4e:	ed93 7b00 	vldr	d7, [r3]
 8000b52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b5a:	4b85      	ldr	r3, [pc, #532]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b5c:	ed93 5b00 	vldr	d5, [r3]
 8000b60:	4b84      	ldr	r3, [pc, #528]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000b62:	ed93 7b00 	vldr	d7, [r3]
 8000b66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b6e:	4b82      	ldr	r3, [pc, #520]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b70:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(FR_ENC);
 8000b74:	4b81      	ldr	r3, [pc, #516]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	4b7e      	ldr	r3, [pc, #504]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b7e:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(FL_ENC);
 8000b80:	4b7f      	ldr	r3, [pc, #508]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b8a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(BL_ENC) * -1;
 8000b8e:	4b7d      	ldr	r3, [pc, #500]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	425b      	negs	r3, r3
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000b9e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(BR_ENC) * -1;
 8000ba2:	4b79      	ldr	r3, [pc, #484]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	425b      	negs	r3, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	4b71      	ldr	r3, [pc, #452]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000bb2:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(FR_ENC, 0);
 8000bb6:	4b71      	ldr	r3, [pc, #452]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(FL_ENC, 0);
 8000bbe:	4b70      	ldr	r3, [pc, #448]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BL_ENC, 0);
 8000bc6:	4b6f      	ldr	r3, [pc, #444]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BR_ENC, 0);
 8000bce:	4b6e      	ldr	r3, [pc, #440]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24



		for( int i = 0; i < 4; i ++){
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	dc06      	bgt.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x15e>
			pidCtrl(i);
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f7ff fd4d 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e7f5      	b.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x14a>
		}

		__HAL_TIM_SET_COMPARE(FR_PWM_TIMMER, FR_PWM_CHANNEL, Kpid[0].pulse);
 8000bee:	4b62      	ldr	r3, [pc, #392]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000bf0:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000bf4:	4b65      	ldr	r3, [pc, #404]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bfc:	ee17 2a90 	vmov	r2, s15
 8000c00:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(FL_PWM_TIMMER, FL_PWM_CHANNEL, Kpid[1].pulse);
 8000c02:	4b5d      	ldr	r3, [pc, #372]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c04:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8000c08:	4b60      	ldr	r3, [pc, #384]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c10:	ee17 2a90 	vmov	r2, s15
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BL_PWM_TIMMER, BL_PWM_CHANNEL, Kpid[2].pulse);
 8000c16:	4b58      	ldr	r3, [pc, #352]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c18:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8000c1c:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c24:	ee17 2a90 	vmov	r2, s15
 8000c28:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BR_PWM_TIMMER, BR_PWM_CHANNEL, Kpid[3].pulse);
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c2c:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8000c30:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c38:	ee17 2a90 	vmov	r2, s15
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c44:	4853      	ldr	r0, [pc, #332]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000c46:	f008 fb37 	bl	80092b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	4850      	ldr	r0, [pc, #320]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000c52:	f008 fb31 	bl	80092b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	484e      	ldr	r0, [pc, #312]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000c5e:	f008 fb2b 	bl	80092b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c68:	484b      	ldr	r0, [pc, #300]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000c6a:	f008 fb25 	bl	80092b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2104      	movs	r1, #4
 8000c72:	484a      	ldr	r0, [pc, #296]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000c74:	f008 fb20 	bl	80092b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	4847      	ldr	r0, [pc, #284]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000c7e:	f008 fb1b 	bl	80092b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	4845      	ldr	r0, [pc, #276]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000c8a:	f008 fb15 	bl	80092b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2110      	movs	r1, #16
 8000c92:	4842      	ldr	r0, [pc, #264]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000c94:	f008 fb10 	bl	80092b8 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000c9a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000c9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	dd06      	ble.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x226>
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cae:	4839      	ldr	r0, [pc, #228]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000cb0:	f008 fb02 	bl	80092b8 <HAL_GPIO_WritePin>
 8000cb4:	e00d      	b.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x242>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000cb8:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000cbc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc4:	d505      	bpl.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x242>
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ccc:	4831      	ldr	r0, [pc, #196]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000cce:	f008 faf3 	bl	80092b8 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000cd4:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000cd8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce0:	dd06      	ble.n	8000cf0 <HAL_TIM_PeriodElapsedCallback+0x260>
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce8:	482b      	ldr	r0, [pc, #172]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000cea:	f008 fae5 	bl	80092b8 <HAL_GPIO_WritePin>
 8000cee:	e00d      	b.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x27c>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000cf2:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000cf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfe:	d505      	bpl.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x27c>
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d06:	4824      	ldr	r0, [pc, #144]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000d08:	f008 fad6 	bl	80092b8 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d0e:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000d12:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	dd05      	ble.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x298>
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2104      	movs	r1, #4
 8000d20:	481e      	ldr	r0, [pc, #120]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d22:	f008 fac9 	bl	80092b8 <HAL_GPIO_WritePin>
 8000d26:	e00c      	b.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x2b2>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d2a:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000d2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	d504      	bpl.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x2b2>
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000d3e:	f008 fabb 	bl	80092b8 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000d44:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000d48:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	dd28      	ble.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x314>
 8000d52:	2201      	movs	r2, #1
 8000d54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000d5a:	f008 faad 	bl	80092b8 <HAL_GPIO_WritePin>
 8000d5e:	e02e      	b.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x32e>
 8000d60:	40010000 	.word	0x40010000
 8000d64:	240002d0 	.word	0x240002d0
 8000d68:	24000048 	.word	0x24000048
 8000d6c:	240002c8 	.word	0x240002c8
 8000d70:	240002d8 	.word	0x240002d8
 8000d74:	24000040 	.word	0x24000040
 8000d78:	24000108 	.word	0x24000108
 8000d7c:	2400051c 	.word	0x2400051c
 8000d80:	24000600 	.word	0x24000600
 8000d84:	24000568 	.word	0x24000568
 8000d88:	240005b4 	.word	0x240005b4
 8000d8c:	24000698 	.word	0x24000698
 8000d90:	240006e4 	.word	0x240006e4
 8000d94:	58020c00 	.word	0x58020c00
 8000d98:	58020400 	.word	0x58020400
 8000d9c:	58021000 	.word	0x58021000
 8000da0:	58020800 	.word	0x58020800
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 8000da4:	4ba0      	ldr	r3, [pc, #640]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8000da6:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000daa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	d504      	bpl.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x32e>
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	489c      	ldr	r0, [pc, #624]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000dba:	f008 fa7d 	bl	80092b8 <HAL_GPIO_WritePin>
	}

	if(htim->Instance == TIM8){
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a9b      	ldr	r2, [pc, #620]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	f040 810c 	bne.w	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x552>
		/*pusher down*/
		if(pusher_A.d > 0){
 8000dca:	4b9a      	ldr	r3, [pc, #616]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000dcc:	ed93 7b04 	vldr	d7, [r3, #16]
 8000dd0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd8:	dd2f      	ble.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x3aa>
			pusher_A.count++;
 8000dda:	4b96      	ldr	r3, [pc, #600]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a94      	ldr	r2, [pc, #592]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000de2:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dea:	4890      	ldr	r0, [pc, #576]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000dec:	f008 fa64 	bl	80092b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	488d      	ldr	r0, [pc, #564]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000df8:	f008 fa5e 	bl	80092b8 <HAL_GPIO_WritePin>
			if(pusher_A.count > pusher_A.d*1000/PUSHER_SPEED){
 8000dfc:	4b8d      	ldr	r3, [pc, #564]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e08:	4b8a      	ldr	r3, [pc, #552]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000e0a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e0e:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000e12:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e16:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8001020 <HAL_TIM_PeriodElapsedCallback+0x590>
 8000e1a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	dd08      	ble.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x3aa>
				pusher_A.p_state = pusher_A.state;
 8000e28:	4b82      	ldr	r3, [pc, #520]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	4981      	ldr	r1, [pc, #516]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000e30:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000e34:	4b7f      	ldr	r3, [pc, #508]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d > 0){
 8000e3a:	4b7f      	ldr	r3, [pc, #508]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e3c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e40:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e48:	dd2f      	ble.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x41a>
			pusher_B.count++;
 8000e4a:	4b7b      	ldr	r3, [pc, #492]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a79      	ldr	r2, [pc, #484]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e52:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5a:	4874      	ldr	r0, [pc, #464]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000e5c:	f008 fa2c 	bl	80092b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e66:	4871      	ldr	r0, [pc, #452]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000e68:	f008 fa26 	bl	80092b8 <HAL_GPIO_WritePin>
			if(pusher_B.count > pusher_B.d*1000/PUSHER_SPEED){
 8000e6c:	4b72      	ldr	r3, [pc, #456]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e78:	4b6f      	ldr	r3, [pc, #444]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e7a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e7e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000e82:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e86:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8001020 <HAL_TIM_PeriodElapsedCallback+0x590>
 8000e8a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e96:	dd08      	ble.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x41a>
				pusher_B.p_state = pusher_B.state;
 8000e98:	4b67      	ldr	r3, [pc, #412]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	4966      	ldr	r1, [pc, #408]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000ea0:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000ea4:	4b64      	ldr	r3, [pc, #400]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher up*/
		if(pusher_A.d < 0){
 8000eaa:	4b62      	ldr	r3, [pc, #392]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000eac:	ed93 7b04 	vldr	d7, [r3, #16]
 8000eb0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	d531      	bpl.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x48e>
			pusher_A.count++;
 8000eba:	4b5e      	ldr	r3, [pc, #376]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a5c      	ldr	r2, [pc, #368]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000ec2:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eca:	4858      	ldr	r0, [pc, #352]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000ecc:	f008 f9f4 	bl	80092b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed6:	4855      	ldr	r0, [pc, #340]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000ed8:	f008 f9ee 	bl	80092b8 <HAL_GPIO_WritePin>
			if(pusher_A.count > -pusher_A.d*1000/PUSHER_SPEED){
 8000edc:	4b55      	ldr	r3, [pc, #340]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ee8:	4b52      	ldr	r3, [pc, #328]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000eea:	ed93 7b04 	vldr	d7, [r3, #16]
 8000eee:	eeb1 7b47 	vneg.f64	d7, d7
 8000ef2:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000ef6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000efa:	ed9f 4b49 	vldr	d4, [pc, #292]	; 8001020 <HAL_TIM_PeriodElapsedCallback+0x590>
 8000efe:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	dd08      	ble.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0x48e>
				pusher_A.p_state = pusher_A.state;
 8000f0c:	4b49      	ldr	r3, [pc, #292]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	4948      	ldr	r1, [pc, #288]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000f18:	4b46      	ldr	r3, [pc, #280]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d < 0){
 8000f1e:	4b46      	ldr	r3, [pc, #280]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f20:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2c:	d531      	bpl.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0x502>
			pusher_B.count++;
 8000f2e:	4b42      	ldr	r3, [pc, #264]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	3301      	adds	r3, #1
 8000f34:	4a40      	ldr	r2, [pc, #256]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f36:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3e:	483b      	ldr	r0, [pc, #236]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000f40:	f008 f9ba 	bl	80092b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	4838      	ldr	r0, [pc, #224]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000f4c:	f008 f9b4 	bl	80092b8 <HAL_GPIO_WritePin>
			if(pusher_B.count > -pusher_B.d*1000/PUSHER_SPEED){
 8000f50:	4b39      	ldr	r3, [pc, #228]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f5e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f62:	eeb1 7b47 	vneg.f64	d7, d7
 8000f66:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001018 <HAL_TIM_PeriodElapsedCallback+0x588>
 8000f6a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f6e:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 8001020 <HAL_TIM_PeriodElapsedCallback+0x590>
 8000f72:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000f76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7e:	dd08      	ble.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0x502>
				pusher_B.p_state = pusher_B.state;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	492c      	ldr	r1, [pc, #176]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f88:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher stop*/
		if(pusher_A.d == 0){
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8000f94:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d10b      	bne.n	8000fba <HAL_TIM_PeriodElapsedCallback+0x52a>
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa8:	4820      	ldr	r0, [pc, #128]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000faa:	f008 f985 	bl	80092b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb4:	481d      	ldr	r0, [pc, #116]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000fb6:	f008 f97f 	bl	80092b8 <HAL_GPIO_WritePin>
		}
		if(pusher_B.d == 0){
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8000fbc:	ed93 7b04 	vldr	d7, [r3, #16]
 8000fc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_TIM_PeriodElapsedCallback+0x552>
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd0:	4816      	ldr	r0, [pc, #88]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000fd2:	f008 f971 	bl	80092b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8000fde:	f008 f96b 	bl	80092b8 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//		}
//
	}
	if(htim->Instance == TIM23){/*for script*/
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d111      	bne.n	8001010 <HAL_TIM_PeriodElapsedCallback+0x580>
		if(delay_start!=0){
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d004      	beq.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x56e>
			delay++;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8000ffc:	6013      	str	r3, [r2, #0]
		}
		if(delay_start_2!=0){
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <HAL_TIM_PeriodElapsedCallback+0x580>
			delay_2++;
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3301      	adds	r3, #1
 800100c:	4a0f      	ldr	r2, [pc, #60]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 800100e:	6013      	str	r3, [r2, #0]
//			script_wheel(0,0,0);
//			script_pusher(0,10,0,0);
//		}

	}
}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	00000000 	.word	0x00000000
 800101c:	408f4000 	.word	0x408f4000
 8001020:	cccccccd 	.word	0xcccccccd
 8001024:	4040cccc 	.word	0x4040cccc
 8001028:	24000108 	.word	0x24000108
 800102c:	58021000 	.word	0x58021000
 8001030:	40010400 	.word	0x40010400
 8001034:	24001f30 	.word	0x24001f30
 8001038:	24001f50 	.word	0x24001f50
 800103c:	4000e000 	.word	0x4000e000
 8001040:	240002e0 	.word	0x240002e0
 8001044:	240002e4 	.word	0x240002e4
 8001048:	240002e8 	.word	0x240002e8
 800104c:	240002ec 	.word	0x240002ec

08001050 <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 8001054:	2100      	movs	r1, #0
 8001056:	4818      	ldr	r0, [pc, #96]	; (80010b8 <_Z13DC_motor_initv+0x68>)
 8001058:	f00a fed0 	bl	800bdfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 800105c:	2104      	movs	r1, #4
 800105e:	4816      	ldr	r0, [pc, #88]	; (80010b8 <_Z13DC_motor_initv+0x68>)
 8001060:	f00a fecc 	bl	800bdfc <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 8001064:	2104      	movs	r1, #4
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <_Z13DC_motor_initv+0x6c>)
 8001068:	f00a fd06 	bl	800ba78 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 800106c:	2100      	movs	r1, #0
 800106e:	4814      	ldr	r0, [pc, #80]	; (80010c0 <_Z13DC_motor_initv+0x70>)
 8001070:	f00a fec4 	bl	800bdfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 8001074:	2104      	movs	r1, #4
 8001076:	4812      	ldr	r0, [pc, #72]	; (80010c0 <_Z13DC_motor_initv+0x70>)
 8001078:	f00a fec0 	bl	800bdfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 800107c:	2100      	movs	r1, #0
 800107e:	480f      	ldr	r0, [pc, #60]	; (80010bc <_Z13DC_motor_initv+0x6c>)
 8001080:	f00a fcfa 	bl	800ba78 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 8001084:	2100      	movs	r1, #0
 8001086:	480f      	ldr	r0, [pc, #60]	; (80010c4 <_Z13DC_motor_initv+0x74>)
 8001088:	f00a feb8 	bl	800bdfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 800108c:	2104      	movs	r1, #4
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <_Z13DC_motor_initv+0x74>)
 8001090:	f00a feb4 	bl	800bdfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 8001094:	2100      	movs	r1, #0
 8001096:	480c      	ldr	r0, [pc, #48]	; (80010c8 <_Z13DC_motor_initv+0x78>)
 8001098:	f00a fcee 	bl	800ba78 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 800109c:	2100      	movs	r1, #0
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <_Z13DC_motor_initv+0x7c>)
 80010a0:	f00a feac 	bl	800bdfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 80010a4:	2104      	movs	r1, #4
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <_Z13DC_motor_initv+0x7c>)
 80010a8:	f00a fea8 	bl	800bdfc <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 80010ac:	2104      	movs	r1, #4
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <_Z13DC_motor_initv+0x78>)
 80010b0:	f00a fce2 	bl	800ba78 <HAL_TIM_PWM_Start>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2400051c 	.word	0x2400051c
 80010bc:	24000698 	.word	0x24000698
 80010c0:	24000600 	.word	0x24000600
 80010c4:	24000568 	.word	0x24000568
 80010c8:	240006e4 	.word	0x240006e4
 80010cc:	240005b4 	.word	0x240005b4

080010d0 <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 80010d0:	b480      	push	{r7}
 80010d2:	b08f      	sub	sp, #60	; 0x3c
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6378      	str	r0, [r7, #52]	; 0x34
 80010d8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80010dc:	ed87 1b08 	vstr	d1, [r7, #32]
 80010e0:	ed87 2b06 	vstr	d2, [r7, #24]
 80010e4:	ed87 3b04 	vstr	d3, [r7, #16]
 80010e8:	ed87 4b02 	vstr	d4, [r7, #8]
 80010ec:	ed87 5b00 	vstr	d5, [r7]
 80010f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80010fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800110c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800111a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 8001128:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800112a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800112e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 8001132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001134:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001138:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 800113c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800113e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001142:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 8001146:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001148:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800114c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 8001150:	ed97 7b02 	vldr	d7, [r7, #8]
 8001154:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001158:	ee17 2a90 	vmov	r2, s15
 800115c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115e:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 8001160:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001166:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800116a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116c:	4618      	mov	r0, r3
 800116e:	373c      	adds	r7, #60	; 0x3c
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_Z41__static_initialization_and_destruction_0ii>:
	u = kp * error + ki * integral + kd * differential;
	if (u > 1) u = 1;
	else if (u < -1) u = -1;

	return (int) u*ARR;
}
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d140      	bne.n	800120a <_Z41__static_initialization_and_destruction_0ii+0x92>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800118e:	4293      	cmp	r3, r2
 8001190:	d13b      	bne.n	800120a <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 8001192:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001218 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8001196:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8001220 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800119a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8001228 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800119e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8001230 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80011a2:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001238 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80011a6:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001240 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80011aa:	4833      	ldr	r0, [pc, #204]	; (8001278 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80011ac:	f7ff ff90 	bl	80010d0 <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 80011b0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001218 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80011b4:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8001220 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80011b8:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8001228 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80011bc:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8001230 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80011c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001248 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80011c4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001250 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80011c8:	482c      	ldr	r0, [pc, #176]	; (800127c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80011ca:	f7ff ff81 	bl	80010d0 <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 80011ce:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001218 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80011d2:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8001220 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80011d6:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8001228 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80011da:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8001230 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80011de:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001258 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80011e2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001260 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80011e6:	4826      	ldr	r0, [pc, #152]	; (8001280 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80011e8:	f7ff ff72 	bl	80010d0 <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 80011ec:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001218 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80011f0:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8001220 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80011f4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8001228 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80011f8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001230 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80011fc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001268 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8001200:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001270 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 8001204:	481f      	ldr	r0, [pc, #124]	; (8001284 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001206:	f7ff ff63 	bl	80010d0 <_ZN8DC_motorC1Edddddd>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	00000000 	.word	0x00000000
 800121c:	408f4000 	.word	0x408f4000
 8001220:	00000000 	.word	0x00000000
 8001224:	40800000 	.word	0x40800000
 8001228:	00000000 	.word	0x00000000
 800122c:	406b0000 	.word	0x406b0000
	...
 8001238:	89b64cae 	.word	0x89b64cae
 800123c:	403fb7ac 	.word	0x403fb7ac
 8001240:	d059ca21 	.word	0xd059ca21
 8001244:	402fee62 	.word	0x402fee62
 8001248:	76ca36c5 	.word	0x76ca36c5
 800124c:	4056ec15 	.word	0x4056ec15
 8001250:	420d6ba3 	.word	0x420d6ba3
 8001254:	40382ecc 	.word	0x40382ecc
 8001258:	e191aae3 	.word	0xe191aae3
 800125c:	40490b21 	.word	0x40490b21
 8001260:	f4097cab 	.word	0xf4097cab
 8001264:	4035320d 	.word	0x4035320d
 8001268:	06469611 	.word	0x06469611
 800126c:	40535cd8 	.word	0x40535cd8
 8001270:	0ae388d1 	.word	0x0ae388d1
 8001274:	40404f39 	.word	0x40404f39
 8001278:	240002f0 	.word	0x240002f0
 800127c:	24000368 	.word	0x24000368
 8001280:	240003e0 	.word	0x240003e0
 8001284:	24000458 	.word	0x24000458

08001288 <_GLOBAL__sub_I_FL>:
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
 800128c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff ff71 	bl	8001178 <_Z41__static_initialization_and_destruction_0ii>
 8001296:	bd80      	pop	{r7, pc}

08001298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f004 fb7a 	bl	8005994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f81e 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 fc7c 	bl	8001ba0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012a8:	f000 f8de 	bl	8001468 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012ac:	f000 f930 	bl	8001510 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012b0:	f000 f984 	bl	80015bc <MX_TIM4_Init>
  MX_TIM5_Init();
 80012b4:	f000 f9d8 	bl	8001668 <MX_TIM5_Init>
  MX_TIM12_Init();
 80012b8:	f000 fa80 	bl	80017bc <MX_TIM12_Init>
  MX_TIM15_Init();
 80012bc:	f000 face 	bl	800185c <MX_TIM15_Init>
  MX_TIM1_Init();
 80012c0:	f000 f87e 	bl	80013c0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80012c4:	f000 fa26 	bl	8001714 <MX_TIM8_Init>
  MX_TIM23_Init();
 80012c8:	f000 fb5a 	bl	8001980 <MX_TIM23_Init>
  MX_USART1_UART_Init();
 80012cc:	f000 fba6 	bl	8001a1c <MX_USART1_UART_Init>
  MX_DMA_Init();
 80012d0:	f000 fc3e 	bl	8001b50 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80012d4:	f000 fbee 	bl	8001ab4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80012d8:	f002 fb5e 	bl	8003998 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <main+0x44>
	...

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b09c      	sub	sp, #112	; 0x70
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	224c      	movs	r2, #76	; 0x4c
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00e f960 	bl	800f5b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2220      	movs	r2, #32
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00e f95a 	bl	800f5b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001300:	2002      	movs	r0, #2
 8001302:	f007 fff3 	bl	80092ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <SystemClock_Config+0xdc>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001312:	4a2a      	ldr	r2, [pc, #168]	; (80013bc <SystemClock_Config+0xdc>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6193      	str	r3, [r2, #24]
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <SystemClock_Config+0xdc>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001326:	bf00      	nop
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <SystemClock_Config+0xdc>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001334:	d1f8      	bne.n	8001328 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001336:	2301      	movs	r3, #1
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	2302      	movs	r3, #2
 8001342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001344:	2302      	movs	r3, #2
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 800134c:	232a      	movs	r3, #42	; 0x2a
 800134e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001354:	2302      	movs	r3, #2
 8001356:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800135c:	230c      	movs	r3, #12
 800135e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001360:	2300      	movs	r3, #0
 8001362:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4618      	mov	r0, r3
 800136e:	f007 fff7 	bl	8009360 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001378:	f000 fd24 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	233f      	movs	r3, #63	; 0x3f
 800137e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2303      	movs	r3, #3
 8001382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001388:	2308      	movs	r3, #8
 800138a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001390:	2340      	movs	r3, #64	; 0x40
 8001392:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001398:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800139a:	2340      	movs	r3, #64	; 0x40
 800139c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2102      	movs	r1, #2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f008 fb8a 	bl	8009abc <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80013ae:	f000 fd09 	bl	8001dc4 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3770      	adds	r7, #112	; 0x70
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	58024800 	.word	0x58024800

080013c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <MX_TIM1_Init+0xa0>)
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <MX_TIM1_Init+0xa4>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <MX_TIM1_Init+0xa0>)
 80013e6:	2253      	movs	r2, #83	; 0x53
 80013e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_TIM1_Init+0xa0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <MX_TIM1_Init+0xa0>)
 80013f2:	f640 729f 	movw	r2, #3999	; 0xf9f
 80013f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_TIM1_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <MX_TIM1_Init+0xa0>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_TIM1_Init+0xa0>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800140a:	4815      	ldr	r0, [pc, #84]	; (8001460 <MX_TIM1_Init+0xa0>)
 800140c:	f00a f9fe 	bl	800b80c <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001416:	f000 fcd5 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <MX_TIM1_Init+0xa0>)
 8001428:	f00a ffca 	bl	800c3c0 <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001432:	f000 fcc7 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4806      	ldr	r0, [pc, #24]	; (8001460 <MX_TIM1_Init+0xa0>)
 8001448:	f00b fd1a 	bl	800ce80 <HAL_TIMEx_MasterConfigSynchronization>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001452:	f000 fcb7 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	240004d0 	.word	0x240004d0
 8001464:	40010000 	.word	0x40010000

08001468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2224      	movs	r2, #36	; 0x24
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f00e f89c 	bl	800f5b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <MX_TIM2_Init+0xa4>)
 8001488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_TIM2_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_TIM2_Init+0xa4>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_TIM2_Init+0xa4>)
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_TIM2_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_TIM2_Init+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ae:	2303      	movs	r3, #3
 80014b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c6:	2301      	movs	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <MX_TIM2_Init+0xa4>)
 80014da:	f00a fbe9 	bl	800bcb0 <HAL_TIM_Encoder_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80014e4:	f000 fc6e 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_TIM2_Init+0xa4>)
 80014f6:	f00b fcc3 	bl	800ce80 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001500:	f000 fc60 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3730      	adds	r7, #48	; 0x30
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2400051c 	.word	0x2400051c

08001510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2224      	movs	r2, #36	; 0x24
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f00e f848 	bl	800f5b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	463b      	mov	r3, r7
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_TIM3_Init+0xa4>)
 8001530:	4a21      	ldr	r2, [pc, #132]	; (80015b8 <MX_TIM3_Init+0xa8>)
 8001532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_TIM3_Init+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <MX_TIM3_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_TIM3_Init+0xa4>)
 8001542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001546:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_TIM3_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_TIM3_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001554:	2303      	movs	r3, #3
 8001556:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800155c:	2301      	movs	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800156c:	2301      	movs	r3, #1
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <MX_TIM3_Init+0xa4>)
 8001580:	f00a fb96 	bl	800bcb0 <HAL_TIM_Encoder_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800158a:	f000 fc1b 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM3_Init+0xa4>)
 800159c:	f00b fc70 	bl	800ce80 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80015a6:	f000 fc0d 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3730      	adds	r7, #48	; 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	24000568 	.word	0x24000568
 80015b8:	40000400 	.word	0x40000400

080015bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2224      	movs	r2, #36	; 0x24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00d fff2 	bl	800f5b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <MX_TIM4_Init+0xa8>)
 80015de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_TIM4_Init+0xa4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001600:	2303      	movs	r3, #3
 8001602:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001608:	2301      	movs	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001618:	2301      	movs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4619      	mov	r1, r3
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_TIM4_Init+0xa4>)
 800162c:	f00a fb40 	bl	800bcb0 <HAL_TIM_Encoder_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001636:	f000 fbc5 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_TIM4_Init+0xa4>)
 8001648:	f00b fc1a 	bl	800ce80 <HAL_TIMEx_MasterConfigSynchronization>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001652:	f000 fbb7 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3730      	adds	r7, #48	; 0x30
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	240005b4 	.word	0x240005b4
 8001664:	40000800 	.word	0x40000800

08001668 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08c      	sub	sp, #48	; 0x30
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	2224      	movs	r2, #36	; 0x24
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f00d ff9c 	bl	800f5b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_TIM5_Init+0xa4>)
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <MX_TIM5_Init+0xa8>)
 800168a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800168c:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_TIM5_Init+0xa4>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b1e      	ldr	r3, [pc, #120]	; (800170c <MX_TIM5_Init+0xa4>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_TIM5_Init+0xa4>)
 800169a:	f04f 32ff 	mov.w	r2, #4294967295
 800169e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_TIM5_Init+0xa4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_TIM5_Init+0xa4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ac:	2303      	movs	r3, #3
 80016ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016b4:	2301      	movs	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016c4:	2301      	movs	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	4619      	mov	r1, r3
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <MX_TIM5_Init+0xa4>)
 80016d8:	f00a faea 	bl	800bcb0 <HAL_TIM_Encoder_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80016e2:	f000 fb6f 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016ee:	463b      	mov	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <MX_TIM5_Init+0xa4>)
 80016f4:	f00b fbc4 	bl	800ce80 <HAL_TIMEx_MasterConfigSynchronization>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80016fe:	f000 fb61 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	3730      	adds	r7, #48	; 0x30
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	24000600 	.word	0x24000600
 8001710:	40000c00 	.word	0x40000c00

08001714 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_TIM8_Init+0xa0>)
 8001734:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <MX_TIM8_Init+0xa4>)
 8001736:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <MX_TIM8_Init+0xa0>)
 800173a:	223f      	movs	r2, #63	; 0x3f
 800173c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <MX_TIM8_Init+0xa0>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_TIM8_Init+0xa0>)
 8001746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800174a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <MX_TIM8_Init+0xa0>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_TIM8_Init+0xa0>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_TIM8_Init+0xa0>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800175e:	4815      	ldr	r0, [pc, #84]	; (80017b4 <MX_TIM8_Init+0xa0>)
 8001760:	f00a f854 	bl	800b80c <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800176a:	f000 fb2b 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	4619      	mov	r1, r3
 800177a:	480e      	ldr	r0, [pc, #56]	; (80017b4 <MX_TIM8_Init+0xa0>)
 800177c:	f00a fe20 	bl	800c3c0 <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001786:	f000 fb1d 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_TIM8_Init+0xa0>)
 800179c:	f00b fb70 	bl	800ce80 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80017a6:	f000 fb0d 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2400064c 	.word	0x2400064c
 80017b8:	40010400 	.word	0x40010400

080017bc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_TIM12_Init+0x98>)
 80017d6:	4a20      	ldr	r2, [pc, #128]	; (8001858 <MX_TIM12_Init+0x9c>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_TIM12_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_TIM12_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_TIM12_Init+0x98>)
 80017e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_TIM12_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_TIM12_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017fa:	4816      	ldr	r0, [pc, #88]	; (8001854 <MX_TIM12_Init+0x98>)
 80017fc:	f00a f8e4 	bl	800b9c8 <HAL_TIM_PWM_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001806:	f000 fadd 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180a:	2360      	movs	r3, #96	; 0x60
 800180c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	4619      	mov	r1, r3
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_TIM12_Init+0x98>)
 8001822:	f00a fcb9 	bl	800c198 <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800182c:	f000 faca 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2204      	movs	r2, #4
 8001834:	4619      	mov	r1, r3
 8001836:	4807      	ldr	r0, [pc, #28]	; (8001854 <MX_TIM12_Init+0x98>)
 8001838:	f00a fcae 	bl	800c198 <HAL_TIM_PWM_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001842:	f000 fabf 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001846:	4803      	ldr	r0, [pc, #12]	; (8001854 <MX_TIM12_Init+0x98>)
 8001848:	f003 fcf8 	bl	800523c <HAL_TIM_MspPostInit>

}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	24000698 	.word	0x24000698
 8001858:	40001800 	.word	0x40001800

0800185c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b098      	sub	sp, #96	; 0x60
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001862:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800186e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2234      	movs	r2, #52	; 0x34
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f00d fe93 	bl	800f5b4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <MX_TIM15_Init+0x11c>)
 8001890:	4a3a      	ldr	r2, [pc, #232]	; (800197c <MX_TIM15_Init+0x120>)
 8001892:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001894:	4b38      	ldr	r3, [pc, #224]	; (8001978 <MX_TIM15_Init+0x11c>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <MX_TIM15_Init+0x11c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <MX_TIM15_Init+0x11c>)
 80018a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <MX_TIM15_Init+0x11c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <MX_TIM15_Init+0x11c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <MX_TIM15_Init+0x11c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80018ba:	482f      	ldr	r0, [pc, #188]	; (8001978 <MX_TIM15_Init+0x11c>)
 80018bc:	f00a f884 	bl	800b9c8 <HAL_TIM_PWM_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80018c6:	f000 fa7d 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80018d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018d6:	4619      	mov	r1, r3
 80018d8:	4827      	ldr	r0, [pc, #156]	; (8001978 <MX_TIM15_Init+0x11c>)
 80018da:	f00b fad1 	bl	800ce80 <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80018e4:	f000 fa6e 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e8:	2360      	movs	r3, #96	; 0x60
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f0:	2300      	movs	r3, #0
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018f4:	2300      	movs	r3, #0
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	481a      	ldr	r0, [pc, #104]	; (8001978 <MX_TIM15_Init+0x11c>)
 800190e:	f00a fc43 	bl	800c198 <HAL_TIM_PWM_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001918:	f000 fa54 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800191c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001920:	2204      	movs	r2, #4
 8001922:	4619      	mov	r1, r3
 8001924:	4814      	ldr	r0, [pc, #80]	; (8001978 <MX_TIM15_Init+0x11c>)
 8001926:	f00a fc37 	bl	800c198 <HAL_TIM_PWM_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001930:	f000 fa48 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4807      	ldr	r0, [pc, #28]	; (8001978 <MX_TIM15_Init+0x11c>)
 800195c:	f00b fb2c 	bl	800cfb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001966:	f000 fa2d 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <MX_TIM15_Init+0x11c>)
 800196c:	f003 fc66 	bl	800523c <HAL_TIM_MspPostInit>

}
 8001970:	bf00      	nop
 8001972:	3760      	adds	r7, #96	; 0x60
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	240006e4 	.word	0x240006e4
 800197c:	40014000 	.word	0x40014000

08001980 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019a0:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <MX_TIM23_Init+0x98>)
 80019a2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 83;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019a6:	2253      	movs	r2, #83	; 0x53
 80019a8:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80019b6:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80019c4:	4813      	ldr	r0, [pc, #76]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019c6:	f009 ff21 	bl	800b80c <HAL_TIM_Base_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 80019d0:	f000 f9f8 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4619      	mov	r1, r3
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019e2:	f00a fced 	bl	800c3c0 <HAL_TIM_ConfigClockSource>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 80019ec:	f000 f9ea 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_TIM23_Init+0x94>)
 80019fe:	f00b fa3f 	bl	800ce80 <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8001a08:	f000 f9dc 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	24000730 	.word	0x24000730
 8001a18:	4000e000 	.word	0x4000e000

08001a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a22:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <MX_USART1_UART_Init+0x94>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a28:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a66:	f00b fb65 	bl	800d134 <HAL_UART_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a70:	f000 f9a8 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a74:	2100      	movs	r1, #0
 8001a76:	480d      	ldr	r0, [pc, #52]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a78:	f00d fc7e 	bl	800f378 <HAL_UARTEx_SetTxFifoThreshold>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a82:	f000 f99f 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a86:	2100      	movs	r1, #0
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a8a:	f00d fcb3 	bl	800f3f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a94:	f000 f996 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_USART1_UART_Init+0x90>)
 8001a9a:	f00d fc34 	bl	800f306 <HAL_UARTEx_DisableFifoMode>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001aa4:	f000 f98e 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	2400077c 	.word	0x2400077c
 8001ab0:	40011000 	.word	0x40011000

08001ab4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <MX_USART3_UART_Init+0x94>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <MX_USART3_UART_Init+0x98>)
 8001ac2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001ad8:	220c      	movs	r2, #12
 8001ada:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001afa:	4812      	ldr	r0, [pc, #72]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001afc:	f00b fb1a 	bl	800d134 <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001b06:	f000 f95d 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001b0e:	f00d fc33 	bl	800f378 <HAL_UARTEx_SetTxFifoThreshold>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001b18:	f000 f954 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4809      	ldr	r0, [pc, #36]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001b20:	f00d fc68 	bl	800f3f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001b2a:	f000 f94b 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART3_UART_Init+0x90>)
 8001b30:	f00d fbe9 	bl	800f306 <HAL_UARTEx_DisableFifoMode>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001b3a:	f000 f943 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2400080c 	.word	0x2400080c
 8001b48:	40004800 	.word	0x40004800
 8001b4c:	0007a120 	.word	0x0007a120

08001b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_DMA_Init+0x4c>)
 8001b58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b5c:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <MX_DMA_Init+0x4c>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <MX_DMA_Init+0x4c>)
 8001b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	200b      	movs	r0, #11
 8001b7a:	f004 f8c0 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b7e:	200b      	movs	r0, #11
 8001b80:	f004 f8d7 	bl	8005d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	200c      	movs	r0, #12
 8001b8a:	f004 f8b8 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b8e:	200c      	movs	r0, #12
 8001b90:	f004 f8cf 	bl	8005d32 <HAL_NVIC_EnableIRQ>

}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	58024400 	.word	0x58024400

08001ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	; 0x38
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb6:	4b7c      	ldr	r3, [pc, #496]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc6:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	623b      	str	r3, [r7, #32]
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd4:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a73      	ldr	r2, [pc, #460]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c02:	4b69      	ldr	r3, [pc, #420]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	61bb      	str	r3, [r7, #24]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b65      	ldr	r3, [pc, #404]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c16:	4a64      	ldr	r2, [pc, #400]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c20:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2e:	4b5e      	ldr	r3, [pc, #376]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	4a5c      	ldr	r2, [pc, #368]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c36:	f043 0320 	orr.w	r3, r3, #32
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c4c:	4b56      	ldr	r3, [pc, #344]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c52:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5c:	4b52      	ldr	r3, [pc, #328]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b4f      	ldr	r3, [pc, #316]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c70:	4a4d      	ldr	r2, [pc, #308]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c7a:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c88:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8e:	4a46      	ldr	r2, [pc, #280]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <MX_GPIO_Init+0x208>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f248 711c 	movw	r1, #34588	; 0x871c
 8001cac:	483f      	ldr	r0, [pc, #252]	; (8001dac <MX_GPIO_Init+0x20c>)
 8001cae:	f007 fb03 	bl	80092b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb8:	483d      	ldr	r0, [pc, #244]	; (8001db0 <MX_GPIO_Init+0x210>)
 8001cba:	f007 fafd 	bl	80092b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001cc4:	483b      	ldr	r0, [pc, #236]	; (8001db4 <MX_GPIO_Init+0x214>)
 8001cc6:	f007 faf7 	bl	80092b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	483a      	ldr	r0, [pc, #232]	; (8001db8 <MX_GPIO_Init+0x218>)
 8001cd0:	f007 faf2 	bl	80092b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001cda:	4838      	ldr	r0, [pc, #224]	; (8001dbc <MX_GPIO_Init+0x21c>)
 8001cdc:	f007 faec 	bl	80092b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001ce6:	4836      	ldr	r0, [pc, #216]	; (8001dc0 <MX_GPIO_Init+0x220>)
 8001ce8:	f007 fae6 	bl	80092b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE9 PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001cec:	f248 731c 	movw	r3, #34588	; 0x871c
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d02:	4619      	mov	r1, r3
 8001d04:	4829      	ldr	r0, [pc, #164]	; (8001dac <MX_GPIO_Init+0x20c>)
 8001d06:	f007 f82d 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	4619      	mov	r1, r3
 8001d22:	4823      	ldr	r0, [pc, #140]	; (8001db0 <MX_GPIO_Init+0x210>)
 8001d24:	f007 f81e 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d28:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481c      	ldr	r0, [pc, #112]	; (8001db4 <MX_GPIO_Init+0x214>)
 8001d42:	f007 f80f 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4816      	ldr	r0, [pc, #88]	; (8001db8 <MX_GPIO_Init+0x218>)
 8001d5e:	f007 f801 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001d62:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4810      	ldr	r0, [pc, #64]	; (8001dbc <MX_GPIO_Init+0x21c>)
 8001d7c:	f006 fff2 	bl	8008d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001d80:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <MX_GPIO_Init+0x220>)
 8001d9a:	f006 ffe3 	bl	8008d64 <HAL_GPIO_Init>

}
 8001d9e:	bf00      	nop
 8001da0:	3738      	adds	r7, #56	; 0x38
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	58024400 	.word	0x58024400
 8001dac:	58021000 	.word	0x58021000
 8001db0:	58020800 	.word	0x58020800
 8001db4:	58021400 	.word	0x58021400
 8001db8:	58021800 	.word	0x58021800
 8001dbc:	58020400 	.word	0x58020400
 8001dc0:	58020c00 	.word	0x58020c00

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>

08001dce <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <_ZN3ros3MsgC1Ev+0x1c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	0800fb78 	.word	0x0800fb78

08001e10 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
      data()
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ffe8 	bl	8001df0 <_ZN3ros3MsgC1Ev>
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ffcf 	bl	8001dce <_ZN3ros4TimeC1Ev>
    {
    }
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	0800fb60 	.word	0x0800fb60

08001e40 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0a19      	lsrs	r1, r3, #8
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3301      	adds	r3, #1
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0c19      	lsrs	r1, r3, #16
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3302      	adds	r3, #2
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b2ca      	uxtb	r2, r1
 8001e7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	0e19      	lsrs	r1, r3, #24
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3303      	adds	r3, #3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b2ca      	uxtb	r2, r1
 8001e90:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3304      	adds	r3, #4
 8001e96:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6899      	ldr	r1, [r3, #8]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	0a19      	lsrs	r1, r3, #8
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2ca      	uxtb	r2, r1
 8001eb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0e19      	lsrs	r1, r3, #24
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b2ca      	uxtb	r2, r1
 8001eda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3304      	adds	r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
      return offset;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    }
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3301      	adds	r3, #1
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	440b      	add	r3, r1
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3303      	adds	r3, #3
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	440b      	add	r3, r1
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3304      	adds	r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	440b      	add	r3, r1
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3302      	adds	r3, #2
 8001f80:	6839      	ldr	r1, [r7, #0]
 8001f82:	440b      	add	r3, r1
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	041b      	lsls	r3, r3, #16
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3303      	adds	r3, #3
 8001f96:	6839      	ldr	r1, [r7, #0]
 8001f98:	440b      	add	r3, r1
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
     return offset;
 8001faa:	68fb      	ldr	r3, [r7, #12]
    }
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	0800f8e0 	.word	0x0800f8e0

08001fd4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	0800f8f0 	.word	0x0800f8f0

08001ff0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fef8 	bl	8001df0 <_ZN3ros3MsgC1Ev>
 8002000:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	809a      	strh	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a06      	ldr	r2, [pc, #24]	; (8002034 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
    {
    }
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	0800fb48 	.word	0x0800fb48
 8002034:	0800f914 	.word	0x0800f914

08002038 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	8899      	ldrh	r1, [r3, #4]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	4413      	add	r3, r2
 8002050:	b2ca      	uxtb	r2, r1
 8002052:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	889b      	ldrh	r3, [r3, #4]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b299      	uxth	r1, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3301      	adds	r3, #1
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4413      	add	r3, r2
 8002064:	b2ca      	uxtb	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3302      	adds	r3, #2
 800206c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe f94c 	bl	8000310 <strlen>
 8002078:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	69b9      	ldr	r1, [r7, #24]
 8002082:	4618      	mov	r0, r3
 8002084:	f001 fdb4 	bl	8003bf0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	3304      	adds	r3, #4
 800208c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	18d0      	adds	r0, r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4619      	mov	r1, r3
 800209c:	f00d fa7c 	bl	800f598 <memcpy>
      offset += length_topic_name;
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4413      	add	r3, r2
 80020a6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe f92f 	bl	8000310 <strlen>
 80020b2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	6979      	ldr	r1, [r7, #20]
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fd97 	bl	8003bf0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	18d0      	adds	r0, r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f00d fa5f 	bl	800f598 <memcpy>
      offset += length_message_type;
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4413      	add	r3, r2
 80020e0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe f912 	bl	8000310 <strlen>
 80020ec:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 fd7a 	bl	8003bf0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3304      	adds	r3, #4
 8002100:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	18d0      	adds	r0, r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4619      	mov	r1, r3
 8002110:	f00d fa42 	bl	800f598 <memcpy>
      offset += length_md5sum;
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	b2ca      	uxtb	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	0a19      	lsrs	r1, r3, #8
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0c19      	lsrs	r1, r3, #16
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3302      	adds	r3, #2
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	4413      	add	r3, r2
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	0e19      	lsrs	r1, r3, #24
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3303      	adds	r3, #3
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4413      	add	r3, r2
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	61fb      	str	r3, [r7, #28]
      return offset;
 8002164:	69fb      	ldr	r3, [r7, #28]
    }
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800216e:	b580      	push	{r7, lr}
 8002170:	b08a      	sub	sp, #40	; 0x28
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b29a      	uxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	889b      	ldrh	r3, [r3, #4]
 800218e:	b21a      	sxth	r2, r3
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	3301      	adds	r3, #1
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	440b      	add	r3, r1
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	3302      	adds	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	441a      	add	r2, r3
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fd36 	bl	8003c2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	3304      	adds	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4413      	add	r3, r2
 80021d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d20c      	bcs.n	80021f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	441a      	add	r2, r3
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3b01      	subs	r3, #1
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	440b      	add	r3, r1
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3301      	adds	r3, #1
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	e7ec      	b.n	80021ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4413      	add	r3, r2
 80021f6:	3b01      	subs	r3, #1
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4413      	add	r3, r2
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3b01      	subs	r3, #1
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	441a      	add	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4413      	add	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	441a      	add	r2, r3
 800221a:	f107 0310 	add.w	r3, r7, #16
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fd03 	bl	8003c2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	3304      	adds	r3, #4
 800222a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	6a3a      	ldr	r2, [r7, #32]
 8002238:	429a      	cmp	r2, r3
 800223a:	d20c      	bcs.n	8002256 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	441a      	add	r2, r3
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	3b01      	subs	r3, #1
 8002246:	6839      	ldr	r1, [r7, #0]
 8002248:	440b      	add	r3, r1
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	3301      	adds	r3, #1
 8002252:	623b      	str	r3, [r7, #32]
 8002254:	e7ec      	b.n	8002230 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	3b01      	subs	r3, #1
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	3b01      	subs	r3, #1
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	441a      	add	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	441a      	add	r2, r3
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f001 fcd0 	bl	8003c2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	3304      	adds	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	441a      	add	r2, r3
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6839      	ldr	r1, [r7, #0]
 80022ae:	440b      	add	r3, r1
 80022b0:	7812      	ldrb	r2, [r2, #0]
 80022b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3301      	adds	r3, #1
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e7ec      	b.n	8002296 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4413      	add	r3, r2
 80022c2:	3b01      	subs	r3, #1
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	4413      	add	r3, r2
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	441a      	add	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4413      	add	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	6839      	ldr	r1, [r7, #0]
 80022ea:	440a      	add	r2, r1
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	3301      	adds	r3, #1
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	440b      	add	r3, r1
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	4313      	orrs	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	3302      	adds	r3, #2
 800230a:	6839      	ldr	r1, [r7, #0]
 800230c:	440b      	add	r3, r1
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	4313      	orrs	r3, r2
 8002314:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	3303      	adds	r3, #3
 800231c:	6839      	ldr	r1, [r7, #0]
 800231e:	440b      	add	r3, r1
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	061b      	lsls	r3, r3, #24
 8002324:	4313      	orrs	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	3304      	adds	r3, #4
 8002332:	61bb      	str	r3, [r7, #24]
     return offset;
 8002334:	69bb      	ldr	r3, [r7, #24]
    }
 8002336:	4618      	mov	r0, r3
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	0800f918 	.word	0x0800f918

0800235c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	0800f934 	.word	0x0800f934

08002378 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fd34 	bl	8001df0 <_ZN3ros3MsgC1Ev>
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	711a      	strb	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002398:	609a      	str	r2, [r3, #8]
    {
    }
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	0800fb30 	.word	0x0800fb30
 80023a8:	0800f914 	.word	0x0800f914

080023ac <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	7912      	ldrb	r2, [r2, #4]
 80023c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fd ff9d 	bl	8000310 <strlen>
 80023d6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 fc05 	bl	8003bf0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3304      	adds	r3, #4
 80023ea:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	18d0      	adds	r0, r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f00d f8cd 	bl	800f598 <memcpy>
      offset += length_msg;
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
      return offset;
 8002406:	68fb      	ldr	r3, [r7, #12]
    }
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	3301      	adds	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	441a      	add	r2, r3
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f001 fbf5 	bl	8003c2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	3304      	adds	r3, #4
 8002446:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	d20c      	bcs.n	8002472 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	441a      	add	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3b01      	subs	r3, #1
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	440b      	add	r3, r1
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e7ec      	b.n	800244c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	3b01      	subs	r3, #1
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	4413      	add	r3, r2
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	3b01      	subs	r3, #1
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	441a      	add	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
     return offset;
 8002496:	693b      	ldr	r3, [r7, #16]
    }
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	0800f958 	.word	0x0800f958

080024bc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	0800f96c 	.word	0x0800f96c

080024d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fc84 	bl	8001df0 <_ZN3ros3MsgC1Ev>
 80024e8:	4a0c      	ldr	r2, [pc, #48]	; (800251c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	61da      	str	r2, [r3, #28]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	0800fb18 	.word	0x0800fb18

08002520 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	4413      	add	r3, r2
 8002538:	b2ca      	uxtb	r2, r1
 800253a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	0a19      	lsrs	r1, r3, #8
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	3301      	adds	r3, #1
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4413      	add	r3, r2
 800254a:	b2ca      	uxtb	r2, r1
 800254c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0c19      	lsrs	r1, r3, #16
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	3302      	adds	r3, #2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	4413      	add	r3, r2
 800255c:	b2ca      	uxtb	r2, r1
 800255e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0e19      	lsrs	r1, r3, #24
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	3303      	adds	r3, #3
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4413      	add	r3, r2
 800256e:	b2ca      	uxtb	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	3304      	adds	r3, #4
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002578:	2300      	movs	r3, #0
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	6a3a      	ldr	r2, [r7, #32]
 8002582:	429a      	cmp	r2, r3
 8002584:	d22b      	bcs.n	80025de <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002594:	6939      	ldr	r1, [r7, #16]
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	4413      	add	r3, r2
 800259c:	b2ca      	uxtb	r2, r1
 800259e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	0a19      	lsrs	r1, r3, #8
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	3301      	adds	r3, #1
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	4413      	add	r3, r2
 80025ac:	b2ca      	uxtb	r2, r1
 80025ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	0c19      	lsrs	r1, r3, #16
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	3302      	adds	r3, #2
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	b2ca      	uxtb	r2, r1
 80025be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	0e19      	lsrs	r1, r3, #24
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	3303      	adds	r3, #3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	b2ca      	uxtb	r2, r1
 80025ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3304      	adds	r3, #4
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	3301      	adds	r3, #1
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	e7ce      	b.n	800257c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6919      	ldr	r1, [r3, #16]
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	b2ca      	uxtb	r2, r1
 80025ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	0a19      	lsrs	r1, r3, #8
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	3301      	adds	r3, #1
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	b2ca      	uxtb	r2, r1
 80025fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	0c19      	lsrs	r1, r3, #16
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	3302      	adds	r3, #2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	4413      	add	r3, r2
 800260c:	b2ca      	uxtb	r2, r1
 800260e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	0e19      	lsrs	r1, r3, #24
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	3303      	adds	r3, #3
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	4413      	add	r3, r2
 800261e:	b2ca      	uxtb	r2, r1
 8002620:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	3304      	adds	r3, #4
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	429a      	cmp	r2, r3
 8002634:	d22b      	bcs.n	800268e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	0a19      	lsrs	r1, r3, #8
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	4413      	add	r3, r2
 800265c:	b2ca      	uxtb	r2, r1
 800265e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	0c19      	lsrs	r1, r3, #16
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	3302      	adds	r3, #2
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	4413      	add	r3, r2
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0e19      	lsrs	r1, r3, #24
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	3303      	adds	r3, #3
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4413      	add	r3, r2
 800267c:	b2ca      	uxtb	r2, r1
 800267e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	3304      	adds	r3, #4
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	e7ce      	b.n	800262c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69d9      	ldr	r1, [r3, #28]
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	4413      	add	r3, r2
 8002698:	b2ca      	uxtb	r2, r1
 800269a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	0a19      	lsrs	r1, r3, #8
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	3301      	adds	r3, #1
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	b2ca      	uxtb	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	0c19      	lsrs	r1, r3, #16
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	3302      	adds	r3, #2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	b2ca      	uxtb	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	0e19      	lsrs	r1, r3, #24
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3303      	adds	r3, #3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	3304      	adds	r3, #4
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026d8:	2300      	movs	r3, #0
 80026da:	61bb      	str	r3, [r7, #24]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d228      	bcs.n	8002738 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd fe0c 	bl	8000310 <strlen>
 80026f8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	6979      	ldr	r1, [r7, #20]
 8002702:	4618      	mov	r0, r3
 8002704:	f001 fa74 	bl	8003bf0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	3304      	adds	r3, #4
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	18d0      	adds	r0, r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4619      	mov	r1, r3
 8002724:	f00c ff38 	bl	800f598 <memcpy>
      offset += length_stringsi;
 8002728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4413      	add	r3, r2
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	3301      	adds	r3, #1
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	e7d1      	b.n	80026dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800273a:	4618      	mov	r0, r3
 800273c:	3728      	adds	r7, #40	; 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002742:	b580      	push	{r7, lr}
 8002744:	b08e      	sub	sp, #56	; 0x38
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	3301      	adds	r3, #1
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	4413      	add	r3, r2
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	6a3a      	ldr	r2, [r7, #32]
 8002768:	4313      	orrs	r3, r2
 800276a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276e:	3302      	adds	r3, #2
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	4313      	orrs	r3, r2
 800277c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	3303      	adds	r3, #3
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	4413      	add	r3, r2
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	6a3a      	ldr	r2, [r7, #32]
 800278c:	4313      	orrs	r3, r2
 800278e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	3304      	adds	r3, #4
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	6a3a      	ldr	r2, [r7, #32]
 800279c:	429a      	cmp	r2, r3
 800279e:	d90a      	bls.n	80027b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f00c ff0a 	bl	800f5c4 <realloc>
 80027b0:	4602      	mov	r2, r0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80027bc:	2300      	movs	r3, #0
 80027be:	633b      	str	r3, [r7, #48]	; 0x30
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d236      	bcs.n	8002838 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d2:	6839      	ldr	r1, [r7, #0]
 80027d4:	440a      	add	r2, r1
 80027d6:	7812      	ldrb	r2, [r2, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	3301      	adds	r3, #1
 80027e2:	6839      	ldr	r1, [r7, #0]
 80027e4:	440b      	add	r3, r1
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	3302      	adds	r3, #2
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	440b      	add	r3, r1
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	3303      	adds	r3, #3
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	440b      	add	r3, r1
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800281a:	3304      	adds	r3, #4
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	3301      	adds	r3, #1
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
 8002836:	e7c3      	b.n	80027c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002844:	3301      	adds	r3, #1
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4413      	add	r3, r2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	021b      	lsls	r3, r3, #8
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	4313      	orrs	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002856:	3302      	adds	r3, #2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4413      	add	r3, r2
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	4313      	orrs	r3, r2
 8002864:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	3303      	adds	r3, #3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4413      	add	r3, r2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	061b      	lsls	r3, r3, #24
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	4313      	orrs	r3, r2
 8002876:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287a:	3304      	adds	r3, #4
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	429a      	cmp	r2, r3
 8002886:	d90a      	bls.n	800289e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f00c fe96 	bl	800f5c4 <realloc>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d236      	bcs.n	8002920 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ba:	6839      	ldr	r1, [r7, #0]
 80028bc:	440a      	add	r2, r1
 80028be:	7812      	ldrb	r2, [r2, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c8:	3301      	adds	r3, #1
 80028ca:	6839      	ldr	r1, [r7, #0]
 80028cc:	440b      	add	r3, r1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028da:	3302      	adds	r3, #2
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	440b      	add	r3, r1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ec:	3303      	adds	r3, #3
 80028ee:	6839      	ldr	r1, [r7, #0]
 80028f0:	440b      	add	r3, r1
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	3304      	adds	r3, #4
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	3214      	adds	r2, #20
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	3301      	adds	r3, #1
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291e:	e7c3      	b.n	80028a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800292a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292c:	3301      	adds	r3, #1
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	3302      	adds	r3, #2
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	4413      	add	r3, r2
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	3303      	adds	r3, #3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4413      	add	r3, r2
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002962:	3304      	adds	r3, #4
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	429a      	cmp	r2, r3
 800296e:	d90a      	bls.n	8002986 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4619      	mov	r1, r3
 800297a:	4610      	mov	r0, r2
 800297c:	f00c fe22 	bl	800f5c4 <realloc>
 8002980:	4602      	mov	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002996:	429a      	cmp	r2, r3
 8002998:	d23f      	bcs.n	8002a1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	441a      	add	r2, r3
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 f940 	bl	8003c2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ae:	3304      	adds	r3, #4
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	429a      	cmp	r2, r3
 80029c0:	d20c      	bcs.n	80029dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	441a      	add	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3b01      	subs	r3, #1
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	440b      	add	r3, r1
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	3301      	adds	r3, #1
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	e7ec      	b.n	80029b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80029dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	3b01      	subs	r3, #1
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80029ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ee:	3b01      	subs	r3, #1
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	441a      	add	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80029f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	3220      	adds	r2, #32
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	3301      	adds	r3, #1
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a18:	e7ba      	b.n	8002990 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3738      	adds	r7, #56	; 0x38
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002a2e:	4618      	mov	r0, r3
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	0800fa6c 	.word	0x0800fa6c

08002a40 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	0800f990 	.word	0x0800f990

08002a5c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
  }
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a42      	ldr	r2, [pc, #264]	; (8002b90 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d068      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a40      	ldr	r2, [pc, #256]	; (8002b94 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d061      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a3d      	ldr	r2, [pc, #244]	; (8002b98 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d05a      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3b      	ldr	r2, [pc, #236]	; (8002b9c <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d053      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a38      	ldr	r2, [pc, #224]	; (8002ba0 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04c      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a36      	ldr	r2, [pc, #216]	; (8002ba4 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d045      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d03e      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a31      	ldr	r2, [pc, #196]	; (8002bac <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d037      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2e      	ldr	r2, [pc, #184]	; (8002bb0 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d030      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d029      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a29      	ldr	r2, [pc, #164]	; (8002bb8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d022      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d01b      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d014      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00d      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d006      	beq.n	8002b5c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d109      	bne.n	8002b70 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b6e:	e008      	b.n	8002b82 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002b7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40020010 	.word	0x40020010
 8002b94:	40020028 	.word	0x40020028
 8002b98:	40020040 	.word	0x40020040
 8002b9c:	40020058 	.word	0x40020058
 8002ba0:	40020070 	.word	0x40020070
 8002ba4:	40020088 	.word	0x40020088
 8002ba8:	400200a0 	.word	0x400200a0
 8002bac:	400200b8 	.word	0x400200b8
 8002bb0:	40020410 	.word	0x40020410
 8002bb4:	40020428 	.word	0x40020428
 8002bb8:	40020440 	.word	0x40020440
 8002bbc:	40020458 	.word	0x40020458
 8002bc0:	40020470 	.word	0x40020470
 8002bc4:	40020488 	.word	0x40020488
 8002bc8:	400204a0 	.word	0x400204a0
 8002bcc:	400204b8 	.word	0x400204b8

08002bd0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <_ZN13STM32HardwareC1Ev+0x3c>)
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bec:	461a      	mov	r2, r3
 8002bee:	2300      	movs	r3, #0
 8002bf0:	6093      	str	r3, [r2, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60d3      	str	r3, [r2, #12]
    }
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	2400077c 	.word	0x2400077c

08002c10 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f804 	bl	8002c26 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f00a fc2e 	bl	800d49c <HAL_UART_Receive_DMA>
    }
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff09 	bl	8002a74 <_ZN13STM32Hardware10getRdmaIndEv>
 8002c62:	4603      	mov	r3, r0
 8002c64:	429c      	cmp	r4, r3
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002c78:	1c59      	adds	r1, r3, #1
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4413      	add	r3, r2
 8002c84:	791b      	ldrb	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002c8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002c98:	68fb      	ldr	r3, [r7, #12]
    }
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd90      	pop	{r4, r7, pc}
	...

08002ca4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d108      	bne.n	8002cca <_ZN13STM32Hardware5flushEv+0x26>
 8002cb8:	4b2c      	ldr	r3, [pc, #176]	; (8002d6c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	f083 0301 	eor.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <_ZN13STM32Hardware5flushEv+0x26>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <_ZN13STM32Hardware5flushEv+0x28>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d049      	beq.n	8002d64 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002cd0:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d039      	beq.n	8002d5e <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d20c      	bcs.n	8002d18 <_ZN13STM32Hardware5flushEv+0x74>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	e007      	b.n	8002d28 <_ZN13STM32Hardware5flushEv+0x84>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	89fa      	ldrh	r2, [r7, #14]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f00a fb19 	bl	800d378 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	89fb      	ldrh	r3, [r7, #14]
 8002d50:	4413      	add	r3, r2
 8002d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d5c:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002d5e:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <_ZN13STM32Hardware5flushEv+0xc8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
      }
    }
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	2400098c 	.word	0x2400098c

08002d70 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
      int n = length;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d86:	bfa8      	it	ge
 8002d88:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002d8c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf28      	it	cs
 8002da0:	4613      	movcs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	68b9      	ldr	r1, [r7, #8]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f00c fbed 	bl	800f598 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dd4:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d00b      	beq.n	8002df6 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	18d1      	adds	r1, r2, r3
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	f00c fbd1 	bl	800f598 <memcpy>
      }

      flush();
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f7ff ff54 	bl	8002ca4 <_ZN13STM32Hardware5flushEv>
    }
 8002dfc:	bf00      	nop
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	f002 fe48 	bl	8005aa0 <HAL_GetTick>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe ffe2 	bl	8001df0 <_ZN3ros3MsgC1Ev>
 8002e2c:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	0800fad4 	.word	0x0800fad4

08002e6c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e6c:	b480      	push	{r7}
 8002e6e:	b08b      	sub	sp, #44	; 0x2c
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e80:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e8a:	6838      	ldr	r0, [r7, #0]
 8002e8c:	4401      	add	r1, r0
 8002e8e:	b2d3      	uxtb	r3, r2
 8002e90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002e92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	0a02      	lsrs	r2, r0, #8
 8002ea0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002ea4:	0a0b      	lsrs	r3, r1, #8
 8002ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea8:	3101      	adds	r1, #1
 8002eaa:	6838      	ldr	r0, [r7, #0]
 8002eac:	4401      	add	r1, r0
 8002eae:	b2d3      	uxtb	r3, r2
 8002eb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002eb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	0c02      	lsrs	r2, r0, #16
 8002ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ec4:	0c0b      	lsrs	r3, r1, #16
 8002ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec8:	3102      	adds	r1, #2
 8002eca:	6838      	ldr	r0, [r7, #0]
 8002ecc:	4401      	add	r1, r0
 8002ece:	b2d3      	uxtb	r3, r2
 8002ed0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002ed2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	0e02      	lsrs	r2, r0, #24
 8002ee0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ee4:	0e0b      	lsrs	r3, r1, #24
 8002ee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee8:	3103      	adds	r1, #3
 8002eea:	6838      	ldr	r0, [r7, #0]
 8002eec:	4401      	add	r1, r0
 8002eee:	b2d3      	uxtb	r3, r2
 8002ef0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002ef2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	000a      	movs	r2, r1
 8002f00:	2300      	movs	r3, #0
 8002f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f04:	3104      	adds	r1, #4
 8002f06:	6838      	ldr	r0, [r7, #0]
 8002f08:	4401      	add	r1, r0
 8002f0a:	b2d3      	uxtb	r3, r2
 8002f0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002f0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	0a0a      	lsrs	r2, r1, #8
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f20:	3105      	adds	r1, #5
 8002f22:	6838      	ldr	r0, [r7, #0]
 8002f24:	4401      	add	r1, r0
 8002f26:	b2d3      	uxtb	r3, r2
 8002f28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002f2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	0c0a      	lsrs	r2, r1, #16
 8002f38:	2300      	movs	r3, #0
 8002f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f3c:	3106      	adds	r1, #6
 8002f3e:	6838      	ldr	r0, [r7, #0]
 8002f40:	4401      	add	r1, r0
 8002f42:	b2d3      	uxtb	r3, r2
 8002f44:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002f46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	0e0a      	lsrs	r2, r1, #24
 8002f54:	2300      	movs	r3, #0
 8002f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f58:	3107      	adds	r1, #7
 8002f5a:	6838      	ldr	r0, [r7, #0]
 8002f5c:	4401      	add	r1, r0
 8002f5e:	b2d3      	uxtb	r3, r2
 8002f60:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	3308      	adds	r3, #8
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002f72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f78:	6838      	ldr	r0, [r7, #0]
 8002f7a:	4401      	add	r1, r0
 8002f7c:	b2d3      	uxtb	r3, r2
 8002f7e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002f80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	0a02      	lsrs	r2, r0, #8
 8002f8e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f92:	0a0b      	lsrs	r3, r1, #8
 8002f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f96:	3101      	adds	r1, #1
 8002f98:	6838      	ldr	r0, [r7, #0]
 8002f9a:	4401      	add	r1, r0
 8002f9c:	b2d3      	uxtb	r3, r2
 8002f9e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002fa0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	0c02      	lsrs	r2, r0, #16
 8002fae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002fb2:	0c0b      	lsrs	r3, r1, #16
 8002fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb6:	3102      	adds	r1, #2
 8002fb8:	6838      	ldr	r0, [r7, #0]
 8002fba:	4401      	add	r1, r0
 8002fbc:	b2d3      	uxtb	r3, r2
 8002fbe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002fc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	0e02      	lsrs	r2, r0, #24
 8002fce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fd2:	0e0b      	lsrs	r3, r1, #24
 8002fd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd6:	3103      	adds	r1, #3
 8002fd8:	6838      	ldr	r0, [r7, #0]
 8002fda:	4401      	add	r1, r0
 8002fdc:	b2d3      	uxtb	r3, r2
 8002fde:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002fe0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	000a      	movs	r2, r1
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff2:	3104      	adds	r1, #4
 8002ff4:	6838      	ldr	r0, [r7, #0]
 8002ff6:	4401      	add	r1, r0
 8002ff8:	b2d3      	uxtb	r3, r2
 8002ffa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002ffc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	0a0a      	lsrs	r2, r1, #8
 800300a:	2300      	movs	r3, #0
 800300c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800300e:	3105      	adds	r1, #5
 8003010:	6838      	ldr	r0, [r7, #0]
 8003012:	4401      	add	r1, r0
 8003014:	b2d3      	uxtb	r3, r2
 8003016:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003018:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	0c0a      	lsrs	r2, r1, #16
 8003026:	2300      	movs	r3, #0
 8003028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800302a:	3106      	adds	r1, #6
 800302c:	6838      	ldr	r0, [r7, #0]
 800302e:	4401      	add	r1, r0
 8003030:	b2d3      	uxtb	r3, r2
 8003032:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003034:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	0e0a      	lsrs	r2, r1, #24
 8003042:	2300      	movs	r3, #0
 8003044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003046:	3107      	adds	r1, #7
 8003048:	6838      	ldr	r0, [r7, #0]
 800304a:	4401      	add	r1, r0
 800304c:	b2d3      	uxtb	r3, r2
 800304e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	3308      	adds	r3, #8
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800305c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003060:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003066:	6838      	ldr	r0, [r7, #0]
 8003068:	4401      	add	r1, r0
 800306a:	b2d3      	uxtb	r3, r2
 800306c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800306e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	0a02      	lsrs	r2, r0, #8
 800307c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003080:	0a0b      	lsrs	r3, r1, #8
 8003082:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003084:	3101      	adds	r1, #1
 8003086:	6838      	ldr	r0, [r7, #0]
 8003088:	4401      	add	r1, r0
 800308a:	b2d3      	uxtb	r3, r2
 800308c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800308e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	0c02      	lsrs	r2, r0, #16
 800309c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030a0:	0c0b      	lsrs	r3, r1, #16
 80030a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a4:	3102      	adds	r1, #2
 80030a6:	6838      	ldr	r0, [r7, #0]
 80030a8:	4401      	add	r1, r0
 80030aa:	b2d3      	uxtb	r3, r2
 80030ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80030ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	0e02      	lsrs	r2, r0, #24
 80030bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030c0:	0e0b      	lsrs	r3, r1, #24
 80030c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030c4:	3103      	adds	r1, #3
 80030c6:	6838      	ldr	r0, [r7, #0]
 80030c8:	4401      	add	r1, r0
 80030ca:	b2d3      	uxtb	r3, r2
 80030cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80030ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	000a      	movs	r2, r1
 80030dc:	2300      	movs	r3, #0
 80030de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e0:	3104      	adds	r1, #4
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	4401      	add	r1, r0
 80030e6:	b2d3      	uxtb	r3, r2
 80030e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80030ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	0a0a      	lsrs	r2, r1, #8
 80030f8:	2300      	movs	r3, #0
 80030fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030fc:	3105      	adds	r1, #5
 80030fe:	6838      	ldr	r0, [r7, #0]
 8003100:	4401      	add	r1, r0
 8003102:	b2d3      	uxtb	r3, r2
 8003104:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	0c0a      	lsrs	r2, r1, #16
 8003114:	2300      	movs	r3, #0
 8003116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003118:	3106      	adds	r1, #6
 800311a:	6838      	ldr	r0, [r7, #0]
 800311c:	4401      	add	r1, r0
 800311e:	b2d3      	uxtb	r3, r2
 8003120:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	0e0a      	lsrs	r2, r1, #24
 8003130:	2300      	movs	r3, #0
 8003132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003134:	3107      	adds	r1, #7
 8003136:	6838      	ldr	r0, [r7, #0]
 8003138:	4401      	add	r1, r0
 800313a:	b2d3      	uxtb	r3, r2
 800313c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	3308      	adds	r3, #8
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003146:	4618      	mov	r0, r3
 8003148:	372c      	adds	r7, #44	; 0x2c
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003152:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003156:	b0eb      	sub	sp, #428	; 0x1ac
 8003158:	af00      	add	r7, sp, #0
 800315a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800315e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003174:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003178:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800317c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003180:	4413      	add	r3, r2
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2200      	movs	r2, #0
 8003188:	461c      	mov	r4, r3
 800318a:	4615      	mov	r5, r2
 800318c:	ea40 0804 	orr.w	r8, r0, r4
 8003190:	ea41 0905 	orr.w	r9, r1, r5
 8003194:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003198:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800319c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031a6:	4413      	add	r3, r2
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2200      	movs	r2, #0
 80031ae:	469a      	mov	sl, r3
 80031b0:	4693      	mov	fp, r2
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80031be:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80031c2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80031c6:	ea40 0402 	orr.w	r4, r0, r2
 80031ca:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80031ce:	430b      	orrs	r3, r1
 80031d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80031d4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80031d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031e4:	1c9a      	adds	r2, r3, #2
 80031e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031ea:	4413      	add	r3, r2
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80031f6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003206:	464c      	mov	r4, r9
 8003208:	0423      	lsls	r3, r4, #16
 800320a:	4644      	mov	r4, r8
 800320c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003210:	4644      	mov	r4, r8
 8003212:	0422      	lsls	r2, r4, #16
 8003214:	ea40 0402 	orr.w	r4, r0, r2
 8003218:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800321c:	430b      	orrs	r3, r1
 800321e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003222:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003226:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800322a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800322e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003232:	1cda      	adds	r2, r3, #3
 8003234:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003238:	4413      	add	r3, r2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003244:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003248:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800324c:	4623      	mov	r3, r4
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003254:	4623      	mov	r3, r4
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800325c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003260:	4623      	mov	r3, r4
 8003262:	4303      	orrs	r3, r0
 8003264:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003268:	462b      	mov	r3, r5
 800326a:	430b      	orrs	r3, r1
 800326c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003270:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003274:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003278:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800327c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003280:	1d1a      	adds	r2, r3, #4
 8003282:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2200      	movs	r2, #0
 800328e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003292:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80032a2:	0023      	movs	r3, r4
 80032a4:	2200      	movs	r2, #0
 80032a6:	ea40 0402 	orr.w	r4, r0, r2
 80032aa:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80032ae:	430b      	orrs	r3, r1
 80032b0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80032b4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80032b8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80032bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80032c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032c4:	1d5a      	adds	r2, r3, #5
 80032c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80032d6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80032e6:	0223      	lsls	r3, r4, #8
 80032e8:	2200      	movs	r2, #0
 80032ea:	ea40 0402 	orr.w	r4, r0, r2
 80032ee:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80032f2:	430b      	orrs	r3, r1
 80032f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80032f8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80032fc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003300:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003304:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003308:	1d9a      	adds	r2, r3, #6
 800330a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2200      	movs	r2, #0
 8003316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800331a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800332a:	0423      	lsls	r3, r4, #16
 800332c:	2200      	movs	r2, #0
 800332e:	ea40 0402 	orr.w	r4, r0, r2
 8003332:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003336:	430b      	orrs	r3, r1
 8003338:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800333c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003340:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003344:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003348:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800334c:	1dda      	adds	r2, r3, #7
 800334e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003352:	4413      	add	r3, r2
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2200      	movs	r2, #0
 800335a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800335e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800336e:	0623      	lsls	r3, r4, #24
 8003370:	2200      	movs	r2, #0
 8003372:	ea40 0402 	orr.w	r4, r0, r2
 8003376:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800337a:	430b      	orrs	r3, r1
 800337c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003380:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003384:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003388:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800338c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003390:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003394:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003398:	3308      	adds	r3, #8
 800339a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80033ae:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80033b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033b6:	4413      	add	r3, r2
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80033c2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80033c6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80033ca:	4623      	mov	r3, r4
 80033cc:	4303      	orrs	r3, r0
 80033ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033d2:	462b      	mov	r3, r5
 80033d4:	430b      	orrs	r3, r1
 80033d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033da:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80033de:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033e2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80033e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033f0:	4413      	add	r3, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2200      	movs	r2, #0
 80033f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033fc:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800340c:	464c      	mov	r4, r9
 800340e:	0223      	lsls	r3, r4, #8
 8003410:	4644      	mov	r4, r8
 8003412:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003416:	4644      	mov	r4, r8
 8003418:	0222      	lsls	r2, r4, #8
 800341a:	ea40 0402 	orr.w	r4, r0, r2
 800341e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003422:	430b      	orrs	r3, r1
 8003424:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003428:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800342c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003430:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003434:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003438:	1c9a      	adds	r2, r3, #2
 800343a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800343e:	4413      	add	r3, r2
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2200      	movs	r2, #0
 8003446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800344a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800345a:	464c      	mov	r4, r9
 800345c:	0423      	lsls	r3, r4, #16
 800345e:	4644      	mov	r4, r8
 8003460:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003464:	4644      	mov	r4, r8
 8003466:	0422      	lsls	r2, r4, #16
 8003468:	ea40 0402 	orr.w	r4, r0, r2
 800346c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003470:	430b      	orrs	r3, r1
 8003472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003476:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800347a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800347e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003482:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003486:	1cda      	adds	r2, r3, #3
 8003488:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800348c:	4413      	add	r3, r2
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2200      	movs	r2, #0
 8003494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003498:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800349c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80034a0:	4623      	mov	r3, r4
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80034a8:	4623      	mov	r3, r4
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80034b4:	4623      	mov	r3, r4
 80034b6:	4303      	orrs	r3, r0
 80034b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034bc:	462b      	mov	r3, r5
 80034be:	430b      	orrs	r3, r1
 80034c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034c4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80034c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80034cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80034d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034d4:	1d1a      	adds	r2, r3, #4
 80034d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2200      	movs	r2, #0
 80034e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034e6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80034f6:	0023      	movs	r3, r4
 80034f8:	2200      	movs	r2, #0
 80034fa:	ea40 0402 	orr.w	r4, r0, r2
 80034fe:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003502:	430b      	orrs	r3, r1
 8003504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003508:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800350c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003510:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003514:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003518:	1d5a      	adds	r2, r3, #5
 800351a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800351e:	4413      	add	r3, r2
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800352a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800353a:	0223      	lsls	r3, r4, #8
 800353c:	2200      	movs	r2, #0
 800353e:	ea40 0402 	orr.w	r4, r0, r2
 8003542:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003546:	430b      	orrs	r3, r1
 8003548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800354c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003550:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003554:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003558:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800355c:	1d9a      	adds	r2, r3, #6
 800355e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003562:	4413      	add	r3, r2
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2200      	movs	r2, #0
 800356a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800356e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800357e:	0423      	lsls	r3, r4, #16
 8003580:	2200      	movs	r2, #0
 8003582:	ea40 0402 	orr.w	r4, r0, r2
 8003586:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800358a:	430b      	orrs	r3, r1
 800358c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003590:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003594:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003598:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800359c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035a0:	1dda      	adds	r2, r3, #7
 80035a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035a6:	4413      	add	r3, r2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80035c2:	0623      	lsls	r3, r4, #24
 80035c4:	2200      	movs	r2, #0
 80035c6:	ea40 0402 	orr.w	r4, r0, r2
 80035ca:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80035ce:	430b      	orrs	r3, r1
 80035d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035d4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80035d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80035dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80035e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80035e4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80035e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035ec:	3308      	adds	r3, #8
 80035ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035fe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003602:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003606:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003616:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800361a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800361e:	4623      	mov	r3, r4
 8003620:	4303      	orrs	r3, r0
 8003622:	67bb      	str	r3, [r7, #120]	; 0x78
 8003624:	462b      	mov	r3, r5
 8003626:	430b      	orrs	r3, r1
 8003628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800362a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800362e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003632:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003636:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003640:	4413      	add	r3, r2
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2200      	movs	r2, #0
 8003648:	673b      	str	r3, [r7, #112]	; 0x70
 800364a:	677a      	str	r2, [r7, #116]	; 0x74
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003658:	464c      	mov	r4, r9
 800365a:	0223      	lsls	r3, r4, #8
 800365c:	4644      	mov	r4, r8
 800365e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003662:	4644      	mov	r4, r8
 8003664:	0222      	lsls	r2, r4, #8
 8003666:	ea40 0402 	orr.w	r4, r0, r2
 800366a:	66bc      	str	r4, [r7, #104]	; 0x68
 800366c:	430b      	orrs	r3, r1
 800366e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003670:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003674:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003678:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800367c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003680:	1c9a      	adds	r2, r3, #2
 8003682:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2200      	movs	r2, #0
 800368e:	663b      	str	r3, [r7, #96]	; 0x60
 8003690:	667a      	str	r2, [r7, #100]	; 0x64
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800369e:	464c      	mov	r4, r9
 80036a0:	0423      	lsls	r3, r4, #16
 80036a2:	4644      	mov	r4, r8
 80036a4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80036a8:	4644      	mov	r4, r8
 80036aa:	0422      	lsls	r2, r4, #16
 80036ac:	ea40 0402 	orr.w	r4, r0, r2
 80036b0:	65bc      	str	r4, [r7, #88]	; 0x58
 80036b2:	430b      	orrs	r3, r1
 80036b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036b6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80036ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80036c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036c6:	1cda      	adds	r2, r3, #3
 80036c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2200      	movs	r2, #0
 80036d4:	653b      	str	r3, [r7, #80]	; 0x50
 80036d6:	657a      	str	r2, [r7, #84]	; 0x54
 80036d8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80036dc:	4623      	mov	r3, r4
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e2:	4623      	mov	r3, r4
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80036ec:	4623      	mov	r3, r4
 80036ee:	4303      	orrs	r3, r0
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
 80036f2:	462b      	mov	r3, r5
 80036f4:	430b      	orrs	r3, r1
 80036f6:	647b      	str	r3, [r7, #68]	; 0x44
 80036f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80036fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003700:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003704:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003708:	1d1a      	adds	r2, r3, #4
 800370a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2200      	movs	r2, #0
 8003716:	63bb      	str	r3, [r7, #56]	; 0x38
 8003718:	63fa      	str	r2, [r7, #60]	; 0x3c
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003724:	0023      	movs	r3, r4
 8003726:	2200      	movs	r2, #0
 8003728:	ea40 0402 	orr.w	r4, r0, r2
 800372c:	633c      	str	r4, [r7, #48]	; 0x30
 800372e:	430b      	orrs	r3, r1
 8003730:	637b      	str	r3, [r7, #52]	; 0x34
 8003732:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003736:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800373a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800373e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003742:	1d5a      	adds	r2, r3, #5
 8003744:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003748:	4413      	add	r3, r2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2200      	movs	r2, #0
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
 8003752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800375e:	0223      	lsls	r3, r4, #8
 8003760:	2200      	movs	r2, #0
 8003762:	ea40 0402 	orr.w	r4, r0, r2
 8003766:	623c      	str	r4, [r7, #32]
 8003768:	430b      	orrs	r3, r1
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
 800376c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003770:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003774:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003778:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800377c:	3306      	adds	r3, #6
 800377e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003782:	4413      	add	r3, r2
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2200      	movs	r2, #0
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	61fa      	str	r2, [r7, #28]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	69bc      	ldr	r4, [r7, #24]
 8003798:	0423      	lsls	r3, r4, #16
 800379a:	2200      	movs	r2, #0
 800379c:	ea40 0402 	orr.w	r4, r0, r2
 80037a0:	613c      	str	r4, [r7, #16]
 80037a2:	430b      	orrs	r3, r1
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80037aa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80037ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80037b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037b6:	3307      	adds	r3, #7
 80037b8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80037bc:	4413      	add	r3, r2
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2200      	movs	r2, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	60fa      	str	r2, [r7, #12]
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	68bc      	ldr	r4, [r7, #8]
 80037d2:	0623      	lsls	r3, r4, #24
 80037d4:	2200      	movs	r2, #0
 80037d6:	ea40 0402 	orr.w	r4, r0, r2
 80037da:	603c      	str	r4, [r7, #0]
 80037dc:	430b      	orrs	r3, r1
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037e4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80037e8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80037ec:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80037f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80037f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037f8:	3308      	adds	r3, #8
 80037fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80037fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003802:	4618      	mov	r0, r3
 8003804:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003808:	46bd      	mov	sp, r7
 800380a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800380e:	4770      	bx	lr

08003810 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	0800f9b4 	.word	0x0800f9b4

0800382c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	0800f9cc 	.word	0x0800f9cc

08003848 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe facc 	bl	8001df0 <_ZN3ros3MsgC1Ev>
 8003858:	4a08      	ldr	r2, [pc, #32]	; (800387c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3308      	adds	r3, #8
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fada 	bl	8002e1c <_ZN13geometry_msgs7Vector3C1Ev>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3328      	adds	r3, #40	; 0x28
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fad5 	bl	8002e1c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	0800fabc 	.word	0x0800fabc

08003880 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f103 0008 	add.w	r0, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4413      	add	r3, r2
 800389a:	4619      	mov	r1, r3
 800389c:	f7ff fae6 	bl	8002e6c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	4413      	add	r3, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	f7ff fad9 	bl	8002e6c <_ZNK13geometry_msgs7Vector39serializeEPh>
 80038ba:	4602      	mov	r2, r0
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
      return offset;
 80038c2:	68fb      	ldr	r3, [r7, #12]
    }
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f103 0008 	add.w	r0, r3, #8
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	4413      	add	r3, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f7ff fc33 	bl	8003152 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4413      	add	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	4619      	mov	r1, r3
 8003902:	f7ff fc26 	bl	8003152 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003906:	4602      	mov	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
     return offset;
 800390e:	68fb      	ldr	r3, [r7, #12]
    }
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	0800f9f0 	.word	0x0800f9f0

08003934 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	0800fa04 	.word	0x0800fa04

08003950 <_ZN6PUSHERC1Ev>:
#define PUSHER_D_IN2_PIN GPIO_PIN_15

#define PUSHER_SPEED 33.6


class PUSHER{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9c1 2300 	strd	r2, r3, [r1]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <main_function>:
extern TIM_HandleTypeDef htim23;

int aaaaa = 0;

void setup(void);
void main_function(){
 8003998:	b580      	push	{r7, lr}
 800399a:	b090      	sub	sp, #64	; 0x40
 800399c:	af00      	add	r7, sp, #0

	PUSHER pusher_A;
 800399e:	f107 0320 	add.w	r3, r7, #32
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ffd4 	bl	8003950 <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 80039a8:	463b      	mov	r3, r7
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ffd0 	bl	8003950 <_ZN6PUSHERC1Ev>
//	PUSHER pusher_C;
//	PUSHER pusher_D;
//	SCRIPT script_a;
	setup();
 80039b0:	f000 f904 	bl	8003bbc <_Z5setupv>
	stm_setup();
 80039b4:	f000 f82e 	bl	8003a14 <stm_setup>
	script_a.scriptrun = 0;
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <main_function+0x6c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]

	while(1){
		Vy = 10;
 80039be:	4912      	ldr	r1, [pc, #72]	; (8003a08 <main_function+0x70>)
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <main_function+0x74>)
 80039c6:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_Delay(10000);
 80039ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80039ce:	f002 f873 	bl	8005ab8 <HAL_Delay>
		Vy = 0.0;
 80039d2:	490d      	ldr	r1, [pc, #52]	; (8003a08 <main_function+0x70>)
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_Delay(100000);
 80039e0:	480b      	ldr	r0, [pc, #44]	; (8003a10 <main_function+0x78>)
 80039e2:	f002 f869 	bl	8005ab8 <HAL_Delay>
		pusher_A.distence();
 80039e6:	f107 0320 	add.w	r3, r7, #32
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fff4 	bl	80049d8 <_ZN6PUSHER8distenceEv>
		pusher_B.distence();
 80039f0:	463b      	mov	r3, r7
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fff0 	bl	80049d8 <_ZN6PUSHER8distenceEv>
		script();
 80039f8:	f001 f83e 	bl	8004a78 <_Z6scriptv>
		loop();
 80039fc:	f000 f8ee 	bl	8003bdc <loop>
		Vy = 10;
 8003a00:	e7dd      	b.n	80039be <main_function+0x26>
 8003a02:	bf00      	nop
 8003a04:	24001f70 	.word	0x24001f70
 8003a08:	240002d0 	.word	0x240002d0
 8003a0c:	40240000 	.word	0x40240000
 8003a10:	000186a0 	.word	0x000186a0

08003a14 <stm_setup>:

	}
}
void stm_setup(void){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 8003a18:	4806      	ldr	r0, [pc, #24]	; (8003a34 <stm_setup+0x20>)
 8003a1a:	f007 ff4f 	bl	800b8bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8003a1e:	4806      	ldr	r0, [pc, #24]	; (8003a38 <stm_setup+0x24>)
 8003a20:	f007 ff4c 	bl	800b8bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);//main Timer
 8003a24:	4805      	ldr	r0, [pc, #20]	; (8003a3c <stm_setup+0x28>)
 8003a26:	f007 ff49 	bl	800b8bc <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 8003a2a:	f7fd fb11 	bl	8001050 <_Z13DC_motor_initv>
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	240004d0 	.word	0x240004d0
 8003a38:	2400064c 	.word	0x2400064c
 8003a3c:	24000730 	.word	0x24000730

08003a40 <_Z8callbackRKN13geometry_msgs5TwistE>:


void callback(const geometry_msgs::Twist &msg)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
	aaaaa ++;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <_Z8callbackRKN13geometry_msgs5TwistE+0x44>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a0d      	ldr	r2, [pc, #52]	; (8003a84 <_Z8callbackRKN13geometry_msgs5TwistE+0x44>)
 8003a50:	6013      	str	r3, [r2, #0]
   Vx = msg.linear.x;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a58:	490b      	ldr	r1, [pc, #44]	; (8003a88 <_Z8callbackRKN13geometry_msgs5TwistE+0x48>)
 8003a5a:	e9c1 2300 	strd	r2, r3, [r1]
   Vy = msg.linear.y;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a64:	4909      	ldr	r1, [pc, #36]	; (8003a8c <_Z8callbackRKN13geometry_msgs5TwistE+0x4c>)
 8003a66:	e9c1 2300 	strd	r2, r3, [r1]
   W = msg.angular.z;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003a70:	4907      	ldr	r1, [pc, #28]	; (8003a90 <_Z8callbackRKN13geometry_msgs5TwistE+0x50>)
 8003a72:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	24000990 	.word	0x24000990
 8003a88:	240002c8 	.word	0x240002c8
 8003a8c:	240002d0 	.word	0x240002d0
 8003a90:	240002d8 	.word	0x240002d8

08003a94 <_Z13Error_Handlerv>:
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);


/* UART Communication */
void Error_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a98:	b672      	cpsid	i
}
 8003a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <_Z13Error_Handlerv+0x8>
	...

08003aa0 <_ZL19MX_USART1_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART1_UART_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003aa4:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aa6:	4a2d      	ldr	r2, [pc, #180]	; (8003b5c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ab2:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ac6:	220c      	movs	r2, #12
 8003ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aca:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ae8:	481b      	ldr	r0, [pc, #108]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aea:	f009 fb23 	bl	800d134 <HAL_UART_Init>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003afe:	f7ff ffc9 	bl	8003a94 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b02:	2100      	movs	r1, #0
 8003b04:	4814      	ldr	r0, [pc, #80]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b06:	f00b fc37 	bl	800f378 <HAL_UARTEx_SetTxFifoThreshold>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003b1a:	f7ff ffbb 	bl	8003a94 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b1e:	2100      	movs	r1, #0
 8003b20:	480d      	ldr	r0, [pc, #52]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b22:	f00b fc67 	bl	800f3f4 <HAL_UARTEx_SetRxFifoThreshold>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003b36:	f7ff ffad 	bl	8003a94 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b3a:	4807      	ldr	r0, [pc, #28]	; (8003b58 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003b3c:	f00b fbe3 	bl	800f306 <HAL_UARTEx_DisableFifoMode>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bf14      	ite	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	2300      	moveq	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003b50:	f7ff ffa0 	bl	8003a94 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b54:	bf00      	nop
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2400077c 	.word	0x2400077c
 8003b5c:	40011000 	.word	0x40011000

08003b60 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <HAL_UART_ErrorCallback+0x30>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10b      	bne.n	8003b88 <HAL_UART_ErrorCallback+0x28>
    // set velocity 0 before uart reinitialization
		HAL_UART_DeInit(&huart1);
 8003b70:	4807      	ldr	r0, [pc, #28]	; (8003b90 <HAL_UART_ErrorCallback+0x30>)
 8003b72:	f009 fb2f 	bl	800d1d4 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8003b76:	f7ff ff93 	bl	8003aa0 <_ZL19MX_USART1_UART_Initv>
		nh.getHardware()->init();
 8003b7a:	4806      	ldr	r0, [pc, #24]	; (8003b94 <HAL_UART_ErrorCallback+0x34>)
 8003b7c:	f000 f95a 	bl	8003e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f844 	bl	8002c10 <_ZN13STM32Hardware4initEv>
    }
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	2400077c 	.word	0x2400077c
 8003b94:	24000994 	.word	0x24000994

08003b98 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003ba0:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <HAL_UART_TxCpltCallback+0x20>)
 8003ba2:	f000 f947 	bl	8003e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff f87b 	bl	8002ca4 <_ZN13STM32Hardware5flushEv>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	24000994 	.word	0x24000994

08003bbc <_Z5setupv>:

void setup(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
    nh.initNode();
 8003bc0:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <_Z5setupv+0x18>)
 8003bc2:	f000 f943 	bl	8003e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8003bc6:	4904      	ldr	r1, [pc, #16]	; (8003bd8 <_Z5setupv+0x1c>)
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <_Z5setupv+0x18>)
 8003bca:	f000 f968 	bl	8003e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	24000994 	.word	0x24000994
 8003bd8:	24001ed0 	.word	0x24001ed0

08003bdc <loop>:
void loop(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
//	aaaaa++;
    nh.spinOnce();
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <loop+0x10>)
 8003be2:	f000 f987 	bl	8003ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	24000994 	.word	0x24000994

08003bf0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d80d      	bhi.n	8003c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	fa22 f103 	lsr.w	r1, r2, r3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	b2ca      	uxtb	r2, r1
 8003c16:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e7ee      	b.n	8003bfe <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d811      	bhi.n	8003c6a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6839      	ldr	r1, [r7, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	440a      	add	r2, r1
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	4611      	mov	r1, r2
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	00d2      	lsls	r2, r2, #3
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3301      	adds	r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e7ea      	b.n	8003c40 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	0800fb04 	.word	0x0800fb04

08003c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ffe8 	bl	8003c78 <_ZN3ros15NodeHandleBase_C1Ev>
 8003ca8:	4a47      	ldr	r2, [pc, #284]	; (8003dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe ff8c 	bl	8002bd0 <_ZN13STM32HardwareC1Ev>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	f241 5314 	movw	r3, #5396	; 0x1514
 8003cca:	4413      	add	r3, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fc03 	bl	80024d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b18      	cmp	r3, #24
 8003cda:	d80b      	bhi.n	8003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	2200      	movs	r2, #0
 8003cea:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	e7f0      	b.n	8003cd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b18      	cmp	r3, #24
 8003cfc:	d80a      	bhi.n	8003d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003d06:	2100      	movs	r1, #0
 8003d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e7f1      	b.n	8003cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1e:	d20b      	bcs.n	8003d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	441a      	add	r2, r3
 8003d26:	f241 0324 	movw	r3, #4132	; 0x1024
 8003d2a:	4413      	add	r3, r2
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e7ef      	b.n	8003d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d42:	d20b      	bcs.n	8003d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	441a      	add	r2, r3
 8003d4a:	f241 2324 	movw	r3, #4644	; 0x1224
 8003d4e:	4413      	add	r3, r2
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	3301      	adds	r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	e7ef      	b.n	8003d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d62:	461a      	mov	r2, r3
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d70:	461a      	mov	r2, r3
 8003d72:	2300      	movs	r3, #0
 8003d74:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da8:	461a      	mov	r2, r3
 8003daa:	2300      	movs	r3, #0
 8003dac:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db6:	461a      	mov	r2, r3
 8003db8:	2300      	movs	r3, #0
 8003dba:	6213      	str	r3, [r2, #32]
  }
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	0800faa8 	.word	0x0800faa8

08003dcc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	0800faec 	.word	0x0800faec

08003dec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ffe5 	bl	8003dcc <_ZN3ros11Subscriber_C1Ev>
 8003e02:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3310      	adds	r3, #16
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fd1b 	bl	8003848 <_ZN13geometry_msgs5TwistC1Ev>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	659a      	str	r2, [r3, #88]	; 0x58
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
  };
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	0800fa90 	.word	0x0800fa90

08003e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
  }
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fed9 	bl	8002c10 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e64:	461a      	mov	r2, r3
 8003e66:	2300      	movs	r3, #0
 8003e68:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e72:	461a      	mov	r2, r3
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e80:	461a      	mov	r2, r3
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b18      	cmp	r3, #24
 8003eb0:	dc19      	bgt.n	8003ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
        return true;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e004      	b.n	8003ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e7e2      	b.n	8003eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003ee6:	2300      	movs	r3, #0
  }
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe ff7f 	bl	8002e04 <_ZN13STM32Hardware4timeEv>
 8003f06:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d905      	bls.n	8003f2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f30:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f3e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d906      	bls.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d015      	beq.n	8003f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe ff4c 	bl	8002e04 <_ZN13STM32Hardware4timeEv>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad2      	subs	r2, r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	bf8c      	ite	hi
 8003f7e:	2301      	movhi	r3, #1
 8003f80:	2300      	movls	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8003f88:	f06f 0301 	mvn.w	r3, #1
 8003f8c:	e226      	b.n	80043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fe58 	bl	8002c48 <_ZN13STM32Hardware4readEv>
 8003f98:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f2c0 81ff 	blt.w	80043a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa8:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4413      	add	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fb6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003fc4:	2b07      	cmp	r3, #7
 8003fc6:	d12d      	bne.n	8004024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8003fda:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	b2d1      	uxtb	r1, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	f241 0324 	movw	r3, #4132	; 0x1024
 8003fea:	4413      	add	r3, r2
 8003fec:	460a      	mov	r2, r1
 8003fee:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004002:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1a0      	bne.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	461a      	mov	r2, r3
 800401c:	2308      	movs	r3, #8
 800401e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004022:	e798      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800402e:	2b00      	cmp	r3, #0
 8004030:	d130      	bne.n	8004094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2bff      	cmp	r3, #255	; 0xff
 8004036:	d112      	bne.n	800405e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004042:	3301      	adds	r3, #1
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800404a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3314      	adds	r3, #20
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004058:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 800405c:	e77b      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fece 	bl	8002e04 <_ZN13STM32Hardware4timeEv>
 8004068:	4602      	mov	r2, r0
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	bf8c      	ite	hi
 8004076:	2301      	movhi	r3, #1
 8004078:	2300      	movls	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	f43f af6a 	beq.w	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 800408e:	f06f 0301 	mvn.w	r3, #1
 8004092:	e1a3      	b.n	80043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d121      	bne.n	80040e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2bfe      	cmp	r3, #254	; 0xfe
 80040a6:	d10b      	bne.n	80040c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ae:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80040b2:	3301      	adds	r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040ba:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80040be:	e74a      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c6:	461a      	mov	r2, r3
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d4:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f af3c 	bne.w	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f980 	bl	80043e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80040e4:	e737      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ec:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d120      	bne.n	8004136 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fa:	461a      	mov	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004108:	461a      	mov	r2, r3
 800410a:	2300      	movs	r3, #0
 800410c:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004116:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800411a:	3301      	adds	r3, #1
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004122:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004134:	e70f      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004140:	2b03      	cmp	r3, #3
 8004142:	d118      	bne.n	8004176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	4413      	add	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800415a:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004164:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004168:	3301      	adds	r3, #1
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004170:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004174:	e6ef      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004180:	2b04      	cmp	r3, #4
 8004182:	d11f      	bne.n	80041c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800418e:	425a      	negs	r2, r3
 8004190:	b2db      	uxtb	r3, r3
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	bf58      	it	pl
 8004196:	4253      	negpl	r3, r2
 8004198:	2bff      	cmp	r3, #255	; 0xff
 800419a:	d10b      	bne.n	80041b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80041a6:	3301      	adds	r3, #1
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041ae:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80041b2:	e6d0      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80041c2:	e6c8      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d119      	bne.n	8004206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80041ea:	3301      	adds	r3, #1
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041f2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004204:	e6a7      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004210:	2b06      	cmp	r3, #6
 8004212:	d123      	bne.n	800425c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	4413      	add	r3, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800422a:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004234:	461a      	mov	r2, r3
 8004236:	2307      	movs	r3, #7
 8004238:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004242:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004246:	2b00      	cmp	r3, #0
 8004248:	f47f ae85 	bne.w	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004252:	461a      	mov	r2, r3
 8004254:	2308      	movs	r3, #8
 8004256:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800425a:	e67c      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004262:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004266:	2b08      	cmp	r3, #8
 8004268:	f47f ae75 	bne.w	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004272:	461a      	mov	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004280:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004284:	425a      	negs	r2, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	bf58      	it	pl
 800428c:	4253      	negpl	r3, r2
 800428e:	2bff      	cmp	r3, #255	; 0xff
 8004290:	f47f ae61 	bne.w	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f89e 	bl	80043e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f8ba 	bl	8004422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b4:	461a      	mov	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	e085      	b.n	80043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80042da:	2b0a      	cmp	r3, #10
 80042dc:	d108      	bne.n	80042f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	f241 0324 	movw	r3, #4132	; 0x1024
 80042e4:	4413      	add	r3, r2
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f97b 	bl	80045e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80042ee:	e632      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80042fa:	2b06      	cmp	r3, #6
 80042fc:	d112      	bne.n	8004324 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	f241 5314 	movw	r3, #5396	; 0x1514
 8004304:	4413      	add	r3, r2
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	f241 0224 	movw	r2, #4132	; 0x1024
 800430c:	440a      	add	r2, r1
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fa16 	bl	8002742 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004322:	e618      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800432e:	2b0b      	cmp	r3, #11
 8004330:	d106      	bne.n	8004340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800433e:	e60a      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004346:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800434a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f43f adfc 	beq.w	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004364:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004368:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004372:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004380:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800438a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	f241 0324 	movw	r3, #4132	; 0x1024
 8004398:	440b      	add	r3, r1
 800439a:	4619      	mov	r1, r3
 800439c:	4790      	blx	r2
    while (true)
 800439e:	e5da      	b.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80043a0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d014      	beq.n	80043da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d909      	bls.n	80043da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f80c 	bl	80043e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d2:	461a      	mov	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 80043da:	2300      	movs	r3, #0
  }
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fd fd0d 	bl	8001e10 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f107 020c 	add.w	r2, r7, #12
 8004400:	210a      	movs	r1, #10
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
    rt_time = hardware_.time();
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3304      	adds	r3, #4
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fcfa 	bl	8002e04 <_ZN13STM32Hardware4timeEv>
 8004410:	4602      	mov	r2, r0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	615a      	str	r2, [r3, #20]
  }
 800441a:	bf00      	nop
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004422:	b590      	push	{r4, r7, lr}
 8004424:	b08b      	sub	sp, #44	; 0x2c
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800442a:	f107 030c 	add.w	r3, r7, #12
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd fdde 	bl	8001ff0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004434:	2300      	movs	r3, #0
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	2b18      	cmp	r3, #24
 800443c:	dc63      	bgt.n	8004506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d056      	beq.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	b29b      	uxth	r3, r3
 8004462:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4608      	mov	r0, r1
 800449e:	4798      	blx	r3
 80044a0:	4603      	mov	r3, r0
 80044a2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4608      	mov	r0, r1
 80044cc:	4798      	blx	r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80044d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681c      	ldr	r4, [r3, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe fab5 	bl	8002a5c <_ZN3ros9Publisher15getEndpointTypeEv>
 80044f2:	4601      	mov	r1, r0
 80044f4:	f107 030c 	add.w	r3, r7, #12
 80044f8:	461a      	mov	r2, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	3301      	adds	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
 8004504:	e798      	b.n	8004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004506:	2300      	movs	r3, #0
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	2b18      	cmp	r3, #24
 800450e:	dc5f      	bgt.n	80045d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d053      	beq.n	80045c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004524:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	b29b      	uxth	r3, r3
 8004530:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800453a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800454a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004552:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4608      	mov	r0, r1
 8004562:	4798      	blx	r3
 8004564:	4603      	mov	r3, r0
 8004566:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800457c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4608      	mov	r0, r1
 8004588:	4798      	blx	r3
 800458a:	4603      	mov	r3, r0
 800458c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800458e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004592:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681c      	ldr	r4, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80045a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045aa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80045ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3304      	adds	r3, #4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4608      	mov	r0, r1
 80045ba:	4798      	blx	r3
 80045bc:	4601      	mov	r1, r0
 80045be:	f107 030c 	add.w	r3, r7, #12
 80045c2:	461a      	mov	r2, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	3301      	adds	r3, #1
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	e79c      	b.n	800450a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 80045dc:	bf00      	nop
 80045de:	372c      	adds	r7, #44	; 0x2c
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd90      	pop	{r4, r7, pc}

080045e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fc0c 	bl	8001e10 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fc01 	bl	8002e04 <_ZN13STM32Hardware4timeEv>
 8004602:	4602      	mov	r2, r0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004610:	f107 0308 	add.w	r3, r7, #8
 8004614:	6839      	ldr	r1, [r7, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fd fc6a 	bl	8001ef0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4915      	ldr	r1, [pc, #84]	; (8004678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004622:	fba1 1303 	umull	r1, r3, r1, r3
 8004626:	099b      	lsrs	r3, r3, #6
 8004628:	4413      	add	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800462c:	6939      	ldr	r1, [r7, #16]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004632:	fba3 0302 	umull	r0, r3, r3, r2
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800463c:	fb00 f303 	mul.w	r3, r0, r3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	4a0e      	ldr	r2, [pc, #56]	; (800467c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004644:	fb02 f303 	mul.w	r3, r2, r3
 8004648:	440b      	add	r3, r1
 800464a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800464c:	f107 0308 	add.w	r3, r7, #8
 8004650:	3304      	adds	r3, #4
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8bf 	bl	80047d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fbd0 	bl	8002e04 <_ZN13STM32Hardware4timeEv>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004670:	bf00      	nop
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	10624dd3 	.word	0x10624dd3
 800467c:	000f4240 	.word	0x000f4240

08004680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b63      	cmp	r3, #99	; 0x63
 8004690:	dd0b      	ble.n	80046aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004698:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800469c:	f083 0301 	eor.w	r3, r3, #1
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e090      	b.n	80047cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68f9      	ldr	r1, [r7, #12]
 80046b2:	f241 2324 	movw	r3, #4644	; 0x1224
 80046b6:	440b      	add	r3, r1
 80046b8:	3307      	adds	r3, #7
 80046ba:	4619      	mov	r1, r3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4790      	blx	r2
 80046c0:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c8:	22ff      	movs	r2, #255	; 0xff
 80046ca:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	22fe      	movs	r2, #254	; 0xfe
 80046d6:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e4:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	0a1b      	lsrs	r3, r3, #8
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f8:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004702:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004710:	4413      	add	r3, r2
 8004712:	b2db      	uxtb	r3, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	b2da      	uxtb	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	b21b      	sxth	r3, r3
 8004734:	121b      	asrs	r3, r3, #8
 8004736:	b21b      	sxth	r3, r3
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004740:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004748:	2305      	movs	r3, #5
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	3306      	adds	r3, #6
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	429a      	cmp	r2, r3
 8004754:	dc0e      	bgt.n	8004774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	441a      	add	r2, r3
 800475c:	f241 2324 	movw	r3, #4644	; 0x1224
 8004760:	4413      	add	r3, r2
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	3301      	adds	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	e7eb      	b.n	800474c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3307      	adds	r3, #7
 8004778:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	425a      	negs	r2, r3
 800477e:	b2db      	uxtb	r3, r3
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	bf58      	it	pl
 8004784:	4253      	negpl	r3, r2
 8004786:	b2da      	uxtb	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	6179      	str	r1, [r7, #20]
 800478e:	43d2      	mvns	r2, r2
 8004790:	b2d1      	uxtb	r1, r2
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	441a      	add	r2, r3
 8004796:	f241 2324 	movw	r3, #4644	; 0x1224
 800479a:	4413      	add	r3, r2
 800479c:	460a      	mov	r2, r1
 800479e:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a6:	dc0b      	bgt.n	80047c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1d18      	adds	r0, r3, #4
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	f241 2324 	movw	r3, #4644	; 0x1224
 80047b2:	4413      	add	r3, r2
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4619      	mov	r1, r3
 80047b8:	f7fe fada 	bl	8002d70 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	e005      	b.n	80047cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80047c0:	4904      	ldr	r1, [pc, #16]	; (80047d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f84c 	bl	8004860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	0800fa28 	.word	0x0800fa28

080047d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fb0c 	bl	8002e04 <_ZN13STM32Hardware4timeEv>
 80047ec:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4917      	ldr	r1, [pc, #92]	; (8004854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80047f6:	fba1 1303 	umull	r1, r3, r1, r3
 80047fa:	099b      	lsrs	r3, r3, #6
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004806:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6859      	ldr	r1, [r3, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4b11      	ldr	r3, [pc, #68]	; (8004854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004810:	fba3 0302 	umull	r0, r3, r3, r2
 8004814:	099b      	lsrs	r3, r3, #6
 8004816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800481a:	fb00 f303 	mul.w	r3, r0, r3
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	1aca      	subs	r2, r1, r3
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 800482a:	4413      	add	r3, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004832:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	f241 0318 	movw	r3, #4120	; 0x1018
 800483a:	4413      	add	r3, r2
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	f241 021c 	movw	r2, #4124	; 0x101c
 8004842:	440a      	add	r2, r1
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f7fb feec 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	10624dd3 	.word	0x10624dd3
 8004858:	000f4240 	.word	0x000f4240
 800485c:	3b9aca00 	.word	0x3b9aca00

08004860 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	2103      	movs	r1, #3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f804 	bl	800487c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	460b      	mov	r3, r1
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800488a:	f107 0314 	add.w	r3, r7, #20
 800488e:	4618      	mov	r0, r3
 8004890:	f7fd fd72 	bl	8002378 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004894:	7afb      	ldrb	r3, [r7, #11]
 8004896:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f107 0214 	add.w	r2, r7, #20
 80048a6:	2107      	movs	r1, #7
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	4798      	blx	r3
  }
 80048ac:	bf00      	nop
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_Z41__static_initialization_and_destruction_0ii>:
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10d      	bne.n	80048e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 80048ce:	4806      	ldr	r0, [pc, #24]	; (80048e8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80048d0:	f7ff f9e2 	bl	8003c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", callback);
 80048d4:	2301      	movs	r3, #1
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80048d8:	4905      	ldr	r1, [pc, #20]	; (80048f0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80048da:	4806      	ldr	r0, [pc, #24]	; (80048f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80048dc:	f7ff fa86 	bl	8003dec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	24000994 	.word	0x24000994
 80048ec:	08003a41 	.word	0x08003a41
 80048f0:	0800fa64 	.word	0x0800fa64
 80048f4:	24001ed0 	.word	0x24001ed0

080048f8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3310      	adds	r3, #16
 8004906:	6839      	ldr	r1, [r7, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fe ffdf 	bl	80038cc <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	3210      	adds	r2, #16
 8004916:	4610      	mov	r0, r2
 8004918:	4798      	blx	r3
  }
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3310      	adds	r3, #16
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe ffe6 	bl	8003918 <_ZN13geometry_msgs5Twist7getTypeEv>
 800494c:	4603      	mov	r3, r0
  }
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3310      	adds	r3, #16
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe ffe6 	bl	8003934 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004968:	4603      	mov	r3, r0
  }
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
    return configured_;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004980:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <_GLOBAL__sub_I_aaaaa>:
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
 8004994:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004998:	2001      	movs	r0, #1
 800499a:	f7ff ff8b 	bl	80048b4 <_Z41__static_initialization_and_destruction_0ii>
 800499e:	bd80      	pop	{r7, pc}

080049a0 <_Z13script_pusherdd>:
PUSHER pusher_A;
PUSHER pusher_B;
//PUSHER pusher_C;
//PUSHER pusher_D;

void script_pusher(double hight_a,double hight_b){
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80049aa:	ed87 1b00 	vstr	d1, [r7]
	pusher_A.state = hight_a;
 80049ae:	4908      	ldr	r1, [pc, #32]	; (80049d0 <_Z13script_pusherdd+0x30>)
 80049b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049b4:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_B.state = hight_b;
 80049b8:	4906      	ldr	r1, [pc, #24]	; (80049d4 <_Z13script_pusherdd+0x34>)
 80049ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049be:	e9c1 2300 	strd	r2, r3, [r1]
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	24001f30 	.word	0x24001f30
 80049d4:	24001f50 	.word	0x24001f50

080049d8 <_ZN6PUSHER8distenceEv>:

void PUSHER::distence(){
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 80049e0:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <_ZN6PUSHER8distenceEv+0x50>)
 80049e2:	ed93 6b00 	vldr	d6, [r3]
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <_ZN6PUSHER8distenceEv+0x50>)
 80049e8:	ed93 7b02 	vldr	d7, [r3, #8]
 80049ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80049f0:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80049f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <_ZN6PUSHER8distenceEv+0x50>)
 80049fa:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <_ZN6PUSHER8distenceEv+0x54>)
 8004a00:	ed93 6b00 	vldr	d6, [r3]
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <_ZN6PUSHER8distenceEv+0x54>)
 8004a06:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a0e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004a12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_ZN6PUSHER8distenceEv+0x54>)
 8004a18:	ed83 7b04 	vstr	d7, [r3, #16]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	24001f30 	.word	0x24001f30
 8004a2c:	24001f50 	.word	0x24001f50

08004a30 <_Z41__static_initialization_and_destruction_0ii>:
//	if(pusher_D.d ==0){
//		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//
//	}
}
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d10a      	bne.n	8004a56 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d105      	bne.n	8004a56 <_Z41__static_initialization_and_destruction_0ii+0x26>
PUSHER pusher_A;
 8004a4a:	4805      	ldr	r0, [pc, #20]	; (8004a60 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8004a4c:	f7fe ff80 	bl	8003950 <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 8004a50:	4804      	ldr	r0, [pc, #16]	; (8004a64 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004a52:	f7fe ff7d 	bl	8003950 <_ZN6PUSHERC1Ev>
}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	24001f30 	.word	0x24001f30
 8004a64:	24001f50 	.word	0x24001f50

08004a68 <_GLOBAL__sub_I_pusher_A>:
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a70:	2001      	movs	r0, #1
 8004a72:	f7ff ffdd 	bl	8004a30 <_Z41__static_initialization_and_destruction_0ii>
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <_Z6scriptv>:
SCRIPT script_b;
//extern PUSHER pusher_A;
//extern PUSHER pusher_B;
//extern PUSHER pusher_C;
//extern PUSHER pusher_D;
void script(){
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	if(script_a.scriptrun == 1){
 8004a7c:	4ba8      	ldr	r3, [pc, #672]	; (8004d20 <_Z6scriptv+0x2a8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f040 80d2 	bne.w	8004c2a <_Z6scriptv+0x1b2>
		if(delay_start == 0){
 8004a86:	4ba7      	ldr	r3, [pc, #668]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d110      	bne.n	8004ab0 <_Z6scriptv+0x38>
			script_wheel(5,0,0);
 8004a8e:	ed9f 2ba2 	vldr	d2, [pc, #648]	; 8004d18 <_Z6scriptv+0x2a0>
 8004a92:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8004d18 <_Z6scriptv+0x2a0>
 8004a96:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 8004a9a:	f000 f94d 	bl	8004d38 <_Z12script_wheelddd>
			script_pusher(5,5);
 8004a9e:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004aa2:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 8004aa6:	f7ff ff7b 	bl	80049a0 <_Z13script_pusherdd>
			delay_start = 1;
 8004aaa:	4b9e      	ldr	r3, [pc, #632]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
		}
		if(delay == 250 && delay_start == 1){
 8004ab0:	4b9d      	ldr	r3, [pc, #628]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2bfa      	cmp	r3, #250	; 0xfa
 8004ab6:	d10c      	bne.n	8004ad2 <_Z6scriptv+0x5a>
 8004ab8:	4b9a      	ldr	r3, [pc, #616]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d108      	bne.n	8004ad2 <_Z6scriptv+0x5a>
//			script_wheel(0,0,0);
			script_pusher(12,5);
 8004ac0:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004ac4:	eeb2 0b08 	vmov.f64	d0, #40	; 0x41400000  12.0
 8004ac8:	f7ff ff6a 	bl	80049a0 <_Z13script_pusherdd>
			delay_start = 2;
 8004acc:	4b95      	ldr	r3, [pc, #596]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004ace:	2202      	movs	r2, #2
 8004ad0:	601a      	str	r2, [r3, #0]
		}
		if(delay == 550 && delay_start == 2){
 8004ad2:	4b95      	ldr	r3, [pc, #596]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f240 2226 	movw	r2, #550	; 0x226
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10e      	bne.n	8004afc <_Z6scriptv+0x84>
 8004ade:	4b91      	ldr	r3, [pc, #580]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d10a      	bne.n	8004afc <_Z6scriptv+0x84>
			script_wheel(20,0,0);
 8004ae6:	ed9f 2b8c 	vldr	d2, [pc, #560]	; 8004d18 <_Z6scriptv+0x2a0>
 8004aea:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8004d18 <_Z6scriptv+0x2a0>
 8004aee:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8004af2:	f000 f921 	bl	8004d38 <_Z12script_wheelddd>
			delay_start = 3;
 8004af6:	4b8b      	ldr	r3, [pc, #556]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004af8:	2203      	movs	r2, #3
 8004afa:	601a      	str	r2, [r3, #0]
		}
		if(delay == 700 && delay_start == 3){
 8004afc:	4b8a      	ldr	r3, [pc, #552]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004b04:	d114      	bne.n	8004b30 <_Z6scriptv+0xb8>
 8004b06:	4b87      	ldr	r3, [pc, #540]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d110      	bne.n	8004b30 <_Z6scriptv+0xb8>
			script_wheel(10,0,0);
 8004b0e:	ed9f 2b82 	vldr	d2, [pc, #520]	; 8004d18 <_Z6scriptv+0x2a0>
 8004b12:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8004d18 <_Z6scriptv+0x2a0>
 8004b16:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004b1a:	f000 f90d 	bl	8004d38 <_Z12script_wheelddd>
			script_pusher(-2,5);
 8004b1e:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004b22:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004b26:	f7ff ff3b 	bl	80049a0 <_Z13script_pusherdd>
			delay_start = 4;
 8004b2a:	4b7e      	ldr	r3, [pc, #504]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004b2c:	2204      	movs	r2, #4
 8004b2e:	601a      	str	r2, [r3, #0]
		}
		if(delay == 900 && delay_start == 4){
 8004b30:	4b7d      	ldr	r3, [pc, #500]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004b38:	d114      	bne.n	8004b64 <_Z6scriptv+0xec>
 8004b3a:	4b7a      	ldr	r3, [pc, #488]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d110      	bne.n	8004b64 <_Z6scriptv+0xec>
			script_wheel(0,0,0);
 8004b42:	ed9f 2b75 	vldr	d2, [pc, #468]	; 8004d18 <_Z6scriptv+0x2a0>
 8004b46:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8004d18 <_Z6scriptv+0x2a0>
 8004b4a:	ed9f 0b73 	vldr	d0, [pc, #460]	; 8004d18 <_Z6scriptv+0x2a0>
 8004b4e:	f000 f8f3 	bl	8004d38 <_Z12script_wheelddd>
			script_pusher(-2,10);
 8004b52:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 8004b56:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004b5a:	f7ff ff21 	bl	80049a0 <_Z13script_pusherdd>
			delay_start = 5;
 8004b5e:	4b71      	ldr	r3, [pc, #452]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004b60:	2205      	movs	r2, #5
 8004b62:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1050 && delay_start == 5){/*-50*/
 8004b64:	4b70      	ldr	r3, [pc, #448]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f240 421a 	movw	r2, #1050	; 0x41a
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d10e      	bne.n	8004b8e <_Z6scriptv+0x116>
 8004b70:	4b6c      	ldr	r3, [pc, #432]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d10a      	bne.n	8004b8e <_Z6scriptv+0x116>
//			script_pusher(-2,10);
			script_wheel(10,0,0);
 8004b78:	ed9f 2b67 	vldr	d2, [pc, #412]	; 8004d18 <_Z6scriptv+0x2a0>
 8004b7c:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8004d18 <_Z6scriptv+0x2a0>
 8004b80:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004b84:	f000 f8d8 	bl	8004d38 <_Z12script_wheelddd>
			delay_start = 6;
 8004b88:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004b8a:	2206      	movs	r2, #6
 8004b8c:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1250 && delay_start == 6){/*-50*/
 8004b8e:	4b66      	ldr	r3, [pc, #408]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10c      	bne.n	8004bb4 <_Z6scriptv+0x13c>
 8004b9a:	4b62      	ldr	r3, [pc, #392]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b06      	cmp	r3, #6
 8004ba0:	d108      	bne.n	8004bb4 <_Z6scriptv+0x13c>
			script_pusher(10,0);
 8004ba2:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8004d18 <_Z6scriptv+0x2a0>
 8004ba6:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004baa:	f7ff fef9 	bl	80049a0 <_Z13script_pusherdd>
			delay_start = 7;
 8004bae:	4b5d      	ldr	r3, [pc, #372]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	601a      	str	r2, [r3, #0]
//		if(delay == 1700 && delay_start == 6){
//			script_wheel(0,0,0);
//			script_pusher(10,0);
//			delay_start = 7;
//		}
		if(delay == 1800 && delay_start == 7){
 8004bb4:	4b5c      	ldr	r3, [pc, #368]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004bbc:	d114      	bne.n	8004be8 <_Z6scriptv+0x170>
 8004bbe:	4b59      	ldr	r3, [pc, #356]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b07      	cmp	r3, #7
 8004bc4:	d110      	bne.n	8004be8 <_Z6scriptv+0x170>
			script_wheel(10,0,0);
 8004bc6:	ed9f 2b54 	vldr	d2, [pc, #336]	; 8004d18 <_Z6scriptv+0x2a0>
 8004bca:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8004d18 <_Z6scriptv+0x2a0>
 8004bce:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004bd2:	f000 f8b1 	bl	8004d38 <_Z12script_wheelddd>
			script_pusher(-2,10);
 8004bd6:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 8004bda:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004bde:	f7ff fedf 	bl	80049a0 <_Z13script_pusherdd>
			delay_start = 8;
 8004be2:	4b50      	ldr	r3, [pc, #320]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004be4:	2208      	movs	r2, #8
 8004be6:	601a      	str	r2, [r3, #0]
//		}
//		if(delay == 2900 && delay_start == 9){
//			script_wheel(10,0,0);
//			delay_start = 10;
//		}
		if(delay == 2500 && delay_start == 8){
 8004be8:	4b4f      	ldr	r3, [pc, #316]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d11a      	bne.n	8004c2a <_Z6scriptv+0x1b2>
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d116      	bne.n	8004c2a <_Z6scriptv+0x1b2>
			script_wheel(0,0,0);
 8004bfc:	ed9f 2b46 	vldr	d2, [pc, #280]	; 8004d18 <_Z6scriptv+0x2a0>
 8004c00:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8004d18 <_Z6scriptv+0x2a0>
 8004c04:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8004d18 <_Z6scriptv+0x2a0>
 8004c08:	f000 f896 	bl	8004d38 <_Z12script_wheelddd>
			script_pusher(-2,12);
 8004c0c:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 8004c10:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004c14:	f7ff fec4 	bl	80049a0 <_Z13script_pusherdd>
			delay_start = 0;
 8004c18:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <_Z6scriptv+0x2ac>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
			script_a.scriptrun = 0;
 8004c1e:	4b40      	ldr	r3, [pc, #256]	; (8004d20 <_Z6scriptv+0x2a8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
			delay = 0;
 8004c24:	4b40      	ldr	r3, [pc, #256]	; (8004d28 <_Z6scriptv+0x2b0>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
		}
	}
	if(script_b.scriptrun == 1){
 8004c2a:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <_Z6scriptv+0x2b4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d170      	bne.n	8004d14 <_Z6scriptv+0x29c>
		if(delay_start_2 == 0){
 8004c32:	4b3f      	ldr	r3, [pc, #252]	; (8004d30 <_Z6scriptv+0x2b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d116      	bne.n	8004c68 <_Z6scriptv+0x1f0>
			script_pusher(12,12);
 8004c3a:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 8004c3e:	eeb2 0b08 	vmov.f64	d0, #40	; 0x41400000  12.0
 8004c42:	f7ff fead 	bl	80049a0 <_Z13script_pusherdd>
//			script_wheel(10,0,0);
			UART_Send_SetMotorPosition(1, 850, 300);
 8004c46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c4a:	f240 3152 	movw	r1, #850	; 0x352
 8004c4e:	2001      	movs	r0, #1
 8004c50:	f000 f8b2 	bl	8004db8 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1650, 300);
 8004c54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c58:	f240 6172 	movw	r1, #1650	; 0x672
 8004c5c:	2003      	movs	r0, #3
 8004c5e:	f000 f8ab 	bl	8004db8 <_Z26UART_Send_SetMotorPositionttt>
			delay_start_2 =1;
 8004c62:	4b33      	ldr	r3, [pc, #204]	; (8004d30 <_Z6scriptv+0x2b8>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 1300 && delay_start_2 == 1){
 8004c68:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <_Z6scriptv+0x2bc>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f240 5214 	movw	r2, #1300	; 0x514
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d11a      	bne.n	8004caa <_Z6scriptv+0x232>
 8004c74:	4b2e      	ldr	r3, [pc, #184]	; (8004d30 <_Z6scriptv+0x2b8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d116      	bne.n	8004caa <_Z6scriptv+0x232>
			UART_Send_SetMotorPosition(1, 1300, 1000);
 8004c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c80:	f240 5114 	movw	r1, #1300	; 0x514
 8004c84:	2001      	movs	r0, #1
 8004c86:	f000 f897 	bl	8004db8 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 1200, 1000);
 8004c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c8e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8004c92:	2003      	movs	r0, #3
 8004c94:	f000 f890 	bl	8004db8 <_Z26UART_Send_SetMotorPositionttt>
//			script_wheel(0,0,0);
			script_pusher(-2,12);
 8004c98:	eeb2 1b08 	vmov.f64	d1, #40	; 0x41400000  12.0
 8004c9c:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004ca0:	f7ff fe7e 	bl	80049a0 <_Z13script_pusherdd>
			delay_start_2 =2;
 8004ca4:	4b22      	ldr	r3, [pc, #136]	; (8004d30 <_Z6scriptv+0x2b8>)
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 1900 && delay_start_2 == 2){
 8004caa:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <_Z6scriptv+0x2bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f240 726c 	movw	r2, #1900	; 0x76c
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d106      	bne.n	8004cc4 <_Z6scriptv+0x24c>
 8004cb6:	4b1e      	ldr	r3, [pc, #120]	; (8004d30 <_Z6scriptv+0x2b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d102      	bne.n	8004cc4 <_Z6scriptv+0x24c>
//			UART_Send_SetMotorPosition(1, 1300, 300);
//			script_wheel(10,0,0);
//			script_pusher(-2,12);
			delay_start_2 =3;
 8004cbe:	4b1c      	ldr	r3, [pc, #112]	; (8004d30 <_Z6scriptv+0x2b8>)
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	601a      	str	r2, [r3, #0]
		}
		if(delay_2 == 2400 && delay_start_2 == 3){
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <_Z6scriptv+0x2bc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8004ccc:	d122      	bne.n	8004d14 <_Z6scriptv+0x29c>
 8004cce:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <_Z6scriptv+0x2b8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d11e      	bne.n	8004d14 <_Z6scriptv+0x29c>
			UART_Send_SetMotorPosition(1, 1550, 500);
 8004cd6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004cda:	f240 610e 	movw	r1, #1550	; 0x60e
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f000 f86a 	bl	8004db8 <_Z26UART_Send_SetMotorPositionttt>
			UART_Send_SetMotorPosition(3, 950, 500);
 8004ce4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ce8:	f240 31b6 	movw	r1, #950	; 0x3b6
 8004cec:	2003      	movs	r0, #3
 8004cee:	f000 f863 	bl	8004db8 <_Z26UART_Send_SetMotorPositionttt>
			script_wheel(0,0,0);
 8004cf2:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8004d18 <_Z6scriptv+0x2a0>
 8004cf6:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8004d18 <_Z6scriptv+0x2a0>
 8004cfa:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8004d18 <_Z6scriptv+0x2a0>
 8004cfe:	f000 f81b 	bl	8004d38 <_Z12script_wheelddd>
			delay_start_2 =0;
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <_Z6scriptv+0x2b8>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
			script_b.scriptrun =0;
 8004d08:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <_Z6scriptv+0x2b4>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
			delay_2 = 0;
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <_Z6scriptv+0x2bc>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
		}
	}

}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}
	...
 8004d20:	24001f70 	.word	0x24001f70
 8004d24:	240002e0 	.word	0x240002e0
 8004d28:	240002e4 	.word	0x240002e4
 8004d2c:	24001f74 	.word	0x24001f74
 8004d30:	240002e8 	.word	0x240002e8
 8004d34:	240002ec 	.word	0x240002ec

08004d38 <_Z12script_wheelddd>:
void script_wheel(double s_Vx,double s_Vy,double s_w){
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004d42:	ed87 1b02 	vstr	d1, [r7, #8]
 8004d46:	ed87 2b00 	vstr	d2, [r7]
	Vx = s_Vx;
 8004d4a:	490a      	ldr	r1, [pc, #40]	; (8004d74 <_Z12script_wheelddd+0x3c>)
 8004d4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d50:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = s_Vy;
 8004d54:	4908      	ldr	r1, [pc, #32]	; (8004d78 <_Z12script_wheelddd+0x40>)
 8004d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d5a:	e9c1 2300 	strd	r2, r3, [r1]
	W = s_w;
 8004d5e:	4907      	ldr	r1, [pc, #28]	; (8004d7c <_Z12script_wheelddd+0x44>)
 8004d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d64:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	240002c8 	.word	0x240002c8
 8004d78:	240002d0 	.word	0x240002d0
 8004d7c:	240002d8 	.word	0x240002d8

08004d80 <_Z9UART_Sendh>:
 */
#include "servo.h"
#include"math.h"
extern UART_HandleTypeDef huart3;
int Checksum_Calc, count=0;
void UART_Send(uint8_t u8_data){
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 8004d8a:	1dfb      	adds	r3, r7, #7
 8004d8c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, u8_pointer, 1,100);
 8004d8e:	2364      	movs	r3, #100	; 0x64
 8004d90:	2201      	movs	r2, #1
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	4806      	ldr	r0, [pc, #24]	; (8004db0 <_Z9UART_Sendh+0x30>)
 8004d96:	f008 fa59 	bl	800d24c <HAL_UART_Transmit>

	Checksum_Calc += u8_data;
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <_Z9UART_Sendh+0x34>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4413      	add	r3, r2
 8004da4:	4a03      	ldr	r2, [pc, #12]	; (8004db4 <_Z9UART_Sendh+0x34>)
 8004da6:	6013      	str	r3, [r2, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	2400080c 	.word	0x2400080c
 8004db4:	24001f78 	.word	0x24001f78

08004db8 <_Z26UART_Send_SetMotorPositionttt>:

void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time){
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	80bb      	strh	r3, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 8004dca:	4b1c      	ldr	r3, [pc, #112]	; (8004e3c <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	3b80      	subs	r3, #128	; 0x80
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff ffd1 	bl	8004d80 <_Z9UART_Sendh>
	UART_Send(0x83);
 8004dde:	2083      	movs	r0, #131	; 0x83
 8004de0:	f7ff ffce 	bl	8004d80 <_Z9UART_Sendh>
	UART_Send(0x05);
 8004de4:	2005      	movs	r0, #5
 8004de6:	f7ff ffcb 	bl	8004d80 <_Z9UART_Sendh>
	UART_Send((Position / 256)& 0x7F);
 8004dea:	88bb      	ldrh	r3, [r7, #4]
 8004dec:	0a1b      	lsrs	r3, r3, #8
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ffc1 	bl	8004d80 <_Z9UART_Sendh>
	UART_Send(Position % 256);
 8004dfe:	88bb      	ldrh	r3, [r7, #4]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ffbc 	bl	8004d80 <_Z9UART_Sendh>
	UART_Send((Time / 256)& 0x7F);
 8004e08:	887b      	ldrh	r3, [r7, #2]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff ffb2 	bl	8004d80 <_Z9UART_Sendh>
	UART_Send(Time % 256);
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff ffad 	bl	8004d80 <_Z9UART_Sendh>
	UART_Send(Checksum_Calc);
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ffa7 	bl	8004d80 <_Z9UART_Sendh>
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	24001f78 	.word	0x24001f78

08004e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e46:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <HAL_MspInit+0x30>)
 8004e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e4c:	4a08      	ldr	r2, [pc, #32]	; (8004e70 <HAL_MspInit+0x30>)
 8004e4e:	f043 0302 	orr.w	r3, r3, #2
 8004e52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <HAL_MspInit+0x30>)
 8004e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	607b      	str	r3, [r7, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	58024400 	.word	0x58024400

08004e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a43      	ldr	r2, [pc, #268]	; (8004f90 <HAL_TIM_Base_MspInit+0x11c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d12f      	bne.n	8004ee6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e86:	4b43      	ldr	r3, [pc, #268]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e8c:	4a41      	ldr	r2, [pc, #260]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e96:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2018      	movs	r0, #24
 8004eaa:	f000 ff28 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004eae:	2018      	movs	r0, #24
 8004eb0:	f000 ff3f 	bl	8005d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	2019      	movs	r0, #25
 8004eba:	f000 ff20 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004ebe:	2019      	movs	r0, #25
 8004ec0:	f000 ff37 	bl	8005d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	201a      	movs	r0, #26
 8004eca:	f000 ff18 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004ece:	201a      	movs	r0, #26
 8004ed0:	f000 ff2f 	bl	8005d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	201b      	movs	r0, #27
 8004eda:	f000 ff10 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004ede:	201b      	movs	r0, #27
 8004ee0:	f000 ff27 	bl	8005d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8004ee4:	e050      	b.n	8004f88 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a2b      	ldr	r2, [pc, #172]	; (8004f98 <HAL_TIM_Base_MspInit+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d12f      	bne.n	8004f50 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004ef0:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ef6:	4a27      	ldr	r2, [pc, #156]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f00:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2100      	movs	r1, #0
 8004f12:	202b      	movs	r0, #43	; 0x2b
 8004f14:	f000 fef3 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004f18:	202b      	movs	r0, #43	; 0x2b
 8004f1a:	f000 ff0a 	bl	8005d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2100      	movs	r1, #0
 8004f22:	202c      	movs	r0, #44	; 0x2c
 8004f24:	f000 feeb 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004f28:	202c      	movs	r0, #44	; 0x2c
 8004f2a:	f000 ff02 	bl	8005d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2100      	movs	r1, #0
 8004f32:	202d      	movs	r0, #45	; 0x2d
 8004f34:	f000 fee3 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004f38:	202d      	movs	r0, #45	; 0x2d
 8004f3a:	f000 fefa 	bl	8005d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2100      	movs	r1, #0
 8004f42:	202e      	movs	r0, #46	; 0x2e
 8004f44:	f000 fedb 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004f48:	202e      	movs	r0, #46	; 0x2e
 8004f4a:	f000 fef2 	bl	8005d32 <HAL_NVIC_EnableIRQ>
}
 8004f4e:	e01b      	b.n	8004f88 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM23)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a11      	ldr	r2, [pc, #68]	; (8004f9c <HAL_TIM_Base_MspInit+0x128>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d116      	bne.n	8004f88 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004f5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f60:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004f62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f66:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <HAL_TIM_Base_MspInit+0x120>)
 8004f6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	20a1      	movs	r0, #161	; 0xa1
 8004f7e:	f000 febe 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8004f82:	20a1      	movs	r0, #161	; 0xa1
 8004f84:	f000 fed5 	bl	8005d32 <HAL_NVIC_EnableIRQ>
}
 8004f88:	bf00      	nop
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40010000 	.word	0x40010000
 8004f94:	58024400 	.word	0x58024400
 8004f98:	40010400 	.word	0x40010400
 8004f9c:	4000e000 	.word	0x4000e000

08004fa0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b090      	sub	sp, #64	; 0x40
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	60da      	str	r2, [r3, #12]
 8004fb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d14e      	bne.n	8005060 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fc2:	4b77      	ldr	r3, [pc, #476]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fc8:	4a75      	ldr	r2, [pc, #468]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fd2:	4b73      	ldr	r3, [pc, #460]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe0:	4b6f      	ldr	r3, [pc, #444]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fe6:	4a6e      	ldr	r2, [pc, #440]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ff0:	4b6b      	ldr	r3, [pc, #428]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8004ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffe:	4b68      	ldr	r3, [pc, #416]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005004:	4a66      	ldr	r2, [pc, #408]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005006:	f043 0302 	orr.w	r3, r3, #2
 800500a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800500e:	4b64      	ldr	r3, [pc, #400]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800501c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005022:	2302      	movs	r3, #2
 8005024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800502a:	2300      	movs	r3, #0
 800502c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800502e:	2301      	movs	r3, #1
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005036:	4619      	mov	r1, r3
 8005038:	485a      	ldr	r0, [pc, #360]	; (80051a4 <HAL_TIM_Encoder_MspInit+0x204>)
 800503a:	f003 fe93 	bl	8008d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800503e:	2308      	movs	r3, #8
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005042:	2302      	movs	r3, #2
 8005044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005046:	2300      	movs	r3, #0
 8005048:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504a:	2300      	movs	r3, #0
 800504c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800504e:	2301      	movs	r3, #1
 8005050:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005056:	4619      	mov	r1, r3
 8005058:	4853      	ldr	r0, [pc, #332]	; (80051a8 <HAL_TIM_Encoder_MspInit+0x208>)
 800505a:	f003 fe83 	bl	8008d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800505e:	e09b      	b.n	8005198 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a51      	ldr	r2, [pc, #324]	; (80051ac <HAL_TIM_Encoder_MspInit+0x20c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d12e      	bne.n	80050c8 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800506a:	4b4d      	ldr	r3, [pc, #308]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800506c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005070:	4a4b      	ldr	r2, [pc, #300]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005072:	f043 0302 	orr.w	r3, r3, #2
 8005076:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800507a:	4b49      	ldr	r3, [pc, #292]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800507c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005088:	4b45      	ldr	r3, [pc, #276]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800508a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800508e:	4a44      	ldr	r2, [pc, #272]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005098:	4b41      	ldr	r3, [pc, #260]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800509a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80050a6:	2330      	movs	r3, #48	; 0x30
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050aa:	2302      	movs	r3, #2
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b2:	2300      	movs	r3, #0
 80050b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80050b6:	2302      	movs	r3, #2
 80050b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050be:	4619      	mov	r1, r3
 80050c0:	4839      	ldr	r0, [pc, #228]	; (80051a8 <HAL_TIM_Encoder_MspInit+0x208>)
 80050c2:	f003 fe4f 	bl	8008d64 <HAL_GPIO_Init>
}
 80050c6:	e067      	b.n	8005198 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a38      	ldr	r2, [pc, #224]	; (80051b0 <HAL_TIM_Encoder_MspInit+0x210>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d12f      	bne.n	8005132 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050d2:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80050d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050d8:	4a31      	ldr	r2, [pc, #196]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80050da:	f043 0304 	orr.w	r3, r3, #4
 80050de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050e2:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80050e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050f0:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80050f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f6:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 80050f8:	f043 0308 	orr.w	r3, r3, #8
 80050fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005100:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800510e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005114:	2302      	movs	r3, #2
 8005116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005118:	2300      	movs	r3, #0
 800511a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800511c:	2300      	movs	r3, #0
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005120:	2302      	movs	r3, #2
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005128:	4619      	mov	r1, r3
 800512a:	4822      	ldr	r0, [pc, #136]	; (80051b4 <HAL_TIM_Encoder_MspInit+0x214>)
 800512c:	f003 fe1a 	bl	8008d64 <HAL_GPIO_Init>
}
 8005130:	e032      	b.n	8005198 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <HAL_TIM_Encoder_MspInit+0x218>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d12d      	bne.n	8005198 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800513e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005144:	f043 0308 	orr.w	r3, r3, #8
 8005148:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800514c:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800514e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800515c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005160:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <HAL_TIM_Encoder_MspInit+0x200>)
 800516c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005178:	2303      	movs	r3, #3
 800517a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517c:	2302      	movs	r3, #2
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005184:	2300      	movs	r3, #0
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005188:	2302      	movs	r3, #2
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005190:	4619      	mov	r1, r3
 8005192:	4804      	ldr	r0, [pc, #16]	; (80051a4 <HAL_TIM_Encoder_MspInit+0x204>)
 8005194:	f003 fde6 	bl	8008d64 <HAL_GPIO_Init>
}
 8005198:	bf00      	nop
 800519a:	3740      	adds	r7, #64	; 0x40
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	58024400 	.word	0x58024400
 80051a4:	58020000 	.word	0x58020000
 80051a8:	58020400 	.word	0x58020400
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	58020c00 	.word	0x58020c00
 80051b8:	40000c00 	.word	0x40000c00

080051bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a19      	ldr	r2, [pc, #100]	; (8005230 <HAL_TIM_PWM_MspInit+0x74>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d117      	bne.n	80051fe <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80051ce:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_TIM_PWM_MspInit+0x78>)
 80051d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d4:	4a17      	ldr	r2, [pc, #92]	; (8005234 <HAL_TIM_PWM_MspInit+0x78>)
 80051d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_TIM_PWM_MspInit+0x78>)
 80051e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80051ec:	2200      	movs	r2, #0
 80051ee:	2100      	movs	r1, #0
 80051f0:	202b      	movs	r0, #43	; 0x2b
 80051f2:	f000 fd84 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80051f6:	202b      	movs	r0, #43	; 0x2b
 80051f8:	f000 fd9b 	bl	8005d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80051fc:	e013      	b.n	8005226 <HAL_TIM_PWM_MspInit+0x6a>
  else if(htim_pwm->Instance==TIM15)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <HAL_TIM_PWM_MspInit+0x7c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d10e      	bne.n	8005226 <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <HAL_TIM_PWM_MspInit+0x78>)
 800520a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <HAL_TIM_PWM_MspInit+0x78>)
 8005210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005214:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_TIM_PWM_MspInit+0x78>)
 800521a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800521e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40001800 	.word	0x40001800
 8005234:	58024400 	.word	0x58024400
 8005238:	40014000 	.word	0x40014000

0800523c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <HAL_TIM_MspPostInit+0xb4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d120      	bne.n	80052a0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800525e:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <HAL_TIM_MspPostInit+0xb8>)
 8005260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005264:	4a23      	ldr	r2, [pc, #140]	; (80052f4 <HAL_TIM_MspPostInit+0xb8>)
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800526e:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <HAL_TIM_MspPostInit+0xb8>)
 8005270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800527c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005282:	2302      	movs	r3, #2
 8005284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528a:	2300      	movs	r3, #0
 800528c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800528e:	2302      	movs	r3, #2
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005292:	f107 0314 	add.w	r3, r7, #20
 8005296:	4619      	mov	r1, r3
 8005298:	4817      	ldr	r0, [pc, #92]	; (80052f8 <HAL_TIM_MspPostInit+0xbc>)
 800529a:	f003 fd63 	bl	8008d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800529e:	e023      	b.n	80052e8 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a15      	ldr	r2, [pc, #84]	; (80052fc <HAL_TIM_MspPostInit+0xc0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d11e      	bne.n	80052e8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052aa:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <HAL_TIM_MspPostInit+0xb8>)
 80052ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052b0:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <HAL_TIM_MspPostInit+0xb8>)
 80052b2:	f043 0310 	orr.w	r3, r3, #16
 80052b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <HAL_TIM_MspPostInit+0xb8>)
 80052bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80052c8:	2360      	movs	r3, #96	; 0x60
 80052ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052cc:	2302      	movs	r3, #2
 80052ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d4:	2300      	movs	r3, #0
 80052d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80052d8:	2304      	movs	r3, #4
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052dc:	f107 0314 	add.w	r3, r7, #20
 80052e0:	4619      	mov	r1, r3
 80052e2:	4807      	ldr	r0, [pc, #28]	; (8005300 <HAL_TIM_MspPostInit+0xc4>)
 80052e4:	f003 fd3e 	bl	8008d64 <HAL_GPIO_Init>
}
 80052e8:	bf00      	nop
 80052ea:	3728      	adds	r7, #40	; 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40001800 	.word	0x40001800
 80052f4:	58024400 	.word	0x58024400
 80052f8:	58020400 	.word	0x58020400
 80052fc:	40014000 	.word	0x40014000
 8005300:	58021000 	.word	0x58021000

08005304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b0ba      	sub	sp, #232	; 0xe8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800530c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	60da      	str	r2, [r3, #12]
 800531a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800531c:	f107 0320 	add.w	r3, r7, #32
 8005320:	22b4      	movs	r2, #180	; 0xb4
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f00a f945 	bl	800f5b4 <memset>
  if(huart->Instance==USART1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a93      	ldr	r2, [pc, #588]	; (800557c <HAL_UART_MspInit+0x278>)
 8005330:	4293      	cmp	r3, r2
 8005332:	f040 80a9 	bne.w	8005488 <HAL_UART_MspInit+0x184>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005336:	2301      	movs	r3, #1
 8005338:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800533a:	2300      	movs	r3, #0
 800533c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005340:	f107 0320 	add.w	r3, r7, #32
 8005344:	4618      	mov	r0, r3
 8005346:	f004 ff45 	bl	800a1d4 <HAL_RCCEx_PeriphCLKConfig>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005350:	f7fc fd38 	bl	8001dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005354:	4b8a      	ldr	r3, [pc, #552]	; (8005580 <HAL_UART_MspInit+0x27c>)
 8005356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800535a:	4a89      	ldr	r2, [pc, #548]	; (8005580 <HAL_UART_MspInit+0x27c>)
 800535c:	f043 0310 	orr.w	r3, r3, #16
 8005360:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005364:	4b86      	ldr	r3, [pc, #536]	; (8005580 <HAL_UART_MspInit+0x27c>)
 8005366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005372:	4b83      	ldr	r3, [pc, #524]	; (8005580 <HAL_UART_MspInit+0x27c>)
 8005374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005378:	4a81      	ldr	r2, [pc, #516]	; (8005580 <HAL_UART_MspInit+0x27c>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005382:	4b7f      	ldr	r3, [pc, #508]	; (8005580 <HAL_UART_MspInit+0x27c>)
 8005384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005390:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a4:	2300      	movs	r3, #0
 80053a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053aa:	2307      	movs	r3, #7
 80053ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80053b4:	4619      	mov	r1, r3
 80053b6:	4873      	ldr	r0, [pc, #460]	; (8005584 <HAL_UART_MspInit+0x280>)
 80053b8:	f003 fcd4 	bl	8008d64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 80053bc:	4b72      	ldr	r3, [pc, #456]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053be:	4a73      	ldr	r2, [pc, #460]	; (800558c <HAL_UART_MspInit+0x288>)
 80053c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80053c2:	4b71      	ldr	r3, [pc, #452]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053c4:	2229      	movs	r2, #41	; 0x29
 80053c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053c8:	4b6f      	ldr	r3, [pc, #444]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053ce:	4b6e      	ldr	r3, [pc, #440]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053d4:	4b6c      	ldr	r3, [pc, #432]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053dc:	4b6a      	ldr	r3, [pc, #424]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053de:	2200      	movs	r2, #0
 80053e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053e2:	4b69      	ldr	r3, [pc, #420]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80053e8:	4b67      	ldr	r3, [pc, #412]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80053f0:	4b65      	ldr	r3, [pc, #404]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053f8:	4b63      	ldr	r3, [pc, #396]	; (8005588 <HAL_UART_MspInit+0x284>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80053fe:	4862      	ldr	r0, [pc, #392]	; (8005588 <HAL_UART_MspInit+0x284>)
 8005400:	f000 fcc0 	bl	8005d84 <HAL_DMA_Init>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 800540a:	f7fc fcdb 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a5d      	ldr	r2, [pc, #372]	; (8005588 <HAL_UART_MspInit+0x284>)
 8005412:	67da      	str	r2, [r3, #124]	; 0x7c
 8005414:	4a5c      	ldr	r2, [pc, #368]	; (8005588 <HAL_UART_MspInit+0x284>)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 800541a:	4b5d      	ldr	r3, [pc, #372]	; (8005590 <HAL_UART_MspInit+0x28c>)
 800541c:	4a5d      	ldr	r2, [pc, #372]	; (8005594 <HAL_UART_MspInit+0x290>)
 800541e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005420:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <HAL_UART_MspInit+0x28c>)
 8005422:	222a      	movs	r2, #42	; 0x2a
 8005424:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005426:	4b5a      	ldr	r3, [pc, #360]	; (8005590 <HAL_UART_MspInit+0x28c>)
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800542c:	4b58      	ldr	r3, [pc, #352]	; (8005590 <HAL_UART_MspInit+0x28c>)
 800542e:	2200      	movs	r2, #0
 8005430:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005432:	4b57      	ldr	r3, [pc, #348]	; (8005590 <HAL_UART_MspInit+0x28c>)
 8005434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005438:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800543a:	4b55      	ldr	r3, [pc, #340]	; (8005590 <HAL_UART_MspInit+0x28c>)
 800543c:	2200      	movs	r2, #0
 800543e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005440:	4b53      	ldr	r3, [pc, #332]	; (8005590 <HAL_UART_MspInit+0x28c>)
 8005442:	2200      	movs	r2, #0
 8005444:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005446:	4b52      	ldr	r3, [pc, #328]	; (8005590 <HAL_UART_MspInit+0x28c>)
 8005448:	2200      	movs	r2, #0
 800544a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800544c:	4b50      	ldr	r3, [pc, #320]	; (8005590 <HAL_UART_MspInit+0x28c>)
 800544e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005452:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005454:	4b4e      	ldr	r3, [pc, #312]	; (8005590 <HAL_UART_MspInit+0x28c>)
 8005456:	2200      	movs	r2, #0
 8005458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800545a:	484d      	ldr	r0, [pc, #308]	; (8005590 <HAL_UART_MspInit+0x28c>)
 800545c:	f000 fc92 	bl	8005d84 <HAL_DMA_Init>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8005466:	f7fc fcad 	bl	8001dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a48      	ldr	r2, [pc, #288]	; (8005590 <HAL_UART_MspInit+0x28c>)
 800546e:	679a      	str	r2, [r3, #120]	; 0x78
 8005470:	4a47      	ldr	r2, [pc, #284]	; (8005590 <HAL_UART_MspInit+0x28c>)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005476:	2200      	movs	r2, #0
 8005478:	2100      	movs	r1, #0
 800547a:	2025      	movs	r0, #37	; 0x25
 800547c:	f000 fc3f 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005480:	2025      	movs	r0, #37	; 0x25
 8005482:	f000 fc56 	bl	8005d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005486:	e074      	b.n	8005572 <HAL_UART_MspInit+0x26e>
  else if(huart->Instance==USART3)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a42      	ldr	r2, [pc, #264]	; (8005598 <HAL_UART_MspInit+0x294>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d16f      	bne.n	8005572 <HAL_UART_MspInit+0x26e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005492:	2302      	movs	r3, #2
 8005494:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005496:	2300      	movs	r3, #0
 8005498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800549c:	f107 0320 	add.w	r3, r7, #32
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 fe97 	bl	800a1d4 <HAL_RCCEx_PeriphCLKConfig>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80054ac:	f7fc fc8a 	bl	8001dc4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054b0:	4b33      	ldr	r3, [pc, #204]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054b6:	4a32      	ldr	r2, [pc, #200]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054c0:	4b2f      	ldr	r3, [pc, #188]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054ce:	4b2c      	ldr	r3, [pc, #176]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054d4:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054d6:	f043 0302 	orr.w	r3, r3, #2
 80054da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ec:	4b24      	ldr	r3, [pc, #144]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054f2:	4a23      	ldr	r2, [pc, #140]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054f4:	f043 0308 	orr.w	r3, r3, #8
 80054f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_UART_MspInit+0x27c>)
 80054fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800550a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800550e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551e:	2300      	movs	r3, #0
 8005520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005524:	2307      	movs	r3, #7
 8005526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800552a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800552e:	4619      	mov	r1, r3
 8005530:	481a      	ldr	r0, [pc, #104]	; (800559c <HAL_UART_MspInit+0x298>)
 8005532:	f003 fc17 	bl	8008d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800553a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553e:	2302      	movs	r3, #2
 8005540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005544:	2300      	movs	r3, #0
 8005546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005550:	2307      	movs	r3, #7
 8005552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005556:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800555a:	4619      	mov	r1, r3
 800555c:	4810      	ldr	r0, [pc, #64]	; (80055a0 <HAL_UART_MspInit+0x29c>)
 800555e:	f003 fc01 	bl	8008d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	2027      	movs	r0, #39	; 0x27
 8005568:	f000 fbc9 	bl	8005cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800556c:	2027      	movs	r0, #39	; 0x27
 800556e:	f000 fbe0 	bl	8005d32 <HAL_NVIC_EnableIRQ>
}
 8005572:	bf00      	nop
 8005574:	37e8      	adds	r7, #232	; 0xe8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40011000 	.word	0x40011000
 8005580:	58024400 	.word	0x58024400
 8005584:	58020000 	.word	0x58020000
 8005588:	2400089c 	.word	0x2400089c
 800558c:	40020010 	.word	0x40020010
 8005590:	24000914 	.word	0x24000914
 8005594:	40020028 	.word	0x40020028
 8005598:	40004800 	.word	0x40004800
 800559c:	58020400 	.word	0x58020400
 80055a0:	58020c00 	.word	0x58020c00

080055a4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <HAL_UART_MspDeInit+0x84>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d11a      	bne.n	80055ec <HAL_UART_MspDeInit+0x48>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <HAL_UART_MspDeInit+0x88>)
 80055b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055bc:	4a1b      	ldr	r2, [pc, #108]	; (800562c <HAL_UART_MspDeInit+0x88>)
 80055be:	f023 0310 	bic.w	r3, r3, #16
 80055c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80055c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055ca:	4819      	ldr	r0, [pc, #100]	; (8005630 <HAL_UART_MspDeInit+0x8c>)
 80055cc:	f003 fd72 	bl	80090b4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 ff2f 	bl	8006438 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 ff2a 	bl	8006438 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80055e4:	2025      	movs	r0, #37	; 0x25
 80055e6:	f000 fbb2 	bl	8005d4e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80055ea:	e019      	b.n	8005620 <HAL_UART_MspDeInit+0x7c>
  else if(huart->Instance==USART3)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a10      	ldr	r2, [pc, #64]	; (8005634 <HAL_UART_MspDeInit+0x90>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d114      	bne.n	8005620 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART3_CLK_DISABLE();
 80055f6:	4b0d      	ldr	r3, [pc, #52]	; (800562c <HAL_UART_MspDeInit+0x88>)
 80055f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055fc:	4a0b      	ldr	r2, [pc, #44]	; (800562c <HAL_UART_MspDeInit+0x88>)
 80055fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005602:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800560a:	480b      	ldr	r0, [pc, #44]	; (8005638 <HAL_UART_MspDeInit+0x94>)
 800560c:	f003 fd52 	bl	80090b4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_9);
 8005610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005614:	4809      	ldr	r0, [pc, #36]	; (800563c <HAL_UART_MspDeInit+0x98>)
 8005616:	f003 fd4d 	bl	80090b4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800561a:	2027      	movs	r0, #39	; 0x27
 800561c:	f000 fb97 	bl	8005d4e <HAL_NVIC_DisableIRQ>
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40011000 	.word	0x40011000
 800562c:	58024400 	.word	0x58024400
 8005630:	58020000 	.word	0x58020000
 8005634:	40004800 	.word	0x40004800
 8005638:	58020400 	.word	0x58020400
 800563c:	58020c00 	.word	0x58020c00

08005640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005644:	e7fe      	b.n	8005644 <NMI_Handler+0x4>

08005646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005646:	b480      	push	{r7}
 8005648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800564a:	e7fe      	b.n	800564a <HardFault_Handler+0x4>

0800564c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005650:	e7fe      	b.n	8005650 <MemManage_Handler+0x4>

08005652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005652:	b480      	push	{r7}
 8005654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005656:	e7fe      	b.n	8005656 <BusFault_Handler+0x4>

08005658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800565c:	e7fe      	b.n	800565c <UsageFault_Handler+0x4>

0800565e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005670:	bf00      	nop
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800568c:	f000 f9f4 	bl	8005a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005690:	bf00      	nop
 8005692:	bd80      	pop	{r7, pc}

08005694 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005698:	4802      	ldr	r0, [pc, #8]	; (80056a4 <DMA1_Stream0_IRQHandler+0x10>)
 800569a:	f002 f851 	bl	8007740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	2400089c 	.word	0x2400089c

080056a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80056ac:	4802      	ldr	r0, [pc, #8]	; (80056b8 <DMA1_Stream1_IRQHandler+0x10>)
 80056ae:	f002 f847 	bl	8007740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	24000914 	.word	0x24000914

080056bc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056c0:	4802      	ldr	r0, [pc, #8]	; (80056cc <TIM1_BRK_IRQHandler+0x10>)
 80056c2:	f006 fc49 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	240004d0 	.word	0x240004d0

080056d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056d4:	4802      	ldr	r0, [pc, #8]	; (80056e0 <TIM1_UP_IRQHandler+0x10>)
 80056d6:	f006 fc3f 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	240004d0 	.word	0x240004d0

080056e4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056e8:	4802      	ldr	r0, [pc, #8]	; (80056f4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80056ea:	f006 fc35 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	240004d0 	.word	0x240004d0

080056f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056fc:	4802      	ldr	r0, [pc, #8]	; (8005708 <TIM1_CC_IRQHandler+0x10>)
 80056fe:	f006 fc2b 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005702:	bf00      	nop
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	240004d0 	.word	0x240004d0

0800570c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005710:	4802      	ldr	r0, [pc, #8]	; (800571c <USART1_IRQHandler+0x10>)
 8005712:	f007 ff19 	bl	800d548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005716:	bf00      	nop
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	2400077c 	.word	0x2400077c

08005720 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005724:	4802      	ldr	r0, [pc, #8]	; (8005730 <USART3_IRQHandler+0x10>)
 8005726:	f007 ff0f 	bl	800d548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	2400080c 	.word	0x2400080c

08005734 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005738:	4803      	ldr	r0, [pc, #12]	; (8005748 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800573a:	f006 fc0d 	bl	800bf58 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800573e:	4803      	ldr	r0, [pc, #12]	; (800574c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005740:	f006 fc0a 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005744:	bf00      	nop
 8005746:	bd80      	pop	{r7, pc}
 8005748:	2400064c 	.word	0x2400064c
 800574c:	24000698 	.word	0x24000698

08005750 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005754:	4802      	ldr	r0, [pc, #8]	; (8005760 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8005756:	f006 fbff 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2400064c 	.word	0x2400064c

08005764 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005768:	4802      	ldr	r0, [pc, #8]	; (8005774 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800576a:	f006 fbf5 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	2400064c 	.word	0x2400064c

08005778 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800577c:	4802      	ldr	r0, [pc, #8]	; (8005788 <TIM8_CC_IRQHandler+0x10>)
 800577e:	f006 fbeb 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	2400064c 	.word	0x2400064c

0800578c <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005790:	4802      	ldr	r0, [pc, #8]	; (800579c <TIM23_IRQHandler+0x10>)
 8005792:	f006 fbe1 	bl	800bf58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	24000730 	.word	0x24000730

080057a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
	return 1;
 80057a4:	2301      	movs	r3, #1
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <_kill>:

int _kill(int pid, int sig)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80057ba:	f009 fec3 	bl	800f544 <__errno>
 80057be:	4603      	mov	r3, r0
 80057c0:	2216      	movs	r2, #22
 80057c2:	601a      	str	r2, [r3, #0]
	return -1;
 80057c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <_exit>:

void _exit (int status)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80057d8:	f04f 31ff 	mov.w	r1, #4294967295
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff ffe7 	bl	80057b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80057e2:	e7fe      	b.n	80057e2 <_exit+0x12>

080057e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <_sbrk+0x5c>)
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <_sbrk+0x60>)
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <_sbrk+0x64>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005800:	4b11      	ldr	r3, [pc, #68]	; (8005848 <_sbrk+0x64>)
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <_sbrk+0x68>)
 8005804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <_sbrk+0x64>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d207      	bcs.n	8005824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005814:	f009 fe96 	bl	800f544 <__errno>
 8005818:	4603      	mov	r3, r0
 800581a:	220c      	movs	r2, #12
 800581c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	e009      	b.n	8005838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <_sbrk+0x64>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800582a:	4b07      	ldr	r3, [pc, #28]	; (8005848 <_sbrk+0x64>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <_sbrk+0x64>)
 8005834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	24050000 	.word	0x24050000
 8005844:	00000400 	.word	0x00000400
 8005848:	24001f7c 	.word	0x24001f7c
 800584c:	24001f98 	.word	0x24001f98

08005850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005854:	4b32      	ldr	r3, [pc, #200]	; (8005920 <SystemInit+0xd0>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	4a31      	ldr	r2, [pc, #196]	; (8005920 <SystemInit+0xd0>)
 800585c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005864:	4b2f      	ldr	r3, [pc, #188]	; (8005924 <SystemInit+0xd4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	2b06      	cmp	r3, #6
 800586e:	d807      	bhi.n	8005880 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005870:	4b2c      	ldr	r3, [pc, #176]	; (8005924 <SystemInit+0xd4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f023 030f 	bic.w	r3, r3, #15
 8005878:	4a2a      	ldr	r2, [pc, #168]	; (8005924 <SystemInit+0xd4>)
 800587a:	f043 0307 	orr.w	r3, r3, #7
 800587e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005880:	4b29      	ldr	r3, [pc, #164]	; (8005928 <SystemInit+0xd8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a28      	ldr	r2, [pc, #160]	; (8005928 <SystemInit+0xd8>)
 8005886:	f043 0301 	orr.w	r3, r3, #1
 800588a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800588c:	4b26      	ldr	r3, [pc, #152]	; (8005928 <SystemInit+0xd8>)
 800588e:	2200      	movs	r2, #0
 8005890:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005892:	4b25      	ldr	r3, [pc, #148]	; (8005928 <SystemInit+0xd8>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4924      	ldr	r1, [pc, #144]	; (8005928 <SystemInit+0xd8>)
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <SystemInit+0xdc>)
 800589a:	4013      	ands	r3, r2
 800589c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <SystemInit+0xd4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058aa:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <SystemInit+0xd4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 030f 	bic.w	r3, r3, #15
 80058b2:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <SystemInit+0xd4>)
 80058b4:	f043 0307 	orr.w	r3, r3, #7
 80058b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80058ba:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <SystemInit+0xd8>)
 80058bc:	2200      	movs	r2, #0
 80058be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80058c0:	4b19      	ldr	r3, [pc, #100]	; (8005928 <SystemInit+0xd8>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <SystemInit+0xd8>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80058cc:	4b16      	ldr	r3, [pc, #88]	; (8005928 <SystemInit+0xd8>)
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <SystemInit+0xe0>)
 80058d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80058d2:	4b15      	ldr	r3, [pc, #84]	; (8005928 <SystemInit+0xd8>)
 80058d4:	4a17      	ldr	r2, [pc, #92]	; (8005934 <SystemInit+0xe4>)
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <SystemInit+0xd8>)
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <SystemInit+0xe8>)
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80058de:	4b12      	ldr	r3, [pc, #72]	; (8005928 <SystemInit+0xd8>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80058e4:	4b10      	ldr	r3, [pc, #64]	; (8005928 <SystemInit+0xd8>)
 80058e6:	4a14      	ldr	r2, [pc, #80]	; (8005938 <SystemInit+0xe8>)
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <SystemInit+0xd8>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <SystemInit+0xd8>)
 80058f2:	4a11      	ldr	r2, [pc, #68]	; (8005938 <SystemInit+0xe8>)
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <SystemInit+0xd8>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	; (8005928 <SystemInit+0xd8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a09      	ldr	r2, [pc, #36]	; (8005928 <SystemInit+0xd8>)
 8005902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005906:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005908:	4b07      	ldr	r3, [pc, #28]	; (8005928 <SystemInit+0xd8>)
 800590a:	2200      	movs	r2, #0
 800590c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <SystemInit+0xec>)
 8005910:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005914:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005916:	bf00      	nop
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	e000ed00 	.word	0xe000ed00
 8005924:	52002000 	.word	0x52002000
 8005928:	58024400 	.word	0x58024400
 800592c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005930:	02020200 	.word	0x02020200
 8005934:	01ff0000 	.word	0x01ff0000
 8005938:	01010280 	.word	0x01010280
 800593c:	52004000 	.word	0x52004000

08005940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005978 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005944:	f7ff ff84 	bl	8005850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005948:	480c      	ldr	r0, [pc, #48]	; (800597c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800594a:	490d      	ldr	r1, [pc, #52]	; (8005980 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800594c:	4a0d      	ldr	r2, [pc, #52]	; (8005984 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800594e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005950:	e002      	b.n	8005958 <LoopCopyDataInit>

08005952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005956:	3304      	adds	r3, #4

08005958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800595a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800595c:	d3f9      	bcc.n	8005952 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800595e:	4a0a      	ldr	r2, [pc, #40]	; (8005988 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005960:	4c0a      	ldr	r4, [pc, #40]	; (800598c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005964:	e001      	b.n	800596a <LoopFillZerobss>

08005966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005968:	3204      	adds	r2, #4

0800596a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800596a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800596c:	d3fb      	bcc.n	8005966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800596e:	f009 fdef 	bl	800f550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005972:	f7fb fc91 	bl	8001298 <main>
  bx  lr
 8005976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005978:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800597c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005980:	240000c8 	.word	0x240000c8
  ldr r2, =_sidata
 8005984:	0800fbe8 	.word	0x0800fbe8
  ldr r2, =_sbss
 8005988:	240000c8 	.word	0x240000c8
  ldr r4, =_ebss
 800598c:	24001f94 	.word	0x24001f94

08005990 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005990:	e7fe      	b.n	8005990 <ADC3_IRQHandler>
	...

08005994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800599a:	2003      	movs	r0, #3
 800599c:	f000 f9a4 	bl	8005ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059a0:	f004 fa42 	bl	8009e28 <HAL_RCC_GetSysClockFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b15      	ldr	r3, [pc, #84]	; (80059fc <HAL_Init+0x68>)
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	0a1b      	lsrs	r3, r3, #8
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	4913      	ldr	r1, [pc, #76]	; (8005a00 <HAL_Init+0x6c>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
 80059bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <HAL_Init+0x68>)
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <HAL_Init+0x6c>)
 80059c8:	5cd3      	ldrb	r3, [r2, r3]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
 80059d4:	4a0b      	ldr	r2, [pc, #44]	; (8005a04 <HAL_Init+0x70>)
 80059d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80059d8:	4a0b      	ldr	r2, [pc, #44]	; (8005a08 <HAL_Init+0x74>)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059de:	200f      	movs	r0, #15
 80059e0:	f000 f814 	bl	8005a0c <HAL_InitTick>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e002      	b.n	80059f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80059ee:	f7ff fa27 	bl	8004e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	58024400 	.word	0x58024400
 8005a00:	0800fb88 	.word	0x0800fb88
 8005a04:	24000054 	.word	0x24000054
 8005a08:	24000050 	.word	0x24000050

08005a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005a14:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <HAL_InitTick+0x60>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e021      	b.n	8005a64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <HAL_InitTick+0x64>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <HAL_InitTick+0x60>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f997 	bl	8005d6a <HAL_SYSTICK_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e00e      	b.n	8005a64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b0f      	cmp	r3, #15
 8005a4a:	d80a      	bhi.n	8005a62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	f000 f953 	bl	8005cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a58:	4a06      	ldr	r2, [pc, #24]	; (8005a74 <HAL_InitTick+0x68>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	2400005c 	.word	0x2400005c
 8005a70:	24000050 	.word	0x24000050
 8005a74:	24000058 	.word	0x24000058

08005a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <HAL_IncTick+0x20>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HAL_IncTick+0x24>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4413      	add	r3, r2
 8005a88:	4a04      	ldr	r2, [pc, #16]	; (8005a9c <HAL_IncTick+0x24>)
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	2400005c 	.word	0x2400005c
 8005a9c:	24001f80 	.word	0x24001f80

08005aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <HAL_GetTick+0x14>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	24001f80 	.word	0x24001f80

08005ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ac0:	f7ff ffee 	bl	8005aa0 <HAL_GetTick>
 8005ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d005      	beq.n	8005ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <HAL_Delay+0x44>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ade:	bf00      	nop
 8005ae0:	f7ff ffde 	bl	8005aa0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d8f7      	bhi.n	8005ae0 <HAL_Delay+0x28>
  {
  }
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2400005c 	.word	0x2400005c

08005b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <__NVIC_SetPriorityGrouping+0x40>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <__NVIC_SetPriorityGrouping+0x44>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b2e:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <__NVIC_SetPriorityGrouping+0x40>)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	60d3      	str	r3, [r2, #12]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	e000ed00 	.word	0xe000ed00
 8005b44:	05fa0000 	.word	0x05fa0000

08005b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b4c:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <__NVIC_GetPriorityGrouping+0x18>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f003 0307 	and.w	r3, r3, #7
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	db0b      	blt.n	8005b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f003 021f 	and.w	r2, r3, #31
 8005b7c:	4907      	ldr	r1, [pc, #28]	; (8005b9c <__NVIC_EnableIRQ+0x38>)
 8005b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	2001      	movs	r0, #1
 8005b86:	fa00 f202 	lsl.w	r2, r0, r2
 8005b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	e000e100 	.word	0xe000e100

08005ba0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	db12      	blt.n	8005bd8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	f003 021f 	and.w	r2, r3, #31
 8005bb8:	490a      	ldr	r1, [pc, #40]	; (8005be4 <__NVIC_DisableIRQ+0x44>)
 8005bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bc6:	3320      	adds	r3, #32
 8005bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005bcc:	f3bf 8f4f 	dsb	sy
}
 8005bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005bd2:	f3bf 8f6f 	isb	sy
}
 8005bd6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	e000e100 	.word	0xe000e100

08005be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	db0a      	blt.n	8005c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	490c      	ldr	r1, [pc, #48]	; (8005c34 <__NVIC_SetPriority+0x4c>)
 8005c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c06:	0112      	lsls	r2, r2, #4
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c10:	e00a      	b.n	8005c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4908      	ldr	r1, [pc, #32]	; (8005c38 <__NVIC_SetPriority+0x50>)
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	0112      	lsls	r2, r2, #4
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	761a      	strb	r2, [r3, #24]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000e100 	.word	0xe000e100
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	; 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f1c3 0307 	rsb	r3, r3, #7
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	bf28      	it	cs
 8005c5a:	2304      	movcs	r3, #4
 8005c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d902      	bls.n	8005c6c <NVIC_EncodePriority+0x30>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3b03      	subs	r3, #3
 8005c6a:	e000      	b.n	8005c6e <NVIC_EncodePriority+0x32>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43da      	mvns	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	401a      	ands	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c84:	f04f 31ff 	mov.w	r1, #4294967295
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8e:	43d9      	mvns	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	4313      	orrs	r3, r2
         );
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3724      	adds	r7, #36	; 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cb4:	d301      	bcc.n	8005cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e00f      	b.n	8005cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <SysTick_Config+0x40>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cc2:	210f      	movs	r1, #15
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	f7ff ff8e 	bl	8005be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ccc:	4b05      	ldr	r3, [pc, #20]	; (8005ce4 <SysTick_Config+0x40>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <SysTick_Config+0x40>)
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	e000e010 	.word	0xe000e010

08005ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff05 	bl	8005b00 <__NVIC_SetPriorityGrouping>
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	4603      	mov	r3, r0
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d0c:	f7ff ff1c 	bl	8005b48 <__NVIC_GetPriorityGrouping>
 8005d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	6978      	ldr	r0, [r7, #20]
 8005d18:	f7ff ff90 	bl	8005c3c <NVIC_EncodePriority>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d22:	4611      	mov	r1, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff ff5f 	bl	8005be8 <__NVIC_SetPriority>
}
 8005d2a:	bf00      	nop
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	4603      	mov	r3, r0
 8005d3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff ff0f 	bl	8005b64 <__NVIC_EnableIRQ>
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	4603      	mov	r3, r0
 8005d56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ff1f 	bl	8005ba0 <__NVIC_DisableIRQ>
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff ff96 	bl	8005ca4 <SysTick_Config>
 8005d78:	4603      	mov	r3, r0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d8c:	f7ff fe88 	bl	8005aa0 <HAL_GetTick>
 8005d90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e314      	b.n	80063c6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a66      	ldr	r2, [pc, #408]	; (8005f3c <HAL_DMA_Init+0x1b8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d04a      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a65      	ldr	r2, [pc, #404]	; (8005f40 <HAL_DMA_Init+0x1bc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d045      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a63      	ldr	r2, [pc, #396]	; (8005f44 <HAL_DMA_Init+0x1c0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d040      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a62      	ldr	r2, [pc, #392]	; (8005f48 <HAL_DMA_Init+0x1c4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d03b      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a60      	ldr	r2, [pc, #384]	; (8005f4c <HAL_DMA_Init+0x1c8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d036      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a5f      	ldr	r2, [pc, #380]	; (8005f50 <HAL_DMA_Init+0x1cc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d031      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a5d      	ldr	r2, [pc, #372]	; (8005f54 <HAL_DMA_Init+0x1d0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d02c      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a5c      	ldr	r2, [pc, #368]	; (8005f58 <HAL_DMA_Init+0x1d4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d027      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5a      	ldr	r2, [pc, #360]	; (8005f5c <HAL_DMA_Init+0x1d8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d022      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a59      	ldr	r2, [pc, #356]	; (8005f60 <HAL_DMA_Init+0x1dc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d01d      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a57      	ldr	r2, [pc, #348]	; (8005f64 <HAL_DMA_Init+0x1e0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d018      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a56      	ldr	r2, [pc, #344]	; (8005f68 <HAL_DMA_Init+0x1e4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d013      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a54      	ldr	r2, [pc, #336]	; (8005f6c <HAL_DMA_Init+0x1e8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00e      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a53      	ldr	r2, [pc, #332]	; (8005f70 <HAL_DMA_Init+0x1ec>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d009      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a51      	ldr	r2, [pc, #324]	; (8005f74 <HAL_DMA_Init+0x1f0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_DMA_Init+0xb8>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a50      	ldr	r2, [pc, #320]	; (8005f78 <HAL_DMA_Init+0x1f4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d101      	bne.n	8005e40 <HAL_DMA_Init+0xbc>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <HAL_DMA_Init+0xbe>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 813c 	beq.w	80060c0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a37      	ldr	r2, [pc, #220]	; (8005f3c <HAL_DMA_Init+0x1b8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d04a      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a36      	ldr	r2, [pc, #216]	; (8005f40 <HAL_DMA_Init+0x1bc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d045      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a34      	ldr	r2, [pc, #208]	; (8005f44 <HAL_DMA_Init+0x1c0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d040      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a33      	ldr	r2, [pc, #204]	; (8005f48 <HAL_DMA_Init+0x1c4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d03b      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a31      	ldr	r2, [pc, #196]	; (8005f4c <HAL_DMA_Init+0x1c8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d036      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a30      	ldr	r2, [pc, #192]	; (8005f50 <HAL_DMA_Init+0x1cc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d031      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2e      	ldr	r2, [pc, #184]	; (8005f54 <HAL_DMA_Init+0x1d0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02c      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2d      	ldr	r2, [pc, #180]	; (8005f58 <HAL_DMA_Init+0x1d4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d027      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a2b      	ldr	r2, [pc, #172]	; (8005f5c <HAL_DMA_Init+0x1d8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d022      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <HAL_DMA_Init+0x1dc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d01d      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a28      	ldr	r2, [pc, #160]	; (8005f64 <HAL_DMA_Init+0x1e0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a27      	ldr	r2, [pc, #156]	; (8005f68 <HAL_DMA_Init+0x1e4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a25      	ldr	r2, [pc, #148]	; (8005f6c <HAL_DMA_Init+0x1e8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a24      	ldr	r2, [pc, #144]	; (8005f70 <HAL_DMA_Init+0x1ec>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a22      	ldr	r2, [pc, #136]	; (8005f74 <HAL_DMA_Init+0x1f0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_DMA_Init+0x174>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <HAL_DMA_Init+0x1f4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d108      	bne.n	8005f0a <HAL_DMA_Init+0x186>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	e007      	b.n	8005f1a <HAL_DMA_Init+0x196>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f1a:	e02f      	b.n	8005f7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f1c:	f7ff fdc0 	bl	8005aa0 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d928      	bls.n	8005f7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2203      	movs	r2, #3
 8005f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e244      	b.n	80063c6 <HAL_DMA_Init+0x642>
 8005f3c:	40020010 	.word	0x40020010
 8005f40:	40020028 	.word	0x40020028
 8005f44:	40020040 	.word	0x40020040
 8005f48:	40020058 	.word	0x40020058
 8005f4c:	40020070 	.word	0x40020070
 8005f50:	40020088 	.word	0x40020088
 8005f54:	400200a0 	.word	0x400200a0
 8005f58:	400200b8 	.word	0x400200b8
 8005f5c:	40020410 	.word	0x40020410
 8005f60:	40020428 	.word	0x40020428
 8005f64:	40020440 	.word	0x40020440
 8005f68:	40020458 	.word	0x40020458
 8005f6c:	40020470 	.word	0x40020470
 8005f70:	40020488 	.word	0x40020488
 8005f74:	400204a0 	.word	0x400204a0
 8005f78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1c8      	bne.n	8005f1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4b84      	ldr	r3, [pc, #528]	; (80061a8 <HAL_DMA_Init+0x424>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005fa2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d107      	bne.n	8005fe0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b28      	cmp	r3, #40	; 0x28
 8005fe6:	d903      	bls.n	8005ff0 <HAL_DMA_Init+0x26c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b2e      	cmp	r3, #46	; 0x2e
 8005fee:	d91f      	bls.n	8006030 <HAL_DMA_Init+0x2ac>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ff6:	d903      	bls.n	8006000 <HAL_DMA_Init+0x27c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b42      	cmp	r3, #66	; 0x42
 8005ffe:	d917      	bls.n	8006030 <HAL_DMA_Init+0x2ac>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b46      	cmp	r3, #70	; 0x46
 8006006:	d903      	bls.n	8006010 <HAL_DMA_Init+0x28c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b48      	cmp	r3, #72	; 0x48
 800600e:	d90f      	bls.n	8006030 <HAL_DMA_Init+0x2ac>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b4e      	cmp	r3, #78	; 0x4e
 8006016:	d903      	bls.n	8006020 <HAL_DMA_Init+0x29c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b52      	cmp	r3, #82	; 0x52
 800601e:	d907      	bls.n	8006030 <HAL_DMA_Init+0x2ac>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b73      	cmp	r3, #115	; 0x73
 8006026:	d905      	bls.n	8006034 <HAL_DMA_Init+0x2b0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b77      	cmp	r3, #119	; 0x77
 800602e:	d801      	bhi.n	8006034 <HAL_DMA_Init+0x2b0>
 8006030:	2301      	movs	r3, #1
 8006032:	e000      	b.n	8006036 <HAL_DMA_Init+0x2b2>
 8006034:	2300      	movs	r3, #0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006040:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f023 0307 	bic.w	r3, r3, #7
 8006058:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	2b04      	cmp	r3, #4
 800606a:	d117      	bne.n	800609c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00e      	beq.n	800609c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f002 fce6 	bl	8008a50 <DMA_CheckFifoParam>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d008      	beq.n	800609c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2240      	movs	r2, #64	; 0x40
 800608e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e194      	b.n	80063c6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f002 fc21 	bl	80088ec <DMA_CalcBaseAndBitshift>
 80060aa:	4603      	mov	r3, r0
 80060ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	f003 031f 	and.w	r3, r3, #31
 80060b6:	223f      	movs	r2, #63	; 0x3f
 80060b8:	409a      	lsls	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	609a      	str	r2, [r3, #8]
 80060be:	e0ca      	b.n	8006256 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a39      	ldr	r2, [pc, #228]	; (80061ac <HAL_DMA_Init+0x428>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d022      	beq.n	8006110 <HAL_DMA_Init+0x38c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a38      	ldr	r2, [pc, #224]	; (80061b0 <HAL_DMA_Init+0x42c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d01d      	beq.n	8006110 <HAL_DMA_Init+0x38c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a36      	ldr	r2, [pc, #216]	; (80061b4 <HAL_DMA_Init+0x430>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d018      	beq.n	8006110 <HAL_DMA_Init+0x38c>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a35      	ldr	r2, [pc, #212]	; (80061b8 <HAL_DMA_Init+0x434>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d013      	beq.n	8006110 <HAL_DMA_Init+0x38c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a33      	ldr	r2, [pc, #204]	; (80061bc <HAL_DMA_Init+0x438>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00e      	beq.n	8006110 <HAL_DMA_Init+0x38c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a32      	ldr	r2, [pc, #200]	; (80061c0 <HAL_DMA_Init+0x43c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d009      	beq.n	8006110 <HAL_DMA_Init+0x38c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a30      	ldr	r2, [pc, #192]	; (80061c4 <HAL_DMA_Init+0x440>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d004      	beq.n	8006110 <HAL_DMA_Init+0x38c>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <HAL_DMA_Init+0x444>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d101      	bne.n	8006114 <HAL_DMA_Init+0x390>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <HAL_DMA_Init+0x392>
 8006114:	2300      	movs	r3, #0
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8094 	beq.w	8006244 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a22      	ldr	r2, [pc, #136]	; (80061ac <HAL_DMA_Init+0x428>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d021      	beq.n	800616a <HAL_DMA_Init+0x3e6>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a21      	ldr	r2, [pc, #132]	; (80061b0 <HAL_DMA_Init+0x42c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d01c      	beq.n	800616a <HAL_DMA_Init+0x3e6>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1f      	ldr	r2, [pc, #124]	; (80061b4 <HAL_DMA_Init+0x430>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d017      	beq.n	800616a <HAL_DMA_Init+0x3e6>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <HAL_DMA_Init+0x434>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d012      	beq.n	800616a <HAL_DMA_Init+0x3e6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <HAL_DMA_Init+0x438>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00d      	beq.n	800616a <HAL_DMA_Init+0x3e6>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1b      	ldr	r2, [pc, #108]	; (80061c0 <HAL_DMA_Init+0x43c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d008      	beq.n	800616a <HAL_DMA_Init+0x3e6>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <HAL_DMA_Init+0x440>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <HAL_DMA_Init+0x3e6>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a18      	ldr	r2, [pc, #96]	; (80061c8 <HAL_DMA_Init+0x444>)
 8006168:	4293      	cmp	r3, r2
 800616a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <HAL_DMA_Init+0x448>)
 8006188:	4013      	ands	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2b40      	cmp	r3, #64	; 0x40
 8006192:	d01d      	beq.n	80061d0 <HAL_DMA_Init+0x44c>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d102      	bne.n	80061a2 <HAL_DMA_Init+0x41e>
 800619c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061a0:	e017      	b.n	80061d2 <HAL_DMA_Init+0x44e>
 80061a2:	2300      	movs	r3, #0
 80061a4:	e015      	b.n	80061d2 <HAL_DMA_Init+0x44e>
 80061a6:	bf00      	nop
 80061a8:	fe10803f 	.word	0xfe10803f
 80061ac:	58025408 	.word	0x58025408
 80061b0:	5802541c 	.word	0x5802541c
 80061b4:	58025430 	.word	0x58025430
 80061b8:	58025444 	.word	0x58025444
 80061bc:	58025458 	.word	0x58025458
 80061c0:	5802546c 	.word	0x5802546c
 80061c4:	58025480 	.word	0x58025480
 80061c8:	58025494 	.word	0x58025494
 80061cc:	fffe000f 	.word	0xfffe000f
 80061d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68d2      	ldr	r2, [r2, #12]
 80061d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006200:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	4b6e      	ldr	r3, [pc, #440]	; (80063d0 <HAL_DMA_Init+0x64c>)
 8006218:	4413      	add	r3, r2
 800621a:	4a6e      	ldr	r2, [pc, #440]	; (80063d4 <HAL_DMA_Init+0x650>)
 800621c:	fba2 2303 	umull	r2, r3, r2, r3
 8006220:	091b      	lsrs	r3, r3, #4
 8006222:	009a      	lsls	r2, r3, #2
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f002 fb5f 	bl	80088ec <DMA_CalcBaseAndBitshift>
 800622e:	4603      	mov	r3, r0
 8006230:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	2201      	movs	r2, #1
 800623c:	409a      	lsls	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	e008      	b.n	8006256 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2240      	movs	r2, #64	; 0x40
 8006248:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2203      	movs	r2, #3
 800624e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e0b7      	b.n	80063c6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a5f      	ldr	r2, [pc, #380]	; (80063d8 <HAL_DMA_Init+0x654>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d072      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5d      	ldr	r2, [pc, #372]	; (80063dc <HAL_DMA_Init+0x658>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d06d      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a5c      	ldr	r2, [pc, #368]	; (80063e0 <HAL_DMA_Init+0x65c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d068      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a5a      	ldr	r2, [pc, #360]	; (80063e4 <HAL_DMA_Init+0x660>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d063      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a59      	ldr	r2, [pc, #356]	; (80063e8 <HAL_DMA_Init+0x664>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d05e      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a57      	ldr	r2, [pc, #348]	; (80063ec <HAL_DMA_Init+0x668>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d059      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a56      	ldr	r2, [pc, #344]	; (80063f0 <HAL_DMA_Init+0x66c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d054      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a54      	ldr	r2, [pc, #336]	; (80063f4 <HAL_DMA_Init+0x670>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d04f      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a53      	ldr	r2, [pc, #332]	; (80063f8 <HAL_DMA_Init+0x674>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d04a      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a51      	ldr	r2, [pc, #324]	; (80063fc <HAL_DMA_Init+0x678>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d045      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a50      	ldr	r2, [pc, #320]	; (8006400 <HAL_DMA_Init+0x67c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d040      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a4e      	ldr	r2, [pc, #312]	; (8006404 <HAL_DMA_Init+0x680>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d03b      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a4d      	ldr	r2, [pc, #308]	; (8006408 <HAL_DMA_Init+0x684>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d036      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a4b      	ldr	r2, [pc, #300]	; (800640c <HAL_DMA_Init+0x688>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d031      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a4a      	ldr	r2, [pc, #296]	; (8006410 <HAL_DMA_Init+0x68c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d02c      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a48      	ldr	r2, [pc, #288]	; (8006414 <HAL_DMA_Init+0x690>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d027      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a47      	ldr	r2, [pc, #284]	; (8006418 <HAL_DMA_Init+0x694>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a45      	ldr	r2, [pc, #276]	; (800641c <HAL_DMA_Init+0x698>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01d      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a44      	ldr	r2, [pc, #272]	; (8006420 <HAL_DMA_Init+0x69c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a42      	ldr	r2, [pc, #264]	; (8006424 <HAL_DMA_Init+0x6a0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a41      	ldr	r2, [pc, #260]	; (8006428 <HAL_DMA_Init+0x6a4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a3f      	ldr	r2, [pc, #252]	; (800642c <HAL_DMA_Init+0x6a8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a3e      	ldr	r2, [pc, #248]	; (8006430 <HAL_DMA_Init+0x6ac>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_DMA_Init+0x5c2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a3c      	ldr	r2, [pc, #240]	; (8006434 <HAL_DMA_Init+0x6b0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_DMA_Init+0x5c6>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_DMA_Init+0x5c8>
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d032      	beq.n	80063b6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 fbf9 	bl	8008b48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b80      	cmp	r3, #128	; 0x80
 800635c:	d102      	bne.n	8006364 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006378:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d010      	beq.n	80063a4 <HAL_DMA_Init+0x620>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b08      	cmp	r3, #8
 8006388:	d80c      	bhi.n	80063a4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f002 fc76 	bl	8008c7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	e008      	b.n	80063b6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	a7fdabf8 	.word	0xa7fdabf8
 80063d4:	cccccccd 	.word	0xcccccccd
 80063d8:	40020010 	.word	0x40020010
 80063dc:	40020028 	.word	0x40020028
 80063e0:	40020040 	.word	0x40020040
 80063e4:	40020058 	.word	0x40020058
 80063e8:	40020070 	.word	0x40020070
 80063ec:	40020088 	.word	0x40020088
 80063f0:	400200a0 	.word	0x400200a0
 80063f4:	400200b8 	.word	0x400200b8
 80063f8:	40020410 	.word	0x40020410
 80063fc:	40020428 	.word	0x40020428
 8006400:	40020440 	.word	0x40020440
 8006404:	40020458 	.word	0x40020458
 8006408:	40020470 	.word	0x40020470
 800640c:	40020488 	.word	0x40020488
 8006410:	400204a0 	.word	0x400204a0
 8006414:	400204b8 	.word	0x400204b8
 8006418:	58025408 	.word	0x58025408
 800641c:	5802541c 	.word	0x5802541c
 8006420:	58025430 	.word	0x58025430
 8006424:	58025444 	.word	0x58025444
 8006428:	58025458 	.word	0x58025458
 800642c:	5802546c 	.word	0x5802546c
 8006430:	58025480 	.word	0x58025480
 8006434:	58025494 	.word	0x58025494

08006438 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e1a8      	b.n	800679c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a82      	ldr	r2, [pc, #520]	; (8006658 <HAL_DMA_DeInit+0x220>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d04a      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a80      	ldr	r2, [pc, #512]	; (800665c <HAL_DMA_DeInit+0x224>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d045      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a7f      	ldr	r2, [pc, #508]	; (8006660 <HAL_DMA_DeInit+0x228>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d040      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a7d      	ldr	r2, [pc, #500]	; (8006664 <HAL_DMA_DeInit+0x22c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d03b      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a7c      	ldr	r2, [pc, #496]	; (8006668 <HAL_DMA_DeInit+0x230>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d036      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a7a      	ldr	r2, [pc, #488]	; (800666c <HAL_DMA_DeInit+0x234>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d031      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a79      	ldr	r2, [pc, #484]	; (8006670 <HAL_DMA_DeInit+0x238>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d02c      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a77      	ldr	r2, [pc, #476]	; (8006674 <HAL_DMA_DeInit+0x23c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d027      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a76      	ldr	r2, [pc, #472]	; (8006678 <HAL_DMA_DeInit+0x240>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d022      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a74      	ldr	r2, [pc, #464]	; (800667c <HAL_DMA_DeInit+0x244>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01d      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a73      	ldr	r2, [pc, #460]	; (8006680 <HAL_DMA_DeInit+0x248>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d018      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a71      	ldr	r2, [pc, #452]	; (8006684 <HAL_DMA_DeInit+0x24c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a70      	ldr	r2, [pc, #448]	; (8006688 <HAL_DMA_DeInit+0x250>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00e      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a6e      	ldr	r2, [pc, #440]	; (800668c <HAL_DMA_DeInit+0x254>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d009      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a6d      	ldr	r2, [pc, #436]	; (8006690 <HAL_DMA_DeInit+0x258>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d004      	beq.n	80064ea <HAL_DMA_DeInit+0xb2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a6b      	ldr	r2, [pc, #428]	; (8006694 <HAL_DMA_DeInit+0x25c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d108      	bne.n	80064fc <HAL_DMA_DeInit+0xc4>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0201 	bic.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e007      	b.n	800650c <HAL_DMA_DeInit+0xd4>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a51      	ldr	r2, [pc, #324]	; (8006658 <HAL_DMA_DeInit+0x220>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d04a      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a50      	ldr	r2, [pc, #320]	; (800665c <HAL_DMA_DeInit+0x224>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d045      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a4e      	ldr	r2, [pc, #312]	; (8006660 <HAL_DMA_DeInit+0x228>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d040      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4d      	ldr	r2, [pc, #308]	; (8006664 <HAL_DMA_DeInit+0x22c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d03b      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a4b      	ldr	r2, [pc, #300]	; (8006668 <HAL_DMA_DeInit+0x230>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d036      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a4a      	ldr	r2, [pc, #296]	; (800666c <HAL_DMA_DeInit+0x234>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d031      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a48      	ldr	r2, [pc, #288]	; (8006670 <HAL_DMA_DeInit+0x238>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d02c      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a47      	ldr	r2, [pc, #284]	; (8006674 <HAL_DMA_DeInit+0x23c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d027      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a45      	ldr	r2, [pc, #276]	; (8006678 <HAL_DMA_DeInit+0x240>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d022      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a44      	ldr	r2, [pc, #272]	; (800667c <HAL_DMA_DeInit+0x244>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d01d      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a42      	ldr	r2, [pc, #264]	; (8006680 <HAL_DMA_DeInit+0x248>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a41      	ldr	r2, [pc, #260]	; (8006684 <HAL_DMA_DeInit+0x24c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d013      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a3f      	ldr	r2, [pc, #252]	; (8006688 <HAL_DMA_DeInit+0x250>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a3e      	ldr	r2, [pc, #248]	; (800668c <HAL_DMA_DeInit+0x254>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a3c      	ldr	r2, [pc, #240]	; (8006690 <HAL_DMA_DeInit+0x258>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_DMA_DeInit+0x174>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a3b      	ldr	r2, [pc, #236]	; (8006694 <HAL_DMA_DeInit+0x25c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d101      	bne.n	80065b0 <HAL_DMA_DeInit+0x178>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <HAL_DMA_DeInit+0x17a>
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d025      	beq.n	8006602 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2200      	movs	r2, #0
 80065c4:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2200      	movs	r2, #0
 80065cc:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2200      	movs	r2, #0
 80065d4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2221      	movs	r2, #33	; 0x21
 80065e4:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f002 f980 	bl	80088ec <DMA_CalcBaseAndBitshift>
 80065ec:	4603      	mov	r3, r0
 80065ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	223f      	movs	r2, #63	; 0x3f
 80065fa:	409a      	lsls	r2, r3
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	609a      	str	r2, [r3, #8]
 8006600:	e081      	b.n	8006706 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a24      	ldr	r2, [pc, #144]	; (8006698 <HAL_DMA_DeInit+0x260>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <HAL_DMA_DeInit+0x21a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a22      	ldr	r2, [pc, #136]	; (800669c <HAL_DMA_DeInit+0x264>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01d      	beq.n	8006652 <HAL_DMA_DeInit+0x21a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a21      	ldr	r2, [pc, #132]	; (80066a0 <HAL_DMA_DeInit+0x268>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <HAL_DMA_DeInit+0x21a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <HAL_DMA_DeInit+0x26c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_DMA_DeInit+0x21a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <HAL_DMA_DeInit+0x270>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_DMA_DeInit+0x21a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a1c      	ldr	r2, [pc, #112]	; (80066ac <HAL_DMA_DeInit+0x274>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_DMA_DeInit+0x21a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1b      	ldr	r2, [pc, #108]	; (80066b0 <HAL_DMA_DeInit+0x278>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_DMA_DeInit+0x21a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <HAL_DMA_DeInit+0x27c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d132      	bne.n	80066b8 <HAL_DMA_DeInit+0x280>
 8006652:	2301      	movs	r3, #1
 8006654:	e031      	b.n	80066ba <HAL_DMA_DeInit+0x282>
 8006656:	bf00      	nop
 8006658:	40020010 	.word	0x40020010
 800665c:	40020028 	.word	0x40020028
 8006660:	40020040 	.word	0x40020040
 8006664:	40020058 	.word	0x40020058
 8006668:	40020070 	.word	0x40020070
 800666c:	40020088 	.word	0x40020088
 8006670:	400200a0 	.word	0x400200a0
 8006674:	400200b8 	.word	0x400200b8
 8006678:	40020410 	.word	0x40020410
 800667c:	40020428 	.word	0x40020428
 8006680:	40020440 	.word	0x40020440
 8006684:	40020458 	.word	0x40020458
 8006688:	40020470 	.word	0x40020470
 800668c:	40020488 	.word	0x40020488
 8006690:	400204a0 	.word	0x400204a0
 8006694:	400204b8 	.word	0x400204b8
 8006698:	58025408 	.word	0x58025408
 800669c:	5802541c 	.word	0x5802541c
 80066a0:	58025430 	.word	0x58025430
 80066a4:	58025444 	.word	0x58025444
 80066a8:	58025458 	.word	0x58025458
 80066ac:	5802546c 	.word	0x5802546c
 80066b0:	58025480 	.word	0x58025480
 80066b4:	58025494 	.word	0x58025494
 80066b8:	2300      	movs	r3, #0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d021      	beq.n	8006702 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2200      	movs	r2, #0
 80066cc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2200      	movs	r2, #0
 80066dc:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2200      	movs	r2, #0
 80066e4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 f900 	bl	80088ec <DMA_CalcBaseAndBitshift>
 80066ec:	4603      	mov	r3, r0
 80066ee:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2201      	movs	r2, #1
 80066fa:	409a      	lsls	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	605a      	str	r2, [r3, #4]
 8006700:	e001      	b.n	8006706 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e04a      	b.n	800679c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f002 fa1e 	bl	8008b48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006718:	2200      	movs	r2, #0
 800671a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006724:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00f      	beq.n	800674e <HAL_DMA_DeInit+0x316>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b08      	cmp	r3, #8
 8006734:	d80b      	bhi.n	800674e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f002 faa0 	bl	8008c7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800674c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e226      	b.n	8006c0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_DMA_Start_IT+0x2a>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e21f      	b.n	8006c0e <HAL_DMA_Start_IT+0x46a>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	f040 820a 	bne.w	8006bf8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a68      	ldr	r2, [pc, #416]	; (8006998 <HAL_DMA_Start_IT+0x1f4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d04a      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a66      	ldr	r2, [pc, #408]	; (800699c <HAL_DMA_Start_IT+0x1f8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d045      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a65      	ldr	r2, [pc, #404]	; (80069a0 <HAL_DMA_Start_IT+0x1fc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d040      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a63      	ldr	r2, [pc, #396]	; (80069a4 <HAL_DMA_Start_IT+0x200>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d03b      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a62      	ldr	r2, [pc, #392]	; (80069a8 <HAL_DMA_Start_IT+0x204>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d036      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a60      	ldr	r2, [pc, #384]	; (80069ac <HAL_DMA_Start_IT+0x208>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d031      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a5f      	ldr	r2, [pc, #380]	; (80069b0 <HAL_DMA_Start_IT+0x20c>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d02c      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a5d      	ldr	r2, [pc, #372]	; (80069b4 <HAL_DMA_Start_IT+0x210>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d027      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a5c      	ldr	r2, [pc, #368]	; (80069b8 <HAL_DMA_Start_IT+0x214>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d022      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5a      	ldr	r2, [pc, #360]	; (80069bc <HAL_DMA_Start_IT+0x218>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01d      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a59      	ldr	r2, [pc, #356]	; (80069c0 <HAL_DMA_Start_IT+0x21c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d018      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a57      	ldr	r2, [pc, #348]	; (80069c4 <HAL_DMA_Start_IT+0x220>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a56      	ldr	r2, [pc, #344]	; (80069c8 <HAL_DMA_Start_IT+0x224>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00e      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a54      	ldr	r2, [pc, #336]	; (80069cc <HAL_DMA_Start_IT+0x228>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d009      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a53      	ldr	r2, [pc, #332]	; (80069d0 <HAL_DMA_Start_IT+0x22c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_DMA_Start_IT+0xee>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a51      	ldr	r2, [pc, #324]	; (80069d4 <HAL_DMA_Start_IT+0x230>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <HAL_DMA_Start_IT+0x100>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0201 	bic.w	r2, r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e007      	b.n	80068b4 <HAL_DMA_Start_IT+0x110>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0201 	bic.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f001 fe6a 	bl	8008594 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a34      	ldr	r2, [pc, #208]	; (8006998 <HAL_DMA_Start_IT+0x1f4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d04a      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a33      	ldr	r2, [pc, #204]	; (800699c <HAL_DMA_Start_IT+0x1f8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d045      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a31      	ldr	r2, [pc, #196]	; (80069a0 <HAL_DMA_Start_IT+0x1fc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d040      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a30      	ldr	r2, [pc, #192]	; (80069a4 <HAL_DMA_Start_IT+0x200>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d03b      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a2e      	ldr	r2, [pc, #184]	; (80069a8 <HAL_DMA_Start_IT+0x204>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d036      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2d      	ldr	r2, [pc, #180]	; (80069ac <HAL_DMA_Start_IT+0x208>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d031      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a2b      	ldr	r2, [pc, #172]	; (80069b0 <HAL_DMA_Start_IT+0x20c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d02c      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <HAL_DMA_Start_IT+0x210>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d027      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a28      	ldr	r2, [pc, #160]	; (80069b8 <HAL_DMA_Start_IT+0x214>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d022      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a27      	ldr	r2, [pc, #156]	; (80069bc <HAL_DMA_Start_IT+0x218>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d01d      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a25      	ldr	r2, [pc, #148]	; (80069c0 <HAL_DMA_Start_IT+0x21c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d018      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a24      	ldr	r2, [pc, #144]	; (80069c4 <HAL_DMA_Start_IT+0x220>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d013      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <HAL_DMA_Start_IT+0x224>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00e      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a21      	ldr	r2, [pc, #132]	; (80069cc <HAL_DMA_Start_IT+0x228>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d009      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <HAL_DMA_Start_IT+0x22c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <HAL_DMA_Start_IT+0x1bc>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1e      	ldr	r2, [pc, #120]	; (80069d4 <HAL_DMA_Start_IT+0x230>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d101      	bne.n	8006964 <HAL_DMA_Start_IT+0x1c0>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <HAL_DMA_Start_IT+0x1c2>
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d036      	beq.n	80069d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f023 021e 	bic.w	r2, r3, #30
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0216 	orr.w	r2, r2, #22
 800697c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	2b00      	cmp	r3, #0
 8006984:	d03e      	beq.n	8006a04 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0208 	orr.w	r2, r2, #8
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e035      	b.n	8006a04 <HAL_DMA_Start_IT+0x260>
 8006998:	40020010 	.word	0x40020010
 800699c:	40020028 	.word	0x40020028
 80069a0:	40020040 	.word	0x40020040
 80069a4:	40020058 	.word	0x40020058
 80069a8:	40020070 	.word	0x40020070
 80069ac:	40020088 	.word	0x40020088
 80069b0:	400200a0 	.word	0x400200a0
 80069b4:	400200b8 	.word	0x400200b8
 80069b8:	40020410 	.word	0x40020410
 80069bc:	40020428 	.word	0x40020428
 80069c0:	40020440 	.word	0x40020440
 80069c4:	40020458 	.word	0x40020458
 80069c8:	40020470 	.word	0x40020470
 80069cc:	40020488 	.word	0x40020488
 80069d0:	400204a0 	.word	0x400204a0
 80069d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 020e 	bic.w	r2, r3, #14
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 020a 	orr.w	r2, r2, #10
 80069ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0204 	orr.w	r2, r2, #4
 8006a02:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a83      	ldr	r2, [pc, #524]	; (8006c18 <HAL_DMA_Start_IT+0x474>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d072      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a82      	ldr	r2, [pc, #520]	; (8006c1c <HAL_DMA_Start_IT+0x478>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d06d      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a80      	ldr	r2, [pc, #512]	; (8006c20 <HAL_DMA_Start_IT+0x47c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d068      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a7f      	ldr	r2, [pc, #508]	; (8006c24 <HAL_DMA_Start_IT+0x480>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d063      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a7d      	ldr	r2, [pc, #500]	; (8006c28 <HAL_DMA_Start_IT+0x484>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d05e      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a7c      	ldr	r2, [pc, #496]	; (8006c2c <HAL_DMA_Start_IT+0x488>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d059      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a7a      	ldr	r2, [pc, #488]	; (8006c30 <HAL_DMA_Start_IT+0x48c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d054      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a79      	ldr	r2, [pc, #484]	; (8006c34 <HAL_DMA_Start_IT+0x490>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d04f      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a77      	ldr	r2, [pc, #476]	; (8006c38 <HAL_DMA_Start_IT+0x494>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d04a      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a76      	ldr	r2, [pc, #472]	; (8006c3c <HAL_DMA_Start_IT+0x498>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d045      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a74      	ldr	r2, [pc, #464]	; (8006c40 <HAL_DMA_Start_IT+0x49c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d040      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a73      	ldr	r2, [pc, #460]	; (8006c44 <HAL_DMA_Start_IT+0x4a0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d03b      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a71      	ldr	r2, [pc, #452]	; (8006c48 <HAL_DMA_Start_IT+0x4a4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d036      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a70      	ldr	r2, [pc, #448]	; (8006c4c <HAL_DMA_Start_IT+0x4a8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d031      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a6e      	ldr	r2, [pc, #440]	; (8006c50 <HAL_DMA_Start_IT+0x4ac>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d02c      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a6d      	ldr	r2, [pc, #436]	; (8006c54 <HAL_DMA_Start_IT+0x4b0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d027      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a6b      	ldr	r2, [pc, #428]	; (8006c58 <HAL_DMA_Start_IT+0x4b4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d022      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a6a      	ldr	r2, [pc, #424]	; (8006c5c <HAL_DMA_Start_IT+0x4b8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d01d      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a68      	ldr	r2, [pc, #416]	; (8006c60 <HAL_DMA_Start_IT+0x4bc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d018      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a67      	ldr	r2, [pc, #412]	; (8006c64 <HAL_DMA_Start_IT+0x4c0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a65      	ldr	r2, [pc, #404]	; (8006c68 <HAL_DMA_Start_IT+0x4c4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00e      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a64      	ldr	r2, [pc, #400]	; (8006c6c <HAL_DMA_Start_IT+0x4c8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d009      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a62      	ldr	r2, [pc, #392]	; (8006c70 <HAL_DMA_Start_IT+0x4cc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <HAL_DMA_Start_IT+0x350>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a61      	ldr	r2, [pc, #388]	; (8006c74 <HAL_DMA_Start_IT+0x4d0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d101      	bne.n	8006af8 <HAL_DMA_Start_IT+0x354>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <HAL_DMA_Start_IT+0x356>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01a      	beq.n	8006b34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a37      	ldr	r2, [pc, #220]	; (8006c18 <HAL_DMA_Start_IT+0x474>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d04a      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a36      	ldr	r2, [pc, #216]	; (8006c1c <HAL_DMA_Start_IT+0x478>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d045      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a34      	ldr	r2, [pc, #208]	; (8006c20 <HAL_DMA_Start_IT+0x47c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d040      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a33      	ldr	r2, [pc, #204]	; (8006c24 <HAL_DMA_Start_IT+0x480>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d03b      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a31      	ldr	r2, [pc, #196]	; (8006c28 <HAL_DMA_Start_IT+0x484>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d036      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a30      	ldr	r2, [pc, #192]	; (8006c2c <HAL_DMA_Start_IT+0x488>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d031      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2e      	ldr	r2, [pc, #184]	; (8006c30 <HAL_DMA_Start_IT+0x48c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d02c      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a2d      	ldr	r2, [pc, #180]	; (8006c34 <HAL_DMA_Start_IT+0x490>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d027      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a2b      	ldr	r2, [pc, #172]	; (8006c38 <HAL_DMA_Start_IT+0x494>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d022      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a2a      	ldr	r2, [pc, #168]	; (8006c3c <HAL_DMA_Start_IT+0x498>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d01d      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a28      	ldr	r2, [pc, #160]	; (8006c40 <HAL_DMA_Start_IT+0x49c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d018      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a27      	ldr	r2, [pc, #156]	; (8006c44 <HAL_DMA_Start_IT+0x4a0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d013      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <HAL_DMA_Start_IT+0x4a4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d00e      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a24      	ldr	r2, [pc, #144]	; (8006c4c <HAL_DMA_Start_IT+0x4a8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d009      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a22      	ldr	r2, [pc, #136]	; (8006c50 <HAL_DMA_Start_IT+0x4ac>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d004      	beq.n	8006bd4 <HAL_DMA_Start_IT+0x430>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a21      	ldr	r2, [pc, #132]	; (8006c54 <HAL_DMA_Start_IT+0x4b0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d108      	bne.n	8006be6 <HAL_DMA_Start_IT+0x442>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0201 	orr.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	e012      	b.n	8006c0c <HAL_DMA_Start_IT+0x468>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0201 	orr.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	e009      	b.n	8006c0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40020010 	.word	0x40020010
 8006c1c:	40020028 	.word	0x40020028
 8006c20:	40020040 	.word	0x40020040
 8006c24:	40020058 	.word	0x40020058
 8006c28:	40020070 	.word	0x40020070
 8006c2c:	40020088 	.word	0x40020088
 8006c30:	400200a0 	.word	0x400200a0
 8006c34:	400200b8 	.word	0x400200b8
 8006c38:	40020410 	.word	0x40020410
 8006c3c:	40020428 	.word	0x40020428
 8006c40:	40020440 	.word	0x40020440
 8006c44:	40020458 	.word	0x40020458
 8006c48:	40020470 	.word	0x40020470
 8006c4c:	40020488 	.word	0x40020488
 8006c50:	400204a0 	.word	0x400204a0
 8006c54:	400204b8 	.word	0x400204b8
 8006c58:	58025408 	.word	0x58025408
 8006c5c:	5802541c 	.word	0x5802541c
 8006c60:	58025430 	.word	0x58025430
 8006c64:	58025444 	.word	0x58025444
 8006c68:	58025458 	.word	0x58025458
 8006c6c:	5802546c 	.word	0x5802546c
 8006c70:	58025480 	.word	0x58025480
 8006c74:	58025494 	.word	0x58025494

08006c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c80:	f7fe ff0e 	bl	8005aa0 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e2dc      	b.n	800724a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d008      	beq.n	8006cae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2280      	movs	r2, #128	; 0x80
 8006ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e2cd      	b.n	800724a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a76      	ldr	r2, [pc, #472]	; (8006e8c <HAL_DMA_Abort+0x214>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d04a      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a74      	ldr	r2, [pc, #464]	; (8006e90 <HAL_DMA_Abort+0x218>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d045      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a73      	ldr	r2, [pc, #460]	; (8006e94 <HAL_DMA_Abort+0x21c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d040      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a71      	ldr	r2, [pc, #452]	; (8006e98 <HAL_DMA_Abort+0x220>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d03b      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a70      	ldr	r2, [pc, #448]	; (8006e9c <HAL_DMA_Abort+0x224>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d036      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6e      	ldr	r2, [pc, #440]	; (8006ea0 <HAL_DMA_Abort+0x228>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d031      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6d      	ldr	r2, [pc, #436]	; (8006ea4 <HAL_DMA_Abort+0x22c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d02c      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6b      	ldr	r2, [pc, #428]	; (8006ea8 <HAL_DMA_Abort+0x230>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d027      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a6a      	ldr	r2, [pc, #424]	; (8006eac <HAL_DMA_Abort+0x234>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a68      	ldr	r2, [pc, #416]	; (8006eb0 <HAL_DMA_Abort+0x238>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a67      	ldr	r2, [pc, #412]	; (8006eb4 <HAL_DMA_Abort+0x23c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a65      	ldr	r2, [pc, #404]	; (8006eb8 <HAL_DMA_Abort+0x240>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a64      	ldr	r2, [pc, #400]	; (8006ebc <HAL_DMA_Abort+0x244>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a62      	ldr	r2, [pc, #392]	; (8006ec0 <HAL_DMA_Abort+0x248>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a61      	ldr	r2, [pc, #388]	; (8006ec4 <HAL_DMA_Abort+0x24c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_DMA_Abort+0xd6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5f      	ldr	r2, [pc, #380]	; (8006ec8 <HAL_DMA_Abort+0x250>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <HAL_DMA_Abort+0xda>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <HAL_DMA_Abort+0xdc>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d013      	beq.n	8006d80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 021e 	bic.w	r2, r2, #30
 8006d66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e00a      	b.n	8006d96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 020e 	bic.w	r2, r2, #14
 8006d8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3c      	ldr	r2, [pc, #240]	; (8006e8c <HAL_DMA_Abort+0x214>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d072      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a3a      	ldr	r2, [pc, #232]	; (8006e90 <HAL_DMA_Abort+0x218>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d06d      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a39      	ldr	r2, [pc, #228]	; (8006e94 <HAL_DMA_Abort+0x21c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d068      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a37      	ldr	r2, [pc, #220]	; (8006e98 <HAL_DMA_Abort+0x220>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d063      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a36      	ldr	r2, [pc, #216]	; (8006e9c <HAL_DMA_Abort+0x224>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d05e      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a34      	ldr	r2, [pc, #208]	; (8006ea0 <HAL_DMA_Abort+0x228>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d059      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a33      	ldr	r2, [pc, #204]	; (8006ea4 <HAL_DMA_Abort+0x22c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d054      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a31      	ldr	r2, [pc, #196]	; (8006ea8 <HAL_DMA_Abort+0x230>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d04f      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a30      	ldr	r2, [pc, #192]	; (8006eac <HAL_DMA_Abort+0x234>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d04a      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a2e      	ldr	r2, [pc, #184]	; (8006eb0 <HAL_DMA_Abort+0x238>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d045      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a2d      	ldr	r2, [pc, #180]	; (8006eb4 <HAL_DMA_Abort+0x23c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d040      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <HAL_DMA_Abort+0x240>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d03b      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2a      	ldr	r2, [pc, #168]	; (8006ebc <HAL_DMA_Abort+0x244>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d036      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a28      	ldr	r2, [pc, #160]	; (8006ec0 <HAL_DMA_Abort+0x248>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d031      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a27      	ldr	r2, [pc, #156]	; (8006ec4 <HAL_DMA_Abort+0x24c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d02c      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a25      	ldr	r2, [pc, #148]	; (8006ec8 <HAL_DMA_Abort+0x250>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d027      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a24      	ldr	r2, [pc, #144]	; (8006ecc <HAL_DMA_Abort+0x254>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d022      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <HAL_DMA_Abort+0x258>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01d      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a21      	ldr	r2, [pc, #132]	; (8006ed4 <HAL_DMA_Abort+0x25c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d018      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1f      	ldr	r2, [pc, #124]	; (8006ed8 <HAL_DMA_Abort+0x260>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1e      	ldr	r2, [pc, #120]	; (8006edc <HAL_DMA_Abort+0x264>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <HAL_DMA_Abort+0x268>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1b      	ldr	r2, [pc, #108]	; (8006ee4 <HAL_DMA_Abort+0x26c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_DMA_Abort+0x20e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a19      	ldr	r2, [pc, #100]	; (8006ee8 <HAL_DMA_Abort+0x270>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d132      	bne.n	8006eec <HAL_DMA_Abort+0x274>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e031      	b.n	8006eee <HAL_DMA_Abort+0x276>
 8006e8a:	bf00      	nop
 8006e8c:	40020010 	.word	0x40020010
 8006e90:	40020028 	.word	0x40020028
 8006e94:	40020040 	.word	0x40020040
 8006e98:	40020058 	.word	0x40020058
 8006e9c:	40020070 	.word	0x40020070
 8006ea0:	40020088 	.word	0x40020088
 8006ea4:	400200a0 	.word	0x400200a0
 8006ea8:	400200b8 	.word	0x400200b8
 8006eac:	40020410 	.word	0x40020410
 8006eb0:	40020428 	.word	0x40020428
 8006eb4:	40020440 	.word	0x40020440
 8006eb8:	40020458 	.word	0x40020458
 8006ebc:	40020470 	.word	0x40020470
 8006ec0:	40020488 	.word	0x40020488
 8006ec4:	400204a0 	.word	0x400204a0
 8006ec8:	400204b8 	.word	0x400204b8
 8006ecc:	58025408 	.word	0x58025408
 8006ed0:	5802541c 	.word	0x5802541c
 8006ed4:	58025430 	.word	0x58025430
 8006ed8:	58025444 	.word	0x58025444
 8006edc:	58025458 	.word	0x58025458
 8006ee0:	5802546c 	.word	0x5802546c
 8006ee4:	58025480 	.word	0x58025480
 8006ee8:	58025494 	.word	0x58025494
 8006eec:	2300      	movs	r3, #0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a6d      	ldr	r2, [pc, #436]	; (80070bc <HAL_DMA_Abort+0x444>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d04a      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a6b      	ldr	r2, [pc, #428]	; (80070c0 <HAL_DMA_Abort+0x448>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a6a      	ldr	r2, [pc, #424]	; (80070c4 <HAL_DMA_Abort+0x44c>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d040      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a68      	ldr	r2, [pc, #416]	; (80070c8 <HAL_DMA_Abort+0x450>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d03b      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a67      	ldr	r2, [pc, #412]	; (80070cc <HAL_DMA_Abort+0x454>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d036      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a65      	ldr	r2, [pc, #404]	; (80070d0 <HAL_DMA_Abort+0x458>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d031      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a64      	ldr	r2, [pc, #400]	; (80070d4 <HAL_DMA_Abort+0x45c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d02c      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a62      	ldr	r2, [pc, #392]	; (80070d8 <HAL_DMA_Abort+0x460>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d027      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a61      	ldr	r2, [pc, #388]	; (80070dc <HAL_DMA_Abort+0x464>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d022      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a5f      	ldr	r2, [pc, #380]	; (80070e0 <HAL_DMA_Abort+0x468>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01d      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a5e      	ldr	r2, [pc, #376]	; (80070e4 <HAL_DMA_Abort+0x46c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a5c      	ldr	r2, [pc, #368]	; (80070e8 <HAL_DMA_Abort+0x470>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d013      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a5b      	ldr	r2, [pc, #364]	; (80070ec <HAL_DMA_Abort+0x474>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00e      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a59      	ldr	r2, [pc, #356]	; (80070f0 <HAL_DMA_Abort+0x478>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a58      	ldr	r2, [pc, #352]	; (80070f4 <HAL_DMA_Abort+0x47c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_DMA_Abort+0x32a>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a56      	ldr	r2, [pc, #344]	; (80070f8 <HAL_DMA_Abort+0x480>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d108      	bne.n	8006fb4 <HAL_DMA_Abort+0x33c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0201 	bic.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	e007      	b.n	8006fc4 <HAL_DMA_Abort+0x34c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fc4:	e013      	b.n	8006fee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fc6:	f7fe fd6b 	bl	8005aa0 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b05      	cmp	r3, #5
 8006fd2:	d90c      	bls.n	8006fee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2203      	movs	r2, #3
 8006fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e12d      	b.n	800724a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e5      	bne.n	8006fc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a2f      	ldr	r2, [pc, #188]	; (80070bc <HAL_DMA_Abort+0x444>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d04a      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a2d      	ldr	r2, [pc, #180]	; (80070c0 <HAL_DMA_Abort+0x448>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d045      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2c      	ldr	r2, [pc, #176]	; (80070c4 <HAL_DMA_Abort+0x44c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d040      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a2a      	ldr	r2, [pc, #168]	; (80070c8 <HAL_DMA_Abort+0x450>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d03b      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a29      	ldr	r2, [pc, #164]	; (80070cc <HAL_DMA_Abort+0x454>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d036      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a27      	ldr	r2, [pc, #156]	; (80070d0 <HAL_DMA_Abort+0x458>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d031      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a26      	ldr	r2, [pc, #152]	; (80070d4 <HAL_DMA_Abort+0x45c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d02c      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a24      	ldr	r2, [pc, #144]	; (80070d8 <HAL_DMA_Abort+0x460>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d027      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a23      	ldr	r2, [pc, #140]	; (80070dc <HAL_DMA_Abort+0x464>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d022      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a21      	ldr	r2, [pc, #132]	; (80070e0 <HAL_DMA_Abort+0x468>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01d      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a20      	ldr	r2, [pc, #128]	; (80070e4 <HAL_DMA_Abort+0x46c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d018      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1e      	ldr	r2, [pc, #120]	; (80070e8 <HAL_DMA_Abort+0x470>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1d      	ldr	r2, [pc, #116]	; (80070ec <HAL_DMA_Abort+0x474>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <HAL_DMA_Abort+0x422>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a1b      	ldr	r2, [pc, #108]	; (80070f0 <HAL_DMA_Abort+0x478>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1a      	ldr	r2, [pc, #104]	; (80070f4 <HAL_DMA_Abort+0x47c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_DMA_Abort+0x422>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <HAL_DMA_Abort+0x480>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d101      	bne.n	800709e <HAL_DMA_Abort+0x426>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <HAL_DMA_Abort+0x428>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d02b      	beq.n	80070fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	223f      	movs	r2, #63	; 0x3f
 80070b4:	409a      	lsls	r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	609a      	str	r2, [r3, #8]
 80070ba:	e02a      	b.n	8007112 <HAL_DMA_Abort+0x49a>
 80070bc:	40020010 	.word	0x40020010
 80070c0:	40020028 	.word	0x40020028
 80070c4:	40020040 	.word	0x40020040
 80070c8:	40020058 	.word	0x40020058
 80070cc:	40020070 	.word	0x40020070
 80070d0:	40020088 	.word	0x40020088
 80070d4:	400200a0 	.word	0x400200a0
 80070d8:	400200b8 	.word	0x400200b8
 80070dc:	40020410 	.word	0x40020410
 80070e0:	40020428 	.word	0x40020428
 80070e4:	40020440 	.word	0x40020440
 80070e8:	40020458 	.word	0x40020458
 80070ec:	40020470 	.word	0x40020470
 80070f0:	40020488 	.word	0x40020488
 80070f4:	400204a0 	.word	0x400204a0
 80070f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007100:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2201      	movs	r2, #1
 800710c:	409a      	lsls	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a4f      	ldr	r2, [pc, #316]	; (8007254 <HAL_DMA_Abort+0x5dc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d072      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a4d      	ldr	r2, [pc, #308]	; (8007258 <HAL_DMA_Abort+0x5e0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d06d      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a4c      	ldr	r2, [pc, #304]	; (800725c <HAL_DMA_Abort+0x5e4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d068      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a4a      	ldr	r2, [pc, #296]	; (8007260 <HAL_DMA_Abort+0x5e8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d063      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a49      	ldr	r2, [pc, #292]	; (8007264 <HAL_DMA_Abort+0x5ec>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d05e      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a47      	ldr	r2, [pc, #284]	; (8007268 <HAL_DMA_Abort+0x5f0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d059      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a46      	ldr	r2, [pc, #280]	; (800726c <HAL_DMA_Abort+0x5f4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d054      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a44      	ldr	r2, [pc, #272]	; (8007270 <HAL_DMA_Abort+0x5f8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d04f      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a43      	ldr	r2, [pc, #268]	; (8007274 <HAL_DMA_Abort+0x5fc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d04a      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a41      	ldr	r2, [pc, #260]	; (8007278 <HAL_DMA_Abort+0x600>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d045      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a40      	ldr	r2, [pc, #256]	; (800727c <HAL_DMA_Abort+0x604>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d040      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a3e      	ldr	r2, [pc, #248]	; (8007280 <HAL_DMA_Abort+0x608>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d03b      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a3d      	ldr	r2, [pc, #244]	; (8007284 <HAL_DMA_Abort+0x60c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d036      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a3b      	ldr	r2, [pc, #236]	; (8007288 <HAL_DMA_Abort+0x610>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d031      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a3a      	ldr	r2, [pc, #232]	; (800728c <HAL_DMA_Abort+0x614>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d02c      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a38      	ldr	r2, [pc, #224]	; (8007290 <HAL_DMA_Abort+0x618>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d027      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a37      	ldr	r2, [pc, #220]	; (8007294 <HAL_DMA_Abort+0x61c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d022      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a35      	ldr	r2, [pc, #212]	; (8007298 <HAL_DMA_Abort+0x620>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d01d      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a34      	ldr	r2, [pc, #208]	; (800729c <HAL_DMA_Abort+0x624>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a32      	ldr	r2, [pc, #200]	; (80072a0 <HAL_DMA_Abort+0x628>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a31      	ldr	r2, [pc, #196]	; (80072a4 <HAL_DMA_Abort+0x62c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00e      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2f      	ldr	r2, [pc, #188]	; (80072a8 <HAL_DMA_Abort+0x630>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2e      	ldr	r2, [pc, #184]	; (80072ac <HAL_DMA_Abort+0x634>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_DMA_Abort+0x58a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <HAL_DMA_Abort+0x638>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d101      	bne.n	8007206 <HAL_DMA_Abort+0x58e>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <HAL_DMA_Abort+0x590>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d015      	beq.n	8007238 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007214:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00c      	beq.n	8007238 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800722c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007236:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40020010 	.word	0x40020010
 8007258:	40020028 	.word	0x40020028
 800725c:	40020040 	.word	0x40020040
 8007260:	40020058 	.word	0x40020058
 8007264:	40020070 	.word	0x40020070
 8007268:	40020088 	.word	0x40020088
 800726c:	400200a0 	.word	0x400200a0
 8007270:	400200b8 	.word	0x400200b8
 8007274:	40020410 	.word	0x40020410
 8007278:	40020428 	.word	0x40020428
 800727c:	40020440 	.word	0x40020440
 8007280:	40020458 	.word	0x40020458
 8007284:	40020470 	.word	0x40020470
 8007288:	40020488 	.word	0x40020488
 800728c:	400204a0 	.word	0x400204a0
 8007290:	400204b8 	.word	0x400204b8
 8007294:	58025408 	.word	0x58025408
 8007298:	5802541c 	.word	0x5802541c
 800729c:	58025430 	.word	0x58025430
 80072a0:	58025444 	.word	0x58025444
 80072a4:	58025458 	.word	0x58025458
 80072a8:	5802546c 	.word	0x5802546c
 80072ac:	58025480 	.word	0x58025480
 80072b0:	58025494 	.word	0x58025494

080072b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e237      	b.n	8007736 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d004      	beq.n	80072dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2280      	movs	r2, #128	; 0x80
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e22c      	b.n	8007736 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a5c      	ldr	r2, [pc, #368]	; (8007454 <HAL_DMA_Abort_IT+0x1a0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d04a      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a5b      	ldr	r2, [pc, #364]	; (8007458 <HAL_DMA_Abort_IT+0x1a4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d045      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a59      	ldr	r2, [pc, #356]	; (800745c <HAL_DMA_Abort_IT+0x1a8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d040      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a58      	ldr	r2, [pc, #352]	; (8007460 <HAL_DMA_Abort_IT+0x1ac>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d03b      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a56      	ldr	r2, [pc, #344]	; (8007464 <HAL_DMA_Abort_IT+0x1b0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d036      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a55      	ldr	r2, [pc, #340]	; (8007468 <HAL_DMA_Abort_IT+0x1b4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d031      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a53      	ldr	r2, [pc, #332]	; (800746c <HAL_DMA_Abort_IT+0x1b8>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d02c      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a52      	ldr	r2, [pc, #328]	; (8007470 <HAL_DMA_Abort_IT+0x1bc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d027      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a50      	ldr	r2, [pc, #320]	; (8007474 <HAL_DMA_Abort_IT+0x1c0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d022      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a4f      	ldr	r2, [pc, #316]	; (8007478 <HAL_DMA_Abort_IT+0x1c4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d01d      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a4d      	ldr	r2, [pc, #308]	; (800747c <HAL_DMA_Abort_IT+0x1c8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a4c      	ldr	r2, [pc, #304]	; (8007480 <HAL_DMA_Abort_IT+0x1cc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a4a      	ldr	r2, [pc, #296]	; (8007484 <HAL_DMA_Abort_IT+0x1d0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a49      	ldr	r2, [pc, #292]	; (8007488 <HAL_DMA_Abort_IT+0x1d4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a47      	ldr	r2, [pc, #284]	; (800748c <HAL_DMA_Abort_IT+0x1d8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_DMA_Abort_IT+0xc8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a46      	ldr	r2, [pc, #280]	; (8007490 <HAL_DMA_Abort_IT+0x1dc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d101      	bne.n	8007380 <HAL_DMA_Abort_IT+0xcc>
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <HAL_DMA_Abort_IT+0xce>
 8007380:	2300      	movs	r3, #0
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8086 	beq.w	8007494 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2204      	movs	r2, #4
 800738c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2f      	ldr	r2, [pc, #188]	; (8007454 <HAL_DMA_Abort_IT+0x1a0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d04a      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2e      	ldr	r2, [pc, #184]	; (8007458 <HAL_DMA_Abort_IT+0x1a4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d045      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a2c      	ldr	r2, [pc, #176]	; (800745c <HAL_DMA_Abort_IT+0x1a8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d040      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a2b      	ldr	r2, [pc, #172]	; (8007460 <HAL_DMA_Abort_IT+0x1ac>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d03b      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a29      	ldr	r2, [pc, #164]	; (8007464 <HAL_DMA_Abort_IT+0x1b0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d036      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a28      	ldr	r2, [pc, #160]	; (8007468 <HAL_DMA_Abort_IT+0x1b4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d031      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a26      	ldr	r2, [pc, #152]	; (800746c <HAL_DMA_Abort_IT+0x1b8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d02c      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a25      	ldr	r2, [pc, #148]	; (8007470 <HAL_DMA_Abort_IT+0x1bc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d027      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a23      	ldr	r2, [pc, #140]	; (8007474 <HAL_DMA_Abort_IT+0x1c0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d022      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a22      	ldr	r2, [pc, #136]	; (8007478 <HAL_DMA_Abort_IT+0x1c4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d01d      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a20      	ldr	r2, [pc, #128]	; (800747c <HAL_DMA_Abort_IT+0x1c8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d018      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <HAL_DMA_Abort_IT+0x1cc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d013      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <HAL_DMA_Abort_IT+0x1d0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d00e      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <HAL_DMA_Abort_IT+0x1d4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d009      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1a      	ldr	r2, [pc, #104]	; (800748c <HAL_DMA_Abort_IT+0x1d8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d004      	beq.n	8007430 <HAL_DMA_Abort_IT+0x17c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a19      	ldr	r2, [pc, #100]	; (8007490 <HAL_DMA_Abort_IT+0x1dc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d108      	bne.n	8007442 <HAL_DMA_Abort_IT+0x18e>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	e178      	b.n	8007734 <HAL_DMA_Abort_IT+0x480>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 0201 	bic.w	r2, r2, #1
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e16f      	b.n	8007734 <HAL_DMA_Abort_IT+0x480>
 8007454:	40020010 	.word	0x40020010
 8007458:	40020028 	.word	0x40020028
 800745c:	40020040 	.word	0x40020040
 8007460:	40020058 	.word	0x40020058
 8007464:	40020070 	.word	0x40020070
 8007468:	40020088 	.word	0x40020088
 800746c:	400200a0 	.word	0x400200a0
 8007470:	400200b8 	.word	0x400200b8
 8007474:	40020410 	.word	0x40020410
 8007478:	40020428 	.word	0x40020428
 800747c:	40020440 	.word	0x40020440
 8007480:	40020458 	.word	0x40020458
 8007484:	40020470 	.word	0x40020470
 8007488:	40020488 	.word	0x40020488
 800748c:	400204a0 	.word	0x400204a0
 8007490:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 020e 	bic.w	r2, r2, #14
 80074a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a6c      	ldr	r2, [pc, #432]	; (800765c <HAL_DMA_Abort_IT+0x3a8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d04a      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a6b      	ldr	r2, [pc, #428]	; (8007660 <HAL_DMA_Abort_IT+0x3ac>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d045      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a69      	ldr	r2, [pc, #420]	; (8007664 <HAL_DMA_Abort_IT+0x3b0>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d040      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a68      	ldr	r2, [pc, #416]	; (8007668 <HAL_DMA_Abort_IT+0x3b4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d03b      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a66      	ldr	r2, [pc, #408]	; (800766c <HAL_DMA_Abort_IT+0x3b8>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d036      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a65      	ldr	r2, [pc, #404]	; (8007670 <HAL_DMA_Abort_IT+0x3bc>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d031      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a63      	ldr	r2, [pc, #396]	; (8007674 <HAL_DMA_Abort_IT+0x3c0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d02c      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a62      	ldr	r2, [pc, #392]	; (8007678 <HAL_DMA_Abort_IT+0x3c4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d027      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a60      	ldr	r2, [pc, #384]	; (800767c <HAL_DMA_Abort_IT+0x3c8>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d022      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a5f      	ldr	r2, [pc, #380]	; (8007680 <HAL_DMA_Abort_IT+0x3cc>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d01d      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a5d      	ldr	r2, [pc, #372]	; (8007684 <HAL_DMA_Abort_IT+0x3d0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d018      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a5c      	ldr	r2, [pc, #368]	; (8007688 <HAL_DMA_Abort_IT+0x3d4>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d013      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a5a      	ldr	r2, [pc, #360]	; (800768c <HAL_DMA_Abort_IT+0x3d8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00e      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a59      	ldr	r2, [pc, #356]	; (8007690 <HAL_DMA_Abort_IT+0x3dc>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d009      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a57      	ldr	r2, [pc, #348]	; (8007694 <HAL_DMA_Abort_IT+0x3e0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d004      	beq.n	8007544 <HAL_DMA_Abort_IT+0x290>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a56      	ldr	r2, [pc, #344]	; (8007698 <HAL_DMA_Abort_IT+0x3e4>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d108      	bne.n	8007556 <HAL_DMA_Abort_IT+0x2a2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0201 	bic.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e007      	b.n	8007566 <HAL_DMA_Abort_IT+0x2b2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0201 	bic.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a3c      	ldr	r2, [pc, #240]	; (800765c <HAL_DMA_Abort_IT+0x3a8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d072      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a3a      	ldr	r2, [pc, #232]	; (8007660 <HAL_DMA_Abort_IT+0x3ac>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d06d      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a39      	ldr	r2, [pc, #228]	; (8007664 <HAL_DMA_Abort_IT+0x3b0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d068      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a37      	ldr	r2, [pc, #220]	; (8007668 <HAL_DMA_Abort_IT+0x3b4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d063      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a36      	ldr	r2, [pc, #216]	; (800766c <HAL_DMA_Abort_IT+0x3b8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d05e      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a34      	ldr	r2, [pc, #208]	; (8007670 <HAL_DMA_Abort_IT+0x3bc>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d059      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a33      	ldr	r2, [pc, #204]	; (8007674 <HAL_DMA_Abort_IT+0x3c0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d054      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a31      	ldr	r2, [pc, #196]	; (8007678 <HAL_DMA_Abort_IT+0x3c4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d04f      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a30      	ldr	r2, [pc, #192]	; (800767c <HAL_DMA_Abort_IT+0x3c8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d04a      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a2e      	ldr	r2, [pc, #184]	; (8007680 <HAL_DMA_Abort_IT+0x3cc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d045      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a2d      	ldr	r2, [pc, #180]	; (8007684 <HAL_DMA_Abort_IT+0x3d0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d040      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a2b      	ldr	r2, [pc, #172]	; (8007688 <HAL_DMA_Abort_IT+0x3d4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d03b      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a2a      	ldr	r2, [pc, #168]	; (800768c <HAL_DMA_Abort_IT+0x3d8>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d036      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a28      	ldr	r2, [pc, #160]	; (8007690 <HAL_DMA_Abort_IT+0x3dc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d031      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a27      	ldr	r2, [pc, #156]	; (8007694 <HAL_DMA_Abort_IT+0x3e0>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d02c      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a25      	ldr	r2, [pc, #148]	; (8007698 <HAL_DMA_Abort_IT+0x3e4>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d027      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a24      	ldr	r2, [pc, #144]	; (800769c <HAL_DMA_Abort_IT+0x3e8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d022      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <HAL_DMA_Abort_IT+0x3ec>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d01d      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a21      	ldr	r2, [pc, #132]	; (80076a4 <HAL_DMA_Abort_IT+0x3f0>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d018      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1f      	ldr	r2, [pc, #124]	; (80076a8 <HAL_DMA_Abort_IT+0x3f4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d013      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <HAL_DMA_Abort_IT+0x3f8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00e      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a1c      	ldr	r2, [pc, #112]	; (80076b0 <HAL_DMA_Abort_IT+0x3fc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d009      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <HAL_DMA_Abort_IT+0x400>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d004      	beq.n	8007656 <HAL_DMA_Abort_IT+0x3a2>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <HAL_DMA_Abort_IT+0x404>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d132      	bne.n	80076bc <HAL_DMA_Abort_IT+0x408>
 8007656:	2301      	movs	r3, #1
 8007658:	e031      	b.n	80076be <HAL_DMA_Abort_IT+0x40a>
 800765a:	bf00      	nop
 800765c:	40020010 	.word	0x40020010
 8007660:	40020028 	.word	0x40020028
 8007664:	40020040 	.word	0x40020040
 8007668:	40020058 	.word	0x40020058
 800766c:	40020070 	.word	0x40020070
 8007670:	40020088 	.word	0x40020088
 8007674:	400200a0 	.word	0x400200a0
 8007678:	400200b8 	.word	0x400200b8
 800767c:	40020410 	.word	0x40020410
 8007680:	40020428 	.word	0x40020428
 8007684:	40020440 	.word	0x40020440
 8007688:	40020458 	.word	0x40020458
 800768c:	40020470 	.word	0x40020470
 8007690:	40020488 	.word	0x40020488
 8007694:	400204a0 	.word	0x400204a0
 8007698:	400204b8 	.word	0x400204b8
 800769c:	58025408 	.word	0x58025408
 80076a0:	5802541c 	.word	0x5802541c
 80076a4:	58025430 	.word	0x58025430
 80076a8:	58025444 	.word	0x58025444
 80076ac:	58025458 	.word	0x58025458
 80076b0:	5802546c 	.word	0x5802546c
 80076b4:	58025480 	.word	0x58025480
 80076b8:	58025494 	.word	0x58025494
 80076bc:	2300      	movs	r3, #0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d028      	beq.n	8007714 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076dc:	f003 031f 	and.w	r3, r3, #31
 80076e0:	2201      	movs	r2, #1
 80076e2:	409a      	lsls	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00c      	beq.n	8007714 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007708:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007712:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop

08007740 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	; 0x28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800774c:	4b67      	ldr	r3, [pc, #412]	; (80078ec <HAL_DMA_IRQHandler+0x1ac>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a67      	ldr	r2, [pc, #412]	; (80078f0 <HAL_DMA_IRQHandler+0x1b0>)
 8007752:	fba2 2303 	umull	r2, r3, r2, r3
 8007756:	0a9b      	lsrs	r3, r3, #10
 8007758:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007764:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a5f      	ldr	r2, [pc, #380]	; (80078f4 <HAL_DMA_IRQHandler+0x1b4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d04a      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a5d      	ldr	r2, [pc, #372]	; (80078f8 <HAL_DMA_IRQHandler+0x1b8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d045      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a5c      	ldr	r2, [pc, #368]	; (80078fc <HAL_DMA_IRQHandler+0x1bc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d040      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a5a      	ldr	r2, [pc, #360]	; (8007900 <HAL_DMA_IRQHandler+0x1c0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d03b      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a59      	ldr	r2, [pc, #356]	; (8007904 <HAL_DMA_IRQHandler+0x1c4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d036      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a57      	ldr	r2, [pc, #348]	; (8007908 <HAL_DMA_IRQHandler+0x1c8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d031      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a56      	ldr	r2, [pc, #344]	; (800790c <HAL_DMA_IRQHandler+0x1cc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d02c      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a54      	ldr	r2, [pc, #336]	; (8007910 <HAL_DMA_IRQHandler+0x1d0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d027      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a53      	ldr	r2, [pc, #332]	; (8007914 <HAL_DMA_IRQHandler+0x1d4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d022      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a51      	ldr	r2, [pc, #324]	; (8007918 <HAL_DMA_IRQHandler+0x1d8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d01d      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a50      	ldr	r2, [pc, #320]	; (800791c <HAL_DMA_IRQHandler+0x1dc>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d018      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a4e      	ldr	r2, [pc, #312]	; (8007920 <HAL_DMA_IRQHandler+0x1e0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a4d      	ldr	r2, [pc, #308]	; (8007924 <HAL_DMA_IRQHandler+0x1e4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00e      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a4b      	ldr	r2, [pc, #300]	; (8007928 <HAL_DMA_IRQHandler+0x1e8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d009      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a4a      	ldr	r2, [pc, #296]	; (800792c <HAL_DMA_IRQHandler+0x1ec>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d004      	beq.n	8007812 <HAL_DMA_IRQHandler+0xd2>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a48      	ldr	r2, [pc, #288]	; (8007930 <HAL_DMA_IRQHandler+0x1f0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d101      	bne.n	8007816 <HAL_DMA_IRQHandler+0xd6>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <HAL_DMA_IRQHandler+0xd8>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 842b 	beq.w	8008074 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2208      	movs	r2, #8
 8007828:	409a      	lsls	r2, r3
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	4013      	ands	r3, r2
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80a2 	beq.w	8007978 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2e      	ldr	r2, [pc, #184]	; (80078f4 <HAL_DMA_IRQHandler+0x1b4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d04a      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <HAL_DMA_IRQHandler+0x1b8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d045      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a2b      	ldr	r2, [pc, #172]	; (80078fc <HAL_DMA_IRQHandler+0x1bc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d040      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a2a      	ldr	r2, [pc, #168]	; (8007900 <HAL_DMA_IRQHandler+0x1c0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d03b      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a28      	ldr	r2, [pc, #160]	; (8007904 <HAL_DMA_IRQHandler+0x1c4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d036      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a27      	ldr	r2, [pc, #156]	; (8007908 <HAL_DMA_IRQHandler+0x1c8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d031      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a25      	ldr	r2, [pc, #148]	; (800790c <HAL_DMA_IRQHandler+0x1cc>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d02c      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a24      	ldr	r2, [pc, #144]	; (8007910 <HAL_DMA_IRQHandler+0x1d0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d027      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a22      	ldr	r2, [pc, #136]	; (8007914 <HAL_DMA_IRQHandler+0x1d4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d022      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a21      	ldr	r2, [pc, #132]	; (8007918 <HAL_DMA_IRQHandler+0x1d8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d01d      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1f      	ldr	r2, [pc, #124]	; (800791c <HAL_DMA_IRQHandler+0x1dc>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d018      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <HAL_DMA_IRQHandler+0x1e0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d013      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1c      	ldr	r2, [pc, #112]	; (8007924 <HAL_DMA_IRQHandler+0x1e4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00e      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1b      	ldr	r2, [pc, #108]	; (8007928 <HAL_DMA_IRQHandler+0x1e8>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a19      	ldr	r2, [pc, #100]	; (800792c <HAL_DMA_IRQHandler+0x1ec>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_DMA_IRQHandler+0x194>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a18      	ldr	r2, [pc, #96]	; (8007930 <HAL_DMA_IRQHandler+0x1f0>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d12f      	bne.n	8007934 <HAL_DMA_IRQHandler+0x1f4>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bf14      	ite	ne
 80078e2:	2301      	movne	r3, #1
 80078e4:	2300      	moveq	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	e02e      	b.n	8007948 <HAL_DMA_IRQHandler+0x208>
 80078ea:	bf00      	nop
 80078ec:	24000050 	.word	0x24000050
 80078f0:	1b4e81b5 	.word	0x1b4e81b5
 80078f4:	40020010 	.word	0x40020010
 80078f8:	40020028 	.word	0x40020028
 80078fc:	40020040 	.word	0x40020040
 8007900:	40020058 	.word	0x40020058
 8007904:	40020070 	.word	0x40020070
 8007908:	40020088 	.word	0x40020088
 800790c:	400200a0 	.word	0x400200a0
 8007910:	400200b8 	.word	0x400200b8
 8007914:	40020410 	.word	0x40020410
 8007918:	40020428 	.word	0x40020428
 800791c:	40020440 	.word	0x40020440
 8007920:	40020458 	.word	0x40020458
 8007924:	40020470 	.word	0x40020470
 8007928:	40020488 	.word	0x40020488
 800792c:	400204a0 	.word	0x400204a0
 8007930:	400204b8 	.word	0x400204b8
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	bf14      	ite	ne
 8007942:	2301      	movne	r3, #1
 8007944:	2300      	moveq	r3, #0
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d015      	beq.n	8007978 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0204 	bic.w	r2, r2, #4
 800795a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007960:	f003 031f 	and.w	r3, r3, #31
 8007964:	2208      	movs	r2, #8
 8007966:	409a      	lsls	r2, r3
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007970:	f043 0201 	orr.w	r2, r3, #1
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	fa22 f303 	lsr.w	r3, r2, r3
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	2b00      	cmp	r3, #0
 800798c:	d06e      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a69      	ldr	r2, [pc, #420]	; (8007b38 <HAL_DMA_IRQHandler+0x3f8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d04a      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a67      	ldr	r2, [pc, #412]	; (8007b3c <HAL_DMA_IRQHandler+0x3fc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d045      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a66      	ldr	r2, [pc, #408]	; (8007b40 <HAL_DMA_IRQHandler+0x400>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d040      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a64      	ldr	r2, [pc, #400]	; (8007b44 <HAL_DMA_IRQHandler+0x404>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d03b      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a63      	ldr	r2, [pc, #396]	; (8007b48 <HAL_DMA_IRQHandler+0x408>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d036      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a61      	ldr	r2, [pc, #388]	; (8007b4c <HAL_DMA_IRQHandler+0x40c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d031      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a60      	ldr	r2, [pc, #384]	; (8007b50 <HAL_DMA_IRQHandler+0x410>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d02c      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a5e      	ldr	r2, [pc, #376]	; (8007b54 <HAL_DMA_IRQHandler+0x414>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d027      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a5d      	ldr	r2, [pc, #372]	; (8007b58 <HAL_DMA_IRQHandler+0x418>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d022      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a5b      	ldr	r2, [pc, #364]	; (8007b5c <HAL_DMA_IRQHandler+0x41c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d01d      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a5a      	ldr	r2, [pc, #360]	; (8007b60 <HAL_DMA_IRQHandler+0x420>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d018      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a58      	ldr	r2, [pc, #352]	; (8007b64 <HAL_DMA_IRQHandler+0x424>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a57      	ldr	r2, [pc, #348]	; (8007b68 <HAL_DMA_IRQHandler+0x428>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d00e      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a55      	ldr	r2, [pc, #340]	; (8007b6c <HAL_DMA_IRQHandler+0x42c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d009      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a54      	ldr	r2, [pc, #336]	; (8007b70 <HAL_DMA_IRQHandler+0x430>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d004      	beq.n	8007a2e <HAL_DMA_IRQHandler+0x2ee>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a52      	ldr	r2, [pc, #328]	; (8007b74 <HAL_DMA_IRQHandler+0x434>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d10a      	bne.n	8007a44 <HAL_DMA_IRQHandler+0x304>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bf14      	ite	ne
 8007a3c:	2301      	movne	r3, #1
 8007a3e:	2300      	moveq	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	e003      	b.n	8007a4c <HAL_DMA_IRQHandler+0x30c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00d      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a54:	f003 031f 	and.w	r3, r3, #31
 8007a58:	2201      	movs	r2, #1
 8007a5a:	409a      	lsls	r2, r3
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a64:	f043 0202 	orr.w	r2, r3, #2
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a70:	f003 031f 	and.w	r3, r3, #31
 8007a74:	2204      	movs	r2, #4
 8007a76:	409a      	lsls	r2, r3
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 808f 	beq.w	8007ba0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a2c      	ldr	r2, [pc, #176]	; (8007b38 <HAL_DMA_IRQHandler+0x3f8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d04a      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a2a      	ldr	r2, [pc, #168]	; (8007b3c <HAL_DMA_IRQHandler+0x3fc>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d045      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a29      	ldr	r2, [pc, #164]	; (8007b40 <HAL_DMA_IRQHandler+0x400>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d040      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a27      	ldr	r2, [pc, #156]	; (8007b44 <HAL_DMA_IRQHandler+0x404>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d03b      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a26      	ldr	r2, [pc, #152]	; (8007b48 <HAL_DMA_IRQHandler+0x408>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d036      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a24      	ldr	r2, [pc, #144]	; (8007b4c <HAL_DMA_IRQHandler+0x40c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d031      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a23      	ldr	r2, [pc, #140]	; (8007b50 <HAL_DMA_IRQHandler+0x410>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d02c      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a21      	ldr	r2, [pc, #132]	; (8007b54 <HAL_DMA_IRQHandler+0x414>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d027      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a20      	ldr	r2, [pc, #128]	; (8007b58 <HAL_DMA_IRQHandler+0x418>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d022      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1e      	ldr	r2, [pc, #120]	; (8007b5c <HAL_DMA_IRQHandler+0x41c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01d      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1d      	ldr	r2, [pc, #116]	; (8007b60 <HAL_DMA_IRQHandler+0x420>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d018      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_DMA_IRQHandler+0x424>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d013      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1a      	ldr	r2, [pc, #104]	; (8007b68 <HAL_DMA_IRQHandler+0x428>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00e      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a18      	ldr	r2, [pc, #96]	; (8007b6c <HAL_DMA_IRQHandler+0x42c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d009      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a17      	ldr	r2, [pc, #92]	; (8007b70 <HAL_DMA_IRQHandler+0x430>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d004      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x3e2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <HAL_DMA_IRQHandler+0x434>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d12a      	bne.n	8007b78 <HAL_DMA_IRQHandler+0x438>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bf14      	ite	ne
 8007b30:	2301      	movne	r3, #1
 8007b32:	2300      	moveq	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	e023      	b.n	8007b80 <HAL_DMA_IRQHandler+0x440>
 8007b38:	40020010 	.word	0x40020010
 8007b3c:	40020028 	.word	0x40020028
 8007b40:	40020040 	.word	0x40020040
 8007b44:	40020058 	.word	0x40020058
 8007b48:	40020070 	.word	0x40020070
 8007b4c:	40020088 	.word	0x40020088
 8007b50:	400200a0 	.word	0x400200a0
 8007b54:	400200b8 	.word	0x400200b8
 8007b58:	40020410 	.word	0x40020410
 8007b5c:	40020428 	.word	0x40020428
 8007b60:	40020440 	.word	0x40020440
 8007b64:	40020458 	.word	0x40020458
 8007b68:	40020470 	.word	0x40020470
 8007b6c:	40020488 	.word	0x40020488
 8007b70:	400204a0 	.word	0x400204a0
 8007b74:	400204b8 	.word	0x400204b8
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00d      	beq.n	8007ba0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2204      	movs	r2, #4
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	f043 0204 	orr.w	r2, r3, #4
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba4:	f003 031f 	and.w	r3, r3, #31
 8007ba8:	2210      	movs	r2, #16
 8007baa:	409a      	lsls	r2, r3
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 80a6 	beq.w	8007d02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a85      	ldr	r2, [pc, #532]	; (8007dd0 <HAL_DMA_IRQHandler+0x690>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d04a      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a83      	ldr	r2, [pc, #524]	; (8007dd4 <HAL_DMA_IRQHandler+0x694>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d045      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a82      	ldr	r2, [pc, #520]	; (8007dd8 <HAL_DMA_IRQHandler+0x698>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d040      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a80      	ldr	r2, [pc, #512]	; (8007ddc <HAL_DMA_IRQHandler+0x69c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d03b      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a7f      	ldr	r2, [pc, #508]	; (8007de0 <HAL_DMA_IRQHandler+0x6a0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d036      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a7d      	ldr	r2, [pc, #500]	; (8007de4 <HAL_DMA_IRQHandler+0x6a4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d031      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a7c      	ldr	r2, [pc, #496]	; (8007de8 <HAL_DMA_IRQHandler+0x6a8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d02c      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a7a      	ldr	r2, [pc, #488]	; (8007dec <HAL_DMA_IRQHandler+0x6ac>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d027      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a79      	ldr	r2, [pc, #484]	; (8007df0 <HAL_DMA_IRQHandler+0x6b0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d022      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a77      	ldr	r2, [pc, #476]	; (8007df4 <HAL_DMA_IRQHandler+0x6b4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01d      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a76      	ldr	r2, [pc, #472]	; (8007df8 <HAL_DMA_IRQHandler+0x6b8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d018      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a74      	ldr	r2, [pc, #464]	; (8007dfc <HAL_DMA_IRQHandler+0x6bc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a73      	ldr	r2, [pc, #460]	; (8007e00 <HAL_DMA_IRQHandler+0x6c0>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00e      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a71      	ldr	r2, [pc, #452]	; (8007e04 <HAL_DMA_IRQHandler+0x6c4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d009      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a70      	ldr	r2, [pc, #448]	; (8007e08 <HAL_DMA_IRQHandler+0x6c8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d004      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x516>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a6e      	ldr	r2, [pc, #440]	; (8007e0c <HAL_DMA_IRQHandler+0x6cc>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d10a      	bne.n	8007c6c <HAL_DMA_IRQHandler+0x52c>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bf14      	ite	ne
 8007c64:	2301      	movne	r3, #1
 8007c66:	2300      	moveq	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	e009      	b.n	8007c80 <HAL_DMA_IRQHandler+0x540>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bf14      	ite	ne
 8007c7a:	2301      	movne	r3, #1
 8007c7c:	2300      	moveq	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d03e      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c88:	f003 031f 	and.w	r3, r3, #31
 8007c8c:	2210      	movs	r2, #16
 8007c8e:	409a      	lsls	r2, r3
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d018      	beq.n	8007cd4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d108      	bne.n	8007cc2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d024      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
 8007cc0:	e01f      	b.n	8007d02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d01b      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	4798      	blx	r3
 8007cd2:	e016      	b.n	8007d02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d107      	bne.n	8007cf2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0208 	bic.w	r2, r2, #8
 8007cf0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	409a      	lsls	r2, r3
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 8110 	beq.w	8007f38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a2c      	ldr	r2, [pc, #176]	; (8007dd0 <HAL_DMA_IRQHandler+0x690>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d04a      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a2b      	ldr	r2, [pc, #172]	; (8007dd4 <HAL_DMA_IRQHandler+0x694>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d045      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a29      	ldr	r2, [pc, #164]	; (8007dd8 <HAL_DMA_IRQHandler+0x698>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d040      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a28      	ldr	r2, [pc, #160]	; (8007ddc <HAL_DMA_IRQHandler+0x69c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d03b      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a26      	ldr	r2, [pc, #152]	; (8007de0 <HAL_DMA_IRQHandler+0x6a0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d036      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a25      	ldr	r2, [pc, #148]	; (8007de4 <HAL_DMA_IRQHandler+0x6a4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d031      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a23      	ldr	r2, [pc, #140]	; (8007de8 <HAL_DMA_IRQHandler+0x6a8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d02c      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a22      	ldr	r2, [pc, #136]	; (8007dec <HAL_DMA_IRQHandler+0x6ac>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d027      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a20      	ldr	r2, [pc, #128]	; (8007df0 <HAL_DMA_IRQHandler+0x6b0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d022      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1f      	ldr	r2, [pc, #124]	; (8007df4 <HAL_DMA_IRQHandler+0x6b4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d01d      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1d      	ldr	r2, [pc, #116]	; (8007df8 <HAL_DMA_IRQHandler+0x6b8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d018      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1c      	ldr	r2, [pc, #112]	; (8007dfc <HAL_DMA_IRQHandler+0x6bc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d013      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a1a      	ldr	r2, [pc, #104]	; (8007e00 <HAL_DMA_IRQHandler+0x6c0>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00e      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a19      	ldr	r2, [pc, #100]	; (8007e04 <HAL_DMA_IRQHandler+0x6c4>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d009      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <HAL_DMA_IRQHandler+0x6c8>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <HAL_DMA_IRQHandler+0x678>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a16      	ldr	r2, [pc, #88]	; (8007e0c <HAL_DMA_IRQHandler+0x6cc>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d12b      	bne.n	8007e10 <HAL_DMA_IRQHandler+0x6d0>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0310 	and.w	r3, r3, #16
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bf14      	ite	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	2300      	moveq	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	e02a      	b.n	8007e24 <HAL_DMA_IRQHandler+0x6e4>
 8007dce:	bf00      	nop
 8007dd0:	40020010 	.word	0x40020010
 8007dd4:	40020028 	.word	0x40020028
 8007dd8:	40020040 	.word	0x40020040
 8007ddc:	40020058 	.word	0x40020058
 8007de0:	40020070 	.word	0x40020070
 8007de4:	40020088 	.word	0x40020088
 8007de8:	400200a0 	.word	0x400200a0
 8007dec:	400200b8 	.word	0x400200b8
 8007df0:	40020410 	.word	0x40020410
 8007df4:	40020428 	.word	0x40020428
 8007df8:	40020440 	.word	0x40020440
 8007dfc:	40020458 	.word	0x40020458
 8007e00:	40020470 	.word	0x40020470
 8007e04:	40020488 	.word	0x40020488
 8007e08:	400204a0 	.word	0x400204a0
 8007e0c:	400204b8 	.word	0x400204b8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	bf14      	ite	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	2300      	moveq	r3, #0
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 8087 	beq.w	8007f38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2e:	f003 031f 	and.w	r3, r3, #31
 8007e32:	2220      	movs	r2, #32
 8007e34:	409a      	lsls	r2, r3
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d139      	bne.n	8007eba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0216 	bic.w	r2, r2, #22
 8007e54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	695a      	ldr	r2, [r3, #20]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d103      	bne.n	8007e76 <HAL_DMA_IRQHandler+0x736>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d007      	beq.n	8007e86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0208 	bic.w	r2, r2, #8
 8007e84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e8a:	f003 031f 	and.w	r3, r3, #31
 8007e8e:	223f      	movs	r2, #63	; 0x3f
 8007e90:	409a      	lsls	r2, r3
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 834a 	beq.w	8008544 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
          }
          return;
 8007eb8:	e344      	b.n	8008544 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d018      	beq.n	8007efa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d108      	bne.n	8007ee8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d02c      	beq.n	8007f38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	4798      	blx	r3
 8007ee6:	e027      	b.n	8007f38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d023      	beq.n	8007f38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	4798      	blx	r3
 8007ef8:	e01e      	b.n	8007f38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10f      	bne.n	8007f28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f022 0210 	bic.w	r2, r2, #16
 8007f16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8306 	beq.w	800854e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 8088 	beq.w	8008060 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2204      	movs	r2, #4
 8007f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a7a      	ldr	r2, [pc, #488]	; (8008148 <HAL_DMA_IRQHandler+0xa08>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d04a      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a79      	ldr	r2, [pc, #484]	; (800814c <HAL_DMA_IRQHandler+0xa0c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d045      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a77      	ldr	r2, [pc, #476]	; (8008150 <HAL_DMA_IRQHandler+0xa10>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d040      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a76      	ldr	r2, [pc, #472]	; (8008154 <HAL_DMA_IRQHandler+0xa14>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d03b      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a74      	ldr	r2, [pc, #464]	; (8008158 <HAL_DMA_IRQHandler+0xa18>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d036      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a73      	ldr	r2, [pc, #460]	; (800815c <HAL_DMA_IRQHandler+0xa1c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d031      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a71      	ldr	r2, [pc, #452]	; (8008160 <HAL_DMA_IRQHandler+0xa20>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d02c      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a70      	ldr	r2, [pc, #448]	; (8008164 <HAL_DMA_IRQHandler+0xa24>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d027      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a6e      	ldr	r2, [pc, #440]	; (8008168 <HAL_DMA_IRQHandler+0xa28>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d022      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a6d      	ldr	r2, [pc, #436]	; (800816c <HAL_DMA_IRQHandler+0xa2c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d01d      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a6b      	ldr	r2, [pc, #428]	; (8008170 <HAL_DMA_IRQHandler+0xa30>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d018      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a6a      	ldr	r2, [pc, #424]	; (8008174 <HAL_DMA_IRQHandler+0xa34>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d013      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a68      	ldr	r2, [pc, #416]	; (8008178 <HAL_DMA_IRQHandler+0xa38>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00e      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a67      	ldr	r2, [pc, #412]	; (800817c <HAL_DMA_IRQHandler+0xa3c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d009      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a65      	ldr	r2, [pc, #404]	; (8008180 <HAL_DMA_IRQHandler+0xa40>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d004      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x8b8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a64      	ldr	r2, [pc, #400]	; (8008184 <HAL_DMA_IRQHandler+0xa44>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d108      	bne.n	800800a <HAL_DMA_IRQHandler+0x8ca>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0201 	bic.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	e007      	b.n	800801a <HAL_DMA_IRQHandler+0x8da>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f022 0201 	bic.w	r2, r2, #1
 8008018:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3301      	adds	r3, #1
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008022:	429a      	cmp	r2, r3
 8008024:	d307      	bcc.n	8008036 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1f2      	bne.n	800801a <HAL_DMA_IRQHandler+0x8da>
 8008034:	e000      	b.n	8008038 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008036:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2203      	movs	r2, #3
 800804a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800804e:	e003      	b.n	8008058 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 8272 	beq.w	800854e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
 8008072:	e26c      	b.n	800854e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a43      	ldr	r2, [pc, #268]	; (8008188 <HAL_DMA_IRQHandler+0xa48>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d022      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x984>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a42      	ldr	r2, [pc, #264]	; (800818c <HAL_DMA_IRQHandler+0xa4c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d01d      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x984>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a40      	ldr	r2, [pc, #256]	; (8008190 <HAL_DMA_IRQHandler+0xa50>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d018      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x984>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a3f      	ldr	r2, [pc, #252]	; (8008194 <HAL_DMA_IRQHandler+0xa54>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d013      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x984>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a3d      	ldr	r2, [pc, #244]	; (8008198 <HAL_DMA_IRQHandler+0xa58>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00e      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x984>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a3c      	ldr	r2, [pc, #240]	; (800819c <HAL_DMA_IRQHandler+0xa5c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x984>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a3a      	ldr	r2, [pc, #232]	; (80081a0 <HAL_DMA_IRQHandler+0xa60>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d004      	beq.n	80080c4 <HAL_DMA_IRQHandler+0x984>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a39      	ldr	r2, [pc, #228]	; (80081a4 <HAL_DMA_IRQHandler+0xa64>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d101      	bne.n	80080c8 <HAL_DMA_IRQHandler+0x988>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <HAL_DMA_IRQHandler+0x98a>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 823f 	beq.w	800854e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080dc:	f003 031f 	and.w	r3, r3, #31
 80080e0:	2204      	movs	r2, #4
 80080e2:	409a      	lsls	r2, r3
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4013      	ands	r3, r2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 80cd 	beq.w	8008288 <HAL_DMA_IRQHandler+0xb48>
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80c7 	beq.w	8008288 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	2204      	movs	r2, #4
 8008104:	409a      	lsls	r2, r3
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d049      	beq.n	80081a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8210 	beq.w	8008548 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008130:	e20a      	b.n	8008548 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 8206 	beq.w	8008548 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008144:	e200      	b.n	8008548 <HAL_DMA_IRQHandler+0xe08>
 8008146:	bf00      	nop
 8008148:	40020010 	.word	0x40020010
 800814c:	40020028 	.word	0x40020028
 8008150:	40020040 	.word	0x40020040
 8008154:	40020058 	.word	0x40020058
 8008158:	40020070 	.word	0x40020070
 800815c:	40020088 	.word	0x40020088
 8008160:	400200a0 	.word	0x400200a0
 8008164:	400200b8 	.word	0x400200b8
 8008168:	40020410 	.word	0x40020410
 800816c:	40020428 	.word	0x40020428
 8008170:	40020440 	.word	0x40020440
 8008174:	40020458 	.word	0x40020458
 8008178:	40020470 	.word	0x40020470
 800817c:	40020488 	.word	0x40020488
 8008180:	400204a0 	.word	0x400204a0
 8008184:	400204b8 	.word	0x400204b8
 8008188:	58025408 	.word	0x58025408
 800818c:	5802541c 	.word	0x5802541c
 8008190:	58025430 	.word	0x58025430
 8008194:	58025444 	.word	0x58025444
 8008198:	58025458 	.word	0x58025458
 800819c:	5802546c 	.word	0x5802546c
 80081a0:	58025480 	.word	0x58025480
 80081a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d160      	bne.n	8008274 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a7f      	ldr	r2, [pc, #508]	; (80083b4 <HAL_DMA_IRQHandler+0xc74>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d04a      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a7d      	ldr	r2, [pc, #500]	; (80083b8 <HAL_DMA_IRQHandler+0xc78>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d045      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a7c      	ldr	r2, [pc, #496]	; (80083bc <HAL_DMA_IRQHandler+0xc7c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d040      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a7a      	ldr	r2, [pc, #488]	; (80083c0 <HAL_DMA_IRQHandler+0xc80>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d03b      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a79      	ldr	r2, [pc, #484]	; (80083c4 <HAL_DMA_IRQHandler+0xc84>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d036      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a77      	ldr	r2, [pc, #476]	; (80083c8 <HAL_DMA_IRQHandler+0xc88>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d031      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a76      	ldr	r2, [pc, #472]	; (80083cc <HAL_DMA_IRQHandler+0xc8c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d02c      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a74      	ldr	r2, [pc, #464]	; (80083d0 <HAL_DMA_IRQHandler+0xc90>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d027      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a73      	ldr	r2, [pc, #460]	; (80083d4 <HAL_DMA_IRQHandler+0xc94>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d022      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a71      	ldr	r2, [pc, #452]	; (80083d8 <HAL_DMA_IRQHandler+0xc98>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d01d      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a70      	ldr	r2, [pc, #448]	; (80083dc <HAL_DMA_IRQHandler+0xc9c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d018      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a6e      	ldr	r2, [pc, #440]	; (80083e0 <HAL_DMA_IRQHandler+0xca0>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a6d      	ldr	r2, [pc, #436]	; (80083e4 <HAL_DMA_IRQHandler+0xca4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00e      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a6b      	ldr	r2, [pc, #428]	; (80083e8 <HAL_DMA_IRQHandler+0xca8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d009      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a6a      	ldr	r2, [pc, #424]	; (80083ec <HAL_DMA_IRQHandler+0xcac>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d004      	beq.n	8008252 <HAL_DMA_IRQHandler+0xb12>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a68      	ldr	r2, [pc, #416]	; (80083f0 <HAL_DMA_IRQHandler+0xcb0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d108      	bne.n	8008264 <HAL_DMA_IRQHandler+0xb24>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0208 	bic.w	r2, r2, #8
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	e007      	b.n	8008274 <HAL_DMA_IRQHandler+0xb34>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0204 	bic.w	r2, r2, #4
 8008272:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 8165 	beq.w	8008548 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008286:	e15f      	b.n	8008548 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828c:	f003 031f 	and.w	r3, r3, #31
 8008290:	2202      	movs	r2, #2
 8008292:	409a      	lsls	r2, r3
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	4013      	ands	r3, r2
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80c5 	beq.w	8008428 <HAL_DMA_IRQHandler+0xce8>
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f003 0302 	and.w	r3, r3, #2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 80bf 	beq.w	8008428 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ae:	f003 031f 	and.w	r3, r3, #31
 80082b2:	2202      	movs	r2, #2
 80082b4:	409a      	lsls	r2, r3
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d018      	beq.n	80082f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d109      	bne.n	80082e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 813a 	beq.w	800854c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082e0:	e134      	b.n	800854c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 8130 	beq.w	800854c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082f4:	e12a      	b.n	800854c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f003 0320 	and.w	r3, r3, #32
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 8089 	bne.w	8008414 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a2b      	ldr	r2, [pc, #172]	; (80083b4 <HAL_DMA_IRQHandler+0xc74>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d04a      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <HAL_DMA_IRQHandler+0xc78>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d045      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a28      	ldr	r2, [pc, #160]	; (80083bc <HAL_DMA_IRQHandler+0xc7c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d040      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a26      	ldr	r2, [pc, #152]	; (80083c0 <HAL_DMA_IRQHandler+0xc80>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d03b      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a25      	ldr	r2, [pc, #148]	; (80083c4 <HAL_DMA_IRQHandler+0xc84>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d036      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a23      	ldr	r2, [pc, #140]	; (80083c8 <HAL_DMA_IRQHandler+0xc88>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d031      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a22      	ldr	r2, [pc, #136]	; (80083cc <HAL_DMA_IRQHandler+0xc8c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d02c      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a20      	ldr	r2, [pc, #128]	; (80083d0 <HAL_DMA_IRQHandler+0xc90>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d027      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1f      	ldr	r2, [pc, #124]	; (80083d4 <HAL_DMA_IRQHandler+0xc94>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d022      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1d      	ldr	r2, [pc, #116]	; (80083d8 <HAL_DMA_IRQHandler+0xc98>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d01d      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1c      	ldr	r2, [pc, #112]	; (80083dc <HAL_DMA_IRQHandler+0xc9c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d018      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a1a      	ldr	r2, [pc, #104]	; (80083e0 <HAL_DMA_IRQHandler+0xca0>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d013      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a19      	ldr	r2, [pc, #100]	; (80083e4 <HAL_DMA_IRQHandler+0xca4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d00e      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a17      	ldr	r2, [pc, #92]	; (80083e8 <HAL_DMA_IRQHandler+0xca8>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d009      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a16      	ldr	r2, [pc, #88]	; (80083ec <HAL_DMA_IRQHandler+0xcac>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d004      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xc62>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a14      	ldr	r2, [pc, #80]	; (80083f0 <HAL_DMA_IRQHandler+0xcb0>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d128      	bne.n	80083f4 <HAL_DMA_IRQHandler+0xcb4>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f022 0214 	bic.w	r2, r2, #20
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	e027      	b.n	8008404 <HAL_DMA_IRQHandler+0xcc4>
 80083b4:	40020010 	.word	0x40020010
 80083b8:	40020028 	.word	0x40020028
 80083bc:	40020040 	.word	0x40020040
 80083c0:	40020058 	.word	0x40020058
 80083c4:	40020070 	.word	0x40020070
 80083c8:	40020088 	.word	0x40020088
 80083cc:	400200a0 	.word	0x400200a0
 80083d0:	400200b8 	.word	0x400200b8
 80083d4:	40020410 	.word	0x40020410
 80083d8:	40020428 	.word	0x40020428
 80083dc:	40020440 	.word	0x40020440
 80083e0:	40020458 	.word	0x40020458
 80083e4:	40020470 	.word	0x40020470
 80083e8:	40020488 	.word	0x40020488
 80083ec:	400204a0 	.word	0x400204a0
 80083f0:	400204b8 	.word	0x400204b8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 020a 	bic.w	r2, r2, #10
 8008402:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 8097 	beq.w	800854c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008426:	e091      	b.n	800854c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842c:	f003 031f 	and.w	r3, r3, #31
 8008430:	2208      	movs	r2, #8
 8008432:	409a      	lsls	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	4013      	ands	r3, r2
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 8088 	beq.w	800854e <HAL_DMA_IRQHandler+0xe0e>
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 8082 	beq.w	800854e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a41      	ldr	r2, [pc, #260]	; (8008554 <HAL_DMA_IRQHandler+0xe14>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d04a      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a3f      	ldr	r2, [pc, #252]	; (8008558 <HAL_DMA_IRQHandler+0xe18>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d045      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a3e      	ldr	r2, [pc, #248]	; (800855c <HAL_DMA_IRQHandler+0xe1c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d040      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a3c      	ldr	r2, [pc, #240]	; (8008560 <HAL_DMA_IRQHandler+0xe20>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d03b      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a3b      	ldr	r2, [pc, #236]	; (8008564 <HAL_DMA_IRQHandler+0xe24>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d036      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a39      	ldr	r2, [pc, #228]	; (8008568 <HAL_DMA_IRQHandler+0xe28>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d031      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a38      	ldr	r2, [pc, #224]	; (800856c <HAL_DMA_IRQHandler+0xe2c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d02c      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a36      	ldr	r2, [pc, #216]	; (8008570 <HAL_DMA_IRQHandler+0xe30>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d027      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a35      	ldr	r2, [pc, #212]	; (8008574 <HAL_DMA_IRQHandler+0xe34>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d022      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a33      	ldr	r2, [pc, #204]	; (8008578 <HAL_DMA_IRQHandler+0xe38>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d01d      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a32      	ldr	r2, [pc, #200]	; (800857c <HAL_DMA_IRQHandler+0xe3c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d018      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a30      	ldr	r2, [pc, #192]	; (8008580 <HAL_DMA_IRQHandler+0xe40>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d013      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a2f      	ldr	r2, [pc, #188]	; (8008584 <HAL_DMA_IRQHandler+0xe44>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00e      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a2d      	ldr	r2, [pc, #180]	; (8008588 <HAL_DMA_IRQHandler+0xe48>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d009      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a2c      	ldr	r2, [pc, #176]	; (800858c <HAL_DMA_IRQHandler+0xe4c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d004      	beq.n	80084ea <HAL_DMA_IRQHandler+0xdaa>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a2a      	ldr	r2, [pc, #168]	; (8008590 <HAL_DMA_IRQHandler+0xe50>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d108      	bne.n	80084fc <HAL_DMA_IRQHandler+0xdbc>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 021c 	bic.w	r2, r2, #28
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e007      	b.n	800850c <HAL_DMA_IRQHandler+0xdcc>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 020e 	bic.w	r2, r2, #14
 800850a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008510:	f003 031f 	and.w	r3, r3, #31
 8008514:	2201      	movs	r2, #1
 8008516:	409a      	lsls	r2, r3
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	4798      	blx	r3
 8008542:	e004      	b.n	800854e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008544:	bf00      	nop
 8008546:	e002      	b.n	800854e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008548:	bf00      	nop
 800854a:	e000      	b.n	800854e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800854c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800854e:	3728      	adds	r7, #40	; 0x28
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	40020010 	.word	0x40020010
 8008558:	40020028 	.word	0x40020028
 800855c:	40020040 	.word	0x40020040
 8008560:	40020058 	.word	0x40020058
 8008564:	40020070 	.word	0x40020070
 8008568:	40020088 	.word	0x40020088
 800856c:	400200a0 	.word	0x400200a0
 8008570:	400200b8 	.word	0x400200b8
 8008574:	40020410 	.word	0x40020410
 8008578:	40020428 	.word	0x40020428
 800857c:	40020440 	.word	0x40020440
 8008580:	40020458 	.word	0x40020458
 8008584:	40020470 	.word	0x40020470
 8008588:	40020488 	.word	0x40020488
 800858c:	400204a0 	.word	0x400204a0
 8008590:	400204b8 	.word	0x400204b8

08008594 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a7f      	ldr	r2, [pc, #508]	; (80087b0 <DMA_SetConfig+0x21c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d072      	beq.n	800869e <DMA_SetConfig+0x10a>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a7d      	ldr	r2, [pc, #500]	; (80087b4 <DMA_SetConfig+0x220>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d06d      	beq.n	800869e <DMA_SetConfig+0x10a>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a7c      	ldr	r2, [pc, #496]	; (80087b8 <DMA_SetConfig+0x224>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d068      	beq.n	800869e <DMA_SetConfig+0x10a>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a7a      	ldr	r2, [pc, #488]	; (80087bc <DMA_SetConfig+0x228>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d063      	beq.n	800869e <DMA_SetConfig+0x10a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a79      	ldr	r2, [pc, #484]	; (80087c0 <DMA_SetConfig+0x22c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d05e      	beq.n	800869e <DMA_SetConfig+0x10a>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a77      	ldr	r2, [pc, #476]	; (80087c4 <DMA_SetConfig+0x230>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d059      	beq.n	800869e <DMA_SetConfig+0x10a>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a76      	ldr	r2, [pc, #472]	; (80087c8 <DMA_SetConfig+0x234>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d054      	beq.n	800869e <DMA_SetConfig+0x10a>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a74      	ldr	r2, [pc, #464]	; (80087cc <DMA_SetConfig+0x238>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d04f      	beq.n	800869e <DMA_SetConfig+0x10a>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a73      	ldr	r2, [pc, #460]	; (80087d0 <DMA_SetConfig+0x23c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d04a      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a71      	ldr	r2, [pc, #452]	; (80087d4 <DMA_SetConfig+0x240>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d045      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a70      	ldr	r2, [pc, #448]	; (80087d8 <DMA_SetConfig+0x244>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d040      	beq.n	800869e <DMA_SetConfig+0x10a>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a6e      	ldr	r2, [pc, #440]	; (80087dc <DMA_SetConfig+0x248>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d03b      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a6d      	ldr	r2, [pc, #436]	; (80087e0 <DMA_SetConfig+0x24c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d036      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a6b      	ldr	r2, [pc, #428]	; (80087e4 <DMA_SetConfig+0x250>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d031      	beq.n	800869e <DMA_SetConfig+0x10a>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a6a      	ldr	r2, [pc, #424]	; (80087e8 <DMA_SetConfig+0x254>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d02c      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a68      	ldr	r2, [pc, #416]	; (80087ec <DMA_SetConfig+0x258>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d027      	beq.n	800869e <DMA_SetConfig+0x10a>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a67      	ldr	r2, [pc, #412]	; (80087f0 <DMA_SetConfig+0x25c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d022      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a65      	ldr	r2, [pc, #404]	; (80087f4 <DMA_SetConfig+0x260>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d01d      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a64      	ldr	r2, [pc, #400]	; (80087f8 <DMA_SetConfig+0x264>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d018      	beq.n	800869e <DMA_SetConfig+0x10a>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a62      	ldr	r2, [pc, #392]	; (80087fc <DMA_SetConfig+0x268>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d013      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a61      	ldr	r2, [pc, #388]	; (8008800 <DMA_SetConfig+0x26c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00e      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a5f      	ldr	r2, [pc, #380]	; (8008804 <DMA_SetConfig+0x270>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d009      	beq.n	800869e <DMA_SetConfig+0x10a>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a5e      	ldr	r2, [pc, #376]	; (8008808 <DMA_SetConfig+0x274>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d004      	beq.n	800869e <DMA_SetConfig+0x10a>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a5c      	ldr	r2, [pc, #368]	; (800880c <DMA_SetConfig+0x278>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d101      	bne.n	80086a2 <DMA_SetConfig+0x10e>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <DMA_SetConfig+0x110>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00d      	beq.n	80086c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80086b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d004      	beq.n	80086c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80086c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a39      	ldr	r2, [pc, #228]	; (80087b0 <DMA_SetConfig+0x21c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d04a      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a38      	ldr	r2, [pc, #224]	; (80087b4 <DMA_SetConfig+0x220>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d045      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a36      	ldr	r2, [pc, #216]	; (80087b8 <DMA_SetConfig+0x224>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d040      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a35      	ldr	r2, [pc, #212]	; (80087bc <DMA_SetConfig+0x228>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d03b      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a33      	ldr	r2, [pc, #204]	; (80087c0 <DMA_SetConfig+0x22c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d036      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a32      	ldr	r2, [pc, #200]	; (80087c4 <DMA_SetConfig+0x230>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d031      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a30      	ldr	r2, [pc, #192]	; (80087c8 <DMA_SetConfig+0x234>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d02c      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a2f      	ldr	r2, [pc, #188]	; (80087cc <DMA_SetConfig+0x238>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d027      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a2d      	ldr	r2, [pc, #180]	; (80087d0 <DMA_SetConfig+0x23c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d022      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a2c      	ldr	r2, [pc, #176]	; (80087d4 <DMA_SetConfig+0x240>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d01d      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a2a      	ldr	r2, [pc, #168]	; (80087d8 <DMA_SetConfig+0x244>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d018      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a29      	ldr	r2, [pc, #164]	; (80087dc <DMA_SetConfig+0x248>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d013      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a27      	ldr	r2, [pc, #156]	; (80087e0 <DMA_SetConfig+0x24c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00e      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a26      	ldr	r2, [pc, #152]	; (80087e4 <DMA_SetConfig+0x250>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d009      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a24      	ldr	r2, [pc, #144]	; (80087e8 <DMA_SetConfig+0x254>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d004      	beq.n	8008764 <DMA_SetConfig+0x1d0>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a23      	ldr	r2, [pc, #140]	; (80087ec <DMA_SetConfig+0x258>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d101      	bne.n	8008768 <DMA_SetConfig+0x1d4>
 8008764:	2301      	movs	r3, #1
 8008766:	e000      	b.n	800876a <DMA_SetConfig+0x1d6>
 8008768:	2300      	movs	r3, #0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d059      	beq.n	8008822 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008772:	f003 031f 	and.w	r3, r3, #31
 8008776:	223f      	movs	r2, #63	; 0x3f
 8008778:	409a      	lsls	r2, r3
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800878c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	2b40      	cmp	r3, #64	; 0x40
 800879c:	d138      	bne.n	8008810 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80087ae:	e086      	b.n	80088be <DMA_SetConfig+0x32a>
 80087b0:	40020010 	.word	0x40020010
 80087b4:	40020028 	.word	0x40020028
 80087b8:	40020040 	.word	0x40020040
 80087bc:	40020058 	.word	0x40020058
 80087c0:	40020070 	.word	0x40020070
 80087c4:	40020088 	.word	0x40020088
 80087c8:	400200a0 	.word	0x400200a0
 80087cc:	400200b8 	.word	0x400200b8
 80087d0:	40020410 	.word	0x40020410
 80087d4:	40020428 	.word	0x40020428
 80087d8:	40020440 	.word	0x40020440
 80087dc:	40020458 	.word	0x40020458
 80087e0:	40020470 	.word	0x40020470
 80087e4:	40020488 	.word	0x40020488
 80087e8:	400204a0 	.word	0x400204a0
 80087ec:	400204b8 	.word	0x400204b8
 80087f0:	58025408 	.word	0x58025408
 80087f4:	5802541c 	.word	0x5802541c
 80087f8:	58025430 	.word	0x58025430
 80087fc:	58025444 	.word	0x58025444
 8008800:	58025458 	.word	0x58025458
 8008804:	5802546c 	.word	0x5802546c
 8008808:	58025480 	.word	0x58025480
 800880c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	60da      	str	r2, [r3, #12]
}
 8008820:	e04d      	b.n	80088be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a29      	ldr	r2, [pc, #164]	; (80088cc <DMA_SetConfig+0x338>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d022      	beq.n	8008872 <DMA_SetConfig+0x2de>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a27      	ldr	r2, [pc, #156]	; (80088d0 <DMA_SetConfig+0x33c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01d      	beq.n	8008872 <DMA_SetConfig+0x2de>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a26      	ldr	r2, [pc, #152]	; (80088d4 <DMA_SetConfig+0x340>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d018      	beq.n	8008872 <DMA_SetConfig+0x2de>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <DMA_SetConfig+0x344>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <DMA_SetConfig+0x2de>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a23      	ldr	r2, [pc, #140]	; (80088dc <DMA_SetConfig+0x348>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <DMA_SetConfig+0x2de>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a21      	ldr	r2, [pc, #132]	; (80088e0 <DMA_SetConfig+0x34c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <DMA_SetConfig+0x2de>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <DMA_SetConfig+0x350>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <DMA_SetConfig+0x2de>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a1e      	ldr	r2, [pc, #120]	; (80088e8 <DMA_SetConfig+0x354>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d101      	bne.n	8008876 <DMA_SetConfig+0x2e2>
 8008872:	2301      	movs	r3, #1
 8008874:	e000      	b.n	8008878 <DMA_SetConfig+0x2e4>
 8008876:	2300      	movs	r3, #0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d020      	beq.n	80088be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008880:	f003 031f 	and.w	r3, r3, #31
 8008884:	2201      	movs	r2, #1
 8008886:	409a      	lsls	r2, r3
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	2b40      	cmp	r3, #64	; 0x40
 800889a:	d108      	bne.n	80088ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	60da      	str	r2, [r3, #12]
}
 80088ac:	e007      	b.n	80088be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	60da      	str	r2, [r3, #12]
}
 80088be:	bf00      	nop
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	58025408 	.word	0x58025408
 80088d0:	5802541c 	.word	0x5802541c
 80088d4:	58025430 	.word	0x58025430
 80088d8:	58025444 	.word	0x58025444
 80088dc:	58025458 	.word	0x58025458
 80088e0:	5802546c 	.word	0x5802546c
 80088e4:	58025480 	.word	0x58025480
 80088e8:	58025494 	.word	0x58025494

080088ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a42      	ldr	r2, [pc, #264]	; (8008a04 <DMA_CalcBaseAndBitshift+0x118>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d04a      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a41      	ldr	r2, [pc, #260]	; (8008a08 <DMA_CalcBaseAndBitshift+0x11c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d045      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a3f      	ldr	r2, [pc, #252]	; (8008a0c <DMA_CalcBaseAndBitshift+0x120>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d040      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a3e      	ldr	r2, [pc, #248]	; (8008a10 <DMA_CalcBaseAndBitshift+0x124>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d03b      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a3c      	ldr	r2, [pc, #240]	; (8008a14 <DMA_CalcBaseAndBitshift+0x128>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d036      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a3b      	ldr	r2, [pc, #236]	; (8008a18 <DMA_CalcBaseAndBitshift+0x12c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d031      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a39      	ldr	r2, [pc, #228]	; (8008a1c <DMA_CalcBaseAndBitshift+0x130>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d02c      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a38      	ldr	r2, [pc, #224]	; (8008a20 <DMA_CalcBaseAndBitshift+0x134>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d027      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a36      	ldr	r2, [pc, #216]	; (8008a24 <DMA_CalcBaseAndBitshift+0x138>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d022      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a35      	ldr	r2, [pc, #212]	; (8008a28 <DMA_CalcBaseAndBitshift+0x13c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d01d      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a33      	ldr	r2, [pc, #204]	; (8008a2c <DMA_CalcBaseAndBitshift+0x140>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d018      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a32      	ldr	r2, [pc, #200]	; (8008a30 <DMA_CalcBaseAndBitshift+0x144>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d013      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a30      	ldr	r2, [pc, #192]	; (8008a34 <DMA_CalcBaseAndBitshift+0x148>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d00e      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a2f      	ldr	r2, [pc, #188]	; (8008a38 <DMA_CalcBaseAndBitshift+0x14c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d009      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a2d      	ldr	r2, [pc, #180]	; (8008a3c <DMA_CalcBaseAndBitshift+0x150>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <DMA_CalcBaseAndBitshift+0xa8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a2c      	ldr	r2, [pc, #176]	; (8008a40 <DMA_CalcBaseAndBitshift+0x154>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d101      	bne.n	8008998 <DMA_CalcBaseAndBitshift+0xac>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <DMA_CalcBaseAndBitshift+0xae>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d024      	beq.n	80089e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	3b10      	subs	r3, #16
 80089a6:	4a27      	ldr	r2, [pc, #156]	; (8008a44 <DMA_CalcBaseAndBitshift+0x158>)
 80089a8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ac:	091b      	lsrs	r3, r3, #4
 80089ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	4a24      	ldr	r2, [pc, #144]	; (8008a48 <DMA_CalcBaseAndBitshift+0x15c>)
 80089b8:	5cd3      	ldrb	r3, [r2, r3]
 80089ba:	461a      	mov	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d908      	bls.n	80089d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	4b1f      	ldr	r3, [pc, #124]	; (8008a4c <DMA_CalcBaseAndBitshift+0x160>)
 80089ce:	4013      	ands	r3, r2
 80089d0:	1d1a      	adds	r2, r3, #4
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	659a      	str	r2, [r3, #88]	; 0x58
 80089d6:	e00d      	b.n	80089f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	461a      	mov	r2, r3
 80089de:	4b1b      	ldr	r3, [pc, #108]	; (8008a4c <DMA_CalcBaseAndBitshift+0x160>)
 80089e0:	4013      	ands	r3, r2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6593      	str	r3, [r2, #88]	; 0x58
 80089e6:	e005      	b.n	80089f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	40020010 	.word	0x40020010
 8008a08:	40020028 	.word	0x40020028
 8008a0c:	40020040 	.word	0x40020040
 8008a10:	40020058 	.word	0x40020058
 8008a14:	40020070 	.word	0x40020070
 8008a18:	40020088 	.word	0x40020088
 8008a1c:	400200a0 	.word	0x400200a0
 8008a20:	400200b8 	.word	0x400200b8
 8008a24:	40020410 	.word	0x40020410
 8008a28:	40020428 	.word	0x40020428
 8008a2c:	40020440 	.word	0x40020440
 8008a30:	40020458 	.word	0x40020458
 8008a34:	40020470 	.word	0x40020470
 8008a38:	40020488 	.word	0x40020488
 8008a3c:	400204a0 	.word	0x400204a0
 8008a40:	400204b8 	.word	0x400204b8
 8008a44:	aaaaaaab 	.word	0xaaaaaaab
 8008a48:	0800fb98 	.word	0x0800fb98
 8008a4c:	fffffc00 	.word	0xfffffc00

08008a50 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d120      	bne.n	8008aa6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d858      	bhi.n	8008b1e <DMA_CheckFifoParam+0xce>
 8008a6c:	a201      	add	r2, pc, #4	; (adr r2, 8008a74 <DMA_CheckFifoParam+0x24>)
 8008a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a72:	bf00      	nop
 8008a74:	08008a85 	.word	0x08008a85
 8008a78:	08008a97 	.word	0x08008a97
 8008a7c:	08008a85 	.word	0x08008a85
 8008a80:	08008b1f 	.word	0x08008b1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d048      	beq.n	8008b22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a94:	e045      	b.n	8008b22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a9e:	d142      	bne.n	8008b26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008aa4:	e03f      	b.n	8008b26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aae:	d123      	bne.n	8008af8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d838      	bhi.n	8008b2a <DMA_CheckFifoParam+0xda>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <DMA_CheckFifoParam+0x70>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad7 	.word	0x08008ad7
 8008ac8:	08008ad1 	.word	0x08008ad1
 8008acc:	08008ae9 	.word	0x08008ae9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
        break;
 8008ad4:	e030      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d025      	beq.n	8008b2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ae6:	e022      	b.n	8008b2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008af0:	d11f      	bne.n	8008b32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008af6:	e01c      	b.n	8008b32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d902      	bls.n	8008b06 <DMA_CheckFifoParam+0xb6>
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d003      	beq.n	8008b0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008b04:	e018      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	73fb      	strb	r3, [r7, #15]
        break;
 8008b0a:	e015      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00e      	beq.n	8008b36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1c:	e00b      	b.n	8008b36 <DMA_CheckFifoParam+0xe6>
        break;
 8008b1e:	bf00      	nop
 8008b20:	e00a      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>
        break;
 8008b22:	bf00      	nop
 8008b24:	e008      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>
        break;
 8008b26:	bf00      	nop
 8008b28:	e006      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>
        break;
 8008b2a:	bf00      	nop
 8008b2c:	e004      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>
        break;
 8008b2e:	bf00      	nop
 8008b30:	e002      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>
        break;
 8008b32:	bf00      	nop
 8008b34:	e000      	b.n	8008b38 <DMA_CheckFifoParam+0xe8>
    break;
 8008b36:	bf00      	nop
    }
  }

  return status;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop

08008b48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a38      	ldr	r2, [pc, #224]	; (8008c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d022      	beq.n	8008ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a36      	ldr	r2, [pc, #216]	; (8008c40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d01d      	beq.n	8008ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a35      	ldr	r2, [pc, #212]	; (8008c44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d018      	beq.n	8008ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a33      	ldr	r2, [pc, #204]	; (8008c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a32      	ldr	r2, [pc, #200]	; (8008c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00e      	beq.n	8008ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a30      	ldr	r2, [pc, #192]	; (8008c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d009      	beq.n	8008ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a2f      	ldr	r2, [pc, #188]	; (8008c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d004      	beq.n	8008ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a2d      	ldr	r2, [pc, #180]	; (8008c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d101      	bne.n	8008baa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008baa:	2300      	movs	r3, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01a      	beq.n	8008be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	3b08      	subs	r3, #8
 8008bb8:	4a28      	ldr	r2, [pc, #160]	; (8008c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008bba:	fba2 2303 	umull	r2, r3, r2, r3
 8008bbe:	091b      	lsrs	r3, r3, #4
 8008bc0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	4b26      	ldr	r3, [pc, #152]	; (8008c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	461a      	mov	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a24      	ldr	r2, [pc, #144]	; (8008c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008bd4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	2201      	movs	r2, #1
 8008bde:	409a      	lsls	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008be4:	e024      	b.n	8008c30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	3b10      	subs	r3, #16
 8008bee:	4a1e      	ldr	r2, [pc, #120]	; (8008c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf4:	091b      	lsrs	r3, r3, #4
 8008bf6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4a1c      	ldr	r2, [pc, #112]	; (8008c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d806      	bhi.n	8008c0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	4a1b      	ldr	r2, [pc, #108]	; (8008c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d902      	bls.n	8008c0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3308      	adds	r3, #8
 8008c0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4b18      	ldr	r3, [pc, #96]	; (8008c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a16      	ldr	r2, [pc, #88]	; (8008c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008c20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f003 031f 	and.w	r3, r3, #31
 8008c28:	2201      	movs	r2, #1
 8008c2a:	409a      	lsls	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008c30:	bf00      	nop
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	58025408 	.word	0x58025408
 8008c40:	5802541c 	.word	0x5802541c
 8008c44:	58025430 	.word	0x58025430
 8008c48:	58025444 	.word	0x58025444
 8008c4c:	58025458 	.word	0x58025458
 8008c50:	5802546c 	.word	0x5802546c
 8008c54:	58025480 	.word	0x58025480
 8008c58:	58025494 	.word	0x58025494
 8008c5c:	cccccccd 	.word	0xcccccccd
 8008c60:	16009600 	.word	0x16009600
 8008c64:	58025880 	.word	0x58025880
 8008c68:	aaaaaaab 	.word	0xaaaaaaab
 8008c6c:	400204b8 	.word	0x400204b8
 8008c70:	4002040f 	.word	0x4002040f
 8008c74:	10008200 	.word	0x10008200
 8008c78:	40020880 	.word	0x40020880

08008c7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d04a      	beq.n	8008d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b08      	cmp	r3, #8
 8008c96:	d847      	bhi.n	8008d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a25      	ldr	r2, [pc, #148]	; (8008d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d022      	beq.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a24      	ldr	r2, [pc, #144]	; (8008d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d01d      	beq.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a22      	ldr	r2, [pc, #136]	; (8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d018      	beq.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a21      	ldr	r2, [pc, #132]	; (8008d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a1f      	ldr	r2, [pc, #124]	; (8008d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00e      	beq.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a1e      	ldr	r2, [pc, #120]	; (8008d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d009      	beq.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a1c      	ldr	r2, [pc, #112]	; (8008d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d004      	beq.n	8008ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a1b      	ldr	r2, [pc, #108]	; (8008d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d101      	bne.n	8008cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008cec:	2300      	movs	r3, #0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4b17      	ldr	r3, [pc, #92]	; (8008d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008cf6:	4413      	add	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008d04:	671a      	str	r2, [r3, #112]	; 0x70
 8008d06:	e009      	b.n	8008d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	461a      	mov	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a11      	ldr	r2, [pc, #68]	; (8008d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008d1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	2201      	movs	r2, #1
 8008d22:	409a      	lsls	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008d28:	bf00      	nop
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	58025408 	.word	0x58025408
 8008d38:	5802541c 	.word	0x5802541c
 8008d3c:	58025430 	.word	0x58025430
 8008d40:	58025444 	.word	0x58025444
 8008d44:	58025458 	.word	0x58025458
 8008d48:	5802546c 	.word	0x5802546c
 8008d4c:	58025480 	.word	0x58025480
 8008d50:	58025494 	.word	0x58025494
 8008d54:	1600963f 	.word	0x1600963f
 8008d58:	58025940 	.word	0x58025940
 8008d5c:	1000823f 	.word	0x1000823f
 8008d60:	40020940 	.word	0x40020940

08008d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b089      	sub	sp, #36	; 0x24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d72:	4b86      	ldr	r3, [pc, #536]	; (8008f8c <HAL_GPIO_Init+0x228>)
 8008d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d76:	e18c      	b.n	8009092 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	fa01 f303 	lsl.w	r3, r1, r3
 8008d84:	4013      	ands	r3, r2
 8008d86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 817e 	beq.w	800908c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d005      	beq.n	8008da8 <HAL_GPIO_Init+0x44>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f003 0303 	and.w	r3, r3, #3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d130      	bne.n	8008e0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	2203      	movs	r2, #3
 8008db4:	fa02 f303 	lsl.w	r3, r2, r3
 8008db8:	43db      	mvns	r3, r3
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	005b      	lsls	r3, r3, #1
 8008dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	69ba      	ldr	r2, [r7, #24]
 8008dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008dde:	2201      	movs	r2, #1
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	43db      	mvns	r3, r3
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	4013      	ands	r3, r2
 8008dec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	091b      	lsrs	r3, r3, #4
 8008df4:	f003 0201 	and.w	r2, r3, #1
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfe:	69ba      	ldr	r2, [r7, #24]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	69ba      	ldr	r2, [r7, #24]
 8008e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d017      	beq.n	8008e46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	2203      	movs	r2, #3
 8008e22:	fa02 f303 	lsl.w	r3, r2, r3
 8008e26:	43db      	mvns	r3, r3
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	689a      	ldr	r2, [r3, #8]
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d123      	bne.n	8008e9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	08da      	lsrs	r2, r3, #3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3208      	adds	r2, #8
 8008e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	220f      	movs	r2, #15
 8008e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6e:	43db      	mvns	r3, r3
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	4013      	ands	r3, r2
 8008e74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	691a      	ldr	r2, [r3, #16]
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	f003 0307 	and.w	r3, r3, #7
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	fa02 f303 	lsl.w	r3, r2, r3
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	08da      	lsrs	r2, r3, #3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	3208      	adds	r2, #8
 8008e94:	69b9      	ldr	r1, [r7, #24]
 8008e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eaa:	43db      	mvns	r3, r3
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	f003 0203 	and.w	r2, r3, #3
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 80d8 	beq.w	800908c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008edc:	4b2c      	ldr	r3, [pc, #176]	; (8008f90 <HAL_GPIO_Init+0x22c>)
 8008ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ee2:	4a2b      	ldr	r2, [pc, #172]	; (8008f90 <HAL_GPIO_Init+0x22c>)
 8008ee4:	f043 0302 	orr.w	r3, r3, #2
 8008ee8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008eec:	4b28      	ldr	r3, [pc, #160]	; (8008f90 <HAL_GPIO_Init+0x22c>)
 8008eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008efa:	4a26      	ldr	r2, [pc, #152]	; (8008f94 <HAL_GPIO_Init+0x230>)
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	089b      	lsrs	r3, r3, #2
 8008f00:	3302      	adds	r3, #2
 8008f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	220f      	movs	r2, #15
 8008f12:	fa02 f303 	lsl.w	r3, r2, r3
 8008f16:	43db      	mvns	r3, r3
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a1d      	ldr	r2, [pc, #116]	; (8008f98 <HAL_GPIO_Init+0x234>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d04a      	beq.n	8008fbc <HAL_GPIO_Init+0x258>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a1c      	ldr	r2, [pc, #112]	; (8008f9c <HAL_GPIO_Init+0x238>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d02b      	beq.n	8008f86 <HAL_GPIO_Init+0x222>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a1b      	ldr	r2, [pc, #108]	; (8008fa0 <HAL_GPIO_Init+0x23c>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d025      	beq.n	8008f82 <HAL_GPIO_Init+0x21e>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a1a      	ldr	r2, [pc, #104]	; (8008fa4 <HAL_GPIO_Init+0x240>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d01f      	beq.n	8008f7e <HAL_GPIO_Init+0x21a>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a19      	ldr	r2, [pc, #100]	; (8008fa8 <HAL_GPIO_Init+0x244>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d019      	beq.n	8008f7a <HAL_GPIO_Init+0x216>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a18      	ldr	r2, [pc, #96]	; (8008fac <HAL_GPIO_Init+0x248>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d013      	beq.n	8008f76 <HAL_GPIO_Init+0x212>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a17      	ldr	r2, [pc, #92]	; (8008fb0 <HAL_GPIO_Init+0x24c>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00d      	beq.n	8008f72 <HAL_GPIO_Init+0x20e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a16      	ldr	r2, [pc, #88]	; (8008fb4 <HAL_GPIO_Init+0x250>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d007      	beq.n	8008f6e <HAL_GPIO_Init+0x20a>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a15      	ldr	r2, [pc, #84]	; (8008fb8 <HAL_GPIO_Init+0x254>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d101      	bne.n	8008f6a <HAL_GPIO_Init+0x206>
 8008f66:	2309      	movs	r3, #9
 8008f68:	e029      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f6a:	230a      	movs	r3, #10
 8008f6c:	e027      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f6e:	2307      	movs	r3, #7
 8008f70:	e025      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f72:	2306      	movs	r3, #6
 8008f74:	e023      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f76:	2305      	movs	r3, #5
 8008f78:	e021      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	e01f      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e01d      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e01b      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e019      	b.n	8008fbe <HAL_GPIO_Init+0x25a>
 8008f8a:	bf00      	nop
 8008f8c:	58000080 	.word	0x58000080
 8008f90:	58024400 	.word	0x58024400
 8008f94:	58000400 	.word	0x58000400
 8008f98:	58020000 	.word	0x58020000
 8008f9c:	58020400 	.word	0x58020400
 8008fa0:	58020800 	.word	0x58020800
 8008fa4:	58020c00 	.word	0x58020c00
 8008fa8:	58021000 	.word	0x58021000
 8008fac:	58021400 	.word	0x58021400
 8008fb0:	58021800 	.word	0x58021800
 8008fb4:	58021c00 	.word	0x58021c00
 8008fb8:	58022400 	.word	0x58022400
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	69fa      	ldr	r2, [r7, #28]
 8008fc0:	f002 0203 	and.w	r2, r2, #3
 8008fc4:	0092      	lsls	r2, r2, #2
 8008fc6:	4093      	lsls	r3, r2
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008fce:	4938      	ldr	r1, [pc, #224]	; (80090b0 <HAL_GPIO_Init+0x34c>)
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	089b      	lsrs	r3, r3, #2
 8008fd4:	3302      	adds	r3, #2
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	43db      	mvns	r3, r3
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	4013      	ands	r3, r2
 8008fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800900a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	43db      	mvns	r3, r3
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	4013      	ands	r3, r2
 800901a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	4313      	orrs	r3, r2
 800902e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	43db      	mvns	r3, r3
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	4013      	ands	r3, r2
 8009046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	4313      	orrs	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	43db      	mvns	r3, r3
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	4013      	ands	r3, r2
 8009070:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	4313      	orrs	r3, r2
 8009084:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	69ba      	ldr	r2, [r7, #24]
 800908a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	3301      	adds	r3, #1
 8009090:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	fa22 f303 	lsr.w	r3, r2, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	f47f ae6b 	bne.w	8008d78 <HAL_GPIO_Init+0x14>
  }
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	3724      	adds	r7, #36	; 0x24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	58000400 	.word	0x58000400

080090b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80090c2:	4b72      	ldr	r3, [pc, #456]	; (800928c <HAL_GPIO_DeInit+0x1d8>)
 80090c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80090c6:	e0d3      	b.n	8009270 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80090c8:	2201      	movs	r2, #1
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	fa02 f303 	lsl.w	r3, r2, r3
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	4013      	ands	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f000 80c6 	beq.w	800926a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80090de:	4a6c      	ldr	r2, [pc, #432]	; (8009290 <HAL_GPIO_DeInit+0x1dc>)
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	089b      	lsrs	r3, r3, #2
 80090e4:	3302      	adds	r3, #2
 80090e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ea:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	220f      	movs	r2, #15
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4013      	ands	r3, r2
 80090fe:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a64      	ldr	r2, [pc, #400]	; (8009294 <HAL_GPIO_DeInit+0x1e0>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d031      	beq.n	800916c <HAL_GPIO_DeInit+0xb8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a63      	ldr	r2, [pc, #396]	; (8009298 <HAL_GPIO_DeInit+0x1e4>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d02b      	beq.n	8009168 <HAL_GPIO_DeInit+0xb4>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a62      	ldr	r2, [pc, #392]	; (800929c <HAL_GPIO_DeInit+0x1e8>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d025      	beq.n	8009164 <HAL_GPIO_DeInit+0xb0>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a61      	ldr	r2, [pc, #388]	; (80092a0 <HAL_GPIO_DeInit+0x1ec>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d01f      	beq.n	8009160 <HAL_GPIO_DeInit+0xac>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a60      	ldr	r2, [pc, #384]	; (80092a4 <HAL_GPIO_DeInit+0x1f0>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d019      	beq.n	800915c <HAL_GPIO_DeInit+0xa8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a5f      	ldr	r2, [pc, #380]	; (80092a8 <HAL_GPIO_DeInit+0x1f4>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d013      	beq.n	8009158 <HAL_GPIO_DeInit+0xa4>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a5e      	ldr	r2, [pc, #376]	; (80092ac <HAL_GPIO_DeInit+0x1f8>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d00d      	beq.n	8009154 <HAL_GPIO_DeInit+0xa0>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a5d      	ldr	r2, [pc, #372]	; (80092b0 <HAL_GPIO_DeInit+0x1fc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d007      	beq.n	8009150 <HAL_GPIO_DeInit+0x9c>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a5c      	ldr	r2, [pc, #368]	; (80092b4 <HAL_GPIO_DeInit+0x200>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d101      	bne.n	800914c <HAL_GPIO_DeInit+0x98>
 8009148:	2309      	movs	r3, #9
 800914a:	e010      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 800914c:	230a      	movs	r3, #10
 800914e:	e00e      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 8009150:	2307      	movs	r3, #7
 8009152:	e00c      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 8009154:	2306      	movs	r3, #6
 8009156:	e00a      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 8009158:	2305      	movs	r3, #5
 800915a:	e008      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 800915c:	2304      	movs	r3, #4
 800915e:	e006      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 8009160:	2303      	movs	r3, #3
 8009162:	e004      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 8009164:	2302      	movs	r3, #2
 8009166:	e002      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 8009168:	2301      	movs	r3, #1
 800916a:	e000      	b.n	800916e <HAL_GPIO_DeInit+0xba>
 800916c:	2300      	movs	r3, #0
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	f002 0203 	and.w	r2, r2, #3
 8009174:	0092      	lsls	r2, r2, #2
 8009176:	4093      	lsls	r3, r2
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	429a      	cmp	r2, r3
 800917c:	d136      	bne.n	80091ec <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	43db      	mvns	r3, r3
 8009186:	401a      	ands	r2, r3
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	43db      	mvns	r3, r3
 8009194:	401a      	ands	r2, r3
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800919a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	43db      	mvns	r3, r3
 80091a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091a8:	4013      	ands	r3, r2
 80091aa:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80091ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	43db      	mvns	r3, r3
 80091b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091ba:	4013      	ands	r3, r2
 80091bc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f003 0303 	and.w	r3, r3, #3
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	220f      	movs	r2, #15
 80091c8:	fa02 f303 	lsl.w	r3, r2, r3
 80091cc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80091ce:	4a30      	ldr	r2, [pc, #192]	; (8009290 <HAL_GPIO_DeInit+0x1dc>)
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	089b      	lsrs	r3, r3, #2
 80091d4:	3302      	adds	r3, #2
 80091d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	43da      	mvns	r2, r3
 80091de:	482c      	ldr	r0, [pc, #176]	; (8009290 <HAL_GPIO_DeInit+0x1dc>)
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	089b      	lsrs	r3, r3, #2
 80091e4:	400a      	ands	r2, r1
 80091e6:	3302      	adds	r3, #2
 80091e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	2103      	movs	r1, #3
 80091f6:	fa01 f303 	lsl.w	r3, r1, r3
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	08da      	lsrs	r2, r3, #3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3208      	adds	r2, #8
 8009208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	220f      	movs	r2, #15
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	43db      	mvns	r3, r3
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	08d2      	lsrs	r2, r2, #3
 8009220:	4019      	ands	r1, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3208      	adds	r2, #8
 8009226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	2103      	movs	r1, #3
 8009234:	fa01 f303 	lsl.w	r3, r1, r3
 8009238:	43db      	mvns	r3, r3
 800923a:	401a      	ands	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	2101      	movs	r1, #1
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	fa01 f303 	lsl.w	r3, r1, r3
 800924c:	43db      	mvns	r3, r3
 800924e:	401a      	ands	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	2103      	movs	r1, #3
 800925e:	fa01 f303 	lsl.w	r3, r1, r3
 8009262:	43db      	mvns	r3, r3
 8009264:	401a      	ands	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	609a      	str	r2, [r3, #8]
    }

    position++;
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	3301      	adds	r3, #1
 800926e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	fa22 f303 	lsr.w	r3, r2, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	f47f af25 	bne.w	80090c8 <HAL_GPIO_DeInit+0x14>
  }
}
 800927e:	bf00      	nop
 8009280:	bf00      	nop
 8009282:	371c      	adds	r7, #28
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	58000080 	.word	0x58000080
 8009290:	58000400 	.word	0x58000400
 8009294:	58020000 	.word	0x58020000
 8009298:	58020400 	.word	0x58020400
 800929c:	58020800 	.word	0x58020800
 80092a0:	58020c00 	.word	0x58020c00
 80092a4:	58021000 	.word	0x58021000
 80092a8:	58021400 	.word	0x58021400
 80092ac:	58021800 	.word	0x58021800
 80092b0:	58021c00 	.word	0x58021c00
 80092b4:	58022400 	.word	0x58022400

080092b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	807b      	strh	r3, [r7, #2]
 80092c4:	4613      	mov	r3, r2
 80092c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092c8:	787b      	ldrb	r3, [r7, #1]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092ce:	887a      	ldrh	r2, [r7, #2]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80092d4:	e003      	b.n	80092de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80092d6:	887b      	ldrh	r3, [r7, #2]
 80092d8:	041a      	lsls	r2, r3, #16
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	619a      	str	r2, [r3, #24]
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
	...

080092ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80092f4:	4b19      	ldr	r3, [pc, #100]	; (800935c <HAL_PWREx_ConfigSupply+0x70>)
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d00a      	beq.n	8009316 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009300:	4b16      	ldr	r3, [pc, #88]	; (800935c <HAL_PWREx_ConfigSupply+0x70>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	f003 0307 	and.w	r3, r3, #7
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	429a      	cmp	r2, r3
 800930c:	d001      	beq.n	8009312 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e01f      	b.n	8009352 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	e01d      	b.n	8009352 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009316:	4b11      	ldr	r3, [pc, #68]	; (800935c <HAL_PWREx_ConfigSupply+0x70>)
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f023 0207 	bic.w	r2, r3, #7
 800931e:	490f      	ldr	r1, [pc, #60]	; (800935c <HAL_PWREx_ConfigSupply+0x70>)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4313      	orrs	r3, r2
 8009324:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009326:	f7fc fbbb 	bl	8005aa0 <HAL_GetTick>
 800932a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800932c:	e009      	b.n	8009342 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800932e:	f7fc fbb7 	bl	8005aa0 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800933c:	d901      	bls.n	8009342 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e007      	b.n	8009352 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009342:	4b06      	ldr	r3, [pc, #24]	; (800935c <HAL_PWREx_ConfigSupply+0x70>)
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800934a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800934e:	d1ee      	bne.n	800932e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	58024800 	.word	0x58024800

08009360 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08c      	sub	sp, #48	; 0x30
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	e39d      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 8087 	beq.w	800948e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009380:	4b88      	ldr	r3, [pc, #544]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009388:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800938a:	4b86      	ldr	r3, [pc, #536]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 800938c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	2b10      	cmp	r3, #16
 8009394:	d007      	beq.n	80093a6 <HAL_RCC_OscConfig+0x46>
 8009396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009398:	2b18      	cmp	r3, #24
 800939a:	d110      	bne.n	80093be <HAL_RCC_OscConfig+0x5e>
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d10b      	bne.n	80093be <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093a6:	4b7f      	ldr	r3, [pc, #508]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d06c      	beq.n	800948c <HAL_RCC_OscConfig+0x12c>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d168      	bne.n	800948c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e377      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c6:	d106      	bne.n	80093d6 <HAL_RCC_OscConfig+0x76>
 80093c8:	4b76      	ldr	r3, [pc, #472]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a75      	ldr	r2, [pc, #468]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80093ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	e02e      	b.n	8009434 <HAL_RCC_OscConfig+0xd4>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10c      	bne.n	80093f8 <HAL_RCC_OscConfig+0x98>
 80093de:	4b71      	ldr	r3, [pc, #452]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a70      	ldr	r2, [pc, #448]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80093e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	4b6e      	ldr	r3, [pc, #440]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a6d      	ldr	r2, [pc, #436]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80093f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	e01d      	b.n	8009434 <HAL_RCC_OscConfig+0xd4>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009400:	d10c      	bne.n	800941c <HAL_RCC_OscConfig+0xbc>
 8009402:	4b68      	ldr	r3, [pc, #416]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a67      	ldr	r2, [pc, #412]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	4b65      	ldr	r3, [pc, #404]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a64      	ldr	r2, [pc, #400]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	e00b      	b.n	8009434 <HAL_RCC_OscConfig+0xd4>
 800941c:	4b61      	ldr	r3, [pc, #388]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a60      	ldr	r2, [pc, #384]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	4b5e      	ldr	r3, [pc, #376]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a5d      	ldr	r2, [pc, #372]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 800942e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d013      	beq.n	8009464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943c:	f7fc fb30 	bl	8005aa0 <HAL_GetTick>
 8009440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009442:	e008      	b.n	8009456 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009444:	f7fc fb2c 	bl	8005aa0 <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b64      	cmp	r3, #100	; 0x64
 8009450:	d901      	bls.n	8009456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e32b      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009456:	4b53      	ldr	r3, [pc, #332]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0f0      	beq.n	8009444 <HAL_RCC_OscConfig+0xe4>
 8009462:	e014      	b.n	800948e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009464:	f7fc fb1c 	bl	8005aa0 <HAL_GetTick>
 8009468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800946a:	e008      	b.n	800947e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800946c:	f7fc fb18 	bl	8005aa0 <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	2b64      	cmp	r3, #100	; 0x64
 8009478:	d901      	bls.n	800947e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800947a:	2303      	movs	r3, #3
 800947c:	e317      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800947e:	4b49      	ldr	r3, [pc, #292]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1f0      	bne.n	800946c <HAL_RCC_OscConfig+0x10c>
 800948a:	e000      	b.n	800948e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800948c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 808c 	beq.w	80095b4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800949c:	4b41      	ldr	r3, [pc, #260]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094a6:	4b3f      	ldr	r3, [pc, #252]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80094a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094aa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d007      	beq.n	80094c2 <HAL_RCC_OscConfig+0x162>
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	2b18      	cmp	r3, #24
 80094b6:	d137      	bne.n	8009528 <HAL_RCC_OscConfig+0x1c8>
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d132      	bne.n	8009528 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094c2:	4b38      	ldr	r3, [pc, #224]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0304 	and.w	r3, r3, #4
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d005      	beq.n	80094da <HAL_RCC_OscConfig+0x17a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e2e9      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094da:	4b32      	ldr	r3, [pc, #200]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f023 0219 	bic.w	r2, r3, #25
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	492f      	ldr	r1, [pc, #188]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094ec:	f7fc fad8 	bl	8005aa0 <HAL_GetTick>
 80094f0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094f2:	e008      	b.n	8009506 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094f4:	f7fc fad4 	bl	8005aa0 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d901      	bls.n	8009506 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e2d3      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009506:	4b27      	ldr	r3, [pc, #156]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0f0      	beq.n	80094f4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009512:	4b24      	ldr	r3, [pc, #144]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	061b      	lsls	r3, r3, #24
 8009520:	4920      	ldr	r1, [pc, #128]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009522:	4313      	orrs	r3, r2
 8009524:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009526:	e045      	b.n	80095b4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d026      	beq.n	800957e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009530:	4b1c      	ldr	r3, [pc, #112]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f023 0219 	bic.w	r2, r3, #25
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	4919      	ldr	r1, [pc, #100]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 800953e:	4313      	orrs	r3, r2
 8009540:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009542:	f7fc faad 	bl	8005aa0 <HAL_GetTick>
 8009546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009548:	e008      	b.n	800955c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800954a:	f7fc faa9 	bl	8005aa0 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	2b02      	cmp	r3, #2
 8009556:	d901      	bls.n	800955c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e2a8      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800955c:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0304 	and.w	r3, r3, #4
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0f0      	beq.n	800954a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009568:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	061b      	lsls	r3, r3, #24
 8009576:	490b      	ldr	r1, [pc, #44]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009578:	4313      	orrs	r3, r2
 800957a:	604b      	str	r3, [r1, #4]
 800957c:	e01a      	b.n	80095b4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a08      	ldr	r2, [pc, #32]	; (80095a4 <HAL_RCC_OscConfig+0x244>)
 8009584:	f023 0301 	bic.w	r3, r3, #1
 8009588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958a:	f7fc fa89 	bl	8005aa0 <HAL_GetTick>
 800958e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009590:	e00a      	b.n	80095a8 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009592:	f7fc fa85 	bl	8005aa0 <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	d903      	bls.n	80095a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e284      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
 80095a4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095a8:	4b96      	ldr	r3, [pc, #600]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1ee      	bne.n	8009592 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0310 	and.w	r3, r3, #16
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d06a      	beq.n	8009696 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095c0:	4b90      	ldr	r3, [pc, #576]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095c8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095ca:	4b8e      	ldr	r3, [pc, #568]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80095cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d007      	beq.n	80095e6 <HAL_RCC_OscConfig+0x286>
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b18      	cmp	r3, #24
 80095da:	d11b      	bne.n	8009614 <HAL_RCC_OscConfig+0x2b4>
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f003 0303 	and.w	r3, r3, #3
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d116      	bne.n	8009614 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095e6:	4b87      	ldr	r3, [pc, #540]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <HAL_RCC_OscConfig+0x29e>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	2b80      	cmp	r3, #128	; 0x80
 80095f8:	d001      	beq.n	80095fe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e257      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095fe:	4b81      	ldr	r3, [pc, #516]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	061b      	lsls	r3, r3, #24
 800960c:	497d      	ldr	r1, [pc, #500]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800960e:	4313      	orrs	r3, r2
 8009610:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009612:	e040      	b.n	8009696 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	69db      	ldr	r3, [r3, #28]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d023      	beq.n	8009664 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800961c:	4b79      	ldr	r3, [pc, #484]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a78      	ldr	r2, [pc, #480]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 8009622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009628:	f7fc fa3a 	bl	8005aa0 <HAL_GetTick>
 800962c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800962e:	e008      	b.n	8009642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009630:	f7fc fa36 	bl	8005aa0 <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	2b02      	cmp	r3, #2
 800963c:	d901      	bls.n	8009642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e235      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009642:	4b70      	ldr	r3, [pc, #448]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0f0      	beq.n	8009630 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800964e:	4b6d      	ldr	r3, [pc, #436]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	061b      	lsls	r3, r3, #24
 800965c:	4969      	ldr	r1, [pc, #420]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800965e:	4313      	orrs	r3, r2
 8009660:	60cb      	str	r3, [r1, #12]
 8009662:	e018      	b.n	8009696 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009664:	4b67      	ldr	r3, [pc, #412]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a66      	ldr	r2, [pc, #408]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800966a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800966e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009670:	f7fc fa16 	bl	8005aa0 <HAL_GetTick>
 8009674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009676:	e008      	b.n	800968a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009678:	f7fc fa12 	bl	8005aa0 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d901      	bls.n	800968a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e211      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800968a:	4b5e      	ldr	r3, [pc, #376]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1f0      	bne.n	8009678 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0308 	and.w	r3, r3, #8
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d036      	beq.n	8009710 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d019      	beq.n	80096de <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096aa:	4b56      	ldr	r3, [pc, #344]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80096ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096ae:	4a55      	ldr	r2, [pc, #340]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80096b0:	f043 0301 	orr.w	r3, r3, #1
 80096b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096b6:	f7fc f9f3 	bl	8005aa0 <HAL_GetTick>
 80096ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096bc:	e008      	b.n	80096d0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096be:	f7fc f9ef 	bl	8005aa0 <HAL_GetTick>
 80096c2:	4602      	mov	r2, r0
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d901      	bls.n	80096d0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e1ee      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80096d0:	4b4c      	ldr	r3, [pc, #304]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80096d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0f0      	beq.n	80096be <HAL_RCC_OscConfig+0x35e>
 80096dc:	e018      	b.n	8009710 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096de:	4b49      	ldr	r3, [pc, #292]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80096e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096e2:	4a48      	ldr	r2, [pc, #288]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80096e4:	f023 0301 	bic.w	r3, r3, #1
 80096e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ea:	f7fc f9d9 	bl	8005aa0 <HAL_GetTick>
 80096ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096f0:	e008      	b.n	8009704 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096f2:	f7fc f9d5 	bl	8005aa0 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d901      	bls.n	8009704 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009700:	2303      	movs	r3, #3
 8009702:	e1d4      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009704:	4b3f      	ldr	r3, [pc, #252]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 8009706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1f0      	bne.n	80096f2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d036      	beq.n	800978a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d019      	beq.n	8009758 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009724:	4b37      	ldr	r3, [pc, #220]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a36      	ldr	r2, [pc, #216]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800972a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800972e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009730:	f7fc f9b6 	bl	8005aa0 <HAL_GetTick>
 8009734:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009736:	e008      	b.n	800974a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009738:	f7fc f9b2 	bl	8005aa0 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	2b02      	cmp	r3, #2
 8009744:	d901      	bls.n	800974a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e1b1      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800974a:	4b2e      	ldr	r3, [pc, #184]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d0f0      	beq.n	8009738 <HAL_RCC_OscConfig+0x3d8>
 8009756:	e018      	b.n	800978a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009758:	4b2a      	ldr	r3, [pc, #168]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a29      	ldr	r2, [pc, #164]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 800975e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009762:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009764:	f7fc f99c 	bl	8005aa0 <HAL_GetTick>
 8009768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800976a:	e008      	b.n	800977e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800976c:	f7fc f998 	bl	8005aa0 <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	2b02      	cmp	r3, #2
 8009778:	d901      	bls.n	800977e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e197      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800977e:	4b21      	ldr	r3, [pc, #132]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1f0      	bne.n	800976c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0304 	and.w	r3, r3, #4
 8009792:	2b00      	cmp	r3, #0
 8009794:	f000 8086 	beq.w	80098a4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009798:	4b1b      	ldr	r3, [pc, #108]	; (8009808 <HAL_RCC_OscConfig+0x4a8>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a1a      	ldr	r2, [pc, #104]	; (8009808 <HAL_RCC_OscConfig+0x4a8>)
 800979e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097a4:	f7fc f97c 	bl	8005aa0 <HAL_GetTick>
 80097a8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097aa:	e008      	b.n	80097be <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80097ac:	f7fc f978 	bl	8005aa0 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b64      	cmp	r3, #100	; 0x64
 80097b8:	d901      	bls.n	80097be <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80097ba:	2303      	movs	r3, #3
 80097bc:	e177      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097be:	4b12      	ldr	r3, [pc, #72]	; (8009808 <HAL_RCC_OscConfig+0x4a8>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0f0      	beq.n	80097ac <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d106      	bne.n	80097e0 <HAL_RCC_OscConfig+0x480>
 80097d2:	4b0c      	ldr	r3, [pc, #48]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80097d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d6:	4a0b      	ldr	r2, [pc, #44]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80097d8:	f043 0301 	orr.w	r3, r3, #1
 80097dc:	6713      	str	r3, [r2, #112]	; 0x70
 80097de:	e032      	b.n	8009846 <HAL_RCC_OscConfig+0x4e6>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d111      	bne.n	800980c <HAL_RCC_OscConfig+0x4ac>
 80097e8:	4b06      	ldr	r3, [pc, #24]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80097ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ec:	4a05      	ldr	r2, [pc, #20]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80097ee:	f023 0301 	bic.w	r3, r3, #1
 80097f2:	6713      	str	r3, [r2, #112]	; 0x70
 80097f4:	4b03      	ldr	r3, [pc, #12]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80097f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f8:	4a02      	ldr	r2, [pc, #8]	; (8009804 <HAL_RCC_OscConfig+0x4a4>)
 80097fa:	f023 0304 	bic.w	r3, r3, #4
 80097fe:	6713      	str	r3, [r2, #112]	; 0x70
 8009800:	e021      	b.n	8009846 <HAL_RCC_OscConfig+0x4e6>
 8009802:	bf00      	nop
 8009804:	58024400 	.word	0x58024400
 8009808:	58024800 	.word	0x58024800
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	2b05      	cmp	r3, #5
 8009812:	d10c      	bne.n	800982e <HAL_RCC_OscConfig+0x4ce>
 8009814:	4b83      	ldr	r3, [pc, #524]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009818:	4a82      	ldr	r2, [pc, #520]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800981a:	f043 0304 	orr.w	r3, r3, #4
 800981e:	6713      	str	r3, [r2, #112]	; 0x70
 8009820:	4b80      	ldr	r3, [pc, #512]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009824:	4a7f      	ldr	r2, [pc, #508]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009826:	f043 0301 	orr.w	r3, r3, #1
 800982a:	6713      	str	r3, [r2, #112]	; 0x70
 800982c:	e00b      	b.n	8009846 <HAL_RCC_OscConfig+0x4e6>
 800982e:	4b7d      	ldr	r3, [pc, #500]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009832:	4a7c      	ldr	r2, [pc, #496]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009834:	f023 0301 	bic.w	r3, r3, #1
 8009838:	6713      	str	r3, [r2, #112]	; 0x70
 800983a:	4b7a      	ldr	r3, [pc, #488]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800983c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983e:	4a79      	ldr	r2, [pc, #484]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009840:	f023 0304 	bic.w	r3, r3, #4
 8009844:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d015      	beq.n	800987a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800984e:	f7fc f927 	bl	8005aa0 <HAL_GetTick>
 8009852:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009854:	e00a      	b.n	800986c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009856:	f7fc f923 	bl	8005aa0 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	f241 3288 	movw	r2, #5000	; 0x1388
 8009864:	4293      	cmp	r3, r2
 8009866:	d901      	bls.n	800986c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e120      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800986c:	4b6d      	ldr	r3, [pc, #436]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800986e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0ee      	beq.n	8009856 <HAL_RCC_OscConfig+0x4f6>
 8009878:	e014      	b.n	80098a4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800987a:	f7fc f911 	bl	8005aa0 <HAL_GetTick>
 800987e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009880:	e00a      	b.n	8009898 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009882:	f7fc f90d 	bl	8005aa0 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009890:	4293      	cmp	r3, r2
 8009892:	d901      	bls.n	8009898 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e10a      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009898:	4b62      	ldr	r3, [pc, #392]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800989a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1ee      	bne.n	8009882 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80ff 	beq.w	8009aac <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80098ae:	4b5d      	ldr	r3, [pc, #372]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b6:	2b18      	cmp	r3, #24
 80098b8:	f000 80ba 	beq.w	8009a30 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	f040 8095 	bne.w	80099f0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098c6:	4b57      	ldr	r3, [pc, #348]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a56      	ldr	r2, [pc, #344]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80098cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d2:	f7fc f8e5 	bl	8005aa0 <HAL_GetTick>
 80098d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098d8:	e008      	b.n	80098ec <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098da:	f7fc f8e1 	bl	8005aa0 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d901      	bls.n	80098ec <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e0e0      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098ec:	4b4d      	ldr	r3, [pc, #308]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1f0      	bne.n	80098da <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098f8:	4b4a      	ldr	r3, [pc, #296]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80098fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098fc:	4b4a      	ldr	r3, [pc, #296]	; (8009a28 <HAL_RCC_OscConfig+0x6c8>)
 80098fe:	4013      	ands	r3, r2
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009908:	0112      	lsls	r2, r2, #4
 800990a:	430a      	orrs	r2, r1
 800990c:	4945      	ldr	r1, [pc, #276]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800990e:	4313      	orrs	r3, r2
 8009910:	628b      	str	r3, [r1, #40]	; 0x28
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009916:	3b01      	subs	r3, #1
 8009918:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009920:	3b01      	subs	r3, #1
 8009922:	025b      	lsls	r3, r3, #9
 8009924:	b29b      	uxth	r3, r3
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	3b01      	subs	r3, #1
 800992e:	041b      	lsls	r3, r3, #16
 8009930:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009934:	431a      	orrs	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800993a:	3b01      	subs	r3, #1
 800993c:	061b      	lsls	r3, r3, #24
 800993e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009942:	4938      	ldr	r1, [pc, #224]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009944:	4313      	orrs	r3, r2
 8009946:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009948:	4b36      	ldr	r3, [pc, #216]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	4a35      	ldr	r2, [pc, #212]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800994e:	f023 0301 	bic.w	r3, r3, #1
 8009952:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009954:	4b33      	ldr	r3, [pc, #204]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009958:	4b34      	ldr	r3, [pc, #208]	; (8009a2c <HAL_RCC_OscConfig+0x6cc>)
 800995a:	4013      	ands	r3, r2
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009960:	00d2      	lsls	r2, r2, #3
 8009962:	4930      	ldr	r1, [pc, #192]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009964:	4313      	orrs	r3, r2
 8009966:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009968:	4b2e      	ldr	r3, [pc, #184]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	f023 020c 	bic.w	r2, r3, #12
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009974:	492b      	ldr	r1, [pc, #172]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009976:	4313      	orrs	r3, r2
 8009978:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800997a:	4b2a      	ldr	r3, [pc, #168]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	f023 0202 	bic.w	r2, r3, #2
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009986:	4927      	ldr	r1, [pc, #156]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009988:	4313      	orrs	r3, r2
 800998a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800998c:	4b25      	ldr	r3, [pc, #148]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	4a24      	ldr	r2, [pc, #144]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009998:	4b22      	ldr	r3, [pc, #136]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	4a21      	ldr	r2, [pc, #132]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 800999e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80099a4:	4b1f      	ldr	r3, [pc, #124]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	4a1e      	ldr	r2, [pc, #120]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80099b0:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	4a1b      	ldr	r2, [pc, #108]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099bc:	4b19      	ldr	r3, [pc, #100]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a18      	ldr	r2, [pc, #96]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c8:	f7fc f86a 	bl	8005aa0 <HAL_GetTick>
 80099cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099ce:	e008      	b.n	80099e2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099d0:	f7fc f866 	bl	8005aa0 <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d901      	bls.n	80099e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e065      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099e2:	4b10      	ldr	r3, [pc, #64]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0f0      	beq.n	80099d0 <HAL_RCC_OscConfig+0x670>
 80099ee:	e05d      	b.n	8009aac <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099f0:	4b0c      	ldr	r3, [pc, #48]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a0b      	ldr	r2, [pc, #44]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 80099f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80099fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099fc:	f7fc f850 	bl	8005aa0 <HAL_GetTick>
 8009a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a02:	e008      	b.n	8009a16 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a04:	f7fc f84c 	bl	8005aa0 <HAL_GetTick>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d901      	bls.n	8009a16 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e04b      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a16:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <HAL_RCC_OscConfig+0x6c4>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1f0      	bne.n	8009a04 <HAL_RCC_OscConfig+0x6a4>
 8009a22:	e043      	b.n	8009aac <HAL_RCC_OscConfig+0x74c>
 8009a24:	58024400 	.word	0x58024400
 8009a28:	fffffc0c 	.word	0xfffffc0c
 8009a2c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009a30:	4b21      	ldr	r3, [pc, #132]	; (8009ab8 <HAL_RCC_OscConfig+0x758>)
 8009a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009a36:	4b20      	ldr	r3, [pc, #128]	; (8009ab8 <HAL_RCC_OscConfig+0x758>)
 8009a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d031      	beq.n	8009aa8 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	f003 0203 	and.w	r2, r3, #3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d12a      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	091b      	lsrs	r3, r3, #4
 8009a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d122      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d11a      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	0a5b      	lsrs	r3, r3, #9
 8009a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d111      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d108      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	0e1b      	lsrs	r3, r3, #24
 8009a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d001      	beq.n	8009aac <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e000      	b.n	8009aae <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3730      	adds	r7, #48	; 0x30
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	58024400 	.word	0x58024400

08009abc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e19c      	b.n	8009e0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ad0:	4b8a      	ldr	r3, [pc, #552]	; (8009cfc <HAL_RCC_ClockConfig+0x240>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 030f 	and.w	r3, r3, #15
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d910      	bls.n	8009b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ade:	4b87      	ldr	r3, [pc, #540]	; (8009cfc <HAL_RCC_ClockConfig+0x240>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f023 020f 	bic.w	r2, r3, #15
 8009ae6:	4985      	ldr	r1, [pc, #532]	; (8009cfc <HAL_RCC_ClockConfig+0x240>)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aee:	4b83      	ldr	r3, [pc, #524]	; (8009cfc <HAL_RCC_ClockConfig+0x240>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 030f 	and.w	r3, r3, #15
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d001      	beq.n	8009b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e184      	b.n	8009e0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d010      	beq.n	8009b2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691a      	ldr	r2, [r3, #16]
 8009b10:	4b7b      	ldr	r3, [pc, #492]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d908      	bls.n	8009b2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b1c:	4b78      	ldr	r3, [pc, #480]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	4975      	ldr	r1, [pc, #468]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0308 	and.w	r3, r3, #8
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d010      	beq.n	8009b5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	695a      	ldr	r2, [r3, #20]
 8009b3e:	4b70      	ldr	r3, [pc, #448]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d908      	bls.n	8009b5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b4a:	4b6d      	ldr	r3, [pc, #436]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b4c:	69db      	ldr	r3, [r3, #28]
 8009b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	496a      	ldr	r1, [pc, #424]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d010      	beq.n	8009b8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	699a      	ldr	r2, [r3, #24]
 8009b6c:	4b64      	ldr	r3, [pc, #400]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d908      	bls.n	8009b8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b78:	4b61      	ldr	r3, [pc, #388]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	495e      	ldr	r1, [pc, #376]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d010      	beq.n	8009bb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	69da      	ldr	r2, [r3, #28]
 8009b9a:	4b59      	ldr	r3, [pc, #356]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d908      	bls.n	8009bb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009ba6:	4b56      	ldr	r3, [pc, #344]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	69db      	ldr	r3, [r3, #28]
 8009bb2:	4953      	ldr	r1, [pc, #332]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d010      	beq.n	8009be6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	4b4d      	ldr	r3, [pc, #308]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	f003 030f 	and.w	r3, r3, #15
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d908      	bls.n	8009be6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bd4:	4b4a      	ldr	r3, [pc, #296]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	f023 020f 	bic.w	r2, r3, #15
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	4947      	ldr	r1, [pc, #284]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d055      	beq.n	8009c9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009bf2:	4b43      	ldr	r3, [pc, #268]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	4940      	ldr	r1, [pc, #256]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009c00:	4313      	orrs	r3, r2
 8009c02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d107      	bne.n	8009c1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c0c:	4b3c      	ldr	r3, [pc, #240]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d121      	bne.n	8009c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e0f6      	b.n	8009e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d107      	bne.n	8009c34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c24:	4b36      	ldr	r3, [pc, #216]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d115      	bne.n	8009c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e0ea      	b.n	8009e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d107      	bne.n	8009c4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c3c:	4b30      	ldr	r3, [pc, #192]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d109      	bne.n	8009c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e0de      	b.n	8009e0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c4c:	4b2c      	ldr	r3, [pc, #176]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e0d6      	b.n	8009e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c5c:	4b28      	ldr	r3, [pc, #160]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	f023 0207 	bic.w	r2, r3, #7
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	4925      	ldr	r1, [pc, #148]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c6e:	f7fb ff17 	bl	8005aa0 <HAL_GetTick>
 8009c72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c74:	e00a      	b.n	8009c8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c76:	f7fb ff13 	bl	8005aa0 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d901      	bls.n	8009c8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e0be      	b.n	8009e0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c8c:	4b1c      	ldr	r3, [pc, #112]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d1eb      	bne.n	8009c76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d010      	beq.n	8009ccc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	4b14      	ldr	r3, [pc, #80]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d208      	bcs.n	8009ccc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cba:	4b11      	ldr	r3, [pc, #68]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	f023 020f 	bic.w	r2, r3, #15
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	490e      	ldr	r1, [pc, #56]	; (8009d00 <HAL_RCC_ClockConfig+0x244>)
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009ccc:	4b0b      	ldr	r3, [pc, #44]	; (8009cfc <HAL_RCC_ClockConfig+0x240>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 030f 	and.w	r3, r3, #15
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d214      	bcs.n	8009d04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cda:	4b08      	ldr	r3, [pc, #32]	; (8009cfc <HAL_RCC_ClockConfig+0x240>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f023 020f 	bic.w	r2, r3, #15
 8009ce2:	4906      	ldr	r1, [pc, #24]	; (8009cfc <HAL_RCC_ClockConfig+0x240>)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cea:	4b04      	ldr	r3, [pc, #16]	; (8009cfc <HAL_RCC_ClockConfig+0x240>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 030f 	and.w	r3, r3, #15
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d005      	beq.n	8009d04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e086      	b.n	8009e0a <HAL_RCC_ClockConfig+0x34e>
 8009cfc:	52002000 	.word	0x52002000
 8009d00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d010      	beq.n	8009d32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691a      	ldr	r2, [r3, #16]
 8009d14:	4b3f      	ldr	r3, [pc, #252]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d208      	bcs.n	8009d32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d20:	4b3c      	ldr	r3, [pc, #240]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d22:	699b      	ldr	r3, [r3, #24]
 8009d24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	4939      	ldr	r1, [pc, #228]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f003 0308 	and.w	r3, r3, #8
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d010      	beq.n	8009d60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	695a      	ldr	r2, [r3, #20]
 8009d42:	4b34      	ldr	r3, [pc, #208]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d208      	bcs.n	8009d60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d4e:	4b31      	ldr	r3, [pc, #196]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	492e      	ldr	r1, [pc, #184]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d010      	beq.n	8009d8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699a      	ldr	r2, [r3, #24]
 8009d70:	4b28      	ldr	r3, [pc, #160]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d208      	bcs.n	8009d8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d7c:	4b25      	ldr	r3, [pc, #148]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	4922      	ldr	r1, [pc, #136]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f003 0320 	and.w	r3, r3, #32
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d010      	beq.n	8009dbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	69da      	ldr	r2, [r3, #28]
 8009d9e:	4b1d      	ldr	r3, [pc, #116]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d208      	bcs.n	8009dbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009daa:	4b1a      	ldr	r3, [pc, #104]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	4917      	ldr	r1, [pc, #92]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009dbc:	f000 f834 	bl	8009e28 <HAL_RCC_GetSysClockFreq>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	4b14      	ldr	r3, [pc, #80]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	0a1b      	lsrs	r3, r3, #8
 8009dc8:	f003 030f 	and.w	r3, r3, #15
 8009dcc:	4912      	ldr	r1, [pc, #72]	; (8009e18 <HAL_RCC_ClockConfig+0x35c>)
 8009dce:	5ccb      	ldrb	r3, [r1, r3]
 8009dd0:	f003 031f 	and.w	r3, r3, #31
 8009dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dda:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <HAL_RCC_ClockConfig+0x358>)
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	4a0d      	ldr	r2, [pc, #52]	; (8009e18 <HAL_RCC_ClockConfig+0x35c>)
 8009de4:	5cd3      	ldrb	r3, [r2, r3]
 8009de6:	f003 031f 	and.w	r3, r3, #31
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	fa22 f303 	lsr.w	r3, r2, r3
 8009df0:	4a0a      	ldr	r2, [pc, #40]	; (8009e1c <HAL_RCC_ClockConfig+0x360>)
 8009df2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009df4:	4a0a      	ldr	r2, [pc, #40]	; (8009e20 <HAL_RCC_ClockConfig+0x364>)
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009dfa:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <HAL_RCC_ClockConfig+0x368>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fb fe04 	bl	8005a0c <HAL_InitTick>
 8009e04:	4603      	mov	r3, r0
 8009e06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3718      	adds	r7, #24
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	58024400 	.word	0x58024400
 8009e18:	0800fb88 	.word	0x0800fb88
 8009e1c:	24000054 	.word	0x24000054
 8009e20:	24000050 	.word	0x24000050
 8009e24:	24000058 	.word	0x24000058

08009e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b089      	sub	sp, #36	; 0x24
 8009e2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e2e:	4bb3      	ldr	r3, [pc, #716]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e36:	2b18      	cmp	r3, #24
 8009e38:	f200 8155 	bhi.w	800a0e6 <HAL_RCC_GetSysClockFreq+0x2be>
 8009e3c:	a201      	add	r2, pc, #4	; (adr r2, 8009e44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e42:	bf00      	nop
 8009e44:	08009ea9 	.word	0x08009ea9
 8009e48:	0800a0e7 	.word	0x0800a0e7
 8009e4c:	0800a0e7 	.word	0x0800a0e7
 8009e50:	0800a0e7 	.word	0x0800a0e7
 8009e54:	0800a0e7 	.word	0x0800a0e7
 8009e58:	0800a0e7 	.word	0x0800a0e7
 8009e5c:	0800a0e7 	.word	0x0800a0e7
 8009e60:	0800a0e7 	.word	0x0800a0e7
 8009e64:	08009ecf 	.word	0x08009ecf
 8009e68:	0800a0e7 	.word	0x0800a0e7
 8009e6c:	0800a0e7 	.word	0x0800a0e7
 8009e70:	0800a0e7 	.word	0x0800a0e7
 8009e74:	0800a0e7 	.word	0x0800a0e7
 8009e78:	0800a0e7 	.word	0x0800a0e7
 8009e7c:	0800a0e7 	.word	0x0800a0e7
 8009e80:	0800a0e7 	.word	0x0800a0e7
 8009e84:	08009ed5 	.word	0x08009ed5
 8009e88:	0800a0e7 	.word	0x0800a0e7
 8009e8c:	0800a0e7 	.word	0x0800a0e7
 8009e90:	0800a0e7 	.word	0x0800a0e7
 8009e94:	0800a0e7 	.word	0x0800a0e7
 8009e98:	0800a0e7 	.word	0x0800a0e7
 8009e9c:	0800a0e7 	.word	0x0800a0e7
 8009ea0:	0800a0e7 	.word	0x0800a0e7
 8009ea4:	08009edb 	.word	0x08009edb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ea8:	4b94      	ldr	r3, [pc, #592]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0320 	and.w	r3, r3, #32
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d009      	beq.n	8009ec8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009eb4:	4b91      	ldr	r3, [pc, #580]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	08db      	lsrs	r3, r3, #3
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	4a90      	ldr	r2, [pc, #576]	; (800a100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009ec6:	e111      	b.n	800a0ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ec8:	4b8d      	ldr	r3, [pc, #564]	; (800a100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009eca:	61bb      	str	r3, [r7, #24]
    break;
 8009ecc:	e10e      	b.n	800a0ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009ece:	4b8d      	ldr	r3, [pc, #564]	; (800a104 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ed0:	61bb      	str	r3, [r7, #24]
    break;
 8009ed2:	e10b      	b.n	800a0ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009ed4:	4b8c      	ldr	r3, [pc, #560]	; (800a108 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ed6:	61bb      	str	r3, [r7, #24]
    break;
 8009ed8:	e108      	b.n	800a0ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009eda:	4b88      	ldr	r3, [pc, #544]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ede:	f003 0303 	and.w	r3, r3, #3
 8009ee2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009ee4:	4b85      	ldr	r3, [pc, #532]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee8:	091b      	lsrs	r3, r3, #4
 8009eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009ef0:	4b82      	ldr	r3, [pc, #520]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009efa:	4b80      	ldr	r3, [pc, #512]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efe:	08db      	lsrs	r3, r3, #3
 8009f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	fb02 f303 	mul.w	r3, r2, r3
 8009f0a:	ee07 3a90 	vmov	s15, r3
 8009f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 80e1 	beq.w	800a0e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	f000 8083 	beq.w	800a02c <HAL_RCC_GetSysClockFreq+0x204>
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	f200 80a1 	bhi.w	800a070 <HAL_RCC_GetSysClockFreq+0x248>
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d003      	beq.n	8009f3c <HAL_RCC_GetSysClockFreq+0x114>
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d056      	beq.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f3a:	e099      	b.n	800a070 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f3c:	4b6f      	ldr	r3, [pc, #444]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d02d      	beq.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f48:	4b6c      	ldr	r3, [pc, #432]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	08db      	lsrs	r3, r3, #3
 8009f4e:	f003 0303 	and.w	r3, r3, #3
 8009f52:	4a6b      	ldr	r2, [pc, #428]	; (800a100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f54:	fa22 f303 	lsr.w	r3, r2, r3
 8009f58:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	ee07 3a90 	vmov	s15, r3
 8009f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f72:	4b62      	ldr	r3, [pc, #392]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f86:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a10c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009fa2:	e087      	b.n	800a0b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fae:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a110 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb6:	4b51      	ldr	r3, [pc, #324]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a10c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fe6:	e065      	b.n	800a0b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a114 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffa:	4b40      	ldr	r3, [pc, #256]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a002:	ee07 3a90 	vmov	s15, r3
 800a006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a00e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a10c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a02a:	e043      	b.n	800a0b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a036:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a118 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03e:	4b2f      	ldr	r3, [pc, #188]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a046:	ee07 3a90 	vmov	s15, r3
 800a04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a052:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a10c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a06e:	e021      	b.n	800a0b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a114 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a082:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a092:	ed97 6a02 	vldr	s12, [r7, #8]
 800a096:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a10c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a0b4:	4b11      	ldr	r3, [pc, #68]	; (800a0fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b8:	0a5b      	lsrs	r3, r3, #9
 800a0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0be:	3301      	adds	r3, #1
 800a0c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	ee07 3a90 	vmov	s15, r3
 800a0c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a0cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0d8:	ee17 3a90 	vmov	r3, s15
 800a0dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a0de:	e005      	b.n	800a0ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61bb      	str	r3, [r7, #24]
    break;
 800a0e4:	e002      	b.n	800a0ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a0e6:	4b07      	ldr	r3, [pc, #28]	; (800a104 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a0e8:	61bb      	str	r3, [r7, #24]
    break;
 800a0ea:	bf00      	nop
  }

  return sysclockfreq;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3724      	adds	r7, #36	; 0x24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	58024400 	.word	0x58024400
 800a100:	03d09000 	.word	0x03d09000
 800a104:	003d0900 	.word	0x003d0900
 800a108:	007a1200 	.word	0x007a1200
 800a10c:	46000000 	.word	0x46000000
 800a110:	4c742400 	.word	0x4c742400
 800a114:	4a742400 	.word	0x4a742400
 800a118:	4af42400 	.word	0x4af42400

0800a11c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a122:	f7ff fe81 	bl	8009e28 <HAL_RCC_GetSysClockFreq>
 800a126:	4602      	mov	r2, r0
 800a128:	4b10      	ldr	r3, [pc, #64]	; (800a16c <HAL_RCC_GetHCLKFreq+0x50>)
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	0a1b      	lsrs	r3, r3, #8
 800a12e:	f003 030f 	and.w	r3, r3, #15
 800a132:	490f      	ldr	r1, [pc, #60]	; (800a170 <HAL_RCC_GetHCLKFreq+0x54>)
 800a134:	5ccb      	ldrb	r3, [r1, r3]
 800a136:	f003 031f 	and.w	r3, r3, #31
 800a13a:	fa22 f303 	lsr.w	r3, r2, r3
 800a13e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a140:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <HAL_RCC_GetHCLKFreq+0x50>)
 800a142:	699b      	ldr	r3, [r3, #24]
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	4a09      	ldr	r2, [pc, #36]	; (800a170 <HAL_RCC_GetHCLKFreq+0x54>)
 800a14a:	5cd3      	ldrb	r3, [r2, r3]
 800a14c:	f003 031f 	and.w	r3, r3, #31
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	fa22 f303 	lsr.w	r3, r2, r3
 800a156:	4a07      	ldr	r2, [pc, #28]	; (800a174 <HAL_RCC_GetHCLKFreq+0x58>)
 800a158:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a15a:	4a07      	ldr	r2, [pc, #28]	; (800a178 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a160:	4b04      	ldr	r3, [pc, #16]	; (800a174 <HAL_RCC_GetHCLKFreq+0x58>)
 800a162:	681b      	ldr	r3, [r3, #0]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	58024400 	.word	0x58024400
 800a170:	0800fb88 	.word	0x0800fb88
 800a174:	24000054 	.word	0x24000054
 800a178:	24000050 	.word	0x24000050

0800a17c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a180:	f7ff ffcc 	bl	800a11c <HAL_RCC_GetHCLKFreq>
 800a184:	4602      	mov	r2, r0
 800a186:	4b06      	ldr	r3, [pc, #24]	; (800a1a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a188:	69db      	ldr	r3, [r3, #28]
 800a18a:	091b      	lsrs	r3, r3, #4
 800a18c:	f003 0307 	and.w	r3, r3, #7
 800a190:	4904      	ldr	r1, [pc, #16]	; (800a1a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a192:	5ccb      	ldrb	r3, [r1, r3]
 800a194:	f003 031f 	and.w	r3, r3, #31
 800a198:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	0800fb88 	.word	0x0800fb88

0800a1a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a1ac:	f7ff ffb6 	bl	800a11c <HAL_RCC_GetHCLKFreq>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	4b06      	ldr	r3, [pc, #24]	; (800a1cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	0a1b      	lsrs	r3, r3, #8
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	4904      	ldr	r1, [pc, #16]	; (800a1d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1be:	5ccb      	ldrb	r3, [r1, r3]
 800a1c0:	f003 031f 	and.w	r3, r3, #31
 800a1c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	58024400 	.word	0x58024400
 800a1d0:	0800fb88 	.word	0x0800fb88

0800a1d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a1dc:	2300      	movs	r3, #0
 800a1de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d03f      	beq.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1f8:	d02a      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a1fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1fe:	d824      	bhi.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a204:	d018      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a20a:	d81e      	bhi.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d003      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a214:	d007      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a216:	e018      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a218:	4ba4      	ldr	r3, [pc, #656]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21c:	4aa3      	ldr	r2, [pc, #652]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a21e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a222:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a224:	e015      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3304      	adds	r3, #4
 800a22a:	2102      	movs	r1, #2
 800a22c:	4618      	mov	r0, r3
 800a22e:	f001 f989 	bl	800b544 <RCCEx_PLL2_Config>
 800a232:	4603      	mov	r3, r0
 800a234:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a236:	e00c      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3324      	adds	r3, #36	; 0x24
 800a23c:	2102      	movs	r1, #2
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fa32 	bl	800b6a8 <RCCEx_PLL3_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a248:	e003      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	75fb      	strb	r3, [r7, #23]
      break;
 800a24e:	e000      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a250:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d109      	bne.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a258:	4b94      	ldr	r3, [pc, #592]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a25a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a25c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a264:	4991      	ldr	r1, [pc, #580]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a266:	4313      	orrs	r3, r2
 800a268:	650b      	str	r3, [r1, #80]	; 0x50
 800a26a:	e001      	b.n	800a270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d03d      	beq.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a280:	2b04      	cmp	r3, #4
 800a282:	d826      	bhi.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a284:	a201      	add	r2, pc, #4	; (adr r2, 800a28c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28a:	bf00      	nop
 800a28c:	0800a2a1 	.word	0x0800a2a1
 800a290:	0800a2af 	.word	0x0800a2af
 800a294:	0800a2c1 	.word	0x0800a2c1
 800a298:	0800a2d9 	.word	0x0800a2d9
 800a29c:	0800a2d9 	.word	0x0800a2d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a0:	4b82      	ldr	r3, [pc, #520]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	4a81      	ldr	r2, [pc, #516]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2ac:	e015      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3304      	adds	r3, #4
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f001 f945 	bl	800b544 <RCCEx_PLL2_Config>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2be:	e00c      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3324      	adds	r3, #36	; 0x24
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f001 f9ee 	bl	800b6a8 <RCCEx_PLL3_Config>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2d0:	e003      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a2d6:	e000      	b.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a2d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d109      	bne.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a2e0:	4b72      	ldr	r3, [pc, #456]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2e4:	f023 0207 	bic.w	r2, r3, #7
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ec:	496f      	ldr	r1, [pc, #444]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	650b      	str	r3, [r1, #80]	; 0x50
 800a2f2:	e001      	b.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a300:	2b00      	cmp	r3, #0
 800a302:	d051      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a30a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a30e:	d036      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a310:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a314:	d830      	bhi.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a31a:	d032      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a31c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a320:	d82a      	bhi.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a322:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a326:	d02e      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a328:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a32c:	d824      	bhi.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a32e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a332:	d018      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a338:	d81e      	bhi.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a33e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a342:	d007      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a344:	e018      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a346:	4b59      	ldr	r3, [pc, #356]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34a:	4a58      	ldr	r2, [pc, #352]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a34c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a352:	e019      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	3304      	adds	r3, #4
 800a358:	2100      	movs	r1, #0
 800a35a:	4618      	mov	r0, r3
 800a35c:	f001 f8f2 	bl	800b544 <RCCEx_PLL2_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a364:	e010      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	3324      	adds	r3, #36	; 0x24
 800a36a:	2100      	movs	r1, #0
 800a36c:	4618      	mov	r0, r3
 800a36e:	f001 f99b 	bl	800b6a8 <RCCEx_PLL3_Config>
 800a372:	4603      	mov	r3, r0
 800a374:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a376:	e007      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	75fb      	strb	r3, [r7, #23]
      break;
 800a37c:	e004      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a37e:	bf00      	nop
 800a380:	e002      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a382:	bf00      	nop
 800a384:	e000      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a386:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d10a      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a38e:	4b47      	ldr	r3, [pc, #284]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a392:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a39c:	4943      	ldr	r1, [pc, #268]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	658b      	str	r3, [r1, #88]	; 0x58
 800a3a2:	e001      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a4:	7dfb      	ldrb	r3, [r7, #23]
 800a3a6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d051      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a3ba:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a3be:	d036      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a3c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a3c4:	d830      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a3c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3ca:	d032      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800a3cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3d0:	d82a      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a3d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a3d6:	d02e      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a3d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a3dc:	d824      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a3de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3e2:	d018      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a3e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3e8:	d81e      	bhi.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800a3ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3f2:	d007      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a3f4:	e018      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3f6:	4b2d      	ldr	r3, [pc, #180]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fa:	4a2c      	ldr	r2, [pc, #176]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a402:	e019      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3304      	adds	r3, #4
 800a408:	2100      	movs	r1, #0
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 f89a 	bl	800b544 <RCCEx_PLL2_Config>
 800a410:	4603      	mov	r3, r0
 800a412:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a414:	e010      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3324      	adds	r3, #36	; 0x24
 800a41a:	2100      	movs	r1, #0
 800a41c:	4618      	mov	r0, r3
 800a41e:	f001 f943 	bl	800b6a8 <RCCEx_PLL3_Config>
 800a422:	4603      	mov	r3, r0
 800a424:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a426:	e007      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	75fb      	strb	r3, [r7, #23]
      break;
 800a42c:	e004      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a42e:	bf00      	nop
 800a430:	e002      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a432:	bf00      	nop
 800a434:	e000      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a436:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10a      	bne.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a43e:	4b1b      	ldr	r3, [pc, #108]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a442:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a44c:	4917      	ldr	r1, [pc, #92]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	658b      	str	r3, [r1, #88]	; 0x58
 800a452:	e001      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d035      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a468:	2b30      	cmp	r3, #48	; 0x30
 800a46a:	d01c      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a46c:	2b30      	cmp	r3, #48	; 0x30
 800a46e:	d817      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a470:	2b20      	cmp	r3, #32
 800a472:	d00c      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a474:	2b20      	cmp	r3, #32
 800a476:	d813      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d019      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a47c:	2b10      	cmp	r3, #16
 800a47e:	d10f      	bne.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a480:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	4a09      	ldr	r2, [pc, #36]	; (800a4ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a48a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a48c:	e011      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	3304      	adds	r3, #4
 800a492:	2102      	movs	r1, #2
 800a494:	4618      	mov	r0, r3
 800a496:	f001 f855 	bl	800b544 <RCCEx_PLL2_Config>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a49e:	e008      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a4a4:	e005      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800a4a6:	bf00      	nop
 800a4a8:	e003      	b.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a4aa:	bf00      	nop
 800a4ac:	58024400 	.word	0x58024400
      break;
 800a4b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d109      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a4b8:	4ba3      	ldr	r3, [pc, #652]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c4:	49a0      	ldr	r1, [pc, #640]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a4ca:	e001      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d047      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4e4:	d030      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a4e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4ea:	d82a      	bhi.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a4ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4f0:	d02c      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a4f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4f6:	d824      	bhi.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a4f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4fc:	d018      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a4fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a502:	d81e      	bhi.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a50c:	d007      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a50e:	e018      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a510:	4b8d      	ldr	r3, [pc, #564]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	4a8c      	ldr	r2, [pc, #560]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a51a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a51c:	e017      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3304      	adds	r3, #4
 800a522:	2100      	movs	r1, #0
 800a524:	4618      	mov	r0, r3
 800a526:	f001 f80d 	bl	800b544 <RCCEx_PLL2_Config>
 800a52a:	4603      	mov	r3, r0
 800a52c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a52e:	e00e      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3324      	adds	r3, #36	; 0x24
 800a534:	2100      	movs	r1, #0
 800a536:	4618      	mov	r0, r3
 800a538:	f001 f8b6 	bl	800b6a8 <RCCEx_PLL3_Config>
 800a53c:	4603      	mov	r3, r0
 800a53e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a540:	e005      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	75fb      	strb	r3, [r7, #23]
      break;
 800a546:	e002      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a548:	bf00      	nop
 800a54a:	e000      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a54c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d109      	bne.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a554:	4b7c      	ldr	r3, [pc, #496]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a558:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a560:	4979      	ldr	r1, [pc, #484]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a562:	4313      	orrs	r3, r2
 800a564:	650b      	str	r3, [r1, #80]	; 0x50
 800a566:	e001      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d049      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a57c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a580:	d02e      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a582:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a586:	d828      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a588:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a58c:	d02a      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a58e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a592:	d822      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a598:	d026      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a59a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a59e:	d81c      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a5a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5a4:	d010      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a5a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5aa:	d816      	bhi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01d      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b4:	d111      	bne.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	2101      	movs	r1, #1
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 ffc1 	bl	800b544 <RCCEx_PLL2_Config>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a5c6:	e012      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3324      	adds	r3, #36	; 0x24
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f001 f86a 	bl	800b6a8 <RCCEx_PLL3_Config>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a5d8:	e009      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a5de:	e006      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a5e0:	bf00      	nop
 800a5e2:	e004      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a5e4:	bf00      	nop
 800a5e6:	e002      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a5e8:	bf00      	nop
 800a5ea:	e000      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a5ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a5f4:	4b54      	ldr	r3, [pc, #336]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a600:	4951      	ldr	r1, [pc, #324]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a602:	4313      	orrs	r3, r2
 800a604:	650b      	str	r3, [r1, #80]	; 0x50
 800a606:	e001      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d04b      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a61e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a622:	d02e      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a628:	d828      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a62a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a62e:	d02a      	beq.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a634:	d822      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a63a:	d026      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a63c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a640:	d81c      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a646:	d010      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a64c:	d816      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d01d      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a656:	d111      	bne.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3304      	adds	r3, #4
 800a65c:	2101      	movs	r1, #1
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 ff70 	bl	800b544 <RCCEx_PLL2_Config>
 800a664:	4603      	mov	r3, r0
 800a666:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a668:	e012      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	3324      	adds	r3, #36	; 0x24
 800a66e:	2101      	movs	r1, #1
 800a670:	4618      	mov	r0, r3
 800a672:	f001 f819 	bl	800b6a8 <RCCEx_PLL3_Config>
 800a676:	4603      	mov	r3, r0
 800a678:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a67a:	e009      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	75fb      	strb	r3, [r7, #23]
      break;
 800a680:	e006      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a682:	bf00      	nop
 800a684:	e004      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a686:	bf00      	nop
 800a688:	e002      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a68a:	bf00      	nop
 800a68c:	e000      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a68e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a696:	4b2c      	ldr	r3, [pc, #176]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a69a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a6a4:	4928      	ldr	r1, [pc, #160]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	658b      	str	r3, [r1, #88]	; 0x58
 800a6aa:	e001      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ac:	7dfb      	ldrb	r3, [r7, #23]
 800a6ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d02f      	beq.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c4:	d00e      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a6c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6ca:	d814      	bhi.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d015      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a6d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6d4:	d10f      	bne.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6d6:	4b1c      	ldr	r3, [pc, #112]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6da:	4a1b      	ldr	r2, [pc, #108]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a6dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a6e2:	e00c      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 ff2a 	bl	800b544 <RCCEx_PLL2_Config>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a6f4:	e003      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6fa:	e000      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a6fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d109      	bne.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a704:	4b10      	ldr	r3, [pc, #64]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a708:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a710:	490d      	ldr	r1, [pc, #52]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a712:	4313      	orrs	r3, r2
 800a714:	650b      	str	r3, [r1, #80]	; 0x50
 800a716:	e001      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a718:	7dfb      	ldrb	r3, [r7, #23]
 800a71a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d034      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d81d      	bhi.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a730:	a201      	add	r2, pc, #4	; (adr r2, 800a738 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a736:	bf00      	nop
 800a738:	0800a773 	.word	0x0800a773
 800a73c:	0800a74d 	.word	0x0800a74d
 800a740:	0800a75b 	.word	0x0800a75b
 800a744:	0800a773 	.word	0x0800a773
 800a748:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a74c:	4bb1      	ldr	r3, [pc, #708]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	4ab0      	ldr	r2, [pc, #704]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a758:	e00c      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3304      	adds	r3, #4
 800a75e:	2102      	movs	r1, #2
 800a760:	4618      	mov	r0, r3
 800a762:	f000 feef 	bl	800b544 <RCCEx_PLL2_Config>
 800a766:	4603      	mov	r3, r0
 800a768:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a76a:	e003      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	75fb      	strb	r3, [r7, #23]
      break;
 800a770:	e000      	b.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a772:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d109      	bne.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a77a:	4ba6      	ldr	r3, [pc, #664]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a77e:	f023 0203 	bic.w	r2, r3, #3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a786:	49a3      	ldr	r1, [pc, #652]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a78c:	e001      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78e:	7dfb      	ldrb	r3, [r7, #23]
 800a790:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f000 8086 	beq.w	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a7a0:	4b9d      	ldr	r3, [pc, #628]	; (800aa18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a9c      	ldr	r2, [pc, #624]	; (800aa18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a7a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7ac:	f7fb f978 	bl	8005aa0 <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7b2:	e009      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7b4:	f7fb f974 	bl	8005aa0 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b64      	cmp	r3, #100	; 0x64
 800a7c0:	d902      	bls.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	75fb      	strb	r3, [r7, #23]
        break;
 800a7c6:	e005      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7c8:	4b93      	ldr	r3, [pc, #588]	; (800aa18 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0ef      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a7d4:	7dfb      	ldrb	r3, [r7, #23]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d166      	bne.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a7da:	4b8e      	ldr	r3, [pc, #568]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a7e4:	4053      	eors	r3, r2
 800a7e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d013      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a7ee:	4b89      	ldr	r3, [pc, #548]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a7f8:	4b86      	ldr	r3, [pc, #536]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fc:	4a85      	ldr	r2, [pc, #532]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a7fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a802:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a804:	4b83      	ldr	r3, [pc, #524]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a808:	4a82      	ldr	r2, [pc, #520]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a80a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a80e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a810:	4a80      	ldr	r2, [pc, #512]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a81c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a820:	d115      	bne.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a822:	f7fb f93d 	bl	8005aa0 <HAL_GetTick>
 800a826:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a828:	e00b      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a82a:	f7fb f939 	bl	8005aa0 <HAL_GetTick>
 800a82e:	4602      	mov	r2, r0
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	f241 3288 	movw	r2, #5000	; 0x1388
 800a838:	4293      	cmp	r3, r2
 800a83a:	d902      	bls.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	75fb      	strb	r3, [r7, #23]
            break;
 800a840:	e005      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a842:	4b74      	ldr	r3, [pc, #464]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0ed      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a84e:	7dfb      	ldrb	r3, [r7, #23]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d126      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a85a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a85e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a862:	d10d      	bne.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a864:	4b6b      	ldr	r3, [pc, #428]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a872:	0919      	lsrs	r1, r3, #4
 800a874:	4b69      	ldr	r3, [pc, #420]	; (800aa1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a876:	400b      	ands	r3, r1
 800a878:	4966      	ldr	r1, [pc, #408]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a87a:	4313      	orrs	r3, r2
 800a87c:	610b      	str	r3, [r1, #16]
 800a87e:	e005      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a880:	4b64      	ldr	r3, [pc, #400]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	4a63      	ldr	r2, [pc, #396]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a886:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a88a:	6113      	str	r3, [r2, #16]
 800a88c:	4b61      	ldr	r3, [pc, #388]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a88e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a89a:	495e      	ldr	r1, [pc, #376]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	670b      	str	r3, [r1, #112]	; 0x70
 800a8a0:	e004      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a8a2:	7dfb      	ldrb	r3, [r7, #23]
 800a8a4:	75bb      	strb	r3, [r7, #22]
 800a8a6:	e001      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a8:	7dfb      	ldrb	r3, [r7, #23]
 800a8aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d07e      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8bc:	2b28      	cmp	r3, #40	; 0x28
 800a8be:	d867      	bhi.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a8c0:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a997 	.word	0x0800a997
 800a8cc:	0800a991 	.word	0x0800a991
 800a8d0:	0800a991 	.word	0x0800a991
 800a8d4:	0800a991 	.word	0x0800a991
 800a8d8:	0800a991 	.word	0x0800a991
 800a8dc:	0800a991 	.word	0x0800a991
 800a8e0:	0800a991 	.word	0x0800a991
 800a8e4:	0800a991 	.word	0x0800a991
 800a8e8:	0800a96d 	.word	0x0800a96d
 800a8ec:	0800a991 	.word	0x0800a991
 800a8f0:	0800a991 	.word	0x0800a991
 800a8f4:	0800a991 	.word	0x0800a991
 800a8f8:	0800a991 	.word	0x0800a991
 800a8fc:	0800a991 	.word	0x0800a991
 800a900:	0800a991 	.word	0x0800a991
 800a904:	0800a991 	.word	0x0800a991
 800a908:	0800a97f 	.word	0x0800a97f
 800a90c:	0800a991 	.word	0x0800a991
 800a910:	0800a991 	.word	0x0800a991
 800a914:	0800a991 	.word	0x0800a991
 800a918:	0800a991 	.word	0x0800a991
 800a91c:	0800a991 	.word	0x0800a991
 800a920:	0800a991 	.word	0x0800a991
 800a924:	0800a991 	.word	0x0800a991
 800a928:	0800a997 	.word	0x0800a997
 800a92c:	0800a991 	.word	0x0800a991
 800a930:	0800a991 	.word	0x0800a991
 800a934:	0800a991 	.word	0x0800a991
 800a938:	0800a991 	.word	0x0800a991
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800a991 	.word	0x0800a991
 800a944:	0800a991 	.word	0x0800a991
 800a948:	0800a997 	.word	0x0800a997
 800a94c:	0800a991 	.word	0x0800a991
 800a950:	0800a991 	.word	0x0800a991
 800a954:	0800a991 	.word	0x0800a991
 800a958:	0800a991 	.word	0x0800a991
 800a95c:	0800a991 	.word	0x0800a991
 800a960:	0800a991 	.word	0x0800a991
 800a964:	0800a991 	.word	0x0800a991
 800a968:	0800a997 	.word	0x0800a997
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3304      	adds	r3, #4
 800a970:	2101      	movs	r1, #1
 800a972:	4618      	mov	r0, r3
 800a974:	f000 fde6 	bl	800b544 <RCCEx_PLL2_Config>
 800a978:	4603      	mov	r3, r0
 800a97a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a97c:	e00c      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3324      	adds	r3, #36	; 0x24
 800a982:	2101      	movs	r1, #1
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fe8f 	bl	800b6a8 <RCCEx_PLL3_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a98e:	e003      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]
      break;
 800a994:	e000      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a996:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d109      	bne.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a99e:	4b1d      	ldr	r3, [pc, #116]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9aa:	491a      	ldr	r1, [pc, #104]	; (800aa14 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	654b      	str	r3, [r1, #84]	; 0x54
 800a9b0:	e001      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d03e      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c6:	2b05      	cmp	r3, #5
 800a9c8:	d820      	bhi.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a9ca:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800aa21 	.word	0x0800aa21
 800a9d4:	0800a9e9 	.word	0x0800a9e9
 800a9d8:	0800a9fb 	.word	0x0800a9fb
 800a9dc:	0800aa21 	.word	0x0800aa21
 800a9e0:	0800aa21 	.word	0x0800aa21
 800a9e4:	0800aa21 	.word	0x0800aa21
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fda8 	bl	800b544 <RCCEx_PLL2_Config>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a9f8:	e013      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3324      	adds	r3, #36	; 0x24
 800a9fe:	2101      	movs	r1, #1
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 fe51 	bl	800b6a8 <RCCEx_PLL3_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800aa0a:	e00a      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa10:	e007      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800aa12:	bf00      	nop
 800aa14:	58024400 	.word	0x58024400
 800aa18:	58024800 	.word	0x58024800
 800aa1c:	00ffffcf 	.word	0x00ffffcf
      break;
 800aa20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa22:	7dfb      	ldrb	r3, [r7, #23]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d109      	bne.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aa28:	4b9f      	ldr	r3, [pc, #636]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2c:	f023 0207 	bic.w	r2, r3, #7
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa34:	499c      	ldr	r1, [pc, #624]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa36:	4313      	orrs	r3, r2
 800aa38:	654b      	str	r3, [r1, #84]	; 0x54
 800aa3a:	e001      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0304 	and.w	r3, r3, #4
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d039      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa52:	2b05      	cmp	r3, #5
 800aa54:	d820      	bhi.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800aa56:	a201      	add	r2, pc, #4	; (adr r2, 800aa5c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800aa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5c:	0800aa9f 	.word	0x0800aa9f
 800aa60:	0800aa75 	.word	0x0800aa75
 800aa64:	0800aa87 	.word	0x0800aa87
 800aa68:	0800aa9f 	.word	0x0800aa9f
 800aa6c:	0800aa9f 	.word	0x0800aa9f
 800aa70:	0800aa9f 	.word	0x0800aa9f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3304      	adds	r3, #4
 800aa78:	2101      	movs	r1, #1
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 fd62 	bl	800b544 <RCCEx_PLL2_Config>
 800aa80:	4603      	mov	r3, r0
 800aa82:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800aa84:	e00c      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3324      	adds	r3, #36	; 0x24
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fe0b 	bl	800b6a8 <RCCEx_PLL3_Config>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800aa96:	e003      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa9c:	e000      	b.n	800aaa0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800aa9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10a      	bne.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aaa6:	4b80      	ldr	r3, [pc, #512]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aaa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaaa:	f023 0207 	bic.w	r2, r3, #7
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aab4:	497c      	ldr	r1, [pc, #496]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	658b      	str	r3, [r1, #88]	; 0x58
 800aaba:	e001      	b.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aabc:	7dfb      	ldrb	r3, [r7, #23]
 800aabe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0320 	and.w	r3, r3, #32
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d04b      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aad6:	d02e      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800aad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aadc:	d828      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800aade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae2:	d02a      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800aae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aae8:	d822      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800aaea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aaee:	d026      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800aaf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aaf4:	d81c      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800aaf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aafa:	d010      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800aafc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab00:	d816      	bhi.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d01d      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800ab06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab0a:	d111      	bne.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	2100      	movs	r1, #0
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 fd16 	bl	800b544 <RCCEx_PLL2_Config>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ab1c:	e012      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3324      	adds	r3, #36	; 0x24
 800ab22:	2102      	movs	r1, #2
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fdbf 	bl	800b6a8 <RCCEx_PLL3_Config>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ab2e:	e009      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	75fb      	strb	r3, [r7, #23]
      break;
 800ab34:	e006      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ab36:	bf00      	nop
 800ab38:	e004      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ab3a:	bf00      	nop
 800ab3c:	e002      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ab3e:	bf00      	nop
 800ab40:	e000      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800ab42:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10a      	bne.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab4a:	4b57      	ldr	r3, [pc, #348]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ab4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab58:	4953      	ldr	r1, [pc, #332]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	654b      	str	r3, [r1, #84]	; 0x54
 800ab5e:	e001      	b.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab60:	7dfb      	ldrb	r3, [r7, #23]
 800ab62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d04b      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ab7a:	d02e      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800ab7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ab80:	d828      	bhi.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ab82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab86:	d02a      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800ab88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8c:	d822      	bhi.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ab8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab92:	d026      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800ab94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab98:	d81c      	bhi.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ab9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab9e:	d010      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800aba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aba4:	d816      	bhi.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d01d      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800abaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abae:	d111      	bne.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3304      	adds	r3, #4
 800abb4:	2100      	movs	r1, #0
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 fcc4 	bl	800b544 <RCCEx_PLL2_Config>
 800abbc:	4603      	mov	r3, r0
 800abbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800abc0:	e012      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3324      	adds	r3, #36	; 0x24
 800abc6:	2102      	movs	r1, #2
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fd6d 	bl	800b6a8 <RCCEx_PLL3_Config>
 800abce:	4603      	mov	r3, r0
 800abd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800abd2:	e009      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	75fb      	strb	r3, [r7, #23]
      break;
 800abd8:	e006      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800abda:	bf00      	nop
 800abdc:	e004      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800abde:	bf00      	nop
 800abe0:	e002      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800abe2:	bf00      	nop
 800abe4:	e000      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800abe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10a      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800abee:	4b2e      	ldr	r3, [pc, #184]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800abf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abf2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abfc:	492a      	ldr	r1, [pc, #168]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	658b      	str	r3, [r1, #88]	; 0x58
 800ac02:	e001      	b.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac04:	7dfb      	ldrb	r3, [r7, #23]
 800ac06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d04d      	beq.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ac1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ac1e:	d02e      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800ac20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ac24:	d828      	bhi.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ac26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac2a:	d02a      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800ac2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac30:	d822      	bhi.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ac32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ac36:	d026      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800ac38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ac3c:	d81c      	bhi.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ac3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac42:	d010      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800ac44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac48:	d816      	bhi.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d01d      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800ac4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac52:	d111      	bne.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	2100      	movs	r1, #0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fc72 	bl	800b544 <RCCEx_PLL2_Config>
 800ac60:	4603      	mov	r3, r0
 800ac62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ac64:	e012      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	3324      	adds	r3, #36	; 0x24
 800ac6a:	2102      	movs	r1, #2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 fd1b 	bl	800b6a8 <RCCEx_PLL3_Config>
 800ac72:	4603      	mov	r3, r0
 800ac74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ac76:	e009      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac7c:	e006      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ac7e:	bf00      	nop
 800ac80:	e004      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ac82:	bf00      	nop
 800ac84:	e002      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ac86:	bf00      	nop
 800ac88:	e000      	b.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ac8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac8c:	7dfb      	ldrb	r3, [r7, #23]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10c      	bne.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac92:	4b05      	ldr	r3, [pc, #20]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ac94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aca0:	4901      	ldr	r1, [pc, #4]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	658b      	str	r3, [r1, #88]	; 0x58
 800aca6:	e003      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800aca8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acac:	7dfb      	ldrb	r3, [r7, #23]
 800acae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0308 	and.w	r3, r3, #8
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d018      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc4:	d10a      	bne.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3324      	adds	r3, #36	; 0x24
 800acca:	2102      	movs	r1, #2
 800accc:	4618      	mov	r0, r3
 800acce:	f000 fceb 	bl	800b6a8 <RCCEx_PLL3_Config>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d001      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800acdc:	4b8a      	ldr	r3, [pc, #552]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800acde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace8:	4987      	ldr	r1, [pc, #540]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800acea:	4313      	orrs	r3, r2
 800acec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0310 	and.w	r3, r3, #16
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d01a      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad04:	d10a      	bne.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3324      	adds	r3, #36	; 0x24
 800ad0a:	2102      	movs	r1, #2
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 fccb 	bl	800b6a8 <RCCEx_PLL3_Config>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad1c:	4b7a      	ldr	r3, [pc, #488]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad2a:	4977      	ldr	r1, [pc, #476]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d034      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad46:	d01d      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ad48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad4c:	d817      	bhi.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ad52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad56:	d009      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ad58:	e011      	b.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	2100      	movs	r1, #0
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fbef 	bl	800b544 <RCCEx_PLL2_Config>
 800ad66:	4603      	mov	r3, r0
 800ad68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ad6a:	e00c      	b.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3324      	adds	r3, #36	; 0x24
 800ad70:	2102      	movs	r1, #2
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 fc98 	bl	800b6a8 <RCCEx_PLL3_Config>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ad7c:	e003      	b.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	75fb      	strb	r3, [r7, #23]
      break;
 800ad82:	e000      	b.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ad84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad8c:	4b5e      	ldr	r3, [pc, #376]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ad9a:	495b      	ldr	r1, [pc, #364]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	658b      	str	r3, [r1, #88]	; 0x58
 800ada0:	e001      	b.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d033      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adbc:	d01c      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800adbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adc2:	d816      	bhi.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800adc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adc8:	d003      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800adca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adce:	d007      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800add0:	e00f      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800add2:	4b4d      	ldr	r3, [pc, #308]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	4a4c      	ldr	r2, [pc, #304]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800add8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800addc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800adde:	e00c      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	3324      	adds	r3, #36	; 0x24
 800ade4:	2101      	movs	r1, #1
 800ade6:	4618      	mov	r0, r3
 800ade8:	f000 fc5e 	bl	800b6a8 <RCCEx_PLL3_Config>
 800adec:	4603      	mov	r3, r0
 800adee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800adf0:	e003      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adf2:	2301      	movs	r3, #1
 800adf4:	75fb      	strb	r3, [r7, #23]
      break;
 800adf6:	e000      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800adf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10a      	bne.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae00:	4b41      	ldr	r3, [pc, #260]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae0e:	493e      	ldr	r1, [pc, #248]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae10:	4313      	orrs	r3, r2
 800ae12:	654b      	str	r3, [r1, #84]	; 0x54
 800ae14:	e001      	b.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae16:	7dfb      	ldrb	r3, [r7, #23]
 800ae18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d029      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800ae2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae32:	d007      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ae34:	e00f      	b.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae36:	4b34      	ldr	r3, [pc, #208]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3a:	4a33      	ldr	r2, [pc, #204]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ae42:	e00b      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3304      	adds	r3, #4
 800ae48:	2102      	movs	r1, #2
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 fb7a 	bl	800b544 <RCCEx_PLL2_Config>
 800ae50:	4603      	mov	r3, r0
 800ae52:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ae54:	e002      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	75fb      	strb	r3, [r7, #23]
      break;
 800ae5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae62:	4b29      	ldr	r3, [pc, #164]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6e:	4926      	ldr	r1, [pc, #152]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ae70:	4313      	orrs	r3, r2
 800ae72:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ae74:	e001      	b.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae76:	7dfb      	ldrb	r3, [r7, #23]
 800ae78:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00a      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3324      	adds	r3, #36	; 0x24
 800ae8a:	2102      	movs	r1, #2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 fc0b 	bl	800b6a8 <RCCEx_PLL3_Config>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d001      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d033      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeb0:	d017      	beq.n	800aee2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800aeb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeb6:	d811      	bhi.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aeb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aebc:	d013      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800aebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aec2:	d80b      	bhi.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d010      	beq.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800aec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aecc:	d106      	bne.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aece:	4b0e      	ldr	r3, [pc, #56]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed2:	4a0d      	ldr	r2, [pc, #52]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aeda:	e007      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	75fb      	strb	r3, [r7, #23]
      break;
 800aee0:	e004      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aee2:	bf00      	nop
 800aee4:	e002      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aee6:	bf00      	nop
 800aee8:	e000      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800aeea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10c      	bne.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aef2:	4b05      	ldr	r3, [pc, #20]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800aef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aefe:	4902      	ldr	r1, [pc, #8]	; (800af08 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800af00:	4313      	orrs	r3, r2
 800af02:	654b      	str	r3, [r1, #84]	; 0x54
 800af04:	e004      	b.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800af06:	bf00      	nop
 800af08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af0c:	7dfb      	ldrb	r3, [r7, #23]
 800af0e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d008      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af1c:	4b29      	ldr	r3, [pc, #164]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af28:	4926      	ldr	r1, [pc, #152]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d008      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af3a:	4b22      	ldr	r3, [pc, #136]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af46:	491f      	ldr	r1, [pc, #124]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00d      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af58:	4b1a      	ldr	r3, [pc, #104]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	4a19      	ldr	r2, [pc, #100]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af62:	6113      	str	r3, [r2, #16]
 800af64:	4b17      	ldr	r3, [pc, #92]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af66:	691a      	ldr	r2, [r3, #16]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af6e:	4915      	ldr	r1, [pc, #84]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af70:	4313      	orrs	r3, r2
 800af72:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	da08      	bge.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af7c:	4b11      	ldr	r3, [pc, #68]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af88:	490e      	ldr	r1, [pc, #56]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d009      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af9a:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800af9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afa8:	4906      	ldr	r1, [pc, #24]	; (800afc4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800afae:	7dbb      	ldrb	r3, [r7, #22]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	e000      	b.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	58024400 	.word	0x58024400

0800afc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800afcc:	f7ff f8a6 	bl	800a11c <HAL_RCC_GetHCLKFreq>
 800afd0:	4602      	mov	r2, r0
 800afd2:	4b06      	ldr	r3, [pc, #24]	; (800afec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	091b      	lsrs	r3, r3, #4
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	4904      	ldr	r1, [pc, #16]	; (800aff0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800afde:	5ccb      	ldrb	r3, [r1, r3]
 800afe0:	f003 031f 	and.w	r3, r3, #31
 800afe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afe8:	4618      	mov	r0, r3
 800afea:	bd80      	pop	{r7, pc}
 800afec:	58024400 	.word	0x58024400
 800aff0:	0800fb88 	.word	0x0800fb88

0800aff4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aff4:	b480      	push	{r7}
 800aff6:	b089      	sub	sp, #36	; 0x24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800affc:	4ba1      	ldr	r3, [pc, #644]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800affe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b000:	f003 0303 	and.w	r3, r3, #3
 800b004:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b006:	4b9f      	ldr	r3, [pc, #636]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00a:	0b1b      	lsrs	r3, r3, #12
 800b00c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b010:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b012:	4b9c      	ldr	r3, [pc, #624]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b016:	091b      	lsrs	r3, r3, #4
 800b018:	f003 0301 	and.w	r3, r3, #1
 800b01c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b01e:	4b99      	ldr	r3, [pc, #612]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b022:	08db      	lsrs	r3, r3, #3
 800b024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	fb02 f303 	mul.w	r3, r2, r3
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f000 8111 	beq.w	800b264 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	2b02      	cmp	r3, #2
 800b046:	f000 8083 	beq.w	800b150 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	f200 80a1 	bhi.w	800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d003      	beq.n	800b060 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d056      	beq.n	800b10c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b05e:	e099      	b.n	800b194 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b060:	4b88      	ldr	r3, [pc, #544]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0320 	and.w	r3, r3, #32
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d02d      	beq.n	800b0c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b06c:	4b85      	ldr	r3, [pc, #532]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	08db      	lsrs	r3, r3, #3
 800b072:	f003 0303 	and.w	r3, r3, #3
 800b076:	4a84      	ldr	r2, [pc, #528]	; (800b288 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b078:	fa22 f303 	lsr.w	r3, r2, r3
 800b07c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b096:	4b7b      	ldr	r3, [pc, #492]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b09e:	ee07 3a90 	vmov	s15, r3
 800b0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b0c6:	e087      	b.n	800b1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b290 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b0d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0da:	4b6a      	ldr	r3, [pc, #424]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b102:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b10a:	e065      	b.n	800b1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b116:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b11e:	4b59      	ldr	r3, [pc, #356]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b12e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b132:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b13e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b14e:	e043      	b.n	800b1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b162:	4b48      	ldr	r3, [pc, #288]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b172:	ed97 6a03 	vldr	s12, [r7, #12]
 800b176:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b192:	e021      	b.n	800b1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b19e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a6:	4b37      	ldr	r3, [pc, #220]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b28c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b1d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b1d8:	4b2a      	ldr	r3, [pc, #168]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1dc:	0a5b      	lsrs	r3, r3, #9
 800b1de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1e2:	ee07 3a90 	vmov	s15, r3
 800b1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1fe:	ee17 2a90 	vmov	r2, s15
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b206:	4b1f      	ldr	r3, [pc, #124]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	0c1b      	lsrs	r3, r3, #16
 800b20c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b210:	ee07 3a90 	vmov	s15, r3
 800b214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b21c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b220:	edd7 6a07 	vldr	s13, [r7, #28]
 800b224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b22c:	ee17 2a90 	vmov	r2, s15
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b234:	4b13      	ldr	r3, [pc, #76]	; (800b284 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b238:	0e1b      	lsrs	r3, r3, #24
 800b23a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b23e:	ee07 3a90 	vmov	s15, r3
 800b242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b24a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b24e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b25a:	ee17 2a90 	vmov	r2, s15
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b262:	e008      	b.n	800b276 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	609a      	str	r2, [r3, #8]
}
 800b276:	bf00      	nop
 800b278:	3724      	adds	r7, #36	; 0x24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400
 800b288:	03d09000 	.word	0x03d09000
 800b28c:	46000000 	.word	0x46000000
 800b290:	4c742400 	.word	0x4c742400
 800b294:	4a742400 	.word	0x4a742400
 800b298:	4af42400 	.word	0x4af42400

0800b29c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b089      	sub	sp, #36	; 0x24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2a4:	4ba1      	ldr	r3, [pc, #644]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a8:	f003 0303 	and.w	r3, r3, #3
 800b2ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b2ae:	4b9f      	ldr	r3, [pc, #636]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b2:	0d1b      	lsrs	r3, r3, #20
 800b2b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b2ba:	4b9c      	ldr	r3, [pc, #624]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2be:	0a1b      	lsrs	r3, r3, #8
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b2c6:	4b99      	ldr	r3, [pc, #612]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ca:	08db      	lsrs	r3, r3, #3
 800b2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	fb02 f303 	mul.w	r3, r2, r3
 800b2d6:	ee07 3a90 	vmov	s15, r3
 800b2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 8111 	beq.w	800b50c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	f000 8083 	beq.w	800b3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	f200 80a1 	bhi.w	800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d056      	beq.n	800b3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b306:	e099      	b.n	800b43c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b308:	4b88      	ldr	r3, [pc, #544]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 0320 	and.w	r3, r3, #32
 800b310:	2b00      	cmp	r3, #0
 800b312:	d02d      	beq.n	800b370 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b314:	4b85      	ldr	r3, [pc, #532]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	08db      	lsrs	r3, r3, #3
 800b31a:	f003 0303 	and.w	r3, r3, #3
 800b31e:	4a84      	ldr	r2, [pc, #528]	; (800b530 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b320:	fa22 f303 	lsr.w	r3, r2, r3
 800b324:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	ee07 3a90 	vmov	s15, r3
 800b32c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b33e:	4b7b      	ldr	r3, [pc, #492]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b352:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b36e:	e087      	b.n	800b480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b538 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b382:	4b6a      	ldr	r3, [pc, #424]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b392:	ed97 6a03 	vldr	s12, [r7, #12]
 800b396:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3b2:	e065      	b.n	800b480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b53c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c6:	4b59      	ldr	r3, [pc, #356]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3f6:	e043      	b.n	800b480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40a:	4b48      	ldr	r3, [pc, #288]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b412:	ee07 3a90 	vmov	s15, r3
 800b416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b41e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b43a:	e021      	b.n	800b480 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b53c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44e:	4b37      	ldr	r3, [pc, #220]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b456:	ee07 3a90 	vmov	s15, r3
 800b45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b462:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b534 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b47e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b480:	4b2a      	ldr	r3, [pc, #168]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b484:	0a5b      	lsrs	r3, r3, #9
 800b486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b48a:	ee07 3a90 	vmov	s15, r3
 800b48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b49a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b49e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4a6:	ee17 2a90 	vmov	r2, s15
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b4ae:	4b1f      	ldr	r3, [pc, #124]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b2:	0c1b      	lsrs	r3, r3, #16
 800b4b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b8:	ee07 3a90 	vmov	s15, r3
 800b4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d4:	ee17 2a90 	vmov	r2, s15
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b4dc:	4b13      	ldr	r3, [pc, #76]	; (800b52c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4e0:	0e1b      	lsrs	r3, r3, #24
 800b4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e6:	ee07 3a90 	vmov	s15, r3
 800b4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b502:	ee17 2a90 	vmov	r2, s15
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b50a:	e008      	b.n	800b51e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	609a      	str	r2, [r3, #8]
}
 800b51e:	bf00      	nop
 800b520:	3724      	adds	r7, #36	; 0x24
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	58024400 	.word	0x58024400
 800b530:	03d09000 	.word	0x03d09000
 800b534:	46000000 	.word	0x46000000
 800b538:	4c742400 	.word	0x4c742400
 800b53c:	4a742400 	.word	0x4a742400
 800b540:	4af42400 	.word	0x4af42400

0800b544 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b552:	4b53      	ldr	r3, [pc, #332]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b556:	f003 0303 	and.w	r3, r3, #3
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d101      	bne.n	800b562 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e099      	b.n	800b696 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b562:	4b4f      	ldr	r3, [pc, #316]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a4e      	ldr	r2, [pc, #312]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b568:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b56c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b56e:	f7fa fa97 	bl	8005aa0 <HAL_GetTick>
 800b572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b574:	e008      	b.n	800b588 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b576:	f7fa fa93 	bl	8005aa0 <HAL_GetTick>
 800b57a:	4602      	mov	r2, r0
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	2b02      	cmp	r3, #2
 800b582:	d901      	bls.n	800b588 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e086      	b.n	800b696 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b588:	4b45      	ldr	r3, [pc, #276]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1f0      	bne.n	800b576 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b594:	4b42      	ldr	r3, [pc, #264]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b598:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	031b      	lsls	r3, r3, #12
 800b5a2:	493f      	ldr	r1, [pc, #252]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	628b      	str	r3, [r1, #40]	; 0x28
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	025b      	lsls	r3, r3, #9
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	431a      	orrs	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	041b      	lsls	r3, r3, #16
 800b5c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	061b      	lsls	r3, r3, #24
 800b5d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b5d8:	4931      	ldr	r1, [pc, #196]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b5de:	4b30      	ldr	r3, [pc, #192]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	492d      	ldr	r1, [pc, #180]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b5f0:	4b2b      	ldr	r3, [pc, #172]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	f023 0220 	bic.w	r2, r3, #32
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	4928      	ldr	r1, [pc, #160]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b5fe:	4313      	orrs	r3, r2
 800b600:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b602:	4b27      	ldr	r3, [pc, #156]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b606:	4a26      	ldr	r2, [pc, #152]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b608:	f023 0310 	bic.w	r3, r3, #16
 800b60c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b60e:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b612:	4b24      	ldr	r3, [pc, #144]	; (800b6a4 <RCCEx_PLL2_Config+0x160>)
 800b614:	4013      	ands	r3, r2
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	69d2      	ldr	r2, [r2, #28]
 800b61a:	00d2      	lsls	r2, r2, #3
 800b61c:	4920      	ldr	r1, [pc, #128]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b61e:	4313      	orrs	r3, r2
 800b620:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b622:	4b1f      	ldr	r3, [pc, #124]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b626:	4a1e      	ldr	r2, [pc, #120]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b628:	f043 0310 	orr.w	r3, r3, #16
 800b62c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d106      	bne.n	800b642 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b634:	4b1a      	ldr	r3, [pc, #104]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b638:	4a19      	ldr	r2, [pc, #100]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b63a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b63e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b640:	e00f      	b.n	800b662 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d106      	bne.n	800b656 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b648:	4b15      	ldr	r3, [pc, #84]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64c:	4a14      	ldr	r2, [pc, #80]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b64e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b652:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b654:	e005      	b.n	800b662 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b656:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65a:	4a11      	ldr	r2, [pc, #68]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b65c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b660:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b662:	4b0f      	ldr	r3, [pc, #60]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a0e      	ldr	r2, [pc, #56]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b66c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b66e:	f7fa fa17 	bl	8005aa0 <HAL_GetTick>
 800b672:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b674:	e008      	b.n	800b688 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b676:	f7fa fa13 	bl	8005aa0 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	2b02      	cmp	r3, #2
 800b682:	d901      	bls.n	800b688 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b684:	2303      	movs	r3, #3
 800b686:	e006      	b.n	800b696 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b688:	4b05      	ldr	r3, [pc, #20]	; (800b6a0 <RCCEx_PLL2_Config+0x15c>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0f0      	beq.n	800b676 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	58024400 	.word	0x58024400
 800b6a4:	ffff0007 	.word	0xffff0007

0800b6a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6b6:	4b53      	ldr	r3, [pc, #332]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ba:	f003 0303 	and.w	r3, r3, #3
 800b6be:	2b03      	cmp	r3, #3
 800b6c0:	d101      	bne.n	800b6c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e099      	b.n	800b7fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b6c6:	4b4f      	ldr	r3, [pc, #316]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a4e      	ldr	r2, [pc, #312]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b6cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6d2:	f7fa f9e5 	bl	8005aa0 <HAL_GetTick>
 800b6d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6d8:	e008      	b.n	800b6ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b6da:	f7fa f9e1 	bl	8005aa0 <HAL_GetTick>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d901      	bls.n	800b6ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e086      	b.n	800b7fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6ec:	4b45      	ldr	r3, [pc, #276]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1f0      	bne.n	800b6da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b6f8:	4b42      	ldr	r3, [pc, #264]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	051b      	lsls	r3, r3, #20
 800b706:	493f      	ldr	r1, [pc, #252]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b708:	4313      	orrs	r3, r2
 800b70a:	628b      	str	r3, [r1, #40]	; 0x28
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	3b01      	subs	r3, #1
 800b712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	025b      	lsls	r3, r3, #9
 800b71e:	b29b      	uxth	r3, r3
 800b720:	431a      	orrs	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	3b01      	subs	r3, #1
 800b728:	041b      	lsls	r3, r3, #16
 800b72a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b72e:	431a      	orrs	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	3b01      	subs	r3, #1
 800b736:	061b      	lsls	r3, r3, #24
 800b738:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b73c:	4931      	ldr	r1, [pc, #196]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b73e:	4313      	orrs	r3, r2
 800b740:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b742:	4b30      	ldr	r3, [pc, #192]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	492d      	ldr	r1, [pc, #180]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b750:	4313      	orrs	r3, r2
 800b752:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b754:	4b2b      	ldr	r3, [pc, #172]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	4928      	ldr	r1, [pc, #160]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b762:	4313      	orrs	r3, r2
 800b764:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b766:	4b27      	ldr	r3, [pc, #156]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76a:	4a26      	ldr	r2, [pc, #152]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b76c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b770:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b772:	4b24      	ldr	r3, [pc, #144]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b776:	4b24      	ldr	r3, [pc, #144]	; (800b808 <RCCEx_PLL3_Config+0x160>)
 800b778:	4013      	ands	r3, r2
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	69d2      	ldr	r2, [r2, #28]
 800b77e:	00d2      	lsls	r2, r2, #3
 800b780:	4920      	ldr	r1, [pc, #128]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b782:	4313      	orrs	r3, r2
 800b784:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b786:	4b1f      	ldr	r3, [pc, #124]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78a:	4a1e      	ldr	r2, [pc, #120]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b78c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d106      	bne.n	800b7a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b798:	4b1a      	ldr	r3, [pc, #104]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	4a19      	ldr	r2, [pc, #100]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b79e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b7a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7a4:	e00f      	b.n	800b7c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d106      	bne.n	800b7ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b7ac:	4b15      	ldr	r3, [pc, #84]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b0:	4a14      	ldr	r2, [pc, #80]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b7b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7b8:	e005      	b.n	800b7c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b7ba:	4b12      	ldr	r3, [pc, #72]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7be:	4a11      	ldr	r2, [pc, #68]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b7c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b7c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b7c6:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a0e      	ldr	r2, [pc, #56]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b7cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7d2:	f7fa f965 	bl	8005aa0 <HAL_GetTick>
 800b7d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7d8:	e008      	b.n	800b7ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b7da:	f7fa f961 	bl	8005aa0 <HAL_GetTick>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d901      	bls.n	800b7ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e006      	b.n	800b7fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7ec:	4b05      	ldr	r3, [pc, #20]	; (800b804 <RCCEx_PLL3_Config+0x15c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d0f0      	beq.n	800b7da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	58024400 	.word	0x58024400
 800b808:	ffff0007 	.word	0xffff0007

0800b80c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e049      	b.n	800b8b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b824:	b2db      	uxtb	r3, r3
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7f9 fb1e 	bl	8004e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2202      	movs	r2, #2
 800b83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3304      	adds	r3, #4
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	f000 fed8 	bl	800c600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3708      	adds	r7, #8
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
	...

0800b8bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d001      	beq.n	800b8d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e05e      	b.n	800b992 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	68da      	ldr	r2, [r3, #12]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 0201 	orr.w	r2, r2, #1
 800b8ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a2b      	ldr	r2, [pc, #172]	; (800b9a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d02c      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fe:	d027      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a27      	ldr	r2, [pc, #156]	; (800b9a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d022      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a26      	ldr	r2, [pc, #152]	; (800b9a8 <HAL_TIM_Base_Start_IT+0xec>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d01d      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a24      	ldr	r2, [pc, #144]	; (800b9ac <HAL_TIM_Base_Start_IT+0xf0>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d018      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a23      	ldr	r2, [pc, #140]	; (800b9b0 <HAL_TIM_Base_Start_IT+0xf4>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d013      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a21      	ldr	r2, [pc, #132]	; (800b9b4 <HAL_TIM_Base_Start_IT+0xf8>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d00e      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a20      	ldr	r2, [pc, #128]	; (800b9b8 <HAL_TIM_Base_Start_IT+0xfc>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d009      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a1e      	ldr	r2, [pc, #120]	; (800b9bc <HAL_TIM_Base_Start_IT+0x100>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d004      	beq.n	800b950 <HAL_TIM_Base_Start_IT+0x94>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a1d      	ldr	r2, [pc, #116]	; (800b9c0 <HAL_TIM_Base_Start_IT+0x104>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d115      	bne.n	800b97c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689a      	ldr	r2, [r3, #8]
 800b956:	4b1b      	ldr	r3, [pc, #108]	; (800b9c4 <HAL_TIM_Base_Start_IT+0x108>)
 800b958:	4013      	ands	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2b06      	cmp	r3, #6
 800b960:	d015      	beq.n	800b98e <HAL_TIM_Base_Start_IT+0xd2>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b968:	d011      	beq.n	800b98e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f042 0201 	orr.w	r2, r2, #1
 800b978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b97a:	e008      	b.n	800b98e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f042 0201 	orr.w	r2, r2, #1
 800b98a:	601a      	str	r2, [r3, #0]
 800b98c:	e000      	b.n	800b990 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b98e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	40010000 	.word	0x40010000
 800b9a4:	40000400 	.word	0x40000400
 800b9a8:	40000800 	.word	0x40000800
 800b9ac:	40000c00 	.word	0x40000c00
 800b9b0:	40010400 	.word	0x40010400
 800b9b4:	40001800 	.word	0x40001800
 800b9b8:	40014000 	.word	0x40014000
 800b9bc:	4000e000 	.word	0x4000e000
 800b9c0:	4000e400 	.word	0x4000e400
 800b9c4:	00010007 	.word	0x00010007

0800b9c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e049      	b.n	800ba6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7f9 fbe4 	bl	80051bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3304      	adds	r3, #4
 800ba04:	4619      	mov	r1, r3
 800ba06:	4610      	mov	r0, r2
 800ba08:	f000 fdfa 	bl	800c600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3708      	adds	r7, #8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d109      	bne.n	800ba9c <HAL_TIM_PWM_Start+0x24>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	bf14      	ite	ne
 800ba94:	2301      	movne	r3, #1
 800ba96:	2300      	moveq	r3, #0
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	e03c      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	d109      	bne.n	800bab6 <HAL_TIM_PWM_Start+0x3e>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	2b01      	cmp	r3, #1
 800baac:	bf14      	ite	ne
 800baae:	2301      	movne	r3, #1
 800bab0:	2300      	moveq	r3, #0
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	e02f      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2b08      	cmp	r3, #8
 800baba:	d109      	bne.n	800bad0 <HAL_TIM_PWM_Start+0x58>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	bf14      	ite	ne
 800bac8:	2301      	movne	r3, #1
 800baca:	2300      	moveq	r3, #0
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	e022      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2b0c      	cmp	r3, #12
 800bad4:	d109      	bne.n	800baea <HAL_TIM_PWM_Start+0x72>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b01      	cmp	r3, #1
 800bae0:	bf14      	ite	ne
 800bae2:	2301      	movne	r3, #1
 800bae4:	2300      	moveq	r3, #0
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	e015      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	2b10      	cmp	r3, #16
 800baee:	d109      	bne.n	800bb04 <HAL_TIM_PWM_Start+0x8c>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	bf14      	ite	ne
 800bafc:	2301      	movne	r3, #1
 800bafe:	2300      	moveq	r3, #0
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	e008      	b.n	800bb16 <HAL_TIM_PWM_Start+0x9e>
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	bf14      	ite	ne
 800bb10:	2301      	movne	r3, #1
 800bb12:	2300      	moveq	r3, #0
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e0ab      	b.n	800bc76 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d104      	bne.n	800bb2e <HAL_TIM_PWM_Start+0xb6>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2202      	movs	r2, #2
 800bb28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb2c:	e023      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d104      	bne.n	800bb3e <HAL_TIM_PWM_Start+0xc6>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2202      	movs	r2, #2
 800bb38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb3c:	e01b      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d104      	bne.n	800bb4e <HAL_TIM_PWM_Start+0xd6>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb4c:	e013      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b0c      	cmp	r3, #12
 800bb52:	d104      	bne.n	800bb5e <HAL_TIM_PWM_Start+0xe6>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2202      	movs	r2, #2
 800bb58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb5c:	e00b      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b10      	cmp	r3, #16
 800bb62:	d104      	bne.n	800bb6e <HAL_TIM_PWM_Start+0xf6>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2202      	movs	r2, #2
 800bb68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb6c:	e003      	b.n	800bb76 <HAL_TIM_PWM_Start+0xfe>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2202      	movs	r2, #2
 800bb72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	6839      	ldr	r1, [r7, #0]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f001 f958 	bl	800ce34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a3d      	ldr	r2, [pc, #244]	; (800bc80 <HAL_TIM_PWM_Start+0x208>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d013      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x13e>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a3c      	ldr	r2, [pc, #240]	; (800bc84 <HAL_TIM_PWM_Start+0x20c>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d00e      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x13e>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a3a      	ldr	r2, [pc, #232]	; (800bc88 <HAL_TIM_PWM_Start+0x210>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d009      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x13e>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a39      	ldr	r2, [pc, #228]	; (800bc8c <HAL_TIM_PWM_Start+0x214>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d004      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0x13e>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a37      	ldr	r2, [pc, #220]	; (800bc90 <HAL_TIM_PWM_Start+0x218>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d101      	bne.n	800bbba <HAL_TIM_PWM_Start+0x142>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <HAL_TIM_PWM_Start+0x144>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d007      	beq.n	800bbd0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a2a      	ldr	r2, [pc, #168]	; (800bc80 <HAL_TIM_PWM_Start+0x208>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d02c      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbe2:	d027      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a2a      	ldr	r2, [pc, #168]	; (800bc94 <HAL_TIM_PWM_Start+0x21c>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d022      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a29      	ldr	r2, [pc, #164]	; (800bc98 <HAL_TIM_PWM_Start+0x220>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d01d      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a27      	ldr	r2, [pc, #156]	; (800bc9c <HAL_TIM_PWM_Start+0x224>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d018      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a1f      	ldr	r2, [pc, #124]	; (800bc84 <HAL_TIM_PWM_Start+0x20c>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d013      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a23      	ldr	r2, [pc, #140]	; (800bca0 <HAL_TIM_PWM_Start+0x228>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d00e      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a1b      	ldr	r2, [pc, #108]	; (800bc88 <HAL_TIM_PWM_Start+0x210>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d009      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a1f      	ldr	r2, [pc, #124]	; (800bca4 <HAL_TIM_PWM_Start+0x22c>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d004      	beq.n	800bc34 <HAL_TIM_PWM_Start+0x1bc>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a1e      	ldr	r2, [pc, #120]	; (800bca8 <HAL_TIM_PWM_Start+0x230>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d115      	bne.n	800bc60 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	4b1c      	ldr	r3, [pc, #112]	; (800bcac <HAL_TIM_PWM_Start+0x234>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2b06      	cmp	r3, #6
 800bc44:	d015      	beq.n	800bc72 <HAL_TIM_PWM_Start+0x1fa>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc4c:	d011      	beq.n	800bc72 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f042 0201 	orr.w	r2, r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc5e:	e008      	b.n	800bc72 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f042 0201 	orr.w	r2, r2, #1
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	e000      	b.n	800bc74 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	40010000 	.word	0x40010000
 800bc84:	40010400 	.word	0x40010400
 800bc88:	40014000 	.word	0x40014000
 800bc8c:	40014400 	.word	0x40014400
 800bc90:	40014800 	.word	0x40014800
 800bc94:	40000400 	.word	0x40000400
 800bc98:	40000800 	.word	0x40000800
 800bc9c:	40000c00 	.word	0x40000c00
 800bca0:	40001800 	.word	0x40001800
 800bca4:	4000e000 	.word	0x4000e000
 800bca8:	4000e400 	.word	0x4000e400
 800bcac:	00010007 	.word	0x00010007

0800bcb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e08f      	b.n	800bde4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d106      	bne.n	800bcde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7f9 f961 	bl	8004fa0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2202      	movs	r2, #2
 800bce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6899      	ldr	r1, [r3, #8]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	4b3e      	ldr	r3, [pc, #248]	; (800bdec <HAL_TIM_Encoder_Init+0x13c>)
 800bcf2:	400b      	ands	r3, r1
 800bcf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f000 fc7d 	bl	800c600 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	699b      	ldr	r3, [r3, #24]
 800bd14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6a1b      	ldr	r3, [r3, #32]
 800bd1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <HAL_TIM_Encoder_Init+0x140>)
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	689a      	ldr	r2, [r3, #8]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	021b      	lsls	r3, r3, #8
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bd42:	693a      	ldr	r2, [r7, #16]
 800bd44:	4b2b      	ldr	r3, [pc, #172]	; (800bdf4 <HAL_TIM_Encoder_Init+0x144>)
 800bd46:	4013      	ands	r3, r2
 800bd48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	4b2a      	ldr	r3, [pc, #168]	; (800bdf8 <HAL_TIM_Encoder_Init+0x148>)
 800bd4e:	4013      	ands	r3, r2
 800bd50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	021b      	lsls	r3, r3, #8
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	011a      	lsls	r2, r3, #4
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	031b      	lsls	r3, r3, #12
 800bd70:	4313      	orrs	r3, r2
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bd7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bd86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	011b      	lsls	r3, r3, #4
 800bd92:	4313      	orrs	r3, r2
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	697a      	ldr	r2, [r7, #20]
 800bda0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	fffebff8 	.word	0xfffebff8
 800bdf0:	fffffcfc 	.word	0xfffffcfc
 800bdf4:	fffff3f3 	.word	0xfffff3f3
 800bdf8:	ffff0f0f 	.word	0xffff0f0f

0800bdfc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800be0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800be14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d110      	bne.n	800be4e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d102      	bne.n	800be38 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800be32:	7b7b      	ldrb	r3, [r7, #13]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d001      	beq.n	800be3c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	e089      	b.n	800bf50 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2202      	movs	r2, #2
 800be40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2202      	movs	r2, #2
 800be48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be4c:	e031      	b.n	800beb2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b04      	cmp	r3, #4
 800be52:	d110      	bne.n	800be76 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800be54:	7bbb      	ldrb	r3, [r7, #14]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d102      	bne.n	800be60 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800be5a:	7b3b      	ldrb	r3, [r7, #12]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d001      	beq.n	800be64 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	e075      	b.n	800bf50 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2202      	movs	r2, #2
 800be68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2202      	movs	r2, #2
 800be70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be74:	e01d      	b.n	800beb2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d108      	bne.n	800be8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d105      	bne.n	800be8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be82:	7b7b      	ldrb	r3, [r7, #13]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d102      	bne.n	800be8e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800be88:	7b3b      	ldrb	r3, [r7, #12]
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d001      	beq.n	800be92 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	e05e      	b.n	800bf50 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2202      	movs	r2, #2
 800be96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2202      	movs	r2, #2
 800be9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2202      	movs	r2, #2
 800bea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2202      	movs	r2, #2
 800beae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <HAL_TIM_Encoder_Start_IT+0xc4>
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b04      	cmp	r3, #4
 800bebc:	d010      	beq.n	800bee0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800bebe:	e01f      	b.n	800bf00 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2201      	movs	r2, #1
 800bec6:	2100      	movs	r1, #0
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 ffb3 	bl	800ce34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68da      	ldr	r2, [r3, #12]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f042 0202 	orr.w	r2, r2, #2
 800bedc:	60da      	str	r2, [r3, #12]
      break;
 800bede:	e02e      	b.n	800bf3e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2201      	movs	r2, #1
 800bee6:	2104      	movs	r1, #4
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 ffa3 	bl	800ce34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68da      	ldr	r2, [r3, #12]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f042 0204 	orr.w	r2, r2, #4
 800befc:	60da      	str	r2, [r3, #12]
      break;
 800befe:	e01e      	b.n	800bf3e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2201      	movs	r2, #1
 800bf06:	2100      	movs	r1, #0
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 ff93 	bl	800ce34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2201      	movs	r2, #1
 800bf14:	2104      	movs	r1, #4
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 ff8c 	bl	800ce34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68da      	ldr	r2, [r3, #12]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f042 0202 	orr.w	r2, r2, #2
 800bf2a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	68da      	ldr	r2, [r3, #12]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f042 0204 	orr.w	r2, r2, #4
 800bf3a:	60da      	str	r2, [r3, #12]
      break;
 800bf3c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f042 0201 	orr.w	r2, r2, #1
 800bf4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	f003 0302 	and.w	r3, r3, #2
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d122      	bne.n	800bfb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	f003 0302 	and.w	r3, r3, #2
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d11b      	bne.n	800bfb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f06f 0202 	mvn.w	r2, #2
 800bf84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	f003 0303 	and.w	r3, r3, #3
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d003      	beq.n	800bfa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fb12 	bl	800c5c4 <HAL_TIM_IC_CaptureCallback>
 800bfa0:	e005      	b.n	800bfae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fb04 	bl	800c5b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fb15 	bl	800c5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	f003 0304 	and.w	r3, r3, #4
 800bfbe:	2b04      	cmp	r3, #4
 800bfc0:	d122      	bne.n	800c008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	f003 0304 	and.w	r3, r3, #4
 800bfcc:	2b04      	cmp	r3, #4
 800bfce:	d11b      	bne.n	800c008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f06f 0204 	mvn.w	r2, #4
 800bfd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2202      	movs	r2, #2
 800bfde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d003      	beq.n	800bff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fae8 	bl	800c5c4 <HAL_TIM_IC_CaptureCallback>
 800bff4:	e005      	b.n	800c002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fada 	bl	800c5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 faeb 	bl	800c5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	f003 0308 	and.w	r3, r3, #8
 800c012:	2b08      	cmp	r3, #8
 800c014:	d122      	bne.n	800c05c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	f003 0308 	and.w	r3, r3, #8
 800c020:	2b08      	cmp	r3, #8
 800c022:	d11b      	bne.n	800c05c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f06f 0208 	mvn.w	r2, #8
 800c02c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2204      	movs	r2, #4
 800c032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	f003 0303 	and.w	r3, r3, #3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fabe 	bl	800c5c4 <HAL_TIM_IC_CaptureCallback>
 800c048:	e005      	b.n	800c056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fab0 	bl	800c5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fac1 	bl	800c5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	691b      	ldr	r3, [r3, #16]
 800c062:	f003 0310 	and.w	r3, r3, #16
 800c066:	2b10      	cmp	r3, #16
 800c068:	d122      	bne.n	800c0b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	f003 0310 	and.w	r3, r3, #16
 800c074:	2b10      	cmp	r3, #16
 800c076:	d11b      	bne.n	800c0b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f06f 0210 	mvn.w	r2, #16
 800c080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2208      	movs	r2, #8
 800c086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c092:	2b00      	cmp	r3, #0
 800c094:	d003      	beq.n	800c09e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fa94 	bl	800c5c4 <HAL_TIM_IC_CaptureCallback>
 800c09c:	e005      	b.n	800c0aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fa86 	bl	800c5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f000 fa97 	bl	800c5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d10e      	bne.n	800c0dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	f003 0301 	and.w	r3, r3, #1
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d107      	bne.n	800c0dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f06f 0201 	mvn.w	r2, #1
 800c0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7f4 fcda 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0e6:	2b80      	cmp	r3, #128	; 0x80
 800c0e8:	d10e      	bne.n	800c108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0f4:	2b80      	cmp	r3, #128	; 0x80
 800c0f6:	d107      	bne.n	800c108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f001 f802 	bl	800d10c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c116:	d10e      	bne.n	800c136 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c122:	2b80      	cmp	r3, #128	; 0x80
 800c124:	d107      	bne.n	800c136 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c12e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fff5 	bl	800d120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c140:	2b40      	cmp	r3, #64	; 0x40
 800c142:	d10e      	bne.n	800c162 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c14e:	2b40      	cmp	r3, #64	; 0x40
 800c150:	d107      	bne.n	800c162 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c15a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 fa45 	bl	800c5ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	f003 0320 	and.w	r3, r3, #32
 800c16c:	2b20      	cmp	r3, #32
 800c16e:	d10e      	bne.n	800c18e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	f003 0320 	and.w	r3, r3, #32
 800c17a:	2b20      	cmp	r3, #32
 800c17c:	d107      	bne.n	800c18e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f06f 0220 	mvn.w	r2, #32
 800c186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 ffb5 	bl	800d0f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c18e:	bf00      	nop
 800c190:	3708      	adds	r7, #8
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
	...

0800c198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d101      	bne.n	800c1b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	e0ff      	b.n	800c3b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2b14      	cmp	r3, #20
 800c1c2:	f200 80f0 	bhi.w	800c3a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c1c6:	a201      	add	r2, pc, #4	; (adr r2, 800c1cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1cc:	0800c221 	.word	0x0800c221
 800c1d0:	0800c3a7 	.word	0x0800c3a7
 800c1d4:	0800c3a7 	.word	0x0800c3a7
 800c1d8:	0800c3a7 	.word	0x0800c3a7
 800c1dc:	0800c261 	.word	0x0800c261
 800c1e0:	0800c3a7 	.word	0x0800c3a7
 800c1e4:	0800c3a7 	.word	0x0800c3a7
 800c1e8:	0800c3a7 	.word	0x0800c3a7
 800c1ec:	0800c2a3 	.word	0x0800c2a3
 800c1f0:	0800c3a7 	.word	0x0800c3a7
 800c1f4:	0800c3a7 	.word	0x0800c3a7
 800c1f8:	0800c3a7 	.word	0x0800c3a7
 800c1fc:	0800c2e3 	.word	0x0800c2e3
 800c200:	0800c3a7 	.word	0x0800c3a7
 800c204:	0800c3a7 	.word	0x0800c3a7
 800c208:	0800c3a7 	.word	0x0800c3a7
 800c20c:	0800c325 	.word	0x0800c325
 800c210:	0800c3a7 	.word	0x0800c3a7
 800c214:	0800c3a7 	.word	0x0800c3a7
 800c218:	0800c3a7 	.word	0x0800c3a7
 800c21c:	0800c365 	.word	0x0800c365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fa90 	bl	800c74c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	699a      	ldr	r2, [r3, #24]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f042 0208 	orr.w	r2, r2, #8
 800c23a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0204 	bic.w	r2, r2, #4
 800c24a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6999      	ldr	r1, [r3, #24]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	691a      	ldr	r2, [r3, #16]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	430a      	orrs	r2, r1
 800c25c:	619a      	str	r2, [r3, #24]
      break;
 800c25e:	e0a5      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68b9      	ldr	r1, [r7, #8]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fb00 	bl	800c86c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	699a      	ldr	r2, [r3, #24]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c27a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c28a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6999      	ldr	r1, [r3, #24]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	021a      	lsls	r2, r3, #8
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	430a      	orrs	r2, r1
 800c29e:	619a      	str	r2, [r3, #24]
      break;
 800c2a0:	e084      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68b9      	ldr	r1, [r7, #8]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 fb69 	bl	800c980 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	69da      	ldr	r2, [r3, #28]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 0208 	orr.w	r2, r2, #8
 800c2bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	69da      	ldr	r2, [r3, #28]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f022 0204 	bic.w	r2, r2, #4
 800c2cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	69d9      	ldr	r1, [r3, #28]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	61da      	str	r2, [r3, #28]
      break;
 800c2e0:	e064      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fbd1 	bl	800ca90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	69da      	ldr	r2, [r3, #28]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	69da      	ldr	r2, [r3, #28]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c30c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	69d9      	ldr	r1, [r3, #28]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	021a      	lsls	r2, r3, #8
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	61da      	str	r2, [r3, #28]
      break;
 800c322:	e043      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 fc1a 	bl	800cb64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f042 0208 	orr.w	r2, r2, #8
 800c33e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f022 0204 	bic.w	r2, r2, #4
 800c34e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	691a      	ldr	r2, [r3, #16]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c362:	e023      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68b9      	ldr	r1, [r7, #8]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 fc5e 	bl	800cc2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c37e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c38e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	691b      	ldr	r3, [r3, #16]
 800c39a:	021a      	lsls	r2, r3, #8
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	430a      	orrs	r2, r1
 800c3a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c3a4:	e002      	b.n	800c3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop

0800c3c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d101      	bne.n	800c3dc <HAL_TIM_ConfigClockSource+0x1c>
 800c3d8:	2302      	movs	r3, #2
 800c3da:	e0dc      	b.n	800c596 <HAL_TIM_ConfigClockSource+0x1d6>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	4b6a      	ldr	r3, [pc, #424]	; (800c5a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a64      	ldr	r2, [pc, #400]	; (800c5a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c412:	4293      	cmp	r3, r2
 800c414:	f000 80a9 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c418:	4a62      	ldr	r2, [pc, #392]	; (800c5a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	f200 80ae 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c420:	4a61      	ldr	r2, [pc, #388]	; (800c5a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c422:	4293      	cmp	r3, r2
 800c424:	f000 80a1 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c428:	4a5f      	ldr	r2, [pc, #380]	; (800c5a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	f200 80a6 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c430:	4a5e      	ldr	r2, [pc, #376]	; (800c5ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800c432:	4293      	cmp	r3, r2
 800c434:	f000 8099 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c438:	4a5c      	ldr	r2, [pc, #368]	; (800c5ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	f200 809e 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c440:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c444:	f000 8091 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c448:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c44c:	f200 8096 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c454:	f000 8089 	beq.w	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c45c:	f200 808e 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c464:	d03e      	beq.n	800c4e4 <HAL_TIM_ConfigClockSource+0x124>
 800c466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c46a:	f200 8087 	bhi.w	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c46e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c472:	f000 8086 	beq.w	800c582 <HAL_TIM_ConfigClockSource+0x1c2>
 800c476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c47a:	d87f      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c47c:	2b70      	cmp	r3, #112	; 0x70
 800c47e:	d01a      	beq.n	800c4b6 <HAL_TIM_ConfigClockSource+0xf6>
 800c480:	2b70      	cmp	r3, #112	; 0x70
 800c482:	d87b      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c484:	2b60      	cmp	r3, #96	; 0x60
 800c486:	d050      	beq.n	800c52a <HAL_TIM_ConfigClockSource+0x16a>
 800c488:	2b60      	cmp	r3, #96	; 0x60
 800c48a:	d877      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c48c:	2b50      	cmp	r3, #80	; 0x50
 800c48e:	d03c      	beq.n	800c50a <HAL_TIM_ConfigClockSource+0x14a>
 800c490:	2b50      	cmp	r3, #80	; 0x50
 800c492:	d873      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c494:	2b40      	cmp	r3, #64	; 0x40
 800c496:	d058      	beq.n	800c54a <HAL_TIM_ConfigClockSource+0x18a>
 800c498:	2b40      	cmp	r3, #64	; 0x40
 800c49a:	d86f      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c49c:	2b30      	cmp	r3, #48	; 0x30
 800c49e:	d064      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4a0:	2b30      	cmp	r3, #48	; 0x30
 800c4a2:	d86b      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4a4:	2b20      	cmp	r3, #32
 800c4a6:	d060      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4a8:	2b20      	cmp	r3, #32
 800c4aa:	d867      	bhi.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d05c      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4b0:	2b10      	cmp	r3, #16
 800c4b2:	d05a      	beq.n	800c56a <HAL_TIM_ConfigClockSource+0x1aa>
 800c4b4:	e062      	b.n	800c57c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	6899      	ldr	r1, [r3, #8]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	f000 fc95 	bl	800cdf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c4d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	609a      	str	r2, [r3, #8]
      break;
 800c4e2:	e04f      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6818      	ldr	r0, [r3, #0]
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	6899      	ldr	r1, [r3, #8]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	f000 fc7e 	bl	800cdf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689a      	ldr	r2, [r3, #8]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c506:	609a      	str	r2, [r3, #8]
      break;
 800c508:	e03c      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6818      	ldr	r0, [r3, #0]
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	6859      	ldr	r1, [r3, #4]
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	461a      	mov	r2, r3
 800c518:	f000 fbee 	bl	800ccf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2150      	movs	r1, #80	; 0x50
 800c522:	4618      	mov	r0, r3
 800c524:	f000 fc48 	bl	800cdb8 <TIM_ITRx_SetConfig>
      break;
 800c528:	e02c      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6818      	ldr	r0, [r3, #0]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	6859      	ldr	r1, [r3, #4]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	461a      	mov	r2, r3
 800c538:	f000 fc0d 	bl	800cd56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2160      	movs	r1, #96	; 0x60
 800c542:	4618      	mov	r0, r3
 800c544:	f000 fc38 	bl	800cdb8 <TIM_ITRx_SetConfig>
      break;
 800c548:	e01c      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	6859      	ldr	r1, [r3, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	461a      	mov	r2, r3
 800c558:	f000 fbce 	bl	800ccf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2140      	movs	r1, #64	; 0x40
 800c562:	4618      	mov	r0, r3
 800c564:	f000 fc28 	bl	800cdb8 <TIM_ITRx_SetConfig>
      break;
 800c568:	e00c      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4619      	mov	r1, r3
 800c574:	4610      	mov	r0, r2
 800c576:	f000 fc1f 	bl	800cdb8 <TIM_ITRx_SetConfig>
      break;
 800c57a:	e003      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	73fb      	strb	r3, [r7, #15]
      break;
 800c580:	e000      	b.n	800c584 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c594:	7bfb      	ldrb	r3, [r7, #15]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	ffceff88 	.word	0xffceff88
 800c5a4:	00100040 	.word	0x00100040
 800c5a8:	00100030 	.word	0x00100030
 800c5ac:	00100020 	.word	0x00100020

0800c5b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5b8:	bf00      	nop
 800c5ba:	370c      	adds	r7, #12
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5e0:	bf00      	nop
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr

0800c5ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5f4:	bf00      	nop
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a44      	ldr	r2, [pc, #272]	; (800c724 <TIM_Base_SetConfig+0x124>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d013      	beq.n	800c640 <TIM_Base_SetConfig+0x40>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c61e:	d00f      	beq.n	800c640 <TIM_Base_SetConfig+0x40>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a41      	ldr	r2, [pc, #260]	; (800c728 <TIM_Base_SetConfig+0x128>)
 800c624:	4293      	cmp	r3, r2
 800c626:	d00b      	beq.n	800c640 <TIM_Base_SetConfig+0x40>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a40      	ldr	r2, [pc, #256]	; (800c72c <TIM_Base_SetConfig+0x12c>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d007      	beq.n	800c640 <TIM_Base_SetConfig+0x40>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a3f      	ldr	r2, [pc, #252]	; (800c730 <TIM_Base_SetConfig+0x130>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d003      	beq.n	800c640 <TIM_Base_SetConfig+0x40>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a3e      	ldr	r2, [pc, #248]	; (800c734 <TIM_Base_SetConfig+0x134>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d108      	bne.n	800c652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	4313      	orrs	r3, r2
 800c650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a33      	ldr	r2, [pc, #204]	; (800c724 <TIM_Base_SetConfig+0x124>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d027      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c660:	d023      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a30      	ldr	r2, [pc, #192]	; (800c728 <TIM_Base_SetConfig+0x128>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d01f      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a2f      	ldr	r2, [pc, #188]	; (800c72c <TIM_Base_SetConfig+0x12c>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d01b      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a2e      	ldr	r2, [pc, #184]	; (800c730 <TIM_Base_SetConfig+0x130>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d017      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a2d      	ldr	r2, [pc, #180]	; (800c734 <TIM_Base_SetConfig+0x134>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d013      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a2c      	ldr	r2, [pc, #176]	; (800c738 <TIM_Base_SetConfig+0x138>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00f      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a2b      	ldr	r2, [pc, #172]	; (800c73c <TIM_Base_SetConfig+0x13c>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d00b      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a2a      	ldr	r2, [pc, #168]	; (800c740 <TIM_Base_SetConfig+0x140>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d007      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a29      	ldr	r2, [pc, #164]	; (800c744 <TIM_Base_SetConfig+0x144>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d003      	beq.n	800c6aa <TIM_Base_SetConfig+0xaa>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a28      	ldr	r2, [pc, #160]	; (800c748 <TIM_Base_SetConfig+0x148>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d108      	bne.n	800c6bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4a10      	ldr	r2, [pc, #64]	; (800c724 <TIM_Base_SetConfig+0x124>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00f      	beq.n	800c708 <TIM_Base_SetConfig+0x108>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a12      	ldr	r2, [pc, #72]	; (800c734 <TIM_Base_SetConfig+0x134>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d00b      	beq.n	800c708 <TIM_Base_SetConfig+0x108>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	4a11      	ldr	r2, [pc, #68]	; (800c738 <TIM_Base_SetConfig+0x138>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d007      	beq.n	800c708 <TIM_Base_SetConfig+0x108>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	4a10      	ldr	r2, [pc, #64]	; (800c73c <TIM_Base_SetConfig+0x13c>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d003      	beq.n	800c708 <TIM_Base_SetConfig+0x108>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	4a0f      	ldr	r2, [pc, #60]	; (800c740 <TIM_Base_SetConfig+0x140>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d103      	bne.n	800c710 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	691a      	ldr	r2, [r3, #16]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	615a      	str	r2, [r3, #20]
}
 800c716:	bf00      	nop
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	40010000 	.word	0x40010000
 800c728:	40000400 	.word	0x40000400
 800c72c:	40000800 	.word	0x40000800
 800c730:	40000c00 	.word	0x40000c00
 800c734:	40010400 	.word	0x40010400
 800c738:	40014000 	.word	0x40014000
 800c73c:	40014400 	.word	0x40014400
 800c740:	40014800 	.word	0x40014800
 800c744:	4000e000 	.word	0x4000e000
 800c748:	4000e400 	.word	0x4000e400

0800c74c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b087      	sub	sp, #28
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	f023 0201 	bic.w	r2, r3, #1
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	699b      	ldr	r3, [r3, #24]
 800c772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	4b37      	ldr	r3, [pc, #220]	; (800c854 <TIM_OC1_SetConfig+0x108>)
 800c778:	4013      	ands	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f023 0303 	bic.w	r3, r3, #3
 800c782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	f023 0302 	bic.w	r3, r3, #2
 800c794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a2d      	ldr	r2, [pc, #180]	; (800c858 <TIM_OC1_SetConfig+0x10c>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d00f      	beq.n	800c7c8 <TIM_OC1_SetConfig+0x7c>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a2c      	ldr	r2, [pc, #176]	; (800c85c <TIM_OC1_SetConfig+0x110>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00b      	beq.n	800c7c8 <TIM_OC1_SetConfig+0x7c>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a2b      	ldr	r2, [pc, #172]	; (800c860 <TIM_OC1_SetConfig+0x114>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d007      	beq.n	800c7c8 <TIM_OC1_SetConfig+0x7c>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a2a      	ldr	r2, [pc, #168]	; (800c864 <TIM_OC1_SetConfig+0x118>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d003      	beq.n	800c7c8 <TIM_OC1_SetConfig+0x7c>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a29      	ldr	r2, [pc, #164]	; (800c868 <TIM_OC1_SetConfig+0x11c>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d10c      	bne.n	800c7e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	f023 0308 	bic.w	r3, r3, #8
 800c7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	f023 0304 	bic.w	r3, r3, #4
 800c7e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a1c      	ldr	r2, [pc, #112]	; (800c858 <TIM_OC1_SetConfig+0x10c>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d00f      	beq.n	800c80a <TIM_OC1_SetConfig+0xbe>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a1b      	ldr	r2, [pc, #108]	; (800c85c <TIM_OC1_SetConfig+0x110>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d00b      	beq.n	800c80a <TIM_OC1_SetConfig+0xbe>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4a1a      	ldr	r2, [pc, #104]	; (800c860 <TIM_OC1_SetConfig+0x114>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d007      	beq.n	800c80a <TIM_OC1_SetConfig+0xbe>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a19      	ldr	r2, [pc, #100]	; (800c864 <TIM_OC1_SetConfig+0x118>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d003      	beq.n	800c80a <TIM_OC1_SetConfig+0xbe>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a18      	ldr	r2, [pc, #96]	; (800c868 <TIM_OC1_SetConfig+0x11c>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d111      	bne.n	800c82e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	4313      	orrs	r3, r2
 800c822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	693a      	ldr	r2, [r7, #16]
 800c82a:	4313      	orrs	r3, r2
 800c82c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	693a      	ldr	r2, [r7, #16]
 800c832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	685a      	ldr	r2, [r3, #4]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	621a      	str	r2, [r3, #32]
}
 800c848:	bf00      	nop
 800c84a:	371c      	adds	r7, #28
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	fffeff8f 	.word	0xfffeff8f
 800c858:	40010000 	.word	0x40010000
 800c85c:	40010400 	.word	0x40010400
 800c860:	40014000 	.word	0x40014000
 800c864:	40014400 	.word	0x40014400
 800c868:	40014800 	.word	0x40014800

0800c86c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a1b      	ldr	r3, [r3, #32]
 800c87a:	f023 0210 	bic.w	r2, r3, #16
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	699b      	ldr	r3, [r3, #24]
 800c892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	4b34      	ldr	r3, [pc, #208]	; (800c968 <TIM_OC2_SetConfig+0xfc>)
 800c898:	4013      	ands	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	021b      	lsls	r3, r3, #8
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f023 0320 	bic.w	r3, r3, #32
 800c8b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	011b      	lsls	r3, r3, #4
 800c8be:	697a      	ldr	r2, [r7, #20]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a29      	ldr	r2, [pc, #164]	; (800c96c <TIM_OC2_SetConfig+0x100>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d003      	beq.n	800c8d4 <TIM_OC2_SetConfig+0x68>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a28      	ldr	r2, [pc, #160]	; (800c970 <TIM_OC2_SetConfig+0x104>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d10d      	bne.n	800c8f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	4a1e      	ldr	r2, [pc, #120]	; (800c96c <TIM_OC2_SetConfig+0x100>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d00f      	beq.n	800c918 <TIM_OC2_SetConfig+0xac>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4a1d      	ldr	r2, [pc, #116]	; (800c970 <TIM_OC2_SetConfig+0x104>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d00b      	beq.n	800c918 <TIM_OC2_SetConfig+0xac>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	4a1c      	ldr	r2, [pc, #112]	; (800c974 <TIM_OC2_SetConfig+0x108>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d007      	beq.n	800c918 <TIM_OC2_SetConfig+0xac>
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	4a1b      	ldr	r2, [pc, #108]	; (800c978 <TIM_OC2_SetConfig+0x10c>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d003      	beq.n	800c918 <TIM_OC2_SetConfig+0xac>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4a1a      	ldr	r2, [pc, #104]	; (800c97c <TIM_OC2_SetConfig+0x110>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d113      	bne.n	800c940 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c91e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	4313      	orrs	r3, r2
 800c932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	693a      	ldr	r2, [r7, #16]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	697a      	ldr	r2, [r7, #20]
 800c958:	621a      	str	r2, [r3, #32]
}
 800c95a:	bf00      	nop
 800c95c:	371c      	adds	r7, #28
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	feff8fff 	.word	0xfeff8fff
 800c96c:	40010000 	.word	0x40010000
 800c970:	40010400 	.word	0x40010400
 800c974:	40014000 	.word	0x40014000
 800c978:	40014400 	.word	0x40014400
 800c97c:	40014800 	.word	0x40014800

0800c980 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c980:	b480      	push	{r7}
 800c982:	b087      	sub	sp, #28
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	69db      	ldr	r3, [r3, #28]
 800c9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	4b33      	ldr	r3, [pc, #204]	; (800ca78 <TIM_OC3_SetConfig+0xf8>)
 800c9ac:	4013      	ands	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f023 0303 	bic.w	r3, r3, #3
 800c9b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a28      	ldr	r2, [pc, #160]	; (800ca7c <TIM_OC3_SetConfig+0xfc>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d003      	beq.n	800c9e6 <TIM_OC3_SetConfig+0x66>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a27      	ldr	r2, [pc, #156]	; (800ca80 <TIM_OC3_SetConfig+0x100>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d10d      	bne.n	800ca02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	021b      	lsls	r3, r3, #8
 800c9f4:	697a      	ldr	r2, [r7, #20]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a1d      	ldr	r2, [pc, #116]	; (800ca7c <TIM_OC3_SetConfig+0xfc>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d00f      	beq.n	800ca2a <TIM_OC3_SetConfig+0xaa>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a1c      	ldr	r2, [pc, #112]	; (800ca80 <TIM_OC3_SetConfig+0x100>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d00b      	beq.n	800ca2a <TIM_OC3_SetConfig+0xaa>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a1b      	ldr	r2, [pc, #108]	; (800ca84 <TIM_OC3_SetConfig+0x104>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d007      	beq.n	800ca2a <TIM_OC3_SetConfig+0xaa>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a1a      	ldr	r2, [pc, #104]	; (800ca88 <TIM_OC3_SetConfig+0x108>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d003      	beq.n	800ca2a <TIM_OC3_SetConfig+0xaa>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a19      	ldr	r2, [pc, #100]	; (800ca8c <TIM_OC3_SetConfig+0x10c>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d113      	bne.n	800ca52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	011b      	lsls	r3, r3, #4
 800ca40:	693a      	ldr	r2, [r7, #16]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	011b      	lsls	r3, r3, #4
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	697a      	ldr	r2, [r7, #20]
 800ca6a:	621a      	str	r2, [r3, #32]
}
 800ca6c:	bf00      	nop
 800ca6e:	371c      	adds	r7, #28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	fffeff8f 	.word	0xfffeff8f
 800ca7c:	40010000 	.word	0x40010000
 800ca80:	40010400 	.word	0x40010400
 800ca84:	40014000 	.word	0x40014000
 800ca88:	40014400 	.word	0x40014400
 800ca8c:	40014800 	.word	0x40014800

0800ca90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6a1b      	ldr	r3, [r3, #32]
 800caaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	4b24      	ldr	r3, [pc, #144]	; (800cb4c <TIM_OC4_SetConfig+0xbc>)
 800cabc:	4013      	ands	r3, r2
 800cabe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	021b      	lsls	r3, r3, #8
 800cace:	68fa      	ldr	r2, [r7, #12]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cada:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	031b      	lsls	r3, r3, #12
 800cae2:	693a      	ldr	r2, [r7, #16]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a19      	ldr	r2, [pc, #100]	; (800cb50 <TIM_OC4_SetConfig+0xc0>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d00f      	beq.n	800cb10 <TIM_OC4_SetConfig+0x80>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a18      	ldr	r2, [pc, #96]	; (800cb54 <TIM_OC4_SetConfig+0xc4>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d00b      	beq.n	800cb10 <TIM_OC4_SetConfig+0x80>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a17      	ldr	r2, [pc, #92]	; (800cb58 <TIM_OC4_SetConfig+0xc8>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d007      	beq.n	800cb10 <TIM_OC4_SetConfig+0x80>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	4a16      	ldr	r2, [pc, #88]	; (800cb5c <TIM_OC4_SetConfig+0xcc>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d003      	beq.n	800cb10 <TIM_OC4_SetConfig+0x80>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4a15      	ldr	r2, [pc, #84]	; (800cb60 <TIM_OC4_SetConfig+0xd0>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d109      	bne.n	800cb24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	695b      	ldr	r3, [r3, #20]
 800cb1c:	019b      	lsls	r3, r3, #6
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	685a      	ldr	r2, [r3, #4]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	621a      	str	r2, [r3, #32]
}
 800cb3e:	bf00      	nop
 800cb40:	371c      	adds	r7, #28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	feff8fff 	.word	0xfeff8fff
 800cb50:	40010000 	.word	0x40010000
 800cb54:	40010400 	.word	0x40010400
 800cb58:	40014000 	.word	0x40014000
 800cb5c:	40014400 	.word	0x40014400
 800cb60:	40014800 	.word	0x40014800

0800cb64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b087      	sub	sp, #28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6a1b      	ldr	r3, [r3, #32]
 800cb72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	4b21      	ldr	r3, [pc, #132]	; (800cc14 <TIM_OC5_SetConfig+0xb0>)
 800cb90:	4013      	ands	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cba4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	041b      	lsls	r3, r3, #16
 800cbac:	693a      	ldr	r2, [r7, #16]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a18      	ldr	r2, [pc, #96]	; (800cc18 <TIM_OC5_SetConfig+0xb4>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d00f      	beq.n	800cbda <TIM_OC5_SetConfig+0x76>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a17      	ldr	r2, [pc, #92]	; (800cc1c <TIM_OC5_SetConfig+0xb8>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d00b      	beq.n	800cbda <TIM_OC5_SetConfig+0x76>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a16      	ldr	r2, [pc, #88]	; (800cc20 <TIM_OC5_SetConfig+0xbc>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d007      	beq.n	800cbda <TIM_OC5_SetConfig+0x76>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a15      	ldr	r2, [pc, #84]	; (800cc24 <TIM_OC5_SetConfig+0xc0>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d003      	beq.n	800cbda <TIM_OC5_SetConfig+0x76>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a14      	ldr	r2, [pc, #80]	; (800cc28 <TIM_OC5_SetConfig+0xc4>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d109      	bne.n	800cbee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbe0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	021b      	lsls	r3, r3, #8
 800cbe8:	697a      	ldr	r2, [r7, #20]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	621a      	str	r2, [r3, #32]
}
 800cc08:	bf00      	nop
 800cc0a:	371c      	adds	r7, #28
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	fffeff8f 	.word	0xfffeff8f
 800cc18:	40010000 	.word	0x40010000
 800cc1c:	40010400 	.word	0x40010400
 800cc20:	40014000 	.word	0x40014000
 800cc24:	40014400 	.word	0x40014400
 800cc28:	40014800 	.word	0x40014800

0800cc2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b087      	sub	sp, #28
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6a1b      	ldr	r3, [r3, #32]
 800cc3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	4b22      	ldr	r3, [pc, #136]	; (800cce0 <TIM_OC6_SetConfig+0xb4>)
 800cc58:	4013      	ands	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	021b      	lsls	r3, r3, #8
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cc6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	051b      	lsls	r3, r3, #20
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a19      	ldr	r2, [pc, #100]	; (800cce4 <TIM_OC6_SetConfig+0xb8>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d00f      	beq.n	800cca4 <TIM_OC6_SetConfig+0x78>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a18      	ldr	r2, [pc, #96]	; (800cce8 <TIM_OC6_SetConfig+0xbc>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d00b      	beq.n	800cca4 <TIM_OC6_SetConfig+0x78>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a17      	ldr	r2, [pc, #92]	; (800ccec <TIM_OC6_SetConfig+0xc0>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d007      	beq.n	800cca4 <TIM_OC6_SetConfig+0x78>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a16      	ldr	r2, [pc, #88]	; (800ccf0 <TIM_OC6_SetConfig+0xc4>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d003      	beq.n	800cca4 <TIM_OC6_SetConfig+0x78>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a15      	ldr	r2, [pc, #84]	; (800ccf4 <TIM_OC6_SetConfig+0xc8>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d109      	bne.n	800ccb8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ccaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	029b      	lsls	r3, r3, #10
 800ccb2:	697a      	ldr	r2, [r7, #20]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	697a      	ldr	r2, [r7, #20]
 800ccbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	693a      	ldr	r2, [r7, #16]
 800ccd0:	621a      	str	r2, [r3, #32]
}
 800ccd2:	bf00      	nop
 800ccd4:	371c      	adds	r7, #28
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	feff8fff 	.word	0xfeff8fff
 800cce4:	40010000 	.word	0x40010000
 800cce8:	40010400 	.word	0x40010400
 800ccec:	40014000 	.word	0x40014000
 800ccf0:	40014400 	.word	0x40014400
 800ccf4:	40014800 	.word	0x40014800

0800ccf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b087      	sub	sp, #28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	f023 0201 	bic.w	r2, r3, #1
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	699b      	ldr	r3, [r3, #24]
 800cd1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	011b      	lsls	r3, r3, #4
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f023 030a 	bic.w	r3, r3, #10
 800cd34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	621a      	str	r2, [r3, #32]
}
 800cd4a:	bf00      	nop
 800cd4c:	371c      	adds	r7, #28
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd54:	4770      	bx	lr

0800cd56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd56:	b480      	push	{r7}
 800cd58:	b087      	sub	sp, #28
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	60b9      	str	r1, [r7, #8]
 800cd60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6a1b      	ldr	r3, [r3, #32]
 800cd66:	f023 0210 	bic.w	r2, r3, #16
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	699b      	ldr	r3, [r3, #24]
 800cd72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6a1b      	ldr	r3, [r3, #32]
 800cd78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	031b      	lsls	r3, r3, #12
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	011b      	lsls	r3, r3, #4
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	697a      	ldr	r2, [r7, #20]
 800cda2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	693a      	ldr	r2, [r7, #16]
 800cda8:	621a      	str	r2, [r3, #32]
}
 800cdaa:	bf00      	nop
 800cdac:	371c      	adds	r7, #28
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr
	...

0800cdb8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <TIM_ITRx_SetConfig+0x38>)
 800cdcc:	4013      	ands	r3, r2
 800cdce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	f043 0307 	orr.w	r3, r3, #7
 800cdda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	609a      	str	r2, [r3, #8]
}
 800cde2:	bf00      	nop
 800cde4:	3714      	adds	r7, #20
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	ffcfff8f 	.word	0xffcfff8f

0800cdf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b087      	sub	sp, #28
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	021a      	lsls	r2, r3, #8
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	431a      	orrs	r2, r3
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	697a      	ldr	r2, [r7, #20]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	697a      	ldr	r2, [r7, #20]
 800ce26:	609a      	str	r2, [r3, #8]
}
 800ce28:	bf00      	nop
 800ce2a:	371c      	adds	r7, #28
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b087      	sub	sp, #28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	f003 031f 	and.w	r3, r3, #31
 800ce46:	2201      	movs	r2, #1
 800ce48:	fa02 f303 	lsl.w	r3, r2, r3
 800ce4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6a1a      	ldr	r2, [r3, #32]
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	43db      	mvns	r3, r3
 800ce56:	401a      	ands	r2, r3
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6a1a      	ldr	r2, [r3, #32]
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	f003 031f 	and.w	r3, r3, #31
 800ce66:	6879      	ldr	r1, [r7, #4]
 800ce68:	fa01 f303 	lsl.w	r3, r1, r3
 800ce6c:	431a      	orrs	r2, r3
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	621a      	str	r2, [r3, #32]
}
 800ce72:	bf00      	nop
 800ce74:	371c      	adds	r7, #28
 800ce76:	46bd      	mov	sp, r7
 800ce78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7c:	4770      	bx	lr
	...

0800ce80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d101      	bne.n	800ce98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce94:	2302      	movs	r3, #2
 800ce96:	e077      	b.n	800cf88 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2202      	movs	r2, #2
 800cea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a35      	ldr	r2, [pc, #212]	; (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d004      	beq.n	800cecc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a34      	ldr	r2, [pc, #208]	; (800cf98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d108      	bne.n	800cede <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ced2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cee4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	4313      	orrs	r3, r2
 800ceee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68fa      	ldr	r2, [r7, #12]
 800cef6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a25      	ldr	r2, [pc, #148]	; (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d02c      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf0a:	d027      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a22      	ldr	r2, [pc, #136]	; (800cf9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d022      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a21      	ldr	r2, [pc, #132]	; (800cfa0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d01d      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a1f      	ldr	r2, [pc, #124]	; (800cfa4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d018      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a1a      	ldr	r2, [pc, #104]	; (800cf98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d013      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a1b      	ldr	r2, [pc, #108]	; (800cfa8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d00e      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a1a      	ldr	r2, [pc, #104]	; (800cfac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d009      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a18      	ldr	r2, [pc, #96]	; (800cfb0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d004      	beq.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a17      	ldr	r2, [pc, #92]	; (800cfb4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d10c      	bne.n	800cf76 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	68ba      	ldr	r2, [r7, #8]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	40010000 	.word	0x40010000
 800cf98:	40010400 	.word	0x40010400
 800cf9c:	40000400 	.word	0x40000400
 800cfa0:	40000800 	.word	0x40000800
 800cfa4:	40000c00 	.word	0x40000c00
 800cfa8:	40001800 	.word	0x40001800
 800cfac:	40014000 	.word	0x40014000
 800cfb0:	4000e000 	.word	0x4000e000
 800cfb4:	4000e400 	.word	0x4000e400

0800cfb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d101      	bne.n	800cfd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cfd0:	2302      	movs	r3, #2
 800cfd2:	e087      	b.n	800d0e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	4313      	orrs	r3, r2
 800d004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4313      	orrs	r3, r2
 800d012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	4313      	orrs	r3, r2
 800d020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	695b      	ldr	r3, [r3, #20]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03a:	4313      	orrs	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	699b      	ldr	r3, [r3, #24]
 800d048:	041b      	lsls	r3, r3, #16
 800d04a:	4313      	orrs	r3, r2
 800d04c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a27      	ldr	r2, [pc, #156]	; (800d0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d004      	beq.n	800d062 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a25      	ldr	r2, [pc, #148]	; (800d0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d106      	bne.n	800d070 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	69db      	ldr	r3, [r3, #28]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a1e      	ldr	r2, [pc, #120]	; (800d0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d004      	beq.n	800d084 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	4a1d      	ldr	r2, [pc, #116]	; (800d0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d126      	bne.n	800d0d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08e:	051b      	lsls	r3, r3, #20
 800d090:	4313      	orrs	r3, r2
 800d092:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	6a1b      	ldr	r3, [r3, #32]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a0e      	ldr	r2, [pc, #56]	; (800d0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d004      	beq.n	800d0c4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a0d      	ldr	r2, [pc, #52]	; (800d0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d106      	bne.n	800d0d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	40010000 	.word	0x40010000
 800d0f4:	40010400 	.word	0x40010400

0800d0f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d100:	bf00      	nop
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e042      	b.n	800d1cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d106      	bne.n	800d15e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7f8 f8d3 	bl	8005304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2224      	movs	r2, #36	; 0x24
 800d162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f022 0201 	bic.w	r2, r2, #1
 800d174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fdae 	bl	800dcd8 <UART_SetConfig>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d101      	bne.n	800d186 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	e022      	b.n	800d1cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f001 fc0e 	bl	800e9b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	689a      	ldr	r2, [r3, #8]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0201 	orr.w	r2, r2, #1
 800d1c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f001 fc95 	bl	800eaf4 <UART_CheckIdleState>
 800d1ca:	4603      	mov	r3, r0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e02e      	b.n	800d244 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2224      	movs	r2, #36	; 0x24
 800d1ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f022 0201 	bic.w	r2, r2, #1
 800d1fc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2200      	movs	r2, #0
 800d204:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2200      	movs	r2, #0
 800d20c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2200      	movs	r2, #0
 800d214:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7f8 f9c4 	bl	80055a4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2200      	movs	r2, #0
 800d220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2200      	movs	r2, #0
 800d228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	; 0x28
 800d250:	af02      	add	r7, sp, #8
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	603b      	str	r3, [r7, #0]
 800d258:	4613      	mov	r3, r2
 800d25a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d262:	2b20      	cmp	r3, #32
 800d264:	f040 8083 	bne.w	800d36e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d002      	beq.n	800d274 <HAL_UART_Transmit+0x28>
 800d26e:	88fb      	ldrh	r3, [r7, #6]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d101      	bne.n	800d278 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	e07b      	b.n	800d370 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d101      	bne.n	800d286 <HAL_UART_Transmit+0x3a>
 800d282:	2302      	movs	r3, #2
 800d284:	e074      	b.n	800d370 <HAL_UART_Transmit+0x124>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2201      	movs	r2, #1
 800d28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2200      	movs	r2, #0
 800d292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2221      	movs	r2, #33	; 0x21
 800d29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d29e:	f7f8 fbff 	bl	8005aa0 <HAL_GetTick>
 800d2a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	88fa      	ldrh	r2, [r7, #6]
 800d2a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	88fa      	ldrh	r2, [r7, #6]
 800d2b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2bc:	d108      	bne.n	800d2d0 <HAL_UART_Transmit+0x84>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d104      	bne.n	800d2d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	61bb      	str	r3, [r7, #24]
 800d2ce:	e003      	b.n	800d2d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d2e0:	e02c      	b.n	800d33c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	9300      	str	r3, [sp, #0]
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	2180      	movs	r1, #128	; 0x80
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f001 fc4c 	bl	800eb8a <UART_WaitOnFlagUntilTimeout>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d2f8:	2303      	movs	r3, #3
 800d2fa:	e039      	b.n	800d370 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d10b      	bne.n	800d31a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	461a      	mov	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d310:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	3302      	adds	r3, #2
 800d316:	61bb      	str	r3, [r7, #24]
 800d318:	e007      	b.n	800d32a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	781a      	ldrb	r2, [r3, #0]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	3301      	adds	r3, #1
 800d328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d330:	b29b      	uxth	r3, r3
 800d332:	3b01      	subs	r3, #1
 800d334:	b29a      	uxth	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d342:	b29b      	uxth	r3, r3
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1cc      	bne.n	800d2e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	2200      	movs	r2, #0
 800d350:	2140      	movs	r1, #64	; 0x40
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f001 fc19 	bl	800eb8a <UART_WaitOnFlagUntilTimeout>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d35e:	2303      	movs	r3, #3
 800d360:	e006      	b.n	800d370 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2220      	movs	r2, #32
 800d366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	e000      	b.n	800d370 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d36e:	2302      	movs	r3, #2
  }
}
 800d370:	4618      	mov	r0, r3
 800d372:	3720      	adds	r7, #32
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	; 0x28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	4613      	mov	r3, r2
 800d384:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d38c:	2b20      	cmp	r3, #32
 800d38e:	d17a      	bne.n	800d486 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <HAL_UART_Transmit_DMA+0x24>
 800d396:	88fb      	ldrh	r3, [r7, #6]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d101      	bne.n	800d3a0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e073      	b.n	800d488 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d101      	bne.n	800d3ae <HAL_UART_Transmit_DMA+0x36>
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	e06c      	b.n	800d488 <HAL_UART_Transmit_DMA+0x110>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	88fa      	ldrh	r2, [r7, #6]
 800d3c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	88fa      	ldrh	r2, [r7, #6]
 800d3c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2221      	movs	r2, #33	; 0x21
 800d3d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d02c      	beq.n	800d43e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3e8:	4a29      	ldr	r2, [pc, #164]	; (800d490 <HAL_UART_Transmit_DMA+0x118>)
 800d3ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3f0:	4a28      	ldr	r2, [pc, #160]	; (800d494 <HAL_UART_Transmit_DMA+0x11c>)
 800d3f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3f8:	4a27      	ldr	r2, [pc, #156]	; (800d498 <HAL_UART_Transmit_DMA+0x120>)
 800d3fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d400:	2200      	movs	r2, #0
 800d402:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d40c:	4619      	mov	r1, r3
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	3328      	adds	r3, #40	; 0x28
 800d414:	461a      	mov	r2, r3
 800d416:	88fb      	ldrh	r3, [r7, #6]
 800d418:	f7f9 f9c4 	bl	80067a4 <HAL_DMA_Start_IT>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00d      	beq.n	800d43e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2210      	movs	r2, #16
 800d426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2220      	movs	r2, #32
 800d436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d43a:	2301      	movs	r3, #1
 800d43c:	e024      	b.n	800d488 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2240      	movs	r2, #64	; 0x40
 800d444:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2200      	movs	r2, #0
 800d44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	3308      	adds	r3, #8
 800d454:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	e853 3f00 	ldrex	r3, [r3]
 800d45c:	613b      	str	r3, [r7, #16]
   return(result);
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d464:	627b      	str	r3, [r7, #36]	; 0x24
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	3308      	adds	r3, #8
 800d46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d46e:	623a      	str	r2, [r7, #32]
 800d470:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d472:	69f9      	ldr	r1, [r7, #28]
 800d474:	6a3a      	ldr	r2, [r7, #32]
 800d476:	e841 2300 	strex	r3, r2, [r1]
 800d47a:	61bb      	str	r3, [r7, #24]
   return(result);
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1e5      	bne.n	800d44e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d482:	2300      	movs	r3, #0
 800d484:	e000      	b.n	800d488 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d486:	2302      	movs	r3, #2
  }
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3728      	adds	r7, #40	; 0x28
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	0800efbd 	.word	0x0800efbd
 800d494:	0800f053 	.word	0x0800f053
 800d498:	0800f1c9 	.word	0x0800f1c9

0800d49c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b08a      	sub	sp, #40	; 0x28
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	60b9      	str	r1, [r7, #8]
 800d4a6:	4613      	mov	r3, r2
 800d4a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b0:	2b20      	cmp	r3, #32
 800d4b2:	d142      	bne.n	800d53a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <HAL_UART_Receive_DMA+0x24>
 800d4ba:	88fb      	ldrh	r3, [r7, #6]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e03b      	b.n	800d53c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d101      	bne.n	800d4d2 <HAL_UART_Receive_DMA+0x36>
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	e034      	b.n	800d53c <HAL_UART_Receive_DMA+0xa0>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a17      	ldr	r2, [pc, #92]	; (800d544 <HAL_UART_Receive_DMA+0xa8>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d01f      	beq.n	800d52a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d018      	beq.n	800d52a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	e853 3f00 	ldrex	r3, [r3]
 800d504:	613b      	str	r3, [r7, #16]
   return(result);
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d50c:	627b      	str	r3, [r7, #36]	; 0x24
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	461a      	mov	r2, r3
 800d514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d516:	623b      	str	r3, [r7, #32]
 800d518:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51a:	69f9      	ldr	r1, [r7, #28]
 800d51c:	6a3a      	ldr	r2, [r7, #32]
 800d51e:	e841 2300 	strex	r3, r2, [r1]
 800d522:	61bb      	str	r3, [r7, #24]
   return(result);
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e6      	bne.n	800d4f8 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d52a:	88fb      	ldrh	r3, [r7, #6]
 800d52c:	461a      	mov	r2, r3
 800d52e:	68b9      	ldr	r1, [r7, #8]
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f001 fbf3 	bl	800ed1c <UART_Start_Receive_DMA>
 800d536:	4603      	mov	r3, r0
 800d538:	e000      	b.n	800d53c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d53a:	2302      	movs	r3, #2
  }
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3728      	adds	r7, #40	; 0x28
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	58000c00 	.word	0x58000c00

0800d548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b0ba      	sub	sp, #232	; 0xe8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	69db      	ldr	r3, [r3, #28]
 800d556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d56e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d572:	f640 030f 	movw	r3, #2063	; 0x80f
 800d576:	4013      	ands	r3, r2
 800d578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d57c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d580:	2b00      	cmp	r3, #0
 800d582:	d11b      	bne.n	800d5bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d588:	f003 0320 	and.w	r3, r3, #32
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d015      	beq.n	800d5bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d594:	f003 0320 	and.w	r3, r3, #32
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d105      	bne.n	800d5a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d59c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d009      	beq.n	800d5bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 835a 	beq.w	800dc66 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	4798      	blx	r3
      }
      return;
 800d5ba:	e354      	b.n	800dc66 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d5bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 811f 	beq.w	800d804 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d5c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d5ca:	4b8b      	ldr	r3, [pc, #556]	; (800d7f8 <HAL_UART_IRQHandler+0x2b0>)
 800d5cc:	4013      	ands	r3, r2
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d5d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d5d6:	4b89      	ldr	r3, [pc, #548]	; (800d7fc <HAL_UART_IRQHandler+0x2b4>)
 800d5d8:	4013      	ands	r3, r2
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f000 8112 	beq.w	800d804 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5e4:	f003 0301 	and.w	r3, r3, #1
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d011      	beq.n	800d610 <HAL_UART_IRQHandler+0xc8>
 800d5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00b      	beq.n	800d610 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d606:	f043 0201 	orr.w	r2, r3, #1
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d614:	f003 0302 	and.w	r3, r3, #2
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d011      	beq.n	800d640 <HAL_UART_IRQHandler+0xf8>
 800d61c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d620:	f003 0301 	and.w	r3, r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00b      	beq.n	800d640 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2202      	movs	r2, #2
 800d62e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d636:	f043 0204 	orr.w	r2, r3, #4
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d644:	f003 0304 	and.w	r3, r3, #4
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d011      	beq.n	800d670 <HAL_UART_IRQHandler+0x128>
 800d64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d650:	f003 0301 	and.w	r3, r3, #1
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00b      	beq.n	800d670 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2204      	movs	r2, #4
 800d65e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d666:	f043 0202 	orr.w	r2, r3, #2
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d674:	f003 0308 	and.w	r3, r3, #8
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d017      	beq.n	800d6ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d680:	f003 0320 	and.w	r3, r3, #32
 800d684:	2b00      	cmp	r3, #0
 800d686:	d105      	bne.n	800d694 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d688:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d68c:	4b5a      	ldr	r3, [pc, #360]	; (800d7f8 <HAL_UART_IRQHandler+0x2b0>)
 800d68e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00b      	beq.n	800d6ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2208      	movs	r2, #8
 800d69a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6a2:	f043 0208 	orr.w	r2, r3, #8
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d012      	beq.n	800d6de <HAL_UART_IRQHandler+0x196>
 800d6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d00c      	beq.n	800d6de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6d4:	f043 0220 	orr.w	r2, r3, #32
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 82c0 	beq.w	800dc6a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6ee:	f003 0320 	and.w	r3, r3, #32
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d013      	beq.n	800d71e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6fa:	f003 0320 	and.w	r3, r3, #32
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d105      	bne.n	800d70e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d007      	beq.n	800d71e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d712:	2b00      	cmp	r3, #0
 800d714:	d003      	beq.n	800d71e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d732:	2b40      	cmp	r3, #64	; 0x40
 800d734:	d005      	beq.n	800d742 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d73a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d04f      	beq.n	800d7e2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f001 fbd4 	bl	800eef0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d752:	2b40      	cmp	r3, #64	; 0x40
 800d754:	d141      	bne.n	800d7da <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	3308      	adds	r3, #8
 800d75c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d764:	e853 3f00 	ldrex	r3, [r3]
 800d768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d76c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	3308      	adds	r3, #8
 800d77e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d78e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d792:	e841 2300 	strex	r3, r2, [r1]
 800d796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d79a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d1d9      	bne.n	800d756 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d013      	beq.n	800d7d2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ae:	4a14      	ldr	r2, [pc, #80]	; (800d800 <HAL_UART_IRQHandler+0x2b8>)
 800d7b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f7f9 fd7c 	bl	80072b4 <HAL_DMA_Abort_IT>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d017      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7d0:	e00f      	b.n	800d7f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7f6 f9c4 	bl	8003b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7d8:	e00b      	b.n	800d7f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7f6 f9c0 	bl	8003b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7e0:	e007      	b.n	800d7f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f7f6 f9bc 	bl	8003b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d7f0:	e23b      	b.n	800dc6a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7f2:	bf00      	nop
    return;
 800d7f4:	e239      	b.n	800dc6a <HAL_UART_IRQHandler+0x722>
 800d7f6:	bf00      	nop
 800d7f8:	10000001 	.word	0x10000001
 800d7fc:	04000120 	.word	0x04000120
 800d800:	0800f249 	.word	0x0800f249

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d808:	2b01      	cmp	r3, #1
 800d80a:	f040 81ce 	bne.w	800dbaa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d80e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d812:	f003 0310 	and.w	r3, r3, #16
 800d816:	2b00      	cmp	r3, #0
 800d818:	f000 81c7 	beq.w	800dbaa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d820:	f003 0310 	and.w	r3, r3, #16
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 81c0 	beq.w	800dbaa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2210      	movs	r2, #16
 800d830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d83c:	2b40      	cmp	r3, #64	; 0x40
 800d83e:	f040 813b 	bne.w	800dab8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a8b      	ldr	r2, [pc, #556]	; (800da78 <HAL_UART_IRQHandler+0x530>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d059      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a89      	ldr	r2, [pc, #548]	; (800da7c <HAL_UART_IRQHandler+0x534>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d053      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a87      	ldr	r2, [pc, #540]	; (800da80 <HAL_UART_IRQHandler+0x538>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d04d      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a85      	ldr	r2, [pc, #532]	; (800da84 <HAL_UART_IRQHandler+0x53c>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d047      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a83      	ldr	r2, [pc, #524]	; (800da88 <HAL_UART_IRQHandler+0x540>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d041      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a81      	ldr	r2, [pc, #516]	; (800da8c <HAL_UART_IRQHandler+0x544>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d03b      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a7f      	ldr	r2, [pc, #508]	; (800da90 <HAL_UART_IRQHandler+0x548>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d035      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a7d      	ldr	r2, [pc, #500]	; (800da94 <HAL_UART_IRQHandler+0x54c>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d02f      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a7b      	ldr	r2, [pc, #492]	; (800da98 <HAL_UART_IRQHandler+0x550>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d029      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a79      	ldr	r2, [pc, #484]	; (800da9c <HAL_UART_IRQHandler+0x554>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d023      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a77      	ldr	r2, [pc, #476]	; (800daa0 <HAL_UART_IRQHandler+0x558>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d01d      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a75      	ldr	r2, [pc, #468]	; (800daa4 <HAL_UART_IRQHandler+0x55c>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d017      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a73      	ldr	r2, [pc, #460]	; (800daa8 <HAL_UART_IRQHandler+0x560>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d011      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a71      	ldr	r2, [pc, #452]	; (800daac <HAL_UART_IRQHandler+0x564>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d00b      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a6f      	ldr	r2, [pc, #444]	; (800dab0 <HAL_UART_IRQHandler+0x568>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d005      	beq.n	800d902 <HAL_UART_IRQHandler+0x3ba>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a6d      	ldr	r2, [pc, #436]	; (800dab4 <HAL_UART_IRQHandler+0x56c>)
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d105      	bne.n	800d90e <HAL_UART_IRQHandler+0x3c6>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	e004      	b.n	800d918 <HAL_UART_IRQHandler+0x3d0>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	b29b      	uxth	r3, r3
 800d918:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d91c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 81a4 	beq.w	800dc6e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d92c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d930:	429a      	cmp	r2, r3
 800d932:	f080 819c 	bcs.w	800dc6e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d93c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d944:	69db      	ldr	r3, [r3, #28]
 800d946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d94a:	f000 8086 	beq.w	800da5a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d95a:	e853 3f00 	ldrex	r3, [r3]
 800d95e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d96a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	461a      	mov	r2, r3
 800d974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d978:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d97c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d980:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d984:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d988:	e841 2300 	strex	r3, r2, [r1]
 800d98c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d990:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1da      	bne.n	800d94e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3308      	adds	r3, #8
 800d99e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d9a2:	e853 3f00 	ldrex	r3, [r3]
 800d9a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d9a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9aa:	f023 0301 	bic.w	r3, r3, #1
 800d9ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d9bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d9c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d9c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d9c8:	e841 2300 	strex	r3, r2, [r1]
 800d9cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d9ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1e1      	bne.n	800d998 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	3308      	adds	r3, #8
 800d9da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9de:	e853 3f00 	ldrex	r3, [r3]
 800d9e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d9e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	3308      	adds	r3, #8
 800d9f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d9f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d9fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d9fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da00:	e841 2300 	strex	r3, r2, [r1]
 800da04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800da06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1e3      	bne.n	800d9d4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2220      	movs	r2, #32
 800da10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da22:	e853 3f00 	ldrex	r3, [r3]
 800da26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da2a:	f023 0310 	bic.w	r3, r3, #16
 800da2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800da3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800da3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da44:	e841 2300 	strex	r3, r2, [r1]
 800da48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1e4      	bne.n	800da1a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da54:	4618      	mov	r0, r3
 800da56:	f7f9 f90f 	bl	8006c78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da66:	b29b      	uxth	r3, r3
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	4619      	mov	r1, r3
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 f926 	bl	800dcc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da74:	e0fb      	b.n	800dc6e <HAL_UART_IRQHandler+0x726>
 800da76:	bf00      	nop
 800da78:	40020010 	.word	0x40020010
 800da7c:	40020028 	.word	0x40020028
 800da80:	40020040 	.word	0x40020040
 800da84:	40020058 	.word	0x40020058
 800da88:	40020070 	.word	0x40020070
 800da8c:	40020088 	.word	0x40020088
 800da90:	400200a0 	.word	0x400200a0
 800da94:	400200b8 	.word	0x400200b8
 800da98:	40020410 	.word	0x40020410
 800da9c:	40020428 	.word	0x40020428
 800daa0:	40020440 	.word	0x40020440
 800daa4:	40020458 	.word	0x40020458
 800daa8:	40020470 	.word	0x40020470
 800daac:	40020488 	.word	0x40020488
 800dab0:	400204a0 	.word	0x400204a0
 800dab4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 80cc 	beq.w	800dc72 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800dada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 80c7 	beq.w	800dc72 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daec:	e853 3f00 	ldrex	r3, [r3]
 800daf0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800daf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800daf8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	461a      	mov	r2, r3
 800db02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800db06:	647b      	str	r3, [r7, #68]	; 0x44
 800db08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db0e:	e841 2300 	strex	r3, r2, [r1]
 800db12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1e4      	bne.n	800dae4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	3308      	adds	r3, #8
 800db20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	e853 3f00 	ldrex	r3, [r3]
 800db28:	623b      	str	r3, [r7, #32]
   return(result);
 800db2a:	6a3a      	ldr	r2, [r7, #32]
 800db2c:	4b54      	ldr	r3, [pc, #336]	; (800dc80 <HAL_UART_IRQHandler+0x738>)
 800db2e:	4013      	ands	r3, r2
 800db30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3308      	adds	r3, #8
 800db3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800db3e:	633a      	str	r2, [r7, #48]	; 0x30
 800db40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db46:	e841 2300 	strex	r3, r2, [r1]
 800db4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1e3      	bne.n	800db1a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2220      	movs	r2, #32
 800db56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	e853 3f00 	ldrex	r3, [r3]
 800db72:	60fb      	str	r3, [r7, #12]
   return(result);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f023 0310 	bic.w	r3, r3, #16
 800db7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800db88:	61fb      	str	r3, [r7, #28]
 800db8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8c:	69b9      	ldr	r1, [r7, #24]
 800db8e:	69fa      	ldr	r2, [r7, #28]
 800db90:	e841 2300 	strex	r3, r2, [r1]
 800db94:	617b      	str	r3, [r7, #20]
   return(result);
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1e4      	bne.n	800db66 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dba0:	4619      	mov	r1, r3
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f88c 	bl	800dcc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dba8:	e063      	b.n	800dc72 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00e      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x68c>
 800dbb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d008      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dbca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f001 fb7c 	bl	800f2ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbd2:	e051      	b.n	800dc78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d014      	beq.n	800dc0a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d105      	bne.n	800dbf8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dbec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dbf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d008      	beq.n	800dc0a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d03a      	beq.n	800dc76 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	4798      	blx	r3
    }
    return;
 800dc08:	e035      	b.n	800dc76 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dc0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d009      	beq.n	800dc2a <HAL_UART_IRQHandler+0x6e2>
 800dc16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d003      	beq.n	800dc2a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f001 fb26 	bl	800f274 <UART_EndTransmit_IT>
    return;
 800dc28:	e026      	b.n	800dc78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dc2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d009      	beq.n	800dc4a <HAL_UART_IRQHandler+0x702>
 800dc36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f001 fb55 	bl	800f2f2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc48:	e016      	b.n	800dc78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dc4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d010      	beq.n	800dc78 <HAL_UART_IRQHandler+0x730>
 800dc56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	da0c      	bge.n	800dc78 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f001 fb3d 	bl	800f2de <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc64:	e008      	b.n	800dc78 <HAL_UART_IRQHandler+0x730>
      return;
 800dc66:	bf00      	nop
 800dc68:	e006      	b.n	800dc78 <HAL_UART_IRQHandler+0x730>
    return;
 800dc6a:	bf00      	nop
 800dc6c:	e004      	b.n	800dc78 <HAL_UART_IRQHandler+0x730>
      return;
 800dc6e:	bf00      	nop
 800dc70:	e002      	b.n	800dc78 <HAL_UART_IRQHandler+0x730>
      return;
 800dc72:	bf00      	nop
 800dc74:	e000      	b.n	800dc78 <HAL_UART_IRQHandler+0x730>
    return;
 800dc76:	bf00      	nop
  }
}
 800dc78:	37e8      	adds	r7, #232	; 0xe8
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	effffffe 	.word	0xeffffffe

0800dc84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800dc8c:	bf00      	nop
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800dca0:	bf00      	nop
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dcb4:	bf00      	nop
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	460b      	mov	r3, r1
 800dcca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dcd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcdc:	b092      	sub	sp, #72	; 0x48
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	689a      	ldr	r2, [r3, #8]
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	431a      	orrs	r2, r3
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	695b      	ldr	r3, [r3, #20]
 800dcf6:	431a      	orrs	r2, r3
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	4bbe      	ldr	r3, [pc, #760]	; (800e000 <UART_SetConfig+0x328>)
 800dd08:	4013      	ands	r3, r2
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd10:	430b      	orrs	r3, r1
 800dd12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	68da      	ldr	r2, [r3, #12]
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	430a      	orrs	r2, r1
 800dd28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	699b      	ldr	r3, [r3, #24]
 800dd2e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4ab3      	ldr	r2, [pc, #716]	; (800e004 <UART_SetConfig+0x32c>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d004      	beq.n	800dd44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	6a1b      	ldr	r3, [r3, #32]
 800dd3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd40:	4313      	orrs	r3, r2
 800dd42:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	689a      	ldr	r2, [r3, #8]
 800dd4a:	4baf      	ldr	r3, [pc, #700]	; (800e008 <UART_SetConfig+0x330>)
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	697a      	ldr	r2, [r7, #20]
 800dd50:	6812      	ldr	r2, [r2, #0]
 800dd52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd54:	430b      	orrs	r3, r1
 800dd56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5e:	f023 010f 	bic.w	r1, r3, #15
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	430a      	orrs	r2, r1
 800dd6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4aa6      	ldr	r2, [pc, #664]	; (800e00c <UART_SetConfig+0x334>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d177      	bne.n	800de68 <UART_SetConfig+0x190>
 800dd78:	4ba5      	ldr	r3, [pc, #660]	; (800e010 <UART_SetConfig+0x338>)
 800dd7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd80:	2b28      	cmp	r3, #40	; 0x28
 800dd82:	d86d      	bhi.n	800de60 <UART_SetConfig+0x188>
 800dd84:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <UART_SetConfig+0xb4>)
 800dd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8a:	bf00      	nop
 800dd8c:	0800de31 	.word	0x0800de31
 800dd90:	0800de61 	.word	0x0800de61
 800dd94:	0800de61 	.word	0x0800de61
 800dd98:	0800de61 	.word	0x0800de61
 800dd9c:	0800de61 	.word	0x0800de61
 800dda0:	0800de61 	.word	0x0800de61
 800dda4:	0800de61 	.word	0x0800de61
 800dda8:	0800de61 	.word	0x0800de61
 800ddac:	0800de39 	.word	0x0800de39
 800ddb0:	0800de61 	.word	0x0800de61
 800ddb4:	0800de61 	.word	0x0800de61
 800ddb8:	0800de61 	.word	0x0800de61
 800ddbc:	0800de61 	.word	0x0800de61
 800ddc0:	0800de61 	.word	0x0800de61
 800ddc4:	0800de61 	.word	0x0800de61
 800ddc8:	0800de61 	.word	0x0800de61
 800ddcc:	0800de41 	.word	0x0800de41
 800ddd0:	0800de61 	.word	0x0800de61
 800ddd4:	0800de61 	.word	0x0800de61
 800ddd8:	0800de61 	.word	0x0800de61
 800dddc:	0800de61 	.word	0x0800de61
 800dde0:	0800de61 	.word	0x0800de61
 800dde4:	0800de61 	.word	0x0800de61
 800dde8:	0800de61 	.word	0x0800de61
 800ddec:	0800de49 	.word	0x0800de49
 800ddf0:	0800de61 	.word	0x0800de61
 800ddf4:	0800de61 	.word	0x0800de61
 800ddf8:	0800de61 	.word	0x0800de61
 800ddfc:	0800de61 	.word	0x0800de61
 800de00:	0800de61 	.word	0x0800de61
 800de04:	0800de61 	.word	0x0800de61
 800de08:	0800de61 	.word	0x0800de61
 800de0c:	0800de51 	.word	0x0800de51
 800de10:	0800de61 	.word	0x0800de61
 800de14:	0800de61 	.word	0x0800de61
 800de18:	0800de61 	.word	0x0800de61
 800de1c:	0800de61 	.word	0x0800de61
 800de20:	0800de61 	.word	0x0800de61
 800de24:	0800de61 	.word	0x0800de61
 800de28:	0800de61 	.word	0x0800de61
 800de2c:	0800de59 	.word	0x0800de59
 800de30:	2301      	movs	r3, #1
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de36:	e326      	b.n	800e486 <UART_SetConfig+0x7ae>
 800de38:	2304      	movs	r3, #4
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3e:	e322      	b.n	800e486 <UART_SetConfig+0x7ae>
 800de40:	2308      	movs	r3, #8
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de46:	e31e      	b.n	800e486 <UART_SetConfig+0x7ae>
 800de48:	2310      	movs	r3, #16
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e31a      	b.n	800e486 <UART_SetConfig+0x7ae>
 800de50:	2320      	movs	r3, #32
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e316      	b.n	800e486 <UART_SetConfig+0x7ae>
 800de58:	2340      	movs	r3, #64	; 0x40
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e312      	b.n	800e486 <UART_SetConfig+0x7ae>
 800de60:	2380      	movs	r3, #128	; 0x80
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e30e      	b.n	800e486 <UART_SetConfig+0x7ae>
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a69      	ldr	r2, [pc, #420]	; (800e014 <UART_SetConfig+0x33c>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d130      	bne.n	800ded4 <UART_SetConfig+0x1fc>
 800de72:	4b67      	ldr	r3, [pc, #412]	; (800e010 <UART_SetConfig+0x338>)
 800de74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de76:	f003 0307 	and.w	r3, r3, #7
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	d826      	bhi.n	800decc <UART_SetConfig+0x1f4>
 800de7e:	a201      	add	r2, pc, #4	; (adr r2, 800de84 <UART_SetConfig+0x1ac>)
 800de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de84:	0800de9d 	.word	0x0800de9d
 800de88:	0800dea5 	.word	0x0800dea5
 800de8c:	0800dead 	.word	0x0800dead
 800de90:	0800deb5 	.word	0x0800deb5
 800de94:	0800debd 	.word	0x0800debd
 800de98:	0800dec5 	.word	0x0800dec5
 800de9c:	2300      	movs	r3, #0
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e2f0      	b.n	800e486 <UART_SetConfig+0x7ae>
 800dea4:	2304      	movs	r3, #4
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e2ec      	b.n	800e486 <UART_SetConfig+0x7ae>
 800deac:	2308      	movs	r3, #8
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e2e8      	b.n	800e486 <UART_SetConfig+0x7ae>
 800deb4:	2310      	movs	r3, #16
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e2e4      	b.n	800e486 <UART_SetConfig+0x7ae>
 800debc:	2320      	movs	r3, #32
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e2e0      	b.n	800e486 <UART_SetConfig+0x7ae>
 800dec4:	2340      	movs	r3, #64	; 0x40
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e2dc      	b.n	800e486 <UART_SetConfig+0x7ae>
 800decc:	2380      	movs	r3, #128	; 0x80
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e2d8      	b.n	800e486 <UART_SetConfig+0x7ae>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a4f      	ldr	r2, [pc, #316]	; (800e018 <UART_SetConfig+0x340>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d130      	bne.n	800df40 <UART_SetConfig+0x268>
 800dede:	4b4c      	ldr	r3, [pc, #304]	; (800e010 <UART_SetConfig+0x338>)
 800dee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	2b05      	cmp	r3, #5
 800dee8:	d826      	bhi.n	800df38 <UART_SetConfig+0x260>
 800deea:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <UART_SetConfig+0x218>)
 800deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def0:	0800df09 	.word	0x0800df09
 800def4:	0800df11 	.word	0x0800df11
 800def8:	0800df19 	.word	0x0800df19
 800defc:	0800df21 	.word	0x0800df21
 800df00:	0800df29 	.word	0x0800df29
 800df04:	0800df31 	.word	0x0800df31
 800df08:	2300      	movs	r3, #0
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0e:	e2ba      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df10:	2304      	movs	r3, #4
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df16:	e2b6      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df18:	2308      	movs	r3, #8
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1e:	e2b2      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df20:	2310      	movs	r3, #16
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e2ae      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df28:	2320      	movs	r3, #32
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e2aa      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df30:	2340      	movs	r3, #64	; 0x40
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e2a6      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df38:	2380      	movs	r3, #128	; 0x80
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3e:	e2a2      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a35      	ldr	r2, [pc, #212]	; (800e01c <UART_SetConfig+0x344>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d130      	bne.n	800dfac <UART_SetConfig+0x2d4>
 800df4a:	4b31      	ldr	r3, [pc, #196]	; (800e010 <UART_SetConfig+0x338>)
 800df4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df4e:	f003 0307 	and.w	r3, r3, #7
 800df52:	2b05      	cmp	r3, #5
 800df54:	d826      	bhi.n	800dfa4 <UART_SetConfig+0x2cc>
 800df56:	a201      	add	r2, pc, #4	; (adr r2, 800df5c <UART_SetConfig+0x284>)
 800df58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5c:	0800df75 	.word	0x0800df75
 800df60:	0800df7d 	.word	0x0800df7d
 800df64:	0800df85 	.word	0x0800df85
 800df68:	0800df8d 	.word	0x0800df8d
 800df6c:	0800df95 	.word	0x0800df95
 800df70:	0800df9d 	.word	0x0800df9d
 800df74:	2300      	movs	r3, #0
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7a:	e284      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df7c:	2304      	movs	r3, #4
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df82:	e280      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df84:	2308      	movs	r3, #8
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e27c      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df8c:	2310      	movs	r3, #16
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e278      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df94:	2320      	movs	r3, #32
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e274      	b.n	800e486 <UART_SetConfig+0x7ae>
 800df9c:	2340      	movs	r3, #64	; 0x40
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e270      	b.n	800e486 <UART_SetConfig+0x7ae>
 800dfa4:	2380      	movs	r3, #128	; 0x80
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e26c      	b.n	800e486 <UART_SetConfig+0x7ae>
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a1b      	ldr	r2, [pc, #108]	; (800e020 <UART_SetConfig+0x348>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d142      	bne.n	800e03c <UART_SetConfig+0x364>
 800dfb6:	4b16      	ldr	r3, [pc, #88]	; (800e010 <UART_SetConfig+0x338>)
 800dfb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfba:	f003 0307 	and.w	r3, r3, #7
 800dfbe:	2b05      	cmp	r3, #5
 800dfc0:	d838      	bhi.n	800e034 <UART_SetConfig+0x35c>
 800dfc2:	a201      	add	r2, pc, #4	; (adr r2, 800dfc8 <UART_SetConfig+0x2f0>)
 800dfc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc8:	0800dfe1 	.word	0x0800dfe1
 800dfcc:	0800dfe9 	.word	0x0800dfe9
 800dfd0:	0800dff1 	.word	0x0800dff1
 800dfd4:	0800dff9 	.word	0x0800dff9
 800dfd8:	0800e025 	.word	0x0800e025
 800dfdc:	0800e02d 	.word	0x0800e02d
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe6:	e24e      	b.n	800e486 <UART_SetConfig+0x7ae>
 800dfe8:	2304      	movs	r3, #4
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfee:	e24a      	b.n	800e486 <UART_SetConfig+0x7ae>
 800dff0:	2308      	movs	r3, #8
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff6:	e246      	b.n	800e486 <UART_SetConfig+0x7ae>
 800dff8:	2310      	movs	r3, #16
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e242      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e000:	cfff69f3 	.word	0xcfff69f3
 800e004:	58000c00 	.word	0x58000c00
 800e008:	11fff4ff 	.word	0x11fff4ff
 800e00c:	40011000 	.word	0x40011000
 800e010:	58024400 	.word	0x58024400
 800e014:	40004400 	.word	0x40004400
 800e018:	40004800 	.word	0x40004800
 800e01c:	40004c00 	.word	0x40004c00
 800e020:	40005000 	.word	0x40005000
 800e024:	2320      	movs	r3, #32
 800e026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e02a:	e22c      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e02c:	2340      	movs	r3, #64	; 0x40
 800e02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e032:	e228      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e034:	2380      	movs	r3, #128	; 0x80
 800e036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03a:	e224      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4ab1      	ldr	r2, [pc, #708]	; (800e308 <UART_SetConfig+0x630>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d176      	bne.n	800e134 <UART_SetConfig+0x45c>
 800e046:	4bb1      	ldr	r3, [pc, #708]	; (800e30c <UART_SetConfig+0x634>)
 800e048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e04a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e04e:	2b28      	cmp	r3, #40	; 0x28
 800e050:	d86c      	bhi.n	800e12c <UART_SetConfig+0x454>
 800e052:	a201      	add	r2, pc, #4	; (adr r2, 800e058 <UART_SetConfig+0x380>)
 800e054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e058:	0800e0fd 	.word	0x0800e0fd
 800e05c:	0800e12d 	.word	0x0800e12d
 800e060:	0800e12d 	.word	0x0800e12d
 800e064:	0800e12d 	.word	0x0800e12d
 800e068:	0800e12d 	.word	0x0800e12d
 800e06c:	0800e12d 	.word	0x0800e12d
 800e070:	0800e12d 	.word	0x0800e12d
 800e074:	0800e12d 	.word	0x0800e12d
 800e078:	0800e105 	.word	0x0800e105
 800e07c:	0800e12d 	.word	0x0800e12d
 800e080:	0800e12d 	.word	0x0800e12d
 800e084:	0800e12d 	.word	0x0800e12d
 800e088:	0800e12d 	.word	0x0800e12d
 800e08c:	0800e12d 	.word	0x0800e12d
 800e090:	0800e12d 	.word	0x0800e12d
 800e094:	0800e12d 	.word	0x0800e12d
 800e098:	0800e10d 	.word	0x0800e10d
 800e09c:	0800e12d 	.word	0x0800e12d
 800e0a0:	0800e12d 	.word	0x0800e12d
 800e0a4:	0800e12d 	.word	0x0800e12d
 800e0a8:	0800e12d 	.word	0x0800e12d
 800e0ac:	0800e12d 	.word	0x0800e12d
 800e0b0:	0800e12d 	.word	0x0800e12d
 800e0b4:	0800e12d 	.word	0x0800e12d
 800e0b8:	0800e115 	.word	0x0800e115
 800e0bc:	0800e12d 	.word	0x0800e12d
 800e0c0:	0800e12d 	.word	0x0800e12d
 800e0c4:	0800e12d 	.word	0x0800e12d
 800e0c8:	0800e12d 	.word	0x0800e12d
 800e0cc:	0800e12d 	.word	0x0800e12d
 800e0d0:	0800e12d 	.word	0x0800e12d
 800e0d4:	0800e12d 	.word	0x0800e12d
 800e0d8:	0800e11d 	.word	0x0800e11d
 800e0dc:	0800e12d 	.word	0x0800e12d
 800e0e0:	0800e12d 	.word	0x0800e12d
 800e0e4:	0800e12d 	.word	0x0800e12d
 800e0e8:	0800e12d 	.word	0x0800e12d
 800e0ec:	0800e12d 	.word	0x0800e12d
 800e0f0:	0800e12d 	.word	0x0800e12d
 800e0f4:	0800e12d 	.word	0x0800e12d
 800e0f8:	0800e125 	.word	0x0800e125
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e1c0      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e104:	2304      	movs	r3, #4
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e1bc      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e10c:	2308      	movs	r3, #8
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e1b8      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e114:	2310      	movs	r3, #16
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e1b4      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e11c:	2320      	movs	r3, #32
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e1b0      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e124:	2340      	movs	r3, #64	; 0x40
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e1ac      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e12c:	2380      	movs	r3, #128	; 0x80
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e1a8      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a75      	ldr	r2, [pc, #468]	; (800e310 <UART_SetConfig+0x638>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d130      	bne.n	800e1a0 <UART_SetConfig+0x4c8>
 800e13e:	4b73      	ldr	r3, [pc, #460]	; (800e30c <UART_SetConfig+0x634>)
 800e140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	2b05      	cmp	r3, #5
 800e148:	d826      	bhi.n	800e198 <UART_SetConfig+0x4c0>
 800e14a:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <UART_SetConfig+0x478>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e169 	.word	0x0800e169
 800e154:	0800e171 	.word	0x0800e171
 800e158:	0800e179 	.word	0x0800e179
 800e15c:	0800e181 	.word	0x0800e181
 800e160:	0800e189 	.word	0x0800e189
 800e164:	0800e191 	.word	0x0800e191
 800e168:	2300      	movs	r3, #0
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16e:	e18a      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e170:	2304      	movs	r3, #4
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e176:	e186      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e178:	2308      	movs	r3, #8
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17e:	e182      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e180:	2310      	movs	r3, #16
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e17e      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e188:	2320      	movs	r3, #32
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e17a      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e190:	2340      	movs	r3, #64	; 0x40
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e176      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e198:	2380      	movs	r3, #128	; 0x80
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e172      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a5b      	ldr	r2, [pc, #364]	; (800e314 <UART_SetConfig+0x63c>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d130      	bne.n	800e20c <UART_SetConfig+0x534>
 800e1aa:	4b58      	ldr	r3, [pc, #352]	; (800e30c <UART_SetConfig+0x634>)
 800e1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ae:	f003 0307 	and.w	r3, r3, #7
 800e1b2:	2b05      	cmp	r3, #5
 800e1b4:	d826      	bhi.n	800e204 <UART_SetConfig+0x52c>
 800e1b6:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <UART_SetConfig+0x4e4>)
 800e1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1bc:	0800e1d5 	.word	0x0800e1d5
 800e1c0:	0800e1dd 	.word	0x0800e1dd
 800e1c4:	0800e1e5 	.word	0x0800e1e5
 800e1c8:	0800e1ed 	.word	0x0800e1ed
 800e1cc:	0800e1f5 	.word	0x0800e1f5
 800e1d0:	0800e1fd 	.word	0x0800e1fd
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1da:	e154      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e1dc:	2304      	movs	r3, #4
 800e1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e2:	e150      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e1e4:	2308      	movs	r3, #8
 800e1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ea:	e14c      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e1ec:	2310      	movs	r3, #16
 800e1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f2:	e148      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e1f4:	2320      	movs	r3, #32
 800e1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fa:	e144      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e1fc:	2340      	movs	r3, #64	; 0x40
 800e1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e202:	e140      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e204:	2380      	movs	r3, #128	; 0x80
 800e206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20a:	e13c      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a41      	ldr	r2, [pc, #260]	; (800e318 <UART_SetConfig+0x640>)
 800e212:	4293      	cmp	r3, r2
 800e214:	f040 8082 	bne.w	800e31c <UART_SetConfig+0x644>
 800e218:	4b3c      	ldr	r3, [pc, #240]	; (800e30c <UART_SetConfig+0x634>)
 800e21a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e220:	2b28      	cmp	r3, #40	; 0x28
 800e222:	d86d      	bhi.n	800e300 <UART_SetConfig+0x628>
 800e224:	a201      	add	r2, pc, #4	; (adr r2, 800e22c <UART_SetConfig+0x554>)
 800e226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e22a:	bf00      	nop
 800e22c:	0800e2d1 	.word	0x0800e2d1
 800e230:	0800e301 	.word	0x0800e301
 800e234:	0800e301 	.word	0x0800e301
 800e238:	0800e301 	.word	0x0800e301
 800e23c:	0800e301 	.word	0x0800e301
 800e240:	0800e301 	.word	0x0800e301
 800e244:	0800e301 	.word	0x0800e301
 800e248:	0800e301 	.word	0x0800e301
 800e24c:	0800e2d9 	.word	0x0800e2d9
 800e250:	0800e301 	.word	0x0800e301
 800e254:	0800e301 	.word	0x0800e301
 800e258:	0800e301 	.word	0x0800e301
 800e25c:	0800e301 	.word	0x0800e301
 800e260:	0800e301 	.word	0x0800e301
 800e264:	0800e301 	.word	0x0800e301
 800e268:	0800e301 	.word	0x0800e301
 800e26c:	0800e2e1 	.word	0x0800e2e1
 800e270:	0800e301 	.word	0x0800e301
 800e274:	0800e301 	.word	0x0800e301
 800e278:	0800e301 	.word	0x0800e301
 800e27c:	0800e301 	.word	0x0800e301
 800e280:	0800e301 	.word	0x0800e301
 800e284:	0800e301 	.word	0x0800e301
 800e288:	0800e301 	.word	0x0800e301
 800e28c:	0800e2e9 	.word	0x0800e2e9
 800e290:	0800e301 	.word	0x0800e301
 800e294:	0800e301 	.word	0x0800e301
 800e298:	0800e301 	.word	0x0800e301
 800e29c:	0800e301 	.word	0x0800e301
 800e2a0:	0800e301 	.word	0x0800e301
 800e2a4:	0800e301 	.word	0x0800e301
 800e2a8:	0800e301 	.word	0x0800e301
 800e2ac:	0800e2f1 	.word	0x0800e2f1
 800e2b0:	0800e301 	.word	0x0800e301
 800e2b4:	0800e301 	.word	0x0800e301
 800e2b8:	0800e301 	.word	0x0800e301
 800e2bc:	0800e301 	.word	0x0800e301
 800e2c0:	0800e301 	.word	0x0800e301
 800e2c4:	0800e301 	.word	0x0800e301
 800e2c8:	0800e301 	.word	0x0800e301
 800e2cc:	0800e2f9 	.word	0x0800e2f9
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d6:	e0d6      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e2d8:	2304      	movs	r3, #4
 800e2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2de:	e0d2      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e2e0:	2308      	movs	r3, #8
 800e2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2e6:	e0ce      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e2e8:	2310      	movs	r3, #16
 800e2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ee:	e0ca      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e2f0:	2320      	movs	r3, #32
 800e2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f6:	e0c6      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e2f8:	2340      	movs	r3, #64	; 0x40
 800e2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fe:	e0c2      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e300:	2380      	movs	r3, #128	; 0x80
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e0be      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e308:	40011400 	.word	0x40011400
 800e30c:	58024400 	.word	0x58024400
 800e310:	40007800 	.word	0x40007800
 800e314:	40007c00 	.word	0x40007c00
 800e318:	40011800 	.word	0x40011800
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4aad      	ldr	r2, [pc, #692]	; (800e5d8 <UART_SetConfig+0x900>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d176      	bne.n	800e414 <UART_SetConfig+0x73c>
 800e326:	4bad      	ldr	r3, [pc, #692]	; (800e5dc <UART_SetConfig+0x904>)
 800e328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e32a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e32e:	2b28      	cmp	r3, #40	; 0x28
 800e330:	d86c      	bhi.n	800e40c <UART_SetConfig+0x734>
 800e332:	a201      	add	r2, pc, #4	; (adr r2, 800e338 <UART_SetConfig+0x660>)
 800e334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e338:	0800e3dd 	.word	0x0800e3dd
 800e33c:	0800e40d 	.word	0x0800e40d
 800e340:	0800e40d 	.word	0x0800e40d
 800e344:	0800e40d 	.word	0x0800e40d
 800e348:	0800e40d 	.word	0x0800e40d
 800e34c:	0800e40d 	.word	0x0800e40d
 800e350:	0800e40d 	.word	0x0800e40d
 800e354:	0800e40d 	.word	0x0800e40d
 800e358:	0800e3e5 	.word	0x0800e3e5
 800e35c:	0800e40d 	.word	0x0800e40d
 800e360:	0800e40d 	.word	0x0800e40d
 800e364:	0800e40d 	.word	0x0800e40d
 800e368:	0800e40d 	.word	0x0800e40d
 800e36c:	0800e40d 	.word	0x0800e40d
 800e370:	0800e40d 	.word	0x0800e40d
 800e374:	0800e40d 	.word	0x0800e40d
 800e378:	0800e3ed 	.word	0x0800e3ed
 800e37c:	0800e40d 	.word	0x0800e40d
 800e380:	0800e40d 	.word	0x0800e40d
 800e384:	0800e40d 	.word	0x0800e40d
 800e388:	0800e40d 	.word	0x0800e40d
 800e38c:	0800e40d 	.word	0x0800e40d
 800e390:	0800e40d 	.word	0x0800e40d
 800e394:	0800e40d 	.word	0x0800e40d
 800e398:	0800e3f5 	.word	0x0800e3f5
 800e39c:	0800e40d 	.word	0x0800e40d
 800e3a0:	0800e40d 	.word	0x0800e40d
 800e3a4:	0800e40d 	.word	0x0800e40d
 800e3a8:	0800e40d 	.word	0x0800e40d
 800e3ac:	0800e40d 	.word	0x0800e40d
 800e3b0:	0800e40d 	.word	0x0800e40d
 800e3b4:	0800e40d 	.word	0x0800e40d
 800e3b8:	0800e3fd 	.word	0x0800e3fd
 800e3bc:	0800e40d 	.word	0x0800e40d
 800e3c0:	0800e40d 	.word	0x0800e40d
 800e3c4:	0800e40d 	.word	0x0800e40d
 800e3c8:	0800e40d 	.word	0x0800e40d
 800e3cc:	0800e40d 	.word	0x0800e40d
 800e3d0:	0800e40d 	.word	0x0800e40d
 800e3d4:	0800e40d 	.word	0x0800e40d
 800e3d8:	0800e405 	.word	0x0800e405
 800e3dc:	2301      	movs	r3, #1
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e050      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e3e4:	2304      	movs	r3, #4
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e04c      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e3ec:	2308      	movs	r3, #8
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e048      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e3f4:	2310      	movs	r3, #16
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e044      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e3fc:	2320      	movs	r3, #32
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e402:	e040      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e404:	2340      	movs	r3, #64	; 0x40
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40a:	e03c      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e40c:	2380      	movs	r3, #128	; 0x80
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e412:	e038      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a71      	ldr	r2, [pc, #452]	; (800e5e0 <UART_SetConfig+0x908>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d130      	bne.n	800e480 <UART_SetConfig+0x7a8>
 800e41e:	4b6f      	ldr	r3, [pc, #444]	; (800e5dc <UART_SetConfig+0x904>)
 800e420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	2b05      	cmp	r3, #5
 800e428:	d826      	bhi.n	800e478 <UART_SetConfig+0x7a0>
 800e42a:	a201      	add	r2, pc, #4	; (adr r2, 800e430 <UART_SetConfig+0x758>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e449 	.word	0x0800e449
 800e434:	0800e451 	.word	0x0800e451
 800e438:	0800e459 	.word	0x0800e459
 800e43c:	0800e461 	.word	0x0800e461
 800e440:	0800e469 	.word	0x0800e469
 800e444:	0800e471 	.word	0x0800e471
 800e448:	2302      	movs	r3, #2
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e01a      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e450:	2304      	movs	r3, #4
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e456:	e016      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e458:	2308      	movs	r3, #8
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45e:	e012      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e460:	2310      	movs	r3, #16
 800e462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e466:	e00e      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e468:	2320      	movs	r3, #32
 800e46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46e:	e00a      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e470:	2340      	movs	r3, #64	; 0x40
 800e472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e476:	e006      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e478:	2380      	movs	r3, #128	; 0x80
 800e47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47e:	e002      	b.n	800e486 <UART_SetConfig+0x7ae>
 800e480:	2380      	movs	r3, #128	; 0x80
 800e482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a55      	ldr	r2, [pc, #340]	; (800e5e0 <UART_SetConfig+0x908>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	f040 80f8 	bne.w	800e682 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e492:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e496:	2b20      	cmp	r3, #32
 800e498:	dc46      	bgt.n	800e528 <UART_SetConfig+0x850>
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	db75      	blt.n	800e58a <UART_SetConfig+0x8b2>
 800e49e:	3b02      	subs	r3, #2
 800e4a0:	2b1e      	cmp	r3, #30
 800e4a2:	d872      	bhi.n	800e58a <UART_SetConfig+0x8b2>
 800e4a4:	a201      	add	r2, pc, #4	; (adr r2, 800e4ac <UART_SetConfig+0x7d4>)
 800e4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4aa:	bf00      	nop
 800e4ac:	0800e52f 	.word	0x0800e52f
 800e4b0:	0800e58b 	.word	0x0800e58b
 800e4b4:	0800e537 	.word	0x0800e537
 800e4b8:	0800e58b 	.word	0x0800e58b
 800e4bc:	0800e58b 	.word	0x0800e58b
 800e4c0:	0800e58b 	.word	0x0800e58b
 800e4c4:	0800e547 	.word	0x0800e547
 800e4c8:	0800e58b 	.word	0x0800e58b
 800e4cc:	0800e58b 	.word	0x0800e58b
 800e4d0:	0800e58b 	.word	0x0800e58b
 800e4d4:	0800e58b 	.word	0x0800e58b
 800e4d8:	0800e58b 	.word	0x0800e58b
 800e4dc:	0800e58b 	.word	0x0800e58b
 800e4e0:	0800e58b 	.word	0x0800e58b
 800e4e4:	0800e557 	.word	0x0800e557
 800e4e8:	0800e58b 	.word	0x0800e58b
 800e4ec:	0800e58b 	.word	0x0800e58b
 800e4f0:	0800e58b 	.word	0x0800e58b
 800e4f4:	0800e58b 	.word	0x0800e58b
 800e4f8:	0800e58b 	.word	0x0800e58b
 800e4fc:	0800e58b 	.word	0x0800e58b
 800e500:	0800e58b 	.word	0x0800e58b
 800e504:	0800e58b 	.word	0x0800e58b
 800e508:	0800e58b 	.word	0x0800e58b
 800e50c:	0800e58b 	.word	0x0800e58b
 800e510:	0800e58b 	.word	0x0800e58b
 800e514:	0800e58b 	.word	0x0800e58b
 800e518:	0800e58b 	.word	0x0800e58b
 800e51c:	0800e58b 	.word	0x0800e58b
 800e520:	0800e58b 	.word	0x0800e58b
 800e524:	0800e57d 	.word	0x0800e57d
 800e528:	2b40      	cmp	r3, #64	; 0x40
 800e52a:	d02a      	beq.n	800e582 <UART_SetConfig+0x8aa>
 800e52c:	e02d      	b.n	800e58a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e52e:	f7fc fd4b 	bl	800afc8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e534:	e02f      	b.n	800e596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fc fd5a 	bl	800aff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e544:	e027      	b.n	800e596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e546:	f107 0318 	add.w	r3, r7, #24
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fc fea6 	bl	800b29c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e554:	e01f      	b.n	800e596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e556:	4b21      	ldr	r3, [pc, #132]	; (800e5dc <UART_SetConfig+0x904>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f003 0320 	and.w	r3, r3, #32
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d009      	beq.n	800e576 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e562:	4b1e      	ldr	r3, [pc, #120]	; (800e5dc <UART_SetConfig+0x904>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	08db      	lsrs	r3, r3, #3
 800e568:	f003 0303 	and.w	r3, r3, #3
 800e56c:	4a1d      	ldr	r2, [pc, #116]	; (800e5e4 <UART_SetConfig+0x90c>)
 800e56e:	fa22 f303 	lsr.w	r3, r2, r3
 800e572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e574:	e00f      	b.n	800e596 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e576:	4b1b      	ldr	r3, [pc, #108]	; (800e5e4 <UART_SetConfig+0x90c>)
 800e578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e57a:	e00c      	b.n	800e596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e57c:	4b1a      	ldr	r3, [pc, #104]	; (800e5e8 <UART_SetConfig+0x910>)
 800e57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e580:	e009      	b.n	800e596 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e588:	e005      	b.n	800e596 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e58a:	2300      	movs	r3, #0
 800e58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e58e:	2301      	movs	r3, #1
 800e590:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e594:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 81ee 	beq.w	800e97a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5a2:	4a12      	ldr	r2, [pc, #72]	; (800e5ec <UART_SetConfig+0x914>)
 800e5a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5b0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	685a      	ldr	r2, [r3, #4]
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	005b      	lsls	r3, r3, #1
 800e5ba:	4413      	add	r3, r2
 800e5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d305      	bcc.n	800e5ce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d910      	bls.n	800e5f0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e5d4:	e1d1      	b.n	800e97a <UART_SetConfig+0xca2>
 800e5d6:	bf00      	nop
 800e5d8:	40011c00 	.word	0x40011c00
 800e5dc:	58024400 	.word	0x58024400
 800e5e0:	58000c00 	.word	0x58000c00
 800e5e4:	03d09000 	.word	0x03d09000
 800e5e8:	003d0900 	.word	0x003d0900
 800e5ec:	0800fba0 	.word	0x0800fba0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	60bb      	str	r3, [r7, #8]
 800e5f6:	60fa      	str	r2, [r7, #12]
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5fc:	4ac0      	ldr	r2, [pc, #768]	; (800e900 <UART_SetConfig+0xc28>)
 800e5fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e602:	b29b      	uxth	r3, r3
 800e604:	2200      	movs	r2, #0
 800e606:	603b      	str	r3, [r7, #0]
 800e608:	607a      	str	r2, [r7, #4]
 800e60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e60e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e612:	f7f1 fe85 	bl	8000320 <__aeabi_uldivmod>
 800e616:	4602      	mov	r2, r0
 800e618:	460b      	mov	r3, r1
 800e61a:	4610      	mov	r0, r2
 800e61c:	4619      	mov	r1, r3
 800e61e:	f04f 0200 	mov.w	r2, #0
 800e622:	f04f 0300 	mov.w	r3, #0
 800e626:	020b      	lsls	r3, r1, #8
 800e628:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e62c:	0202      	lsls	r2, r0, #8
 800e62e:	6979      	ldr	r1, [r7, #20]
 800e630:	6849      	ldr	r1, [r1, #4]
 800e632:	0849      	lsrs	r1, r1, #1
 800e634:	2000      	movs	r0, #0
 800e636:	460c      	mov	r4, r1
 800e638:	4605      	mov	r5, r0
 800e63a:	eb12 0804 	adds.w	r8, r2, r4
 800e63e:	eb43 0905 	adc.w	r9, r3, r5
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	469a      	mov	sl, r3
 800e64a:	4693      	mov	fp, r2
 800e64c:	4652      	mov	r2, sl
 800e64e:	465b      	mov	r3, fp
 800e650:	4640      	mov	r0, r8
 800e652:	4649      	mov	r1, r9
 800e654:	f7f1 fe64 	bl	8000320 <__aeabi_uldivmod>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	4613      	mov	r3, r2
 800e65e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e666:	d308      	bcc.n	800e67a <UART_SetConfig+0x9a2>
 800e668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e66a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e66e:	d204      	bcs.n	800e67a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e676:	60da      	str	r2, [r3, #12]
 800e678:	e17f      	b.n	800e97a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e680:	e17b      	b.n	800e97a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	69db      	ldr	r3, [r3, #28]
 800e686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e68a:	f040 80bd 	bne.w	800e808 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e68e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e692:	2b20      	cmp	r3, #32
 800e694:	dc48      	bgt.n	800e728 <UART_SetConfig+0xa50>
 800e696:	2b00      	cmp	r3, #0
 800e698:	db7b      	blt.n	800e792 <UART_SetConfig+0xaba>
 800e69a:	2b20      	cmp	r3, #32
 800e69c:	d879      	bhi.n	800e792 <UART_SetConfig+0xaba>
 800e69e:	a201      	add	r2, pc, #4	; (adr r2, 800e6a4 <UART_SetConfig+0x9cc>)
 800e6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a4:	0800e72f 	.word	0x0800e72f
 800e6a8:	0800e737 	.word	0x0800e737
 800e6ac:	0800e793 	.word	0x0800e793
 800e6b0:	0800e793 	.word	0x0800e793
 800e6b4:	0800e73f 	.word	0x0800e73f
 800e6b8:	0800e793 	.word	0x0800e793
 800e6bc:	0800e793 	.word	0x0800e793
 800e6c0:	0800e793 	.word	0x0800e793
 800e6c4:	0800e74f 	.word	0x0800e74f
 800e6c8:	0800e793 	.word	0x0800e793
 800e6cc:	0800e793 	.word	0x0800e793
 800e6d0:	0800e793 	.word	0x0800e793
 800e6d4:	0800e793 	.word	0x0800e793
 800e6d8:	0800e793 	.word	0x0800e793
 800e6dc:	0800e793 	.word	0x0800e793
 800e6e0:	0800e793 	.word	0x0800e793
 800e6e4:	0800e75f 	.word	0x0800e75f
 800e6e8:	0800e793 	.word	0x0800e793
 800e6ec:	0800e793 	.word	0x0800e793
 800e6f0:	0800e793 	.word	0x0800e793
 800e6f4:	0800e793 	.word	0x0800e793
 800e6f8:	0800e793 	.word	0x0800e793
 800e6fc:	0800e793 	.word	0x0800e793
 800e700:	0800e793 	.word	0x0800e793
 800e704:	0800e793 	.word	0x0800e793
 800e708:	0800e793 	.word	0x0800e793
 800e70c:	0800e793 	.word	0x0800e793
 800e710:	0800e793 	.word	0x0800e793
 800e714:	0800e793 	.word	0x0800e793
 800e718:	0800e793 	.word	0x0800e793
 800e71c:	0800e793 	.word	0x0800e793
 800e720:	0800e793 	.word	0x0800e793
 800e724:	0800e785 	.word	0x0800e785
 800e728:	2b40      	cmp	r3, #64	; 0x40
 800e72a:	d02e      	beq.n	800e78a <UART_SetConfig+0xab2>
 800e72c:	e031      	b.n	800e792 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e72e:	f7fb fd25 	bl	800a17c <HAL_RCC_GetPCLK1Freq>
 800e732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e734:	e033      	b.n	800e79e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e736:	f7fb fd37 	bl	800a1a8 <HAL_RCC_GetPCLK2Freq>
 800e73a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e73c:	e02f      	b.n	800e79e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e73e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e742:	4618      	mov	r0, r3
 800e744:	f7fc fc56 	bl	800aff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e74c:	e027      	b.n	800e79e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e74e:	f107 0318 	add.w	r3, r7, #24
 800e752:	4618      	mov	r0, r3
 800e754:	f7fc fda2 	bl	800b29c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e758:	69fb      	ldr	r3, [r7, #28]
 800e75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75c:	e01f      	b.n	800e79e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e75e:	4b69      	ldr	r3, [pc, #420]	; (800e904 <UART_SetConfig+0xc2c>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f003 0320 	and.w	r3, r3, #32
 800e766:	2b00      	cmp	r3, #0
 800e768:	d009      	beq.n	800e77e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e76a:	4b66      	ldr	r3, [pc, #408]	; (800e904 <UART_SetConfig+0xc2c>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	08db      	lsrs	r3, r3, #3
 800e770:	f003 0303 	and.w	r3, r3, #3
 800e774:	4a64      	ldr	r2, [pc, #400]	; (800e908 <UART_SetConfig+0xc30>)
 800e776:	fa22 f303 	lsr.w	r3, r2, r3
 800e77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e77c:	e00f      	b.n	800e79e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e77e:	4b62      	ldr	r3, [pc, #392]	; (800e908 <UART_SetConfig+0xc30>)
 800e780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e782:	e00c      	b.n	800e79e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e784:	4b61      	ldr	r3, [pc, #388]	; (800e90c <UART_SetConfig+0xc34>)
 800e786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e788:	e009      	b.n	800e79e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e78a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e790:	e005      	b.n	800e79e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e792:	2300      	movs	r3, #0
 800e794:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e796:	2301      	movs	r3, #1
 800e798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e79c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	f000 80ea 	beq.w	800e97a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7aa:	4a55      	ldr	r2, [pc, #340]	; (800e900 <UART_SetConfig+0xc28>)
 800e7ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7b8:	005a      	lsls	r2, r3, #1
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	085b      	lsrs	r3, r3, #1
 800e7c0:	441a      	add	r2, r3
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ce:	2b0f      	cmp	r3, #15
 800e7d0:	d916      	bls.n	800e800 <UART_SetConfig+0xb28>
 800e7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7d8:	d212      	bcs.n	800e800 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	f023 030f 	bic.w	r3, r3, #15
 800e7e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e6:	085b      	lsrs	r3, r3, #1
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	f003 0307 	and.w	r3, r3, #7
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7f2:	4313      	orrs	r3, r2
 800e7f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e7fc:	60da      	str	r2, [r3, #12]
 800e7fe:	e0bc      	b.n	800e97a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e800:	2301      	movs	r3, #1
 800e802:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e806:	e0b8      	b.n	800e97a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e808:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e80c:	2b20      	cmp	r3, #32
 800e80e:	dc4b      	bgt.n	800e8a8 <UART_SetConfig+0xbd0>
 800e810:	2b00      	cmp	r3, #0
 800e812:	f2c0 8087 	blt.w	800e924 <UART_SetConfig+0xc4c>
 800e816:	2b20      	cmp	r3, #32
 800e818:	f200 8084 	bhi.w	800e924 <UART_SetConfig+0xc4c>
 800e81c:	a201      	add	r2, pc, #4	; (adr r2, 800e824 <UART_SetConfig+0xb4c>)
 800e81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e822:	bf00      	nop
 800e824:	0800e8af 	.word	0x0800e8af
 800e828:	0800e8b7 	.word	0x0800e8b7
 800e82c:	0800e925 	.word	0x0800e925
 800e830:	0800e925 	.word	0x0800e925
 800e834:	0800e8bf 	.word	0x0800e8bf
 800e838:	0800e925 	.word	0x0800e925
 800e83c:	0800e925 	.word	0x0800e925
 800e840:	0800e925 	.word	0x0800e925
 800e844:	0800e8cf 	.word	0x0800e8cf
 800e848:	0800e925 	.word	0x0800e925
 800e84c:	0800e925 	.word	0x0800e925
 800e850:	0800e925 	.word	0x0800e925
 800e854:	0800e925 	.word	0x0800e925
 800e858:	0800e925 	.word	0x0800e925
 800e85c:	0800e925 	.word	0x0800e925
 800e860:	0800e925 	.word	0x0800e925
 800e864:	0800e8df 	.word	0x0800e8df
 800e868:	0800e925 	.word	0x0800e925
 800e86c:	0800e925 	.word	0x0800e925
 800e870:	0800e925 	.word	0x0800e925
 800e874:	0800e925 	.word	0x0800e925
 800e878:	0800e925 	.word	0x0800e925
 800e87c:	0800e925 	.word	0x0800e925
 800e880:	0800e925 	.word	0x0800e925
 800e884:	0800e925 	.word	0x0800e925
 800e888:	0800e925 	.word	0x0800e925
 800e88c:	0800e925 	.word	0x0800e925
 800e890:	0800e925 	.word	0x0800e925
 800e894:	0800e925 	.word	0x0800e925
 800e898:	0800e925 	.word	0x0800e925
 800e89c:	0800e925 	.word	0x0800e925
 800e8a0:	0800e925 	.word	0x0800e925
 800e8a4:	0800e917 	.word	0x0800e917
 800e8a8:	2b40      	cmp	r3, #64	; 0x40
 800e8aa:	d037      	beq.n	800e91c <UART_SetConfig+0xc44>
 800e8ac:	e03a      	b.n	800e924 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8ae:	f7fb fc65 	bl	800a17c <HAL_RCC_GetPCLK1Freq>
 800e8b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8b4:	e03c      	b.n	800e930 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8b6:	f7fb fc77 	bl	800a1a8 <HAL_RCC_GetPCLK2Freq>
 800e8ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e8bc:	e038      	b.n	800e930 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fc fb96 	bl	800aff4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8cc:	e030      	b.n	800e930 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8ce:	f107 0318 	add.w	r3, r7, #24
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fc fce2 	bl	800b29c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8dc:	e028      	b.n	800e930 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e8de:	4b09      	ldr	r3, [pc, #36]	; (800e904 <UART_SetConfig+0xc2c>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f003 0320 	and.w	r3, r3, #32
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d012      	beq.n	800e910 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8ea:	4b06      	ldr	r3, [pc, #24]	; (800e904 <UART_SetConfig+0xc2c>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	08db      	lsrs	r3, r3, #3
 800e8f0:	f003 0303 	and.w	r3, r3, #3
 800e8f4:	4a04      	ldr	r2, [pc, #16]	; (800e908 <UART_SetConfig+0xc30>)
 800e8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8fc:	e018      	b.n	800e930 <UART_SetConfig+0xc58>
 800e8fe:	bf00      	nop
 800e900:	0800fba0 	.word	0x0800fba0
 800e904:	58024400 	.word	0x58024400
 800e908:	03d09000 	.word	0x03d09000
 800e90c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e910:	4b24      	ldr	r3, [pc, #144]	; (800e9a4 <UART_SetConfig+0xccc>)
 800e912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e914:	e00c      	b.n	800e930 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e916:	4b24      	ldr	r3, [pc, #144]	; (800e9a8 <UART_SetConfig+0xcd0>)
 800e918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e91a:	e009      	b.n	800e930 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e91c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e922:	e005      	b.n	800e930 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e924:	2300      	movs	r3, #0
 800e926:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e928:	2301      	movs	r3, #1
 800e92a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e92e:	bf00      	nop
    }

    if (pclk != 0U)
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	2b00      	cmp	r3, #0
 800e934:	d021      	beq.n	800e97a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93a:	4a1c      	ldr	r2, [pc, #112]	; (800e9ac <UART_SetConfig+0xcd4>)
 800e93c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e940:	461a      	mov	r2, r3
 800e942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e944:	fbb3 f2f2 	udiv	r2, r3, r2
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	085b      	lsrs	r3, r3, #1
 800e94e:	441a      	add	r2, r3
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	fbb2 f3f3 	udiv	r3, r2, r3
 800e958:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95c:	2b0f      	cmp	r3, #15
 800e95e:	d909      	bls.n	800e974 <UART_SetConfig+0xc9c>
 800e960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e966:	d205      	bcs.n	800e974 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	60da      	str	r2, [r3, #12]
 800e972:	e002      	b.n	800e97a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e974:	2301      	movs	r3, #1
 800e976:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2201      	movs	r2, #1
 800e97e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	2201      	movs	r2, #1
 800e986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	2200      	movs	r2, #0
 800e98e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	2200      	movs	r2, #0
 800e994:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e996:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3748      	adds	r7, #72	; 0x48
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9a4:	03d09000 	.word	0x03d09000
 800e9a8:	003d0900 	.word	0x003d0900
 800e9ac:	0800fba0 	.word	0x0800fba0

0800e9b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9bc:	f003 0301 	and.w	r3, r3, #1
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d00a      	beq.n	800e9da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	430a      	orrs	r2, r1
 800e9d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9de:	f003 0302 	and.w	r3, r3, #2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00a      	beq.n	800e9fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	430a      	orrs	r2, r1
 800e9fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea00:	f003 0304 	and.w	r3, r3, #4
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00a      	beq.n	800ea1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	430a      	orrs	r2, r1
 800ea1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea22:	f003 0308 	and.w	r3, r3, #8
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00a      	beq.n	800ea40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	430a      	orrs	r2, r1
 800ea3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea44:	f003 0310 	and.w	r3, r3, #16
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00a      	beq.n	800ea62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	689b      	ldr	r3, [r3, #8]
 800ea52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	430a      	orrs	r2, r1
 800ea60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea66:	f003 0320 	and.w	r3, r3, #32
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00a      	beq.n	800ea84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	430a      	orrs	r2, r1
 800ea82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d01a      	beq.n	800eac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	430a      	orrs	r2, r1
 800eaa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaae:	d10a      	bne.n	800eac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	430a      	orrs	r2, r1
 800eac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00a      	beq.n	800eae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	430a      	orrs	r2, r1
 800eae6:	605a      	str	r2, [r3, #4]
  }
}
 800eae8:	bf00      	nop
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af02      	add	r7, sp, #8
 800eafa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb04:	f7f6 ffcc 	bl	8005aa0 <HAL_GetTick>
 800eb08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f003 0308 	and.w	r3, r3, #8
 800eb14:	2b08      	cmp	r3, #8
 800eb16:	d10e      	bne.n	800eb36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 f82f 	bl	800eb8a <UART_WaitOnFlagUntilTimeout>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d001      	beq.n	800eb36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb32:	2303      	movs	r3, #3
 800eb34:	e025      	b.n	800eb82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f003 0304 	and.w	r3, r3, #4
 800eb40:	2b04      	cmp	r3, #4
 800eb42:	d10e      	bne.n	800eb62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb48:	9300      	str	r3, [sp, #0]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 f819 	bl	800eb8a <UART_WaitOnFlagUntilTimeout>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb5e:	2303      	movs	r3, #3
 800eb60:	e00f      	b.n	800eb82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2220      	movs	r2, #32
 800eb66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b09c      	sub	sp, #112	; 0x70
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	60f8      	str	r0, [r7, #12]
 800eb92:	60b9      	str	r1, [r7, #8]
 800eb94:	603b      	str	r3, [r7, #0]
 800eb96:	4613      	mov	r3, r2
 800eb98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb9a:	e0a9      	b.n	800ecf0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba2:	f000 80a5 	beq.w	800ecf0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eba6:	f7f6 ff7b 	bl	8005aa0 <HAL_GetTick>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d302      	bcc.n	800ebbc <UART_WaitOnFlagUntilTimeout+0x32>
 800ebb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d140      	bne.n	800ec3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebc4:	e853 3f00 	ldrex	r3, [r3]
 800ebc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ebca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ebd0:	667b      	str	r3, [r7, #100]	; 0x64
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ebdc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ebe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ebe2:	e841 2300 	strex	r3, r2, [r1]
 800ebe6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ebe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1e6      	bne.n	800ebbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	3308      	adds	r3, #8
 800ebf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf8:	e853 3f00 	ldrex	r3, [r3]
 800ebfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec00:	f023 0301 	bic.w	r3, r3, #1
 800ec04:	663b      	str	r3, [r7, #96]	; 0x60
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3308      	adds	r3, #8
 800ec0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec0e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ec10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec16:	e841 2300 	strex	r3, r2, [r1]
 800ec1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ec1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e5      	bne.n	800ebee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2220      	movs	r2, #32
 800ec26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2220      	movs	r2, #32
 800ec2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	e069      	b.n	800ed12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f003 0304 	and.w	r3, r3, #4
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d051      	beq.n	800ecf0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	69db      	ldr	r3, [r3, #28]
 800ec52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec5a:	d149      	bne.n	800ecf0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6e:	e853 3f00 	ldrex	r3, [r3]
 800ec72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	461a      	mov	r2, r3
 800ec82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec84:	637b      	str	r3, [r7, #52]	; 0x34
 800ec86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec8c:	e841 2300 	strex	r3, r2, [r1]
 800ec90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d1e6      	bne.n	800ec66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	3308      	adds	r3, #8
 800ec9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	e853 3f00 	ldrex	r3, [r3]
 800eca6:	613b      	str	r3, [r7, #16]
   return(result);
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	f023 0301 	bic.w	r3, r3, #1
 800ecae:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ecb8:	623a      	str	r2, [r7, #32]
 800ecba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecbc:	69f9      	ldr	r1, [r7, #28]
 800ecbe:	6a3a      	ldr	r2, [r7, #32]
 800ecc0:	e841 2300 	strex	r3, r2, [r1]
 800ecc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1e5      	bne.n	800ec98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2220      	movs	r2, #32
 800ecd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2220      	movs	r2, #32
 800ecd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2220      	movs	r2, #32
 800ece0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2200      	movs	r2, #0
 800ece8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ecec:	2303      	movs	r3, #3
 800ecee:	e010      	b.n	800ed12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	69da      	ldr	r2, [r3, #28]
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	4013      	ands	r3, r2
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	bf0c      	ite	eq
 800ed00:	2301      	moveq	r3, #1
 800ed02:	2300      	movne	r3, #0
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	461a      	mov	r2, r3
 800ed08:	79fb      	ldrb	r3, [r7, #7]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	f43f af46 	beq.w	800eb9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed10:	2300      	movs	r3, #0
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3770      	adds	r7, #112	; 0x70
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
	...

0800ed1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b096      	sub	sp, #88	; 0x58
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	4613      	mov	r3, r2
 800ed28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	68ba      	ldr	r2, [r7, #8]
 800ed2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	88fa      	ldrh	r2, [r7, #6]
 800ed34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2222      	movs	r2, #34	; 0x22
 800ed44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d02c      	beq.n	800edaa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed54:	4a42      	ldr	r2, [pc, #264]	; (800ee60 <UART_Start_Receive_DMA+0x144>)
 800ed56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed5c:	4a41      	ldr	r2, [pc, #260]	; (800ee64 <UART_Start_Receive_DMA+0x148>)
 800ed5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed64:	4a40      	ldr	r2, [pc, #256]	; (800ee68 <UART_Start_Receive_DMA+0x14c>)
 800ed66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	3324      	adds	r3, #36	; 0x24
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed80:	461a      	mov	r2, r3
 800ed82:	88fb      	ldrh	r3, [r7, #6]
 800ed84:	f7f7 fd0e 	bl	80067a4 <HAL_DMA_Start_IT>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00d      	beq.n	800edaa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2210      	movs	r2, #16
 800ed92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2220      	movs	r2, #32
 800eda2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800eda6:	2301      	movs	r3, #1
 800eda8:	e055      	b.n	800ee56 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	691b      	ldr	r3, [r3, #16]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d018      	beq.n	800edec <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc2:	e853 3f00 	ldrex	r3, [r3]
 800edc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800edc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800edce:	657b      	str	r3, [r7, #84]	; 0x54
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	461a      	mov	r2, r3
 800edd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800edda:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eddc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800edde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ede0:	e841 2300 	strex	r3, r2, [r1]
 800ede4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ede6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d1e6      	bne.n	800edba <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	3308      	adds	r3, #8
 800edf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf6:	e853 3f00 	ldrex	r3, [r3]
 800edfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfe:	f043 0301 	orr.w	r3, r3, #1
 800ee02:	653b      	str	r3, [r7, #80]	; 0x50
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	3308      	adds	r3, #8
 800ee0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee0c:	637a      	str	r2, [r7, #52]	; 0x34
 800ee0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee14:	e841 2300 	strex	r3, r2, [r1]
 800ee18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1e5      	bne.n	800edec <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3308      	adds	r3, #8
 800ee26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	e853 3f00 	ldrex	r3, [r3]
 800ee2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee40:	623a      	str	r2, [r7, #32]
 800ee42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee44:	69f9      	ldr	r1, [r7, #28]
 800ee46:	6a3a      	ldr	r2, [r7, #32]
 800ee48:	e841 2300 	strex	r3, r2, [r1]
 800ee4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d1e5      	bne.n	800ee20 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3758      	adds	r7, #88	; 0x58
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	0800f06f 	.word	0x0800f06f
 800ee64:	0800f191 	.word	0x0800f191
 800ee68:	0800f1c9 	.word	0x0800f1c9

0800ee6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b08f      	sub	sp, #60	; 0x3c
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee7a:	6a3b      	ldr	r3, [r7, #32]
 800ee7c:	e853 3f00 	ldrex	r3, [r3]
 800ee80:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee82:	69fb      	ldr	r3, [r7, #28]
 800ee84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ee88:	637b      	str	r3, [r7, #52]	; 0x34
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee94:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee9a:	e841 2300 	strex	r3, r2, [r1]
 800ee9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1e6      	bne.n	800ee74 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	3308      	adds	r3, #8
 800eeac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	e853 3f00 	ldrex	r3, [r3]
 800eeb4:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eebc:	633b      	str	r3, [r7, #48]	; 0x30
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	3308      	adds	r3, #8
 800eec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eec6:	61ba      	str	r2, [r7, #24]
 800eec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeca:	6979      	ldr	r1, [r7, #20]
 800eecc:	69ba      	ldr	r2, [r7, #24]
 800eece:	e841 2300 	strex	r3, r2, [r1]
 800eed2:	613b      	str	r3, [r7, #16]
   return(result);
 800eed4:	693b      	ldr	r3, [r7, #16]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1e5      	bne.n	800eea6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2220      	movs	r2, #32
 800eede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800eee2:	bf00      	nop
 800eee4:	373c      	adds	r7, #60	; 0x3c
 800eee6:	46bd      	mov	sp, r7
 800eee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeec:	4770      	bx	lr
	...

0800eef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eef0:	b480      	push	{r7}
 800eef2:	b095      	sub	sp, #84	; 0x54
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef00:	e853 3f00 	ldrex	r3, [r3]
 800ef04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	461a      	mov	r2, r3
 800ef14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef16:	643b      	str	r3, [r7, #64]	; 0x40
 800ef18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef1e:	e841 2300 	strex	r3, r2, [r1]
 800ef22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1e6      	bne.n	800eef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	3308      	adds	r3, #8
 800ef30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	e853 3f00 	ldrex	r3, [r3]
 800ef38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef3a:	69fa      	ldr	r2, [r7, #28]
 800ef3c:	4b1e      	ldr	r3, [pc, #120]	; (800efb8 <UART_EndRxTransfer+0xc8>)
 800ef3e:	4013      	ands	r3, r2
 800ef40:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	3308      	adds	r3, #8
 800ef48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef52:	e841 2300 	strex	r3, r2, [r1]
 800ef56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1e5      	bne.n	800ef2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d118      	bne.n	800ef98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	e853 3f00 	ldrex	r3, [r3]
 800ef72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	f023 0310 	bic.w	r3, r3, #16
 800ef7a:	647b      	str	r3, [r7, #68]	; 0x44
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	461a      	mov	r2, r3
 800ef82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef84:	61bb      	str	r3, [r7, #24]
 800ef86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef88:	6979      	ldr	r1, [r7, #20]
 800ef8a:	69ba      	ldr	r2, [r7, #24]
 800ef8c:	e841 2300 	strex	r3, r2, [r1]
 800ef90:	613b      	str	r3, [r7, #16]
   return(result);
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d1e6      	bne.n	800ef66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2220      	movs	r2, #32
 800ef9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2200      	movs	r2, #0
 800efa4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800efac:	bf00      	nop
 800efae:	3754      	adds	r7, #84	; 0x54
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr
 800efb8:	effffffe 	.word	0xeffffffe

0800efbc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b090      	sub	sp, #64	; 0x40
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efc8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	69db      	ldr	r3, [r3, #28]
 800efce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efd2:	d037      	beq.n	800f044 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800efd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd6:	2200      	movs	r2, #0
 800efd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800efdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3308      	adds	r3, #8
 800efe2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	e853 3f00 	ldrex	r3, [r3]
 800efea:	623b      	str	r3, [r7, #32]
   return(result);
 800efec:	6a3b      	ldr	r3, [r7, #32]
 800efee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eff2:	63bb      	str	r3, [r7, #56]	; 0x38
 800eff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	3308      	adds	r3, #8
 800effa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800effc:	633a      	str	r2, [r7, #48]	; 0x30
 800effe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f004:	e841 2300 	strex	r3, r2, [r1]
 800f008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d1e5      	bne.n	800efdc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	e853 3f00 	ldrex	r3, [r3]
 800f01c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f024:	637b      	str	r3, [r7, #52]	; 0x34
 800f026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	461a      	mov	r2, r3
 800f02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f02e:	61fb      	str	r3, [r7, #28]
 800f030:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f032:	69b9      	ldr	r1, [r7, #24]
 800f034:	69fa      	ldr	r2, [r7, #28]
 800f036:	e841 2300 	strex	r3, r2, [r1]
 800f03a:	617b      	str	r3, [r7, #20]
   return(result);
 800f03c:	697b      	ldr	r3, [r7, #20]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1e6      	bne.n	800f010 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f042:	e002      	b.n	800f04a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800f044:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f046:	f7f4 fda7 	bl	8003b98 <HAL_UART_TxCpltCallback>
}
 800f04a:	bf00      	nop
 800f04c:	3740      	adds	r7, #64	; 0x40
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}

0800f052 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f052:	b580      	push	{r7, lr}
 800f054:	b084      	sub	sp, #16
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f05e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f7fe fe0f 	bl	800dc84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f066:	bf00      	nop
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}

0800f06e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b09c      	sub	sp, #112	; 0x70
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f07a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	69db      	ldr	r3, [r3, #28]
 800f080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f084:	d071      	beq.n	800f16a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f088:	2200      	movs	r2, #0
 800f08a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f096:	e853 3f00 	ldrex	r3, [r3]
 800f09a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f09e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f0ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800f0ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f0b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0b4:	e841 2300 	strex	r3, r2, [r1]
 800f0b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1e6      	bne.n	800f08e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	3308      	adds	r3, #8
 800f0c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ca:	e853 3f00 	ldrex	r3, [r3]
 800f0ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d2:	f023 0301 	bic.w	r3, r3, #1
 800f0d6:	667b      	str	r3, [r7, #100]	; 0x64
 800f0d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	3308      	adds	r3, #8
 800f0de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f0e0:	647a      	str	r2, [r7, #68]	; 0x44
 800f0e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0e8:	e841 2300 	strex	r3, r2, [r1]
 800f0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d1e5      	bne.n	800f0c0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	3308      	adds	r3, #8
 800f0fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fe:	e853 3f00 	ldrex	r3, [r3]
 800f102:	623b      	str	r3, [r7, #32]
   return(result);
 800f104:	6a3b      	ldr	r3, [r7, #32]
 800f106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f10a:	663b      	str	r3, [r7, #96]	; 0x60
 800f10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	3308      	adds	r3, #8
 800f112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f114:	633a      	str	r2, [r7, #48]	; 0x30
 800f116:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f11a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f11c:	e841 2300 	strex	r3, r2, [r1]
 800f120:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1e5      	bne.n	800f0f4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f12a:	2220      	movs	r2, #32
 800f12c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f134:	2b01      	cmp	r3, #1
 800f136:	d118      	bne.n	800f16a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	e853 3f00 	ldrex	r3, [r3]
 800f144:	60fb      	str	r3, [r7, #12]
   return(result);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f023 0310 	bic.w	r3, r3, #16
 800f14c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f14e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	461a      	mov	r2, r3
 800f154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f156:	61fb      	str	r3, [r7, #28]
 800f158:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15a:	69b9      	ldr	r1, [r7, #24]
 800f15c:	69fa      	ldr	r2, [r7, #28]
 800f15e:	e841 2300 	strex	r3, r2, [r1]
 800f162:	617b      	str	r3, [r7, #20]
   return(result);
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1e6      	bne.n	800f138 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f16a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d107      	bne.n	800f182 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f178:	4619      	mov	r1, r3
 800f17a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f17c:	f7fe fda0 	bl	800dcc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f180:	e002      	b.n	800f188 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f182:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f184:	f7fe fd88 	bl	800dc98 <HAL_UART_RxCpltCallback>
}
 800f188:	bf00      	nop
 800f18a:	3770      	adds	r7, #112	; 0x70
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f19c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d109      	bne.n	800f1ba <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1ac:	085b      	lsrs	r3, r3, #1
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f7fe fd84 	bl	800dcc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f1b8:	e002      	b.n	800f1c0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f1ba:	68f8      	ldr	r0, [r7, #12]
 800f1bc:	f7fe fd76 	bl	800dcac <HAL_UART_RxHalfCpltCallback>
}
 800f1c0:	bf00      	nop
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1e4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1f0:	2b80      	cmp	r3, #128	; 0x80
 800f1f2:	d109      	bne.n	800f208 <UART_DMAError+0x40>
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	2b21      	cmp	r3, #33	; 0x21
 800f1f8:	d106      	bne.n	800f208 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f202:	6978      	ldr	r0, [r7, #20]
 800f204:	f7ff fe32 	bl	800ee6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f212:	2b40      	cmp	r3, #64	; 0x40
 800f214:	d109      	bne.n	800f22a <UART_DMAError+0x62>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2b22      	cmp	r3, #34	; 0x22
 800f21a:	d106      	bne.n	800f22a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	2200      	movs	r2, #0
 800f220:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f224:	6978      	ldr	r0, [r7, #20]
 800f226:	f7ff fe63 	bl	800eef0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f230:	f043 0210 	orr.w	r2, r3, #16
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f23a:	6978      	ldr	r0, [r7, #20]
 800f23c:	f7f4 fc90 	bl	8003b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f240:	bf00      	nop
 800f242:	3718      	adds	r7, #24
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	2200      	movs	r2, #0
 800f25a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	2200      	movs	r2, #0
 800f262:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f266:	68f8      	ldr	r0, [r7, #12]
 800f268:	f7f4 fc7a 	bl	8003b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f26c:	bf00      	nop
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b088      	sub	sp, #32
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	e853 3f00 	ldrex	r3, [r3]
 800f288:	60bb      	str	r3, [r7, #8]
   return(result);
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f290:	61fb      	str	r3, [r7, #28]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	461a      	mov	r2, r3
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	61bb      	str	r3, [r7, #24]
 800f29c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f29e:	6979      	ldr	r1, [r7, #20]
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	e841 2300 	strex	r3, r2, [r1]
 800f2a6:	613b      	str	r3, [r7, #16]
   return(result);
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d1e6      	bne.n	800f27c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2220      	movs	r2, #32
 800f2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7f4 fc6b 	bl	8003b98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2c2:	bf00      	nop
 800f2c4:	3720      	adds	r7, #32
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f2ca:	b480      	push	{r7}
 800f2cc:	b083      	sub	sp, #12
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f2d2:	bf00      	nop
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f2de:	b480      	push	{r7}
 800f2e0:	b083      	sub	sp, #12
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f2e6:	bf00      	nop
 800f2e8:	370c      	adds	r7, #12
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr

0800f2f2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f2f2:	b480      	push	{r7}
 800f2f4:	b083      	sub	sp, #12
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f2fa:	bf00      	nop
 800f2fc:	370c      	adds	r7, #12
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f306:	b480      	push	{r7}
 800f308:	b085      	sub	sp, #20
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f314:	2b01      	cmp	r3, #1
 800f316:	d101      	bne.n	800f31c <HAL_UARTEx_DisableFifoMode+0x16>
 800f318:	2302      	movs	r3, #2
 800f31a:	e027      	b.n	800f36c <HAL_UARTEx_DisableFifoMode+0x66>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2201      	movs	r2, #1
 800f320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2224      	movs	r2, #36	; 0x24
 800f328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f022 0201 	bic.w	r2, r2, #1
 800f342:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f34a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2220      	movs	r2, #32
 800f35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2200      	movs	r2, #0
 800f366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3714      	adds	r7, #20
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d101      	bne.n	800f390 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f38c:	2302      	movs	r3, #2
 800f38e:	e02d      	b.n	800f3ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2224      	movs	r2, #36	; 0x24
 800f39c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f022 0201 	bic.w	r2, r2, #1
 800f3b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	430a      	orrs	r2, r1
 800f3ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 f84f 	bl	800f470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2220      	movs	r2, #32
 800f3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3ea:	2300      	movs	r3, #0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3710      	adds	r7, #16
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f404:	2b01      	cmp	r3, #1
 800f406:	d101      	bne.n	800f40c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f408:	2302      	movs	r3, #2
 800f40a:	e02d      	b.n	800f468 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2201      	movs	r2, #1
 800f410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2224      	movs	r2, #36	; 0x24
 800f418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f022 0201 	bic.w	r2, r2, #1
 800f432:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	683a      	ldr	r2, [r7, #0]
 800f444:	430a      	orrs	r2, r1
 800f446:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 f811 	bl	800f470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2220      	movs	r2, #32
 800f45a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2200      	movs	r2, #0
 800f462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f466:	2300      	movs	r3, #0
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d108      	bne.n	800f492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2201      	movs	r2, #1
 800f484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2201      	movs	r2, #1
 800f48c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f490:	e031      	b.n	800f4f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f492:	2310      	movs	r3, #16
 800f494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f496:	2310      	movs	r3, #16
 800f498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	0e5b      	lsrs	r3, r3, #25
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	f003 0307 	and.w	r3, r3, #7
 800f4a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	689b      	ldr	r3, [r3, #8]
 800f4b0:	0f5b      	lsrs	r3, r3, #29
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	f003 0307 	and.w	r3, r3, #7
 800f4b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f4ba:	7bbb      	ldrb	r3, [r7, #14]
 800f4bc:	7b3a      	ldrb	r2, [r7, #12]
 800f4be:	4911      	ldr	r1, [pc, #68]	; (800f504 <UARTEx_SetNbDataToProcess+0x94>)
 800f4c0:	5c8a      	ldrb	r2, [r1, r2]
 800f4c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f4c6:	7b3a      	ldrb	r2, [r7, #12]
 800f4c8:	490f      	ldr	r1, [pc, #60]	; (800f508 <UARTEx_SetNbDataToProcess+0x98>)
 800f4ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f4cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	7b7a      	ldrb	r2, [r7, #13]
 800f4dc:	4909      	ldr	r1, [pc, #36]	; (800f504 <UARTEx_SetNbDataToProcess+0x94>)
 800f4de:	5c8a      	ldrb	r2, [r1, r2]
 800f4e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f4e4:	7b7a      	ldrb	r2, [r7, #13]
 800f4e6:	4908      	ldr	r1, [pc, #32]	; (800f508 <UARTEx_SetNbDataToProcess+0x98>)
 800f4e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f4ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f4f6:	bf00      	nop
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
 800f502:	bf00      	nop
 800f504:	0800fbb8 	.word	0x0800fbb8
 800f508:	0800fbc0 	.word	0x0800fbc0

0800f50c <__cxa_pure_virtual>:
 800f50c:	b508      	push	{r3, lr}
 800f50e:	f000 f80d 	bl	800f52c <_ZSt9terminatev>

0800f512 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f512:	b508      	push	{r3, lr}
 800f514:	4780      	blx	r0
 800f516:	f000 f80e 	bl	800f536 <abort>
	...

0800f51c <_ZSt13get_terminatev>:
 800f51c:	4b02      	ldr	r3, [pc, #8]	; (800f528 <_ZSt13get_terminatev+0xc>)
 800f51e:	6818      	ldr	r0, [r3, #0]
 800f520:	f3bf 8f5b 	dmb	ish
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	24000060 	.word	0x24000060

0800f52c <_ZSt9terminatev>:
 800f52c:	b508      	push	{r3, lr}
 800f52e:	f7ff fff5 	bl	800f51c <_ZSt13get_terminatev>
 800f532:	f7ff ffee 	bl	800f512 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f536 <abort>:
 800f536:	b508      	push	{r3, lr}
 800f538:	2006      	movs	r0, #6
 800f53a:	f000 f873 	bl	800f624 <raise>
 800f53e:	2001      	movs	r0, #1
 800f540:	f7f6 f946 	bl	80057d0 <_exit>

0800f544 <__errno>:
 800f544:	4b01      	ldr	r3, [pc, #4]	; (800f54c <__errno+0x8>)
 800f546:	6818      	ldr	r0, [r3, #0]
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	24000064 	.word	0x24000064

0800f550 <__libc_init_array>:
 800f550:	b570      	push	{r4, r5, r6, lr}
 800f552:	4d0d      	ldr	r5, [pc, #52]	; (800f588 <__libc_init_array+0x38>)
 800f554:	4c0d      	ldr	r4, [pc, #52]	; (800f58c <__libc_init_array+0x3c>)
 800f556:	1b64      	subs	r4, r4, r5
 800f558:	10a4      	asrs	r4, r4, #2
 800f55a:	2600      	movs	r6, #0
 800f55c:	42a6      	cmp	r6, r4
 800f55e:	d109      	bne.n	800f574 <__libc_init_array+0x24>
 800f560:	4d0b      	ldr	r5, [pc, #44]	; (800f590 <__libc_init_array+0x40>)
 800f562:	4c0c      	ldr	r4, [pc, #48]	; (800f594 <__libc_init_array+0x44>)
 800f564:	f000 f9b0 	bl	800f8c8 <_init>
 800f568:	1b64      	subs	r4, r4, r5
 800f56a:	10a4      	asrs	r4, r4, #2
 800f56c:	2600      	movs	r6, #0
 800f56e:	42a6      	cmp	r6, r4
 800f570:	d105      	bne.n	800f57e <__libc_init_array+0x2e>
 800f572:	bd70      	pop	{r4, r5, r6, pc}
 800f574:	f855 3b04 	ldr.w	r3, [r5], #4
 800f578:	4798      	blx	r3
 800f57a:	3601      	adds	r6, #1
 800f57c:	e7ee      	b.n	800f55c <__libc_init_array+0xc>
 800f57e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f582:	4798      	blx	r3
 800f584:	3601      	adds	r6, #1
 800f586:	e7f2      	b.n	800f56e <__libc_init_array+0x1e>
 800f588:	0800fbd0 	.word	0x0800fbd0
 800f58c:	0800fbd0 	.word	0x0800fbd0
 800f590:	0800fbd0 	.word	0x0800fbd0
 800f594:	0800fbe4 	.word	0x0800fbe4

0800f598 <memcpy>:
 800f598:	440a      	add	r2, r1
 800f59a:	4291      	cmp	r1, r2
 800f59c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5a0:	d100      	bne.n	800f5a4 <memcpy+0xc>
 800f5a2:	4770      	bx	lr
 800f5a4:	b510      	push	{r4, lr}
 800f5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5ae:	4291      	cmp	r1, r2
 800f5b0:	d1f9      	bne.n	800f5a6 <memcpy+0xe>
 800f5b2:	bd10      	pop	{r4, pc}

0800f5b4 <memset>:
 800f5b4:	4402      	add	r2, r0
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d100      	bne.n	800f5be <memset+0xa>
 800f5bc:	4770      	bx	lr
 800f5be:	f803 1b01 	strb.w	r1, [r3], #1
 800f5c2:	e7f9      	b.n	800f5b8 <memset+0x4>

0800f5c4 <realloc>:
 800f5c4:	4b02      	ldr	r3, [pc, #8]	; (800f5d0 <realloc+0xc>)
 800f5c6:	460a      	mov	r2, r1
 800f5c8:	4601      	mov	r1, r0
 800f5ca:	6818      	ldr	r0, [r3, #0]
 800f5cc:	f000 b8da 	b.w	800f784 <_realloc_r>
 800f5d0:	24000064 	.word	0x24000064

0800f5d4 <_raise_r>:
 800f5d4:	291f      	cmp	r1, #31
 800f5d6:	b538      	push	{r3, r4, r5, lr}
 800f5d8:	4604      	mov	r4, r0
 800f5da:	460d      	mov	r5, r1
 800f5dc:	d904      	bls.n	800f5e8 <_raise_r+0x14>
 800f5de:	2316      	movs	r3, #22
 800f5e0:	6003      	str	r3, [r0, #0]
 800f5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5e6:	bd38      	pop	{r3, r4, r5, pc}
 800f5e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f5ea:	b112      	cbz	r2, 800f5f2 <_raise_r+0x1e>
 800f5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5f0:	b94b      	cbnz	r3, 800f606 <_raise_r+0x32>
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f000 f830 	bl	800f658 <_getpid_r>
 800f5f8:	462a      	mov	r2, r5
 800f5fa:	4601      	mov	r1, r0
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f602:	f000 b817 	b.w	800f634 <_kill_r>
 800f606:	2b01      	cmp	r3, #1
 800f608:	d00a      	beq.n	800f620 <_raise_r+0x4c>
 800f60a:	1c59      	adds	r1, r3, #1
 800f60c:	d103      	bne.n	800f616 <_raise_r+0x42>
 800f60e:	2316      	movs	r3, #22
 800f610:	6003      	str	r3, [r0, #0]
 800f612:	2001      	movs	r0, #1
 800f614:	e7e7      	b.n	800f5e6 <_raise_r+0x12>
 800f616:	2400      	movs	r4, #0
 800f618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f61c:	4628      	mov	r0, r5
 800f61e:	4798      	blx	r3
 800f620:	2000      	movs	r0, #0
 800f622:	e7e0      	b.n	800f5e6 <_raise_r+0x12>

0800f624 <raise>:
 800f624:	4b02      	ldr	r3, [pc, #8]	; (800f630 <raise+0xc>)
 800f626:	4601      	mov	r1, r0
 800f628:	6818      	ldr	r0, [r3, #0]
 800f62a:	f7ff bfd3 	b.w	800f5d4 <_raise_r>
 800f62e:	bf00      	nop
 800f630:	24000064 	.word	0x24000064

0800f634 <_kill_r>:
 800f634:	b538      	push	{r3, r4, r5, lr}
 800f636:	4d07      	ldr	r5, [pc, #28]	; (800f654 <_kill_r+0x20>)
 800f638:	2300      	movs	r3, #0
 800f63a:	4604      	mov	r4, r0
 800f63c:	4608      	mov	r0, r1
 800f63e:	4611      	mov	r1, r2
 800f640:	602b      	str	r3, [r5, #0]
 800f642:	f7f6 f8b5 	bl	80057b0 <_kill>
 800f646:	1c43      	adds	r3, r0, #1
 800f648:	d102      	bne.n	800f650 <_kill_r+0x1c>
 800f64a:	682b      	ldr	r3, [r5, #0]
 800f64c:	b103      	cbz	r3, 800f650 <_kill_r+0x1c>
 800f64e:	6023      	str	r3, [r4, #0]
 800f650:	bd38      	pop	{r3, r4, r5, pc}
 800f652:	bf00      	nop
 800f654:	24001f8c 	.word	0x24001f8c

0800f658 <_getpid_r>:
 800f658:	f7f6 b8a2 	b.w	80057a0 <_getpid>

0800f65c <sbrk_aligned>:
 800f65c:	b570      	push	{r4, r5, r6, lr}
 800f65e:	4e0e      	ldr	r6, [pc, #56]	; (800f698 <sbrk_aligned+0x3c>)
 800f660:	460c      	mov	r4, r1
 800f662:	6831      	ldr	r1, [r6, #0]
 800f664:	4605      	mov	r5, r0
 800f666:	b911      	cbnz	r1, 800f66e <sbrk_aligned+0x12>
 800f668:	f000 f8bc 	bl	800f7e4 <_sbrk_r>
 800f66c:	6030      	str	r0, [r6, #0]
 800f66e:	4621      	mov	r1, r4
 800f670:	4628      	mov	r0, r5
 800f672:	f000 f8b7 	bl	800f7e4 <_sbrk_r>
 800f676:	1c43      	adds	r3, r0, #1
 800f678:	d00a      	beq.n	800f690 <sbrk_aligned+0x34>
 800f67a:	1cc4      	adds	r4, r0, #3
 800f67c:	f024 0403 	bic.w	r4, r4, #3
 800f680:	42a0      	cmp	r0, r4
 800f682:	d007      	beq.n	800f694 <sbrk_aligned+0x38>
 800f684:	1a21      	subs	r1, r4, r0
 800f686:	4628      	mov	r0, r5
 800f688:	f000 f8ac 	bl	800f7e4 <_sbrk_r>
 800f68c:	3001      	adds	r0, #1
 800f68e:	d101      	bne.n	800f694 <sbrk_aligned+0x38>
 800f690:	f04f 34ff 	mov.w	r4, #4294967295
 800f694:	4620      	mov	r0, r4
 800f696:	bd70      	pop	{r4, r5, r6, pc}
 800f698:	24001f88 	.word	0x24001f88

0800f69c <_malloc_r>:
 800f69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a0:	1ccd      	adds	r5, r1, #3
 800f6a2:	f025 0503 	bic.w	r5, r5, #3
 800f6a6:	3508      	adds	r5, #8
 800f6a8:	2d0c      	cmp	r5, #12
 800f6aa:	bf38      	it	cc
 800f6ac:	250c      	movcc	r5, #12
 800f6ae:	2d00      	cmp	r5, #0
 800f6b0:	4607      	mov	r7, r0
 800f6b2:	db01      	blt.n	800f6b8 <_malloc_r+0x1c>
 800f6b4:	42a9      	cmp	r1, r5
 800f6b6:	d905      	bls.n	800f6c4 <_malloc_r+0x28>
 800f6b8:	230c      	movs	r3, #12
 800f6ba:	603b      	str	r3, [r7, #0]
 800f6bc:	2600      	movs	r6, #0
 800f6be:	4630      	mov	r0, r6
 800f6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c4:	4e2e      	ldr	r6, [pc, #184]	; (800f780 <_malloc_r+0xe4>)
 800f6c6:	f000 f89d 	bl	800f804 <__malloc_lock>
 800f6ca:	6833      	ldr	r3, [r6, #0]
 800f6cc:	461c      	mov	r4, r3
 800f6ce:	bb34      	cbnz	r4, 800f71e <_malloc_r+0x82>
 800f6d0:	4629      	mov	r1, r5
 800f6d2:	4638      	mov	r0, r7
 800f6d4:	f7ff ffc2 	bl	800f65c <sbrk_aligned>
 800f6d8:	1c43      	adds	r3, r0, #1
 800f6da:	4604      	mov	r4, r0
 800f6dc:	d14d      	bne.n	800f77a <_malloc_r+0xde>
 800f6de:	6834      	ldr	r4, [r6, #0]
 800f6e0:	4626      	mov	r6, r4
 800f6e2:	2e00      	cmp	r6, #0
 800f6e4:	d140      	bne.n	800f768 <_malloc_r+0xcc>
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4638      	mov	r0, r7
 800f6ec:	eb04 0803 	add.w	r8, r4, r3
 800f6f0:	f000 f878 	bl	800f7e4 <_sbrk_r>
 800f6f4:	4580      	cmp	r8, r0
 800f6f6:	d13a      	bne.n	800f76e <_malloc_r+0xd2>
 800f6f8:	6821      	ldr	r1, [r4, #0]
 800f6fa:	3503      	adds	r5, #3
 800f6fc:	1a6d      	subs	r5, r5, r1
 800f6fe:	f025 0503 	bic.w	r5, r5, #3
 800f702:	3508      	adds	r5, #8
 800f704:	2d0c      	cmp	r5, #12
 800f706:	bf38      	it	cc
 800f708:	250c      	movcc	r5, #12
 800f70a:	4629      	mov	r1, r5
 800f70c:	4638      	mov	r0, r7
 800f70e:	f7ff ffa5 	bl	800f65c <sbrk_aligned>
 800f712:	3001      	adds	r0, #1
 800f714:	d02b      	beq.n	800f76e <_malloc_r+0xd2>
 800f716:	6823      	ldr	r3, [r4, #0]
 800f718:	442b      	add	r3, r5
 800f71a:	6023      	str	r3, [r4, #0]
 800f71c:	e00e      	b.n	800f73c <_malloc_r+0xa0>
 800f71e:	6822      	ldr	r2, [r4, #0]
 800f720:	1b52      	subs	r2, r2, r5
 800f722:	d41e      	bmi.n	800f762 <_malloc_r+0xc6>
 800f724:	2a0b      	cmp	r2, #11
 800f726:	d916      	bls.n	800f756 <_malloc_r+0xba>
 800f728:	1961      	adds	r1, r4, r5
 800f72a:	42a3      	cmp	r3, r4
 800f72c:	6025      	str	r5, [r4, #0]
 800f72e:	bf18      	it	ne
 800f730:	6059      	strne	r1, [r3, #4]
 800f732:	6863      	ldr	r3, [r4, #4]
 800f734:	bf08      	it	eq
 800f736:	6031      	streq	r1, [r6, #0]
 800f738:	5162      	str	r2, [r4, r5]
 800f73a:	604b      	str	r3, [r1, #4]
 800f73c:	4638      	mov	r0, r7
 800f73e:	f104 060b 	add.w	r6, r4, #11
 800f742:	f000 f865 	bl	800f810 <__malloc_unlock>
 800f746:	f026 0607 	bic.w	r6, r6, #7
 800f74a:	1d23      	adds	r3, r4, #4
 800f74c:	1af2      	subs	r2, r6, r3
 800f74e:	d0b6      	beq.n	800f6be <_malloc_r+0x22>
 800f750:	1b9b      	subs	r3, r3, r6
 800f752:	50a3      	str	r3, [r4, r2]
 800f754:	e7b3      	b.n	800f6be <_malloc_r+0x22>
 800f756:	6862      	ldr	r2, [r4, #4]
 800f758:	42a3      	cmp	r3, r4
 800f75a:	bf0c      	ite	eq
 800f75c:	6032      	streq	r2, [r6, #0]
 800f75e:	605a      	strne	r2, [r3, #4]
 800f760:	e7ec      	b.n	800f73c <_malloc_r+0xa0>
 800f762:	4623      	mov	r3, r4
 800f764:	6864      	ldr	r4, [r4, #4]
 800f766:	e7b2      	b.n	800f6ce <_malloc_r+0x32>
 800f768:	4634      	mov	r4, r6
 800f76a:	6876      	ldr	r6, [r6, #4]
 800f76c:	e7b9      	b.n	800f6e2 <_malloc_r+0x46>
 800f76e:	230c      	movs	r3, #12
 800f770:	603b      	str	r3, [r7, #0]
 800f772:	4638      	mov	r0, r7
 800f774:	f000 f84c 	bl	800f810 <__malloc_unlock>
 800f778:	e7a1      	b.n	800f6be <_malloc_r+0x22>
 800f77a:	6025      	str	r5, [r4, #0]
 800f77c:	e7de      	b.n	800f73c <_malloc_r+0xa0>
 800f77e:	bf00      	nop
 800f780:	24001f84 	.word	0x24001f84

0800f784 <_realloc_r>:
 800f784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f788:	4680      	mov	r8, r0
 800f78a:	4614      	mov	r4, r2
 800f78c:	460e      	mov	r6, r1
 800f78e:	b921      	cbnz	r1, 800f79a <_realloc_r+0x16>
 800f790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f794:	4611      	mov	r1, r2
 800f796:	f7ff bf81 	b.w	800f69c <_malloc_r>
 800f79a:	b92a      	cbnz	r2, 800f7a8 <_realloc_r+0x24>
 800f79c:	f000 f83e 	bl	800f81c <_free_r>
 800f7a0:	4625      	mov	r5, r4
 800f7a2:	4628      	mov	r0, r5
 800f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a8:	f000 f884 	bl	800f8b4 <_malloc_usable_size_r>
 800f7ac:	4284      	cmp	r4, r0
 800f7ae:	4607      	mov	r7, r0
 800f7b0:	d802      	bhi.n	800f7b8 <_realloc_r+0x34>
 800f7b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f7b6:	d812      	bhi.n	800f7de <_realloc_r+0x5a>
 800f7b8:	4621      	mov	r1, r4
 800f7ba:	4640      	mov	r0, r8
 800f7bc:	f7ff ff6e 	bl	800f69c <_malloc_r>
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d0ed      	beq.n	800f7a2 <_realloc_r+0x1e>
 800f7c6:	42bc      	cmp	r4, r7
 800f7c8:	4622      	mov	r2, r4
 800f7ca:	4631      	mov	r1, r6
 800f7cc:	bf28      	it	cs
 800f7ce:	463a      	movcs	r2, r7
 800f7d0:	f7ff fee2 	bl	800f598 <memcpy>
 800f7d4:	4631      	mov	r1, r6
 800f7d6:	4640      	mov	r0, r8
 800f7d8:	f000 f820 	bl	800f81c <_free_r>
 800f7dc:	e7e1      	b.n	800f7a2 <_realloc_r+0x1e>
 800f7de:	4635      	mov	r5, r6
 800f7e0:	e7df      	b.n	800f7a2 <_realloc_r+0x1e>
	...

0800f7e4 <_sbrk_r>:
 800f7e4:	b538      	push	{r3, r4, r5, lr}
 800f7e6:	4d06      	ldr	r5, [pc, #24]	; (800f800 <_sbrk_r+0x1c>)
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	602b      	str	r3, [r5, #0]
 800f7f0:	f7f5 fff8 	bl	80057e4 <_sbrk>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_sbrk_r+0x1a>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_sbrk_r+0x1a>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	24001f8c 	.word	0x24001f8c

0800f804 <__malloc_lock>:
 800f804:	4801      	ldr	r0, [pc, #4]	; (800f80c <__malloc_lock+0x8>)
 800f806:	f000 b85d 	b.w	800f8c4 <__retarget_lock_acquire_recursive>
 800f80a:	bf00      	nop
 800f80c:	24001f90 	.word	0x24001f90

0800f810 <__malloc_unlock>:
 800f810:	4801      	ldr	r0, [pc, #4]	; (800f818 <__malloc_unlock+0x8>)
 800f812:	f000 b858 	b.w	800f8c6 <__retarget_lock_release_recursive>
 800f816:	bf00      	nop
 800f818:	24001f90 	.word	0x24001f90

0800f81c <_free_r>:
 800f81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f81e:	2900      	cmp	r1, #0
 800f820:	d044      	beq.n	800f8ac <_free_r+0x90>
 800f822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f826:	9001      	str	r0, [sp, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f1a1 0404 	sub.w	r4, r1, #4
 800f82e:	bfb8      	it	lt
 800f830:	18e4      	addlt	r4, r4, r3
 800f832:	f7ff ffe7 	bl	800f804 <__malloc_lock>
 800f836:	4a1e      	ldr	r2, [pc, #120]	; (800f8b0 <_free_r+0x94>)
 800f838:	9801      	ldr	r0, [sp, #4]
 800f83a:	6813      	ldr	r3, [r2, #0]
 800f83c:	b933      	cbnz	r3, 800f84c <_free_r+0x30>
 800f83e:	6063      	str	r3, [r4, #4]
 800f840:	6014      	str	r4, [r2, #0]
 800f842:	b003      	add	sp, #12
 800f844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f848:	f7ff bfe2 	b.w	800f810 <__malloc_unlock>
 800f84c:	42a3      	cmp	r3, r4
 800f84e:	d908      	bls.n	800f862 <_free_r+0x46>
 800f850:	6825      	ldr	r5, [r4, #0]
 800f852:	1961      	adds	r1, r4, r5
 800f854:	428b      	cmp	r3, r1
 800f856:	bf01      	itttt	eq
 800f858:	6819      	ldreq	r1, [r3, #0]
 800f85a:	685b      	ldreq	r3, [r3, #4]
 800f85c:	1949      	addeq	r1, r1, r5
 800f85e:	6021      	streq	r1, [r4, #0]
 800f860:	e7ed      	b.n	800f83e <_free_r+0x22>
 800f862:	461a      	mov	r2, r3
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	b10b      	cbz	r3, 800f86c <_free_r+0x50>
 800f868:	42a3      	cmp	r3, r4
 800f86a:	d9fa      	bls.n	800f862 <_free_r+0x46>
 800f86c:	6811      	ldr	r1, [r2, #0]
 800f86e:	1855      	adds	r5, r2, r1
 800f870:	42a5      	cmp	r5, r4
 800f872:	d10b      	bne.n	800f88c <_free_r+0x70>
 800f874:	6824      	ldr	r4, [r4, #0]
 800f876:	4421      	add	r1, r4
 800f878:	1854      	adds	r4, r2, r1
 800f87a:	42a3      	cmp	r3, r4
 800f87c:	6011      	str	r1, [r2, #0]
 800f87e:	d1e0      	bne.n	800f842 <_free_r+0x26>
 800f880:	681c      	ldr	r4, [r3, #0]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	6053      	str	r3, [r2, #4]
 800f886:	4421      	add	r1, r4
 800f888:	6011      	str	r1, [r2, #0]
 800f88a:	e7da      	b.n	800f842 <_free_r+0x26>
 800f88c:	d902      	bls.n	800f894 <_free_r+0x78>
 800f88e:	230c      	movs	r3, #12
 800f890:	6003      	str	r3, [r0, #0]
 800f892:	e7d6      	b.n	800f842 <_free_r+0x26>
 800f894:	6825      	ldr	r5, [r4, #0]
 800f896:	1961      	adds	r1, r4, r5
 800f898:	428b      	cmp	r3, r1
 800f89a:	bf04      	itt	eq
 800f89c:	6819      	ldreq	r1, [r3, #0]
 800f89e:	685b      	ldreq	r3, [r3, #4]
 800f8a0:	6063      	str	r3, [r4, #4]
 800f8a2:	bf04      	itt	eq
 800f8a4:	1949      	addeq	r1, r1, r5
 800f8a6:	6021      	streq	r1, [r4, #0]
 800f8a8:	6054      	str	r4, [r2, #4]
 800f8aa:	e7ca      	b.n	800f842 <_free_r+0x26>
 800f8ac:	b003      	add	sp, #12
 800f8ae:	bd30      	pop	{r4, r5, pc}
 800f8b0:	24001f84 	.word	0x24001f84

0800f8b4 <_malloc_usable_size_r>:
 800f8b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8b8:	1f18      	subs	r0, r3, #4
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	bfbc      	itt	lt
 800f8be:	580b      	ldrlt	r3, [r1, r0]
 800f8c0:	18c0      	addlt	r0, r0, r3
 800f8c2:	4770      	bx	lr

0800f8c4 <__retarget_lock_acquire_recursive>:
 800f8c4:	4770      	bx	lr

0800f8c6 <__retarget_lock_release_recursive>:
 800f8c6:	4770      	bx	lr

0800f8c8 <_init>:
 800f8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ca:	bf00      	nop
 800f8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ce:	bc08      	pop	{r3}
 800f8d0:	469e      	mov	lr, r3
 800f8d2:	4770      	bx	lr

0800f8d4 <_fini>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	bf00      	nop
 800f8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8da:	bc08      	pop	{r3}
 800f8dc:	469e      	mov	lr, r3
 800f8de:	4770      	bx	lr
