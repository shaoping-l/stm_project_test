
stm_project_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4b8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800d788  0800d788  0001d788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da1c  0800da1c  0001da1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  0800da24  0800da24  0001da24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da34  0800da34  0001da34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000240  24000000  0800da38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c14  24000240  0800dc78  00020240  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001e54  0800dc78  00021e54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027f06  00000000  00000000  0002026e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000040c3  00000000  00000000  00048174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001550  00000000  00000000  0004c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001410  00000000  00000000  0004d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035a23  00000000  00000000  0004eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e0fb  00000000  00000000  000845bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001538b1  00000000  00000000  000a26b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f5f67  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005de0  00000000  00000000  001f5fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000240 	.word	0x24000240
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d770 	.word	0x0800d770

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000244 	.word	0x24000244
 800030c:	0800d770 	.word	0x0800d770

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <pidCtrl>:
    {Kp[1], Ki[1], Kd[1], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[2], Ki[2], Kd[2], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0},
    {Kp[3], Ki[3], Kd[3], 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0}
};

void pidCtrl(int i){
 8000680:	b490      	push	{r4, r7}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 8000688:	49cd      	ldr	r1, [pc, #820]	; (80009c0 <pidCtrl+0x340>)
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	440b      	add	r3, r1
 8000696:	3318      	adds	r3, #24
 8000698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069c:	ee07 3a90 	vmov	s15, r3
 80006a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80006a4:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 8000998 <pidCtrl+0x318>
 80006a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006ac:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 80009a0 <pidCtrl+0x320>
 80006b0:	ee27 6b06 	vmul.f64	d6, d7, d6
			/ (4 * resolution * reduction_ratio * belt_ratio) * frequency;
 80006b4:	ed9f 5bbc 	vldr	d5, [pc, #752]	; 80009a8 <pidCtrl+0x328>
 80006b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006bc:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 80009b0 <pidCtrl+0x330>
 80006c0:	ee27 7b06 	vmul.f64	d7, d7, d6
	Kpid[i].insVel = (double) Kpid[i].enc * PI * Dwheel
 80006c4:	49be      	ldr	r1, [pc, #760]	; (80009c0 <pidCtrl+0x340>)
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4613      	mov	r3, r2
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	1a9b      	subs	r3, r3, r2
 80006ce:	011b      	lsls	r3, r3, #4
 80006d0:	440b      	add	r3, r1
 80006d2:	3328      	adds	r3, #40	; 0x28
 80006d4:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].error = Kpid[i].goalVel - Kpid[i].insVel;
 80006d8:	49b9      	ldr	r1, [pc, #740]	; (80009c0 <pidCtrl+0x340>)
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4613      	mov	r3, r2
 80006de:	00db      	lsls	r3, r3, #3
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	440b      	add	r3, r1
 80006e6:	3320      	adds	r3, #32
 80006e8:	ed93 6b00 	vldr	d6, [r3]
 80006ec:	49b4      	ldr	r1, [pc, #720]	; (80009c0 <pidCtrl+0x340>)
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	4613      	mov	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	440b      	add	r3, r1
 80006fa:	3328      	adds	r3, #40	; 0x28
 80006fc:	ed93 7b00 	vldr	d7, [r3]
 8000700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000704:	49ae      	ldr	r1, [pc, #696]	; (80009c0 <pidCtrl+0x340>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4613      	mov	r3, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	011b      	lsls	r3, r3, #4
 8000710:	440b      	add	r3, r1
 8000712:	3330      	adds	r3, #48	; 0x30
 8000714:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].up = Kpid[i].Kp * Kpid[i].error;
 8000718:	49a9      	ldr	r1, [pc, #676]	; (80009c0 <pidCtrl+0x340>)
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	011b      	lsls	r3, r3, #4
 8000724:	440b      	add	r3, r1
 8000726:	ed93 6b00 	vldr	d6, [r3]
 800072a:	49a5      	ldr	r1, [pc, #660]	; (80009c0 <pidCtrl+0x340>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	440b      	add	r3, r1
 8000738:	3330      	adds	r3, #48	; 0x30
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000742:	499f      	ldr	r1, [pc, #636]	; (80009c0 <pidCtrl+0x340>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4613      	mov	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	1a9b      	subs	r3, r3, r2
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	440b      	add	r3, r1
 8000750:	3348      	adds	r3, #72	; 0x48
 8000752:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui += Kpid[i].Ki * Kpid[i].last_error / frequency;
 8000756:	499a      	ldr	r1, [pc, #616]	; (80009c0 <pidCtrl+0x340>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	440b      	add	r3, r1
 8000764:	3350      	adds	r3, #80	; 0x50
 8000766:	ed93 6b00 	vldr	d6, [r3]
 800076a:	4995      	ldr	r1, [pc, #596]	; (80009c0 <pidCtrl+0x340>)
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	3308      	adds	r3, #8
 800077a:	ed93 5b00 	vldr	d5, [r3]
 800077e:	4990      	ldr	r1, [pc, #576]	; (80009c0 <pidCtrl+0x340>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	440b      	add	r3, r1
 800078c:	3338      	adds	r3, #56	; 0x38
 800078e:	ed93 7b00 	vldr	d7, [r3]
 8000792:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000796:	ed9f 4b86 	vldr	d4, [pc, #536]	; 80009b0 <pidCtrl+0x330>
 800079a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800079e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007a2:	4987      	ldr	r1, [pc, #540]	; (80009c0 <pidCtrl+0x340>)
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	440b      	add	r3, r1
 80007b0:	3350      	adds	r3, #80	; 0x50
 80007b2:	ed83 7b00 	vstr	d7, [r3]
	Kpid[i].ui = 0;
 80007b6:	4982      	ldr	r1, [pc, #520]	; (80009c0 <pidCtrl+0x340>)
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	440b      	add	r3, r1
 80007c4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80007c8:	f04f 0200 	mov.w	r2, #0
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e9c1 2300 	strd	r2, r3, [r1]
	Kpid[i].ud = Kpid[i].Kd * (Kpid[i].error - Kpid[i].last_error) * frequency;
 80007d4:	497a      	ldr	r1, [pc, #488]	; (80009c0 <pidCtrl+0x340>)
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	1a9b      	subs	r3, r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	440b      	add	r3, r1
 80007e2:	3310      	adds	r3, #16
 80007e4:	ed93 6b00 	vldr	d6, [r3]
 80007e8:	4975      	ldr	r1, [pc, #468]	; (80009c0 <pidCtrl+0x340>)
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4613      	mov	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	1a9b      	subs	r3, r3, r2
 80007f2:	011b      	lsls	r3, r3, #4
 80007f4:	440b      	add	r3, r1
 80007f6:	3330      	adds	r3, #48	; 0x30
 80007f8:	ed93 5b00 	vldr	d5, [r3]
 80007fc:	4970      	ldr	r1, [pc, #448]	; (80009c0 <pidCtrl+0x340>)
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4613      	mov	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	1a9b      	subs	r3, r3, r2
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	440b      	add	r3, r1
 800080a:	3338      	adds	r3, #56	; 0x38
 800080c:	ed93 7b00 	vldr	d7, [r3]
 8000810:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000814:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000818:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80009b0 <pidCtrl+0x330>
 800081c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000820:	4967      	ldr	r1, [pc, #412]	; (80009c0 <pidCtrl+0x340>)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4613      	mov	r3, r2
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	1a9b      	subs	r3, r3, r2
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	440b      	add	r3, r1
 800082e:	3358      	adds	r3, #88	; 0x58
 8000830:	ed83 7b00 	vstr	d7, [r3]
	if( fabs(Kpid[i].ui) > max_ui )
 8000834:	4962      	ldr	r1, [pc, #392]	; (80009c0 <pidCtrl+0x340>)
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4613      	mov	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	440b      	add	r3, r1
 8000842:	3350      	adds	r3, #80	; 0x50
 8000844:	ed93 7b00 	vldr	d7, [r3]
 8000848:	eeb0 7bc7 	vabs.f64	d7, d7
 800084c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000850:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000858:	dd1f      	ble.n	800089a <pidCtrl+0x21a>
		Kpid[i].ui = (Kpid[i].ui >= 0)? max_ui: -1*max_ui;
 800085a:	4959      	ldr	r1, [pc, #356]	; (80009c0 <pidCtrl+0x340>)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	4613      	mov	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	1a9b      	subs	r3, r3, r2
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	440b      	add	r3, r1
 8000868:	3350      	adds	r3, #80	; 0x50
 800086a:	ed93 7b00 	vldr	d7, [r3]
 800086e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000876:	db03      	blt.n	8000880 <pidCtrl+0x200>
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	4951      	ldr	r1, [pc, #324]	; (80009c4 <pidCtrl+0x344>)
 800087e:	e002      	b.n	8000886 <pidCtrl+0x206>
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	4950      	ldr	r1, [pc, #320]	; (80009c8 <pidCtrl+0x348>)
 8000886:	4c4e      	ldr	r4, [pc, #312]	; (80009c0 <pidCtrl+0x340>)
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	4613      	mov	r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	4423      	add	r3, r4
 8000894:	3350      	adds	r3, #80	; 0x50
 8000896:	e9c3 0100 	strd	r0, r1, [r3]
	Kpid[i].u = Kpid[i].up + Kpid[i].ui + Kpid[i].ud;
 800089a:	4949      	ldr	r1, [pc, #292]	; (80009c0 <pidCtrl+0x340>)
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4613      	mov	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	1a9b      	subs	r3, r3, r2
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	440b      	add	r3, r1
 80008a8:	3348      	adds	r3, #72	; 0x48
 80008aa:	ed93 6b00 	vldr	d6, [r3]
 80008ae:	4944      	ldr	r1, [pc, #272]	; (80009c0 <pidCtrl+0x340>)
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	4613      	mov	r3, r2
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	011b      	lsls	r3, r3, #4
 80008ba:	440b      	add	r3, r1
 80008bc:	3350      	adds	r3, #80	; 0x50
 80008be:	ed93 7b00 	vldr	d7, [r3]
 80008c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008c6:	493e      	ldr	r1, [pc, #248]	; (80009c0 <pidCtrl+0x340>)
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	4613      	mov	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	440b      	add	r3, r1
 80008d4:	3358      	adds	r3, #88	; 0x58
 80008d6:	ed93 7b00 	vldr	d7, [r3]
 80008da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008de:	4938      	ldr	r1, [pc, #224]	; (80009c0 <pidCtrl+0x340>)
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	4613      	mov	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	440b      	add	r3, r1
 80008ec:	3340      	adds	r3, #64	; 0x40
 80008ee:	ed83 7b00 	vstr	d7, [r3]

	Kpid[i].last_error = Kpid[i].error;
 80008f2:	4933      	ldr	r1, [pc, #204]	; (80009c0 <pidCtrl+0x340>)
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	4613      	mov	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	1a9b      	subs	r3, r3, r2
 80008fc:	011b      	lsls	r3, r3, #4
 80008fe:	440b      	add	r3, r1
 8000900:	3330      	adds	r3, #48	; 0x30
 8000902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000906:	4c2e      	ldr	r4, [pc, #184]	; (80009c0 <pidCtrl+0x340>)
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	4613      	mov	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	1a9b      	subs	r3, r3, r2
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	4423      	add	r3, r4
 8000914:	3338      	adds	r3, #56	; 0x38
 8000916:	e9c3 0100 	strd	r0, r1, [r3]

	Kpid[i].pulse = fabs(Kpid[i].u) * PWM_ARR;
 800091a:	4929      	ldr	r1, [pc, #164]	; (80009c0 <pidCtrl+0x340>)
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	011b      	lsls	r3, r3, #4
 8000926:	440b      	add	r3, r1
 8000928:	3340      	adds	r3, #64	; 0x40
 800092a:	ed93 7b00 	vldr	d7, [r3]
 800092e:	eeb0 7bc7 	vabs.f64	d7, d7
 8000932:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80009b8 <pidCtrl+0x338>
 8000936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800093a:	4921      	ldr	r1, [pc, #132]	; (80009c0 <pidCtrl+0x340>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4613      	mov	r3, r2
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	1a9b      	subs	r3, r3, r2
 8000944:	011b      	lsls	r3, r3, #4
 8000946:	440b      	add	r3, r1
 8000948:	3360      	adds	r3, #96	; 0x60
 800094a:	ed83 7b00 	vstr	d7, [r3]
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 800094e:	491c      	ldr	r1, [pc, #112]	; (80009c0 <pidCtrl+0x340>)
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	4613      	mov	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	1a9b      	subs	r3, r3, r2
 8000958:	011b      	lsls	r3, r3, #4
 800095a:	440b      	add	r3, r1
 800095c:	3360      	adds	r3, #96	; 0x60
 800095e:	ed93 7b00 	vldr	d7, [r3]
 8000962:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80009b8 <pidCtrl+0x338>
 8000966:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800096a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096e:	dc00      	bgt.n	8000972 <pidCtrl+0x2f2>
}
 8000970:	e00d      	b.n	800098e <pidCtrl+0x30e>
	if(Kpid[i].pulse > PWM_ARR)	Kpid[i].pulse = PWM_ARR;
 8000972:	4913      	ldr	r1, [pc, #76]	; (80009c0 <pidCtrl+0x340>)
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	4613      	mov	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	011b      	lsls	r3, r3, #4
 800097e:	440b      	add	r3, r1
 8000980:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8000984:	f04f 0200 	mov.w	r2, #0
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <pidCtrl+0x34c>)
 800098a:	e9c1 2300 	strd	r2, r3, [r1]
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bc90      	pop	{r4, r7}
 8000996:	4770      	bx	lr
 8000998:	54cadf99 	.word	0x54cadf99
 800099c:	400921fb 	.word	0x400921fb
 80009a0:	cccccccd 	.word	0xcccccccd
 80009a4:	4029cccc 	.word	0x4029cccc
 80009a8:	00000000 	.word	0x00000000
 80009ac:	410b0000 	.word	0x410b0000
 80009b0:	00000000 	.word	0x00000000
 80009b4:	407f4000 	.word	0x407f4000
 80009b8:	00000000 	.word	0x00000000
 80009bc:	408f4000 	.word	0x408f4000
 80009c0:	24000000 	.word	0x24000000
 80009c4:	3ff00000 	.word	0x3ff00000
 80009c8:	bff00000 	.word	0xbff00000
 80009cc:	408f4000 	.word	0x408f4000

080009d0 <HAL_TIM_PeriodElapsedCallback>:
extern PUSHER pusher_A;
extern PUSHER pusher_B;
extern PUSHER pusher_C;
extern PUSHER pusher_D;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4aa6      	ldr	r2, [pc, #664]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	f040 8177 	bne.w	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x302>

		Kpid[0].goalVel = Vx + Vy + (W * coeffab);
 80009e4:	4ba5      	ldr	r3, [pc, #660]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009e6:	ed93 6b00 	vldr	d6, [r3]
 80009ea:	4ba5      	ldr	r3, [pc, #660]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009ec:	ed93 7b00 	vldr	d7, [r3]
 80009f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80009f4:	4ba3      	ldr	r3, [pc, #652]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80009f6:	ed93 5b00 	vldr	d5, [r3]
 80009fa:	4ba3      	ldr	r3, [pc, #652]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009fc:	ed93 7b00 	vldr	d7, [r3]
 8000a00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a08:	4ba0      	ldr	r3, [pc, #640]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a0a:	ed83 7b08 	vstr	d7, [r3, #32]
		Kpid[1].goalVel = Vx - Vy - (W * coeffab);
 8000a0e:	4b9b      	ldr	r3, [pc, #620]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a10:	ed93 6b00 	vldr	d6, [r3]
 8000a14:	4b9a      	ldr	r3, [pc, #616]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a16:	ed93 7b00 	vldr	d7, [r3]
 8000a1a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000a1e:	4b99      	ldr	r3, [pc, #612]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a20:	ed93 5b00 	vldr	d5, [r3]
 8000a24:	4b98      	ldr	r3, [pc, #608]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a26:	ed93 7b00 	vldr	d7, [r3]
 8000a2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a32:	4b96      	ldr	r3, [pc, #600]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a34:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
		Kpid[2].goalVel = Vx + Vy - (W * coeffab);
 8000a38:	4b90      	ldr	r3, [pc, #576]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a3a:	ed93 6b00 	vldr	d6, [r3]
 8000a3e:	4b90      	ldr	r3, [pc, #576]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a40:	ed93 7b00 	vldr	d7, [r3]
 8000a44:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a48:	4b8e      	ldr	r3, [pc, #568]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a4a:	ed93 5b00 	vldr	d5, [r3]
 8000a4e:	4b8e      	ldr	r3, [pc, #568]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a50:	ed93 7b00 	vldr	d7, [r3]
 8000a54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a58:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a5c:	4b8b      	ldr	r3, [pc, #556]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a5e:	ed83 7b40 	vstr	d7, [r3, #256]	; 0x100
		Kpid[3].goalVel = Vx - Vy + (W * coeffab);
 8000a62:	4b86      	ldr	r3, [pc, #536]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000a64:	ed93 6b00 	vldr	d6, [r3]
 8000a68:	4b85      	ldr	r3, [pc, #532]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000a6a:	ed93 7b00 	vldr	d7, [r3]
 8000a6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000a72:	4b84      	ldr	r3, [pc, #528]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000a74:	ed93 5b00 	vldr	d5, [r3]
 8000a78:	4b83      	ldr	r3, [pc, #524]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000a7a:	ed93 7b00 	vldr	d7, [r3]
 8000a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a86:	4b81      	ldr	r3, [pc, #516]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a88:	ed83 7b5c 	vstr	d7, [r3, #368]	; 0x170

		Kpid[0].enc = __HAL_TIM_GetCounter(FR_ENC);
 8000a8c:	4b80      	ldr	r3, [pc, #512]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	4b7d      	ldr	r3, [pc, #500]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000a96:	831a      	strh	r2, [r3, #24]
		Kpid[1].enc = __HAL_TIM_GetCounter(FL_ENC);
 8000a98:	4b7e      	ldr	r3, [pc, #504]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	4b7a      	ldr	r3, [pc, #488]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000aa2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		Kpid[2].enc = __HAL_TIM_GetCounter(BL_ENC) * -1;
 8000aa6:	4b7c      	ldr	r3, [pc, #496]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	425b      	negs	r3, r3
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	4b75      	ldr	r3, [pc, #468]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000ab6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
		Kpid[3].enc = __HAL_TIM_GetCounter(BR_ENC) * -1;
 8000aba:	4b78      	ldr	r3, [pc, #480]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	425b      	negs	r3, r3
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	4b70      	ldr	r3, [pc, #448]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000aca:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
		__HAL_TIM_SetCounter(FR_ENC, 0);
 8000ace:	4b70      	ldr	r3, [pc, #448]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(FL_ENC, 0);
 8000ad6:	4b6f      	ldr	r3, [pc, #444]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BL_ENC, 0);
 8000ade:	4b6e      	ldr	r3, [pc, #440]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetCounter(BR_ENC, 0);
 8000ae6:	4b6d      	ldr	r3, [pc, #436]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24



		for( int i = 0; i < 4; i ++){
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	dc06      	bgt.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0x136>
			pidCtrl(i);
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff fdc1 	bl	8000680 <pidCtrl>
		for( int i = 0; i < 4; i ++){
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e7f5      	b.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x122>
		}

		__HAL_TIM_SET_COMPARE(FR_PWM_TIMMER, FR_PWM_CHANNEL, Kpid[0].pulse);
 8000b06:	4b61      	ldr	r3, [pc, #388]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b08:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8000b0c:	4b64      	ldr	r3, [pc, #400]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b14:	ee17 2a90 	vmov	r2, s15
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(FL_PWM_TIMMER, FL_PWM_CHANNEL, Kpid[1].pulse);
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b1c:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8000b20:	4b5f      	ldr	r3, [pc, #380]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b28:	ee17 2a90 	vmov	r2, s15
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BL_PWM_TIMMER, BL_PWM_CHANNEL, Kpid[2].pulse);
 8000b2e:	4b57      	ldr	r3, [pc, #348]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b30:	ed93 7b50 	vldr	d7, [r3, #320]	; 0x140
 8000b34:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b3c:	ee17 2a90 	vmov	r2, s15
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(BR_PWM_TIMMER, BR_PWM_CHANNEL, Kpid[3].pulse);
 8000b42:	4b52      	ldr	r3, [pc, #328]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000b44:	ed93 7b6c 	vldr	d7, [r3, #432]	; 0x1b0
 8000b48:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b50:	ee17 2a90 	vmov	r2, s15
 8000b54:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5c:	4852      	ldr	r0, [pc, #328]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b5e:	f006 ff91 	bl	8007a84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b68:	484f      	ldr	r0, [pc, #316]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000b6a:	f006 ff8b 	bl	8007a84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b74:	484d      	ldr	r0, [pc, #308]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b76:	f006 ff85 	bl	8007a84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b80:	484a      	ldr	r0, [pc, #296]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000b82:	f006 ff7f 	bl	8007a84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4849      	ldr	r0, [pc, #292]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b8c:	f006 ff7a 	bl	8007a84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2108      	movs	r1, #8
 8000b94:	4846      	ldr	r0, [pc, #280]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000b96:	f006 ff75 	bl	8007a84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba0:	4844      	ldr	r0, [pc, #272]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000ba2:	f006 ff6f 	bl	8007a84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4841      	ldr	r0, [pc, #260]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000bac:	f006 ff6a 	bl	8007a84 <HAL_GPIO_WritePin>
		if (Kpid[0].u > 0)HAL_GPIO_WritePin(FR_INA_PORT, FR_INA_PIN, GPIO_PIN_SET);
 8000bb0:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bb2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000bb6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	dd06      	ble.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x1fe>
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc6:	4838      	ldr	r0, [pc, #224]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000bc8:	f006 ff5c 	bl	8007a84 <HAL_GPIO_WritePin>
 8000bcc:	e00d      	b.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x21a>
		else if (Kpid[0].u < 0)HAL_GPIO_WritePin(FR_INB_PORT, FR_INB_PIN, GPIO_PIN_SET);
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bd0:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000bd4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bdc:	d505      	bpl.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x21a>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	4830      	ldr	r0, [pc, #192]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8000be6:	f006 ff4d 	bl	8007a84 <HAL_GPIO_WritePin>
		if (Kpid[1].u > 0)HAL_GPIO_WritePin(FL_INA_PORT, FL_INA_PIN, GPIO_PIN_SET);
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000bec:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000bf0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf8:	dd06      	ble.n	8000c08 <HAL_TIM_PeriodElapsedCallback+0x238>
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c00:	482a      	ldr	r0, [pc, #168]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000c02:	f006 ff3f 	bl	8007a84 <HAL_GPIO_WritePin>
 8000c06:	e00d      	b.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x254>
		else if (Kpid[1].u < 0)HAL_GPIO_WritePin(FL_INB_PORT, FL_INB_PIN, GPIO_PIN_SET);
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c0a:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8000c0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c16:	d505      	bpl.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x254>
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	4823      	ldr	r0, [pc, #140]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8000c20:	f006 ff30 	bl	8007a84 <HAL_GPIO_WritePin>
		if (Kpid[2].u > 0)HAL_GPIO_WritePin(BL_INA_PORT, BL_INA_PIN, GPIO_PIN_SET);
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c26:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000c2a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c32:	dd05      	ble.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x270>
 8000c34:	2201      	movs	r2, #1
 8000c36:	2104      	movs	r1, #4
 8000c38:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000c3a:	f006 ff23 	bl	8007a84 <HAL_GPIO_WritePin>
 8000c3e:	e00c      	b.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x28a>
		else if (Kpid[2].u < 0)HAL_GPIO_WritePin(BL_INB_PORT, BL_INB_PIN, GPIO_PIN_SET);
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c42:	ed93 7b48 	vldr	d7, [r3, #288]	; 0x120
 8000c46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4e:	d504      	bpl.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x28a>
 8000c50:	2201      	movs	r2, #1
 8000c52:	2108      	movs	r1, #8
 8000c54:	4816      	ldr	r0, [pc, #88]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8000c56:	f006 ff15 	bl	8007a84 <HAL_GPIO_WritePin>
		if (Kpid[3].u > 0)HAL_GPIO_WritePin(BR_INA_PORT, BR_INA_PIN, GPIO_PIN_SET);
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000c5c:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000c60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c68:	dd26      	ble.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c70:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8000c72:	f006 ff07 	bl	8007a84 <HAL_GPIO_WritePin>
 8000c76:	e02c      	b.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x302>
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	24000260 	.word	0x24000260
 8000c80:	24000268 	.word	0x24000268
 8000c84:	24000270 	.word	0x24000270
 8000c88:	240001c0 	.word	0x240001c0
 8000c8c:	24000000 	.word	0x24000000
 8000c90:	240004ac 	.word	0x240004ac
 8000c94:	24000590 	.word	0x24000590
 8000c98:	240004f8 	.word	0x240004f8
 8000c9c:	24000544 	.word	0x24000544
 8000ca0:	24000628 	.word	0x24000628
 8000ca4:	24000674 	.word	0x24000674
 8000ca8:	58020c00 	.word	0x58020c00
 8000cac:	58020400 	.word	0x58020400
 8000cb0:	58021000 	.word	0x58021000
 8000cb4:	58020800 	.word	0x58020800
		else if (Kpid[3].u < 0)HAL_GPIO_WritePin(BR_INB_PORT, BR_INB_PIN, GPIO_PIN_SET);
 8000cb8:	4b9d      	ldr	r3, [pc, #628]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8000cba:	ed93 7b64 	vldr	d7, [r3, #400]	; 0x190
 8000cbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc6:	d504      	bpl.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x302>
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4899      	ldr	r0, [pc, #612]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000cce:	f006 fed9 	bl	8007a84 <HAL_GPIO_WritePin>
	}

	if(htim->Instance == TIM8){
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a98      	ldr	r2, [pc, #608]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	f040 810c 	bne.w	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x526>
		/*pusher down*/
		if(pusher_A.d > 0){
 8000cde:	4b97      	ldr	r3, [pc, #604]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000ce0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ce4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cec:	dd2f      	ble.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x37e>
			pusher_A.count++;
 8000cee:	4b93      	ldr	r3, [pc, #588]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a91      	ldr	r2, [pc, #580]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000cf6:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfe:	488d      	ldr	r0, [pc, #564]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000d00:	f006 fec0 	bl	8007a84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0a:	488a      	ldr	r0, [pc, #552]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000d0c:	f006 feba 	bl	8007a84 <HAL_GPIO_WritePin>
			if(pusher_A.count > pusher_A.d*1000/PUSHER_SPEED){
 8000d10:	4b8a      	ldr	r3, [pc, #552]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d1c:	4b87      	ldr	r3, [pc, #540]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000d1e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d22:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8000f20 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000d26:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d2a:	ed9f 4b7f 	vldr	d4, [pc, #508]	; 8000f28 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000d2e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000d32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3a:	dd08      	ble.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x37e>
				pusher_A.p_state = pusher_A.state;
 8000d3c:	4b7f      	ldr	r3, [pc, #508]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	497e      	ldr	r1, [pc, #504]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000d44:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000d48:	4b7c      	ldr	r3, [pc, #496]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d > 0){
 8000d4e:	4b7c      	ldr	r3, [pc, #496]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000d50:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d54:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5c:	dd2f      	ble.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x3ee>
			pusher_B.count++;
 8000d5e:	4b78      	ldr	r3, [pc, #480]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	3301      	adds	r3, #1
 8000d64:	4a76      	ldr	r2, [pc, #472]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000d66:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6e:	4871      	ldr	r0, [pc, #452]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000d70:	f006 fe88 	bl	8007a84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7a:	486e      	ldr	r0, [pc, #440]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000d7c:	f006 fe82 	bl	8007a84 <HAL_GPIO_WritePin>
			if(pusher_B.count > pusher_B.d*1000/PUSHER_SPEED){
 8000d80:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d8c:	4b6c      	ldr	r3, [pc, #432]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000d8e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d92:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8000f20 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000d96:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d9a:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8000f28 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000d9e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000da2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	dd08      	ble.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x3ee>
				pusher_B.p_state = pusher_B.state;
 8000dac:	4b64      	ldr	r3, [pc, #400]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	4963      	ldr	r1, [pc, #396]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000db4:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000db8:	4b61      	ldr	r3, [pc, #388]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher up*/
		if(pusher_A.d < 0){
 8000dbe:	4b5f      	ldr	r3, [pc, #380]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000dc0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000dc4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	d531      	bpl.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x462>
			pusher_A.count++;
 8000dce:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a59      	ldr	r2, [pc, #356]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000dd6:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dde:	4855      	ldr	r0, [pc, #340]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000de0:	f006 fe50 	bl	8007a84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dea:	4852      	ldr	r0, [pc, #328]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000dec:	f006 fe4a 	bl	8007a84 <HAL_GPIO_WritePin>
			if(pusher_A.count > -pusher_A.d*1000/PUSHER_SPEED){
 8000df0:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000dfc:	4b4f      	ldr	r3, [pc, #316]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000dfe:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e02:	eeb1 7b47 	vneg.f64	d7, d7
 8000e06:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8000f20 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000e0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e0e:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8000f28 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000e12:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1e:	dd08      	ble.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x462>
				pusher_A.p_state = pusher_A.state;
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	4945      	ldr	r1, [pc, #276]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000e28:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_A.count = 0;
 8000e2c:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
			}
		}
		if(pusher_B.d < 0){
 8000e32:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e34:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e38:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	d531      	bpl.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x4d6>
			pusher_B.count++;
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	3301      	adds	r3, #1
 8000e48:	4a3d      	ldr	r2, [pc, #244]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e4a:	6193      	str	r3, [r2, #24]
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	4838      	ldr	r0, [pc, #224]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000e54:	f006 fe16 	bl	8007a84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5e:	4835      	ldr	r0, [pc, #212]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000e60:	f006 fe10 	bl	8007a84 <HAL_GPIO_WritePin>
			if(pusher_B.count > -pusher_B.d*1000/PUSHER_SPEED){
 8000e64:	4b36      	ldr	r3, [pc, #216]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e70:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e72:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e76:	eeb1 7b47 	vneg.f64	d7, d7
 8000e7a:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8000f20 <HAL_TIM_PeriodElapsedCallback+0x550>
 8000e7e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e82:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8000f28 <HAL_TIM_PeriodElapsedCallback+0x558>
 8000e86:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e92:	dd08      	ble.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x4d6>
				pusher_B.p_state = pusher_B.state;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	4929      	ldr	r1, [pc, #164]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000e9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
				pusher_B.count = 0;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
//				pusher_D.p_state = pusher_D.state;
//				pusher_D.count = 0;
//			}
//		}
		/*pusher stop*/
		if(pusher_A.d == 0){
 8000ea6:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8000ea8:	ed93 7b04 	vldr	d7, [r3, #16]
 8000eac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb4:	d10b      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x4fe>
			HAL_GPIO_WritePin(PUSHER_A_IN1_PORT, PUSHER_A_IN1_PIN, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ebc:	481d      	ldr	r0, [pc, #116]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000ebe:	f006 fde1 	bl	8007a84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_A_IN2_PORT, PUSHER_A_IN2_PIN, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec8:	481a      	ldr	r0, [pc, #104]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000eca:	f006 fddb 	bl	8007a84 <HAL_GPIO_WritePin>
		}
		if(pusher_B.d == 0){
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8000ed0:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ed4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	d10b      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x526>
			HAL_GPIO_WritePin(PUSHER_B_IN1_PORT, PUSHER_B_IN1_PIN, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000ee6:	f006 fdcd 	bl	8007a84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PUSHER_B_IN2_PORT, PUSHER_B_IN2_PIN, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	4810      	ldr	r0, [pc, #64]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8000ef2:	f006 fdc7 	bl	8007a84 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//		}
//
	}
	if(htim->Instance == TIM23){/*for script*/
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d108      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x542>
		if(delay_start!=0){
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x542>
			delay++;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8000f10:	6013      	str	r3, [r2, #0]
//			script_wheel(0,0,0);
//			script_pusher(0,10,0,0);
//		}

	}
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	f3af 8000 	nop.w
 8000f20:	00000000 	.word	0x00000000
 8000f24:	408f4000 	.word	0x408f4000
 8000f28:	cccccccd 	.word	0xcccccccd
 8000f2c:	4040cccc 	.word	0x4040cccc
 8000f30:	24000000 	.word	0x24000000
 8000f34:	58021000 	.word	0x58021000
 8000f38:	40010400 	.word	0x40010400
 8000f3c:	24001df8 	.word	0x24001df8
 8000f40:	24001e18 	.word	0x24001e18
 8000f44:	4000e000 	.word	0x4000e000
 8000f48:	24000278 	.word	0x24000278
 8000f4c:	2400027c 	.word	0x2400027c

08000f50 <_Z13DC_motor_initv>:
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4

void DC_motor_init(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	//enc_1
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_1);
 8000f54:	2100      	movs	r1, #0
 8000f56:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <_Z13DC_motor_initv+0x68>)
 8000f58:	f009 fb36 	bl	800a5c8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim2,TIM_CHANNEL_2);
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <_Z13DC_motor_initv+0x68>)
 8000f60:	f009 fb32 	bl	800a5c8 <HAL_TIM_Encoder_Start_IT>
 	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2);//VNH5019_1_PWM
 8000f64:	2104      	movs	r1, #4
 8000f66:	4815      	ldr	r0, [pc, #84]	; (8000fbc <_Z13DC_motor_initv+0x6c>)
 8000f68:	f009 f96c 	bl	800a244 <HAL_TIM_PWM_Start>
 	//enc_2
 	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_1);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <_Z13DC_motor_initv+0x70>)
 8000f70:	f009 fb2a 	bl	800a5c8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim5,TIM_CHANNEL_2);
 8000f74:	2104      	movs	r1, #4
 8000f76:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <_Z13DC_motor_initv+0x70>)
 8000f78:	f009 fb26 	bl	800a5c8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);//VNH5019_2_PWM
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	480f      	ldr	r0, [pc, #60]	; (8000fbc <_Z13DC_motor_initv+0x6c>)
 8000f80:	f009 f960 	bl	800a244 <HAL_TIM_PWM_Start>
	//enc_3
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 8000f84:	2100      	movs	r1, #0
 8000f86:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <_Z13DC_motor_initv+0x74>)
 8000f88:	f009 fb1e 	bl	800a5c8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_2);
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <_Z13DC_motor_initv+0x74>)
 8000f90:	f009 fb1a 	bl	800a5c8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);//VNH5019_3_PWM
 8000f94:	2100      	movs	r1, #0
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <_Z13DC_motor_initv+0x78>)
 8000f98:	f009 f954 	bl	800a244 <HAL_TIM_PWM_Start>
	//enc_4
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <_Z13DC_motor_initv+0x7c>)
 8000fa0:	f009 fb12 	bl	800a5c8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_2);
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	4809      	ldr	r0, [pc, #36]	; (8000fcc <_Z13DC_motor_initv+0x7c>)
 8000fa8:	f009 fb0e 	bl	800a5c8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2);//VNH5019_4_PWM
 8000fac:	2104      	movs	r1, #4
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <_Z13DC_motor_initv+0x78>)
 8000fb0:	f009 f948 	bl	800a244 <HAL_TIM_PWM_Start>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	240004ac 	.word	0x240004ac
 8000fbc:	24000628 	.word	0x24000628
 8000fc0:	24000590 	.word	0x24000590
 8000fc4:	240004f8 	.word	0x240004f8
 8000fc8:	24000674 	.word	0x24000674
 8000fcc:	24000544 	.word	0x24000544

08000fd0 <_ZN8DC_motorC1Edddddd>:

//motor Instance
DC_motor::DC_motor(double p, double i, double d, double ratio, double res, double PWM_span){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b08f      	sub	sp, #60	; 0x3c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6378      	str	r0, [r7, #52]	; 0x34
 8000fd8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000fdc:	ed87 1b08 	vstr	d1, [r7, #32]
 8000fe0:	ed87 2b06 	vstr	d2, [r7, #24]
 8000fe4:	ed87 3b04 	vstr	d3, [r7, #16]
 8000fe8:	ed87 4b02 	vstr	d4, [r7, #8]
 8000fec:	ed87 5b00 	vstr	d5, [r7]
 8000ff0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000ffe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800100c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800101a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	this->kp = p;
 8001028:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800102a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800102e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->ki = i;
 8001032:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001034:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001038:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->kd = d;
 800103c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800103e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001042:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	this->reduction_ratio = ratio;
 8001046:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800104c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	this->resolution = res;
 8001050:	ed97 7b02 	vldr	d7, [r7, #8]
 8001054:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001058:	ee17 2a90 	vmov	r2, s15
 800105c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105e:	601a      	str	r2, [r3, #0]
	this->ARR = PWM_span;
 8001060:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001066:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800106a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106c:	4618      	mov	r0, r3
 800106e:	373c      	adds	r7, #60	; 0x3c
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_Z41__static_initialization_and_destruction_0ii>:
	u = kp * error + ki * integral + kd * differential;
	if (u > 1) u = 1;
	else if (u < -1) u = -1;

	return (int) u*ARR;
}
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d140      	bne.n	800110a <_Z41__static_initialization_and_destruction_0ii+0x92>
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108e:	4293      	cmp	r3, r2
 8001090:	d13b      	bne.n	800110a <_Z41__static_initialization_and_destruction_0ii+0x92>
DC_motor FL(15.96559764,31.71747647,0,216,512,1000);//motor_1
 8001092:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8001118 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 8001096:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8001120 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 800109a:	ed9f 3b23 	vldr	d3, [pc, #140]	; 8001128 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800109e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8001130 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80010a2:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001138 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80010a6:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001140 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 80010aa:	4833      	ldr	r0, [pc, #204]	; (8001178 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80010ac:	f7ff ff90 	bl	8000fd0 <_ZN8DC_motorC1Edddddd>
DC_motor BL(24.18280423,91.68881006,0,216,512,1000);//motor_2
 80010b0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001118 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80010b4:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8001120 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80010b8:	ed9f 3b1b 	vldr	d3, [pc, #108]	; 8001128 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80010bc:	ed9f 2b1c 	vldr	d2, [pc, #112]	; 8001130 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80010c0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001148 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80010c4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8001150 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80010c8:	482c      	ldr	r0, [pc, #176]	; (800117c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80010ca:	f7ff ff81 	bl	8000fd0 <_ZN8DC_motorC1Edddddd>
DC_motor BR(21.19552541,50.08697147,0,216,512,1000);//motor_3
 80010ce:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8001118 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80010d2:	ed9f 4b13 	vldr	d4, [pc, #76]	; 8001120 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80010d6:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8001128 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80010da:	ed9f 2b15 	vldr	d2, [pc, #84]	; 8001130 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80010de:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8001158 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80010e2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001160 <_Z41__static_initialization_and_destruction_0ii+0xe8>
 80010e6:	4826      	ldr	r0, [pc, #152]	; (8001180 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 80010e8:	f7ff ff72 	bl	8000fd0 <_ZN8DC_motorC1Edddddd>
DC_motor FR(32.6189283,77.45068509,0,216,512,1000);//motor_4
 80010ec:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001118 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80010f0:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 8001120 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80010f4:	ed9f 3b0c 	vldr	d3, [pc, #48]	; 8001128 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 80010f8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001130 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 80010fc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001168 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8001100:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8001170 <_Z41__static_initialization_and_destruction_0ii+0xf8>
 8001104:	481f      	ldr	r0, [pc, #124]	; (8001184 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001106:	f7ff ff63 	bl	8000fd0 <_ZN8DC_motorC1Edddddd>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	00000000 	.word	0x00000000
 800111c:	408f4000 	.word	0x408f4000
 8001120:	00000000 	.word	0x00000000
 8001124:	40800000 	.word	0x40800000
 8001128:	00000000 	.word	0x00000000
 800112c:	406b0000 	.word	0x406b0000
	...
 8001138:	89b64cae 	.word	0x89b64cae
 800113c:	403fb7ac 	.word	0x403fb7ac
 8001140:	d059ca21 	.word	0xd059ca21
 8001144:	402fee62 	.word	0x402fee62
 8001148:	76ca36c5 	.word	0x76ca36c5
 800114c:	4056ec15 	.word	0x4056ec15
 8001150:	420d6ba3 	.word	0x420d6ba3
 8001154:	40382ecc 	.word	0x40382ecc
 8001158:	e191aae3 	.word	0xe191aae3
 800115c:	40490b21 	.word	0x40490b21
 8001160:	f4097cab 	.word	0xf4097cab
 8001164:	4035320d 	.word	0x4035320d
 8001168:	06469611 	.word	0x06469611
 800116c:	40535cd8 	.word	0x40535cd8
 8001170:	0ae388d1 	.word	0x0ae388d1
 8001174:	40404f39 	.word	0x40404f39
 8001178:	24000280 	.word	0x24000280
 800117c:	240002f8 	.word	0x240002f8
 8001180:	24000370 	.word	0x24000370
 8001184:	240003e8 	.word	0x240003e8

08001188 <_GLOBAL__sub_I_FL>:
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
 800118c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff ff71 	bl	8001078 <_Z41__static_initialization_and_destruction_0ii>
 8001196:	bd80      	pop	{r7, pc}

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f003 fd9a 	bl	8004cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f81c 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 fc2c 	bl	8001a00 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011a8:	f000 f8dc 	bl	8001364 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011ac:	f000 f92e 	bl	800140c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011b0:	f000 f982 	bl	80014b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80011b4:	f000 f9d6 	bl	8001564 <MX_TIM5_Init>
  MX_TIM12_Init();
 80011b8:	f000 fa7e 	bl	80016b8 <MX_TIM12_Init>
  MX_TIM15_Init();
 80011bc:	f000 facc 	bl	8001758 <MX_TIM15_Init>
  MX_TIM1_Init();
 80011c0:	f000 f87c 	bl	80012bc <MX_TIM1_Init>
  MX_TIM8_Init();
 80011c4:	f000 fa24 	bl	8001610 <MX_TIM8_Init>
  MX_TIM23_Init();
 80011c8:	f000 fb58 	bl	800187c <MX_TIM23_Init>
  MX_DMA_Init();
 80011cc:	f000 fbf0 	bl	80019b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011d0:	f000 fba2 	bl	8001918 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80011d4:	f001 ff34 	bl	8003040 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <main+0x40>
	...

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b09c      	sub	sp, #112	; 0x70
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	224c      	movs	r2, #76	; 0x4c
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00c f936 	bl	800d45c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2220      	movs	r2, #32
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00c f930 	bl	800d45c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011fc:	2002      	movs	r0, #2
 80011fe:	f006 fc5b 	bl	8007ab8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <SystemClock_Config+0xdc>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800120e:	4a2a      	ldr	r2, [pc, #168]	; (80012b8 <SystemClock_Config+0xdc>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <SystemClock_Config+0xdc>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001222:	bf00      	nop
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <SystemClock_Config+0xdc>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800122c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001230:	d1f8      	bne.n	8001224 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001232:	2301      	movs	r3, #1
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001240:	2302      	movs	r3, #2
 8001242:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001248:	232a      	movs	r3, #42	; 0x2a
 800124a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800124c:	2302      	movs	r3, #2
 800124e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001250:	2302      	movs	r3, #2
 8001252:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001254:	2302      	movs	r3, #2
 8001256:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001258:	230c      	movs	r3, #12
 800125a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800125c:	2300      	movs	r3, #0
 800125e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	4618      	mov	r0, r3
 800126a:	f006 fc5f 	bl	8007b2c <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001274:	f000 fcd6 	bl	8001c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	233f      	movs	r3, #63	; 0x3f
 800127a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2303      	movs	r3, #3
 800127e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001284:	2308      	movs	r3, #8
 8001286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001288:	2340      	movs	r3, #64	; 0x40
 800128a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800128c:	2340      	movs	r3, #64	; 0x40
 800128e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001294:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f006 fff2 	bl	8008288 <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80012aa:	f000 fcbb 	bl	8001c24 <Error_Handler>
  }
}
 80012ae:	bf00      	nop
 80012b0:	3770      	adds	r7, #112	; 0x70
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	58024800 	.word	0x58024800

080012bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_TIM1_Init+0xa0>)
 80012dc:	4a20      	ldr	r2, [pc, #128]	; (8001360 <MX_TIM1_Init+0xa4>)
 80012de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_TIM1_Init+0xa0>)
 80012e2:	223f      	movs	r2, #63	; 0x3f
 80012e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM1_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM1_Init+0xa0>)
 80012ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_TIM1_Init+0xa0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_TIM1_Init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_TIM1_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <MX_TIM1_Init+0xa0>)
 8001308:	f008 fe66 	bl	8009fd8 <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001312:	f000 fc87 	bl	8001c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <MX_TIM1_Init+0xa0>)
 8001324:	f009 fc32 	bl	800ab8c <HAL_TIM_ConfigClockSource>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800132e:	f000 fc79 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_TIM1_Init+0xa0>)
 8001344:	f00a f982 	bl	800b64c <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800134e:	f000 fc69 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	24000460 	.word	0x24000460
 8001360:	40010000 	.word	0x40010000

08001364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08c      	sub	sp, #48	; 0x30
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00c f872 	bl	800d45c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_TIM2_Init+0xa4>)
 8001384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001388:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_TIM2_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <MX_TIM2_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <MX_TIM2_Init+0xa4>)
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_TIM2_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_TIM2_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013aa:	2303      	movs	r3, #3
 80013ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013b2:	2301      	movs	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013c2:	2301      	movs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_TIM2_Init+0xa4>)
 80013d6:	f009 f851 	bl	800a47c <HAL_TIM_Encoder_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80013e0:	f000 fc20 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_TIM2_Init+0xa4>)
 80013f2:	f00a f92b 	bl	800b64c <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80013fc:	f000 fc12 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3730      	adds	r7, #48	; 0x30
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	240004ac 	.word	0x240004ac

0800140c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f00c f81e 	bl	800d45c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_TIM3_Init+0xa4>)
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <MX_TIM3_Init+0xa8>)
 800142e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_TIM3_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_TIM3_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM3_Init+0xa4>)
 800143e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001442:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM3_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM3_Init+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001450:	2303      	movs	r3, #3
 8001452:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_TIM3_Init+0xa4>)
 800147c:	f008 fffe 	bl	800a47c <HAL_TIM_Encoder_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001486:	f000 fbcd 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_TIM3_Init+0xa4>)
 8001498:	f00a f8d8 	bl	800b64c <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80014a2:	f000 fbbf 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	; 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	240004f8 	.word	0x240004f8
 80014b4:	40000400 	.word	0x40000400

080014b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00b ffc8 	bl	800d45c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_TIM4_Init+0xa4>)
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <MX_TIM4_Init+0xa8>)
 80014da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_TIM4_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM4_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM4_Init+0xa4>)
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM4_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM4_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014fc:	2303      	movs	r3, #3
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001514:	2301      	movs	r3, #1
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_TIM4_Init+0xa4>)
 8001528:	f008 ffa8 	bl	800a47c <HAL_TIM_Encoder_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001532:	f000 fb77 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_TIM4_Init+0xa4>)
 8001544:	f00a f882 	bl	800b64c <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800154e:	f000 fb69 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3730      	adds	r7, #48	; 0x30
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	24000544 	.word	0x24000544
 8001560:	40000800 	.word	0x40000800

08001564 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2224      	movs	r2, #36	; 0x24
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f00b ff72 	bl	800d45c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_TIM5_Init+0xa4>)
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <MX_TIM5_Init+0xa8>)
 8001586:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_TIM5_Init+0xa4>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_TIM5_Init+0xa4>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_TIM5_Init+0xa4>)
 8001596:	f04f 32ff 	mov.w	r2, #4294967295
 800159a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM5_Init+0xa4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_TIM5_Init+0xa4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015a8:	2303      	movs	r3, #3
 80015aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015b0:	2301      	movs	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015c0:	2301      	movs	r3, #1
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4619      	mov	r1, r3
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_TIM5_Init+0xa4>)
 80015d4:	f008 ff52 	bl	800a47c <HAL_TIM_Encoder_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80015de:	f000 fb21 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015ea:	463b      	mov	r3, r7
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_TIM5_Init+0xa4>)
 80015f0:	f00a f82c 	bl	800b64c <HAL_TIMEx_MasterConfigSynchronization>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80015fa:	f000 fb13 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3730      	adds	r7, #48	; 0x30
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	24000590 	.word	0x24000590
 800160c:	40000c00 	.word	0x40000c00

08001610 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_TIM8_Init+0xa0>)
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <MX_TIM8_Init+0xa4>)
 8001632:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_TIM8_Init+0xa0>)
 8001636:	223f      	movs	r2, #63	; 0x3f
 8001638:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_TIM8_Init+0xa0>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_TIM8_Init+0xa0>)
 8001642:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001646:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_TIM8_Init+0xa0>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_TIM8_Init+0xa0>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_TIM8_Init+0xa0>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800165a:	4815      	ldr	r0, [pc, #84]	; (80016b0 <MX_TIM8_Init+0xa0>)
 800165c:	f008 fcbc 	bl	8009fd8 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001666:	f000 fadd 	bl	8001c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4619      	mov	r1, r3
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <MX_TIM8_Init+0xa0>)
 8001678:	f009 fa88 	bl	800ab8c <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001682:	f000 facf 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_TIM8_Init+0xa0>)
 8001698:	f009 ffd8 	bl	800b64c <HAL_TIMEx_MasterConfigSynchronization>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016a2:	f000 fabf 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	240005dc 	.word	0x240005dc
 80016b4:	40010400 	.word	0x40010400

080016b8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	615a      	str	r2, [r3, #20]
 80016ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_TIM12_Init+0x98>)
 80016d2:	4a20      	ldr	r2, [pc, #128]	; (8001754 <MX_TIM12_Init+0x9c>)
 80016d4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 63;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_TIM12_Init+0x98>)
 80016d8:	223f      	movs	r2, #63	; 0x3f
 80016da:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_TIM12_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <MX_TIM12_Init+0x98>)
 80016e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_TIM12_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_TIM12_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80016f6:	4816      	ldr	r0, [pc, #88]	; (8001750 <MX_TIM12_Init+0x98>)
 80016f8:	f008 fd4c 	bl	800a194 <HAL_TIM_PWM_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001702:	f000 fa8f 	bl	8001c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	; 0x60
 8001708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_TIM12_Init+0x98>)
 800171e:	f009 f921 	bl	800a964 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001728:	f000 fa7c 	bl	8001c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2204      	movs	r2, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_TIM12_Init+0x98>)
 8001734:	f009 f916 	bl	800a964 <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800173e:	f000 fa71 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001742:	4803      	ldr	r0, [pc, #12]	; (8001750 <MX_TIM12_Init+0x98>)
 8001744:	f002 ffce 	bl	80046e4 <HAL_TIM_MspPostInit>

}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24000628 	.word	0x24000628
 8001754:	40001800 	.word	0x40001800

08001758 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b098      	sub	sp, #96	; 0x60
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2234      	movs	r2, #52	; 0x34
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f00b fe69 	bl	800d45c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800178a:	4b3a      	ldr	r3, [pc, #232]	; (8001874 <MX_TIM15_Init+0x11c>)
 800178c:	4a3a      	ldr	r2, [pc, #232]	; (8001878 <MX_TIM15_Init+0x120>)
 800178e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 63;
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <MX_TIM15_Init+0x11c>)
 8001792:	223f      	movs	r2, #63	; 0x3f
 8001794:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b37      	ldr	r3, [pc, #220]	; (8001874 <MX_TIM15_Init+0x11c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800179c:	4b35      	ldr	r3, [pc, #212]	; (8001874 <MX_TIM15_Init+0x11c>)
 800179e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <MX_TIM15_Init+0x11c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80017aa:	4b32      	ldr	r3, [pc, #200]	; (8001874 <MX_TIM15_Init+0x11c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <MX_TIM15_Init+0x11c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80017b6:	482f      	ldr	r0, [pc, #188]	; (8001874 <MX_TIM15_Init+0x11c>)
 80017b8:	f008 fcec 	bl	800a194 <HAL_TIM_PWM_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80017c2:	f000 fa2f 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80017ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017d2:	4619      	mov	r1, r3
 80017d4:	4827      	ldr	r0, [pc, #156]	; (8001874 <MX_TIM15_Init+0x11c>)
 80017d6:	f009 ff39 	bl	800b64c <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80017e0:	f000 fa20 	bl	8001c24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e4:	2360      	movs	r3, #96	; 0x60
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ec:	2300      	movs	r3, #0
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017f0:	2300      	movs	r3, #0
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001800:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001804:	2200      	movs	r2, #0
 8001806:	4619      	mov	r1, r3
 8001808:	481a      	ldr	r0, [pc, #104]	; (8001874 <MX_TIM15_Init+0x11c>)
 800180a:	f009 f8ab 	bl	800a964 <HAL_TIM_PWM_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001814:	f000 fa06 	bl	8001c24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001818:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800181c:	2204      	movs	r2, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4814      	ldr	r0, [pc, #80]	; (8001874 <MX_TIM15_Init+0x11c>)
 8001822:	f009 f89f 	bl	800a964 <HAL_TIM_PWM_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 800182c:	f000 f9fa 	bl	8001c24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001848:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_TIM15_Init+0x11c>)
 8001858:	f009 ff94 	bl	800b784 <HAL_TIMEx_ConfigBreakDeadTime>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001862:	f000 f9df 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <MX_TIM15_Init+0x11c>)
 8001868:	f002 ff3c 	bl	80046e4 <HAL_TIM_MspPostInit>

}
 800186c:	bf00      	nop
 800186e:	3760      	adds	r7, #96	; 0x60
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	24000674 	.word	0x24000674
 8001878:	40014000 	.word	0x40014000

0800187c <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_TIM23_Init+0x94>)
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <MX_TIM23_Init+0x98>)
 800189e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 63;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_TIM23_Init+0x94>)
 80018a2:	223f      	movs	r2, #63	; 0x3f
 80018a4:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM23_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 9999;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_TIM23_Init+0x94>)
 80018ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80018b2:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_TIM23_Init+0x94>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_TIM23_Init+0x94>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80018c0:	4813      	ldr	r0, [pc, #76]	; (8001910 <MX_TIM23_Init+0x94>)
 80018c2:	f008 fb89 	bl	8009fd8 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM23_Init+0x54>
  {
    Error_Handler();
 80018cc:	f000 f9aa 	bl	8001c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	4619      	mov	r1, r3
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <MX_TIM23_Init+0x94>)
 80018de:	f009 f955 	bl	800ab8c <HAL_TIM_ConfigClockSource>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM23_Init+0x70>
  {
    Error_Handler();
 80018e8:	f000 f99c 	bl	8001c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_TIM23_Init+0x94>)
 80018fa:	f009 fea7 	bl	800b64c <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM23_Init+0x8c>
  {
    Error_Handler();
 8001904:	f000 f98e 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	240006c0 	.word	0x240006c0
 8001914:	4000e000 	.word	0x4000e000

08001918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 800191e:	4a23      	ldr	r2, [pc, #140]	; (80019ac <MX_USART1_UART_Init+0x94>)
 8001920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001922:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001960:	4811      	ldr	r0, [pc, #68]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001962:	f009 ffcd 	bl	800b900 <HAL_UART_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800196c:	f000 f95a 	bl	8001c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001970:	2100      	movs	r1, #0
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001974:	f00b fc53 	bl	800d21e <HAL_UARTEx_SetTxFifoThreshold>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800197e:	f000 f951 	bl	8001c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001982:	2100      	movs	r1, #0
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001986:	f00b fc88 	bl	800d29a <HAL_UARTEx_SetRxFifoThreshold>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001990:	f000 f948 	bl	8001c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_USART1_UART_Init+0x90>)
 8001996:	f00b fc09 	bl	800d1ac <HAL_UARTEx_DisableFifoMode>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019a0:	f000 f940 	bl	8001c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2400070c 	.word	0x2400070c
 80019ac:	40011000 	.word	0x40011000

080019b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_DMA_Init+0x4c>)
 80019b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019bc:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <MX_DMA_Init+0x4c>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MX_DMA_Init+0x4c>)
 80019c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	200b      	movs	r0, #11
 80019da:	f003 fae8 	bl	8004fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019de:	200b      	movs	r0, #11
 80019e0:	f003 faff 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	200c      	movs	r0, #12
 80019ea:	f003 fae0 	bl	8004fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019ee:	200c      	movs	r0, #12
 80019f0:	f003 faf7 	bl	8004fe2 <HAL_NVIC_EnableIRQ>

}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	58024400 	.word	0x58024400

08001a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a16:	4b7c      	ldr	r3, [pc, #496]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1c:	4a7a      	ldr	r2, [pc, #488]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a1e:	f043 0310 	orr.w	r3, r3, #16
 8001a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a26:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	623b      	str	r3, [r7, #32]
 8001a32:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a34:	4b74      	ldr	r3, [pc, #464]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3a:	4a73      	ldr	r2, [pc, #460]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a44:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a52:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a58:	4a6b      	ldr	r2, [pc, #428]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a62:	4b69      	ldr	r3, [pc, #420]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	4b65      	ldr	r3, [pc, #404]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	4a64      	ldr	r2, [pc, #400]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a80:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a8e:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a94:	4a5c      	ldr	r2, [pc, #368]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa4:	f003 0320 	and.w	r3, r3, #32
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aac:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab2:	4a55      	ldr	r2, [pc, #340]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001abc:	4b52      	ldr	r3, [pc, #328]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad0:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ada:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae8:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aee:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af8:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <MX_GPIO_Init+0x208>)
 8001afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001b06:	2200      	movs	r2, #0
 8001b08:	f248 711c 	movw	r1, #34588	; 0x871c
 8001b0c:	483f      	ldr	r0, [pc, #252]	; (8001c0c <MX_GPIO_Init+0x20c>)
 8001b0e:	f005 ffb9 	bl	8007a84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b18:	483d      	ldr	r0, [pc, #244]	; (8001c10 <MX_GPIO_Init+0x210>)
 8001b1a:	f005 ffb3 	bl	8007a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b24:	483b      	ldr	r0, [pc, #236]	; (8001c14 <MX_GPIO_Init+0x214>)
 8001b26:	f005 ffad 	bl	8007a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	483a      	ldr	r0, [pc, #232]	; (8001c18 <MX_GPIO_Init+0x218>)
 8001b30:	f005 ffa8 	bl	8007a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
 8001b3a:	4838      	ldr	r0, [pc, #224]	; (8001c1c <MX_GPIO_Init+0x21c>)
 8001b3c:	f005 ffa2 	bl	8007a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001b46:	4836      	ldr	r0, [pc, #216]	; (8001c20 <MX_GPIO_Init+0x220>)
 8001b48:	f005 ff9c 	bl	8007a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE9 PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001b4c:	f248 731c 	movw	r3, #34588	; 0x871c
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	4829      	ldr	r0, [pc, #164]	; (8001c0c <MX_GPIO_Init+0x20c>)
 8001b66:	f005 fce3 	bl	8007530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	4823      	ldr	r0, [pc, #140]	; (8001c10 <MX_GPIO_Init+0x210>)
 8001b84:	f005 fcd4 	bl	8007530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b88:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	481c      	ldr	r0, [pc, #112]	; (8001c14 <MX_GPIO_Init+0x214>)
 8001ba2:	f005 fcc5 	bl	8007530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4816      	ldr	r0, [pc, #88]	; (8001c18 <MX_GPIO_Init+0x218>)
 8001bbe:	f005 fcb7 	bl	8007530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7;
 8001bc2:	f44f 5343 	mov.w	r3, #12480	; 0x30c0
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4810      	ldr	r0, [pc, #64]	; (8001c1c <MX_GPIO_Init+0x21c>)
 8001bdc:	f005 fca8 	bl	8007530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001be0:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4809      	ldr	r0, [pc, #36]	; (8001c20 <MX_GPIO_Init+0x220>)
 8001bfa:	f005 fc99 	bl	8007530 <HAL_GPIO_Init>

}
 8001bfe:	bf00      	nop
 8001c00:	3738      	adds	r7, #56	; 0x38
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	58021000 	.word	0x58021000
 8001c10:	58020800 	.word	0x58020800
 8001c14:	58021400 	.word	0x58021400
 8001c18:	58021800 	.word	0x58021800
 8001c1c:	58020400 	.word	0x58020400
 8001c20:	58020c00 	.word	0x58020c00

08001c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c28:	b672      	cpsid	i
}
 8001c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <Error_Handler+0x8>

08001c2e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <_ZN3ros3MsgC1Ev+0x1c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	0800d9cc 	.word	0x0800d9cc

08001c70 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
      data()
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ffe8 	bl	8001c50 <_ZN3ros3MsgC1Ev>
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ffcf 	bl	8001c2e <_ZN3ros4TimeC1Ev>
    {
    }
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	0800d9b4 	.word	0x0800d9b4

08001ca0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6859      	ldr	r1, [r3, #4]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b2ca      	uxtb	r2, r1
 8001cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0a19      	lsrs	r1, r3, #8
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b2ca      	uxtb	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0c19      	lsrs	r1, r3, #16
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2ca      	uxtb	r2, r1
 8001cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0e19      	lsrs	r1, r3, #24
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3303      	adds	r3, #3
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	b2ca      	uxtb	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6899      	ldr	r1, [r3, #8]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0a19      	lsrs	r1, r3, #8
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	b2ca      	uxtb	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	0c19      	lsrs	r1, r3, #16
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3302      	adds	r3, #2
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	4413      	add	r3, r2
 8001d26:	b2ca      	uxtb	r2, r1
 8001d28:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0e19      	lsrs	r1, r3, #24
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3303      	adds	r3, #3
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	b2ca      	uxtb	r2, r1
 8001d3a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3304      	adds	r3, #4
 8001d40:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d42:	68fb      	ldr	r3, [r7, #12]
    }
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3301      	adds	r3, #1
 8001d74:	6839      	ldr	r1, [r7, #0]
 8001d76:	440b      	add	r3, r1
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	440b      	add	r3, r1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3303      	adds	r3, #3
 8001da0:	6839      	ldr	r1, [r7, #0]
 8001da2:	440b      	add	r3, r1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	061b      	lsls	r3, r3, #24
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3304      	adds	r3, #4
 8001db2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	4413      	add	r3, r2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	6839      	ldr	r1, [r7, #0]
 8001dcc:	440b      	add	r3, r1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3302      	adds	r3, #2
 8001de0:	6839      	ldr	r1, [r7, #0]
 8001de2:	440b      	add	r3, r1
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	041b      	lsls	r3, r3, #16
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3303      	adds	r3, #3
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	440b      	add	r3, r1
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3304      	adds	r3, #4
 8001e08:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
    }
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	0800d788 	.word	0x0800d788

08001e34 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	0800d798 	.word	0x0800d798

08001e50 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fef8 	bl	8001c50 <_ZN3ros3MsgC1Ev>
 8001e60:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	809a      	strh	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001e7c:	611a      	str	r2, [r3, #16]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
    {
    }
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	0800d99c 	.word	0x0800d99c
 8001e94:	0800d7bc 	.word	0x0800d7bc

08001e98 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	8899      	ldrh	r1, [r3, #4]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	b2ca      	uxtb	r2, r1
 8001eb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	889b      	ldrh	r3, [r3, #4]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	b299      	uxth	r1, r3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2ca      	uxtb	r2, r1
 8001ec6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3302      	adds	r3, #2
 8001ecc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fa1c 	bl	8000310 <strlen>
 8001ed8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 f9ac 	bl	8003240 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3304      	adds	r3, #4
 8001eec:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	18d0      	adds	r0, r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4619      	mov	r1, r3
 8001efc:	f00b faa0 	bl	800d440 <memcpy>
      offset += length_topic_name;
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4413      	add	r3, r2
 8001f06:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe f9ff 	bl	8000310 <strlen>
 8001f12:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	6979      	ldr	r1, [r7, #20]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 f98f 	bl	8003240 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	18d0      	adds	r0, r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f00b fa83 	bl	800d440 <memcpy>
      offset += length_message_type;
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	4413      	add	r3, r2
 8001f40:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe f9e2 	bl	8000310 <strlen>
 8001f4c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	6939      	ldr	r1, [r7, #16]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 f972 	bl	8003240 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	18d0      	adds	r0, r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f00b fa66 	bl	800d440 <memcpy>
      offset += length_md5sum;
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	0a19      	lsrs	r1, r3, #8
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0c19      	lsrs	r1, r3, #16
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	4413      	add	r3, r2
 8001faa:	b2ca      	uxtb	r2, r1
 8001fac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	0e19      	lsrs	r1, r3, #24
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	61fb      	str	r3, [r7, #28]
      return offset;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
    }
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b08a      	sub	sp, #40	; 0x28
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	889b      	ldrh	r3, [r3, #4]
 8001fee:	b21a      	sxth	r2, r3
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	440b      	add	r3, r1
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21b      	sxth	r3, r3
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	3302      	adds	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	441a      	add	r2, r3
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f001 f92e 	bl	800327c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	3304      	adds	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	4413      	add	r3, r2
 8002030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002032:	429a      	cmp	r2, r3
 8002034:	d20c      	bcs.n	8002050 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	441a      	add	r2, r3
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	3b01      	subs	r3, #1
 8002040:	6839      	ldr	r1, [r7, #0]
 8002042:	440b      	add	r3, r1
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	3301      	adds	r3, #1
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	e7ec      	b.n	800202a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	4413      	add	r3, r2
 8002056:	3b01      	subs	r3, #1
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4413      	add	r3, r2
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	3b01      	subs	r3, #1
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	441a      	add	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	4413      	add	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	441a      	add	r2, r3
 800207a:	f107 0310 	add.w	r3, r7, #16
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f001 f8fb 	bl	800327c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3304      	adds	r3, #4
 800208a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	6a3a      	ldr	r2, [r7, #32]
 8002098:	429a      	cmp	r2, r3
 800209a:	d20c      	bcs.n	80020b6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	441a      	add	r2, r3
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	440b      	add	r3, r1
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020ae:	6a3b      	ldr	r3, [r7, #32]
 80020b0:	3301      	adds	r3, #1
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	e7ec      	b.n	8002090 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	3b01      	subs	r3, #1
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	441a      	add	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	441a      	add	r2, r3
 80020e0:	f107 030c 	add.w	r3, r7, #12
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f001 f8c8 	bl	800327c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	3304      	adds	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d20c      	bcs.n	800211c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	441a      	add	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3b01      	subs	r3, #1
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	440b      	add	r3, r1
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	3301      	adds	r3, #1
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e7ec      	b.n	80020f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	3b01      	subs	r3, #1
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	3b01      	subs	r3, #1
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	441a      	add	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4413      	add	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	6839      	ldr	r1, [r7, #0]
 800214a:	440a      	add	r2, r1
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	3301      	adds	r3, #1
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	440b      	add	r3, r1
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	4313      	orrs	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3302      	adds	r3, #2
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	440b      	add	r3, r1
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	4313      	orrs	r3, r2
 8002174:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	3303      	adds	r3, #3
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	440b      	add	r3, r1
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	4313      	orrs	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	3304      	adds	r3, #4
 8002192:	61bb      	str	r3, [r7, #24]
     return offset;
 8002194:	69bb      	ldr	r3, [r7, #24]
    }
 8002196:	4618      	mov	r0, r3
 8002198:	3728      	adds	r7, #40	; 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	0800d7c0 	.word	0x0800d7c0

080021bc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	0800d7dc 	.word	0x0800d7dc

080021d8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fd34 	bl	8001c50 <_ZN3ros3MsgC1Ev>
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	711a      	strb	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80021f8:	609a      	str	r2, [r3, #8]
    {
    }
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	0800d984 	.word	0x0800d984
 8002208:	0800d7bc 	.word	0x0800d7bc

0800220c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	4413      	add	r3, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	7912      	ldrb	r2, [r2, #4]
 8002224:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3301      	adds	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f86d 	bl	8000310 <strlen>
 8002236:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4413      	add	r3, r2
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fffd 	bl	8003240 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3304      	adds	r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	18d0      	adds	r0, r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4619      	mov	r1, r3
 800225a:	f00b f8f1 	bl	800d440 <memcpy>
      offset += length_msg;
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
      return offset;
 8002266:	68fb      	ldr	r3, [r7, #12]
    }
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	4413      	add	r3, r2
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	3301      	adds	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	441a      	add	r2, r3
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f000 ffed 	bl	800327c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	3304      	adds	r3, #4
 80022a6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4413      	add	r3, r2
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d20c      	bcs.n	80022d2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	441a      	add	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	6839      	ldr	r1, [r7, #0]
 80022c4:	440b      	add	r3, r1
 80022c6:	7812      	ldrb	r2, [r2, #0]
 80022c8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e7ec      	b.n	80022ac <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	3b01      	subs	r3, #1
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	441a      	add	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
     return offset;
 80022f6:	693b      	ldr	r3, [r7, #16]
    }
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	0800d800 	.word	0x0800d800

0800231c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	0800d814 	.word	0x0800d814

08002338 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc84 	bl	8001c50 <_ZN3ros3MsgC1Ev>
 8002348:	4a0c      	ldr	r2, [pc, #48]	; (800237c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	61da      	str	r2, [r3, #28]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	0800d96c 	.word	0x0800d96c

08002380 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	4413      	add	r3, r2
 8002398:	b2ca      	uxtb	r2, r1
 800239a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0a19      	lsrs	r1, r3, #8
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	3301      	adds	r3, #1
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	b2ca      	uxtb	r2, r1
 80023ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0c19      	lsrs	r1, r3, #16
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	3302      	adds	r3, #2
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	b2ca      	uxtb	r2, r1
 80023be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0e19      	lsrs	r1, r3, #24
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	3303      	adds	r3, #3
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	4413      	add	r3, r2
 80023ce:	b2ca      	uxtb	r2, r1
 80023d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3304      	adds	r3, #4
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d22b      	bcs.n	800243e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80023f4:	6939      	ldr	r1, [r7, #16]
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	b2ca      	uxtb	r2, r1
 80023fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	0a19      	lsrs	r1, r3, #8
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	3301      	adds	r3, #1
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	0c19      	lsrs	r1, r3, #16
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	3302      	adds	r3, #2
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	4413      	add	r3, r2
 800241c:	b2ca      	uxtb	r2, r1
 800241e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	0e19      	lsrs	r1, r3, #24
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	3303      	adds	r3, #3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4413      	add	r3, r2
 800242c:	b2ca      	uxtb	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	3304      	adds	r3, #4
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	3301      	adds	r3, #1
 800243a:	623b      	str	r3, [r7, #32]
 800243c:	e7ce      	b.n	80023dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6919      	ldr	r1, [r3, #16]
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	4413      	add	r3, r2
 8002448:	b2ca      	uxtb	r2, r1
 800244a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	0a19      	lsrs	r1, r3, #8
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	3301      	adds	r3, #1
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	0c19      	lsrs	r1, r3, #16
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	3302      	adds	r3, #2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	b2ca      	uxtb	r2, r1
 800246e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	0e19      	lsrs	r1, r3, #24
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	3303      	adds	r3, #3
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	4413      	add	r3, r2
 800247e:	b2ca      	uxtb	r2, r1
 8002480:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	3304      	adds	r3, #4
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	429a      	cmp	r2, r3
 8002494:	d22b      	bcs.n	80024ee <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	b2ca      	uxtb	r2, r1
 80024ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	0a19      	lsrs	r1, r3, #8
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	3301      	adds	r3, #1
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	0c19      	lsrs	r1, r3, #16
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	3302      	adds	r3, #2
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	b2ca      	uxtb	r2, r1
 80024ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	0e19      	lsrs	r1, r3, #24
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	3303      	adds	r3, #3
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	b2ca      	uxtb	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	3304      	adds	r3, #4
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	e7ce      	b.n	800248c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69d9      	ldr	r1, [r3, #28]
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	b2ca      	uxtb	r2, r1
 80024fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	0a19      	lsrs	r1, r3, #8
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	3301      	adds	r3, #1
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	4413      	add	r3, r2
 800250a:	b2ca      	uxtb	r2, r1
 800250c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	0c19      	lsrs	r1, r3, #16
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	3302      	adds	r3, #2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	4413      	add	r3, r2
 800251c:	b2ca      	uxtb	r2, r1
 800251e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	0e19      	lsrs	r1, r3, #24
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	3303      	adds	r3, #3
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	4413      	add	r3, r2
 800252e:	b2ca      	uxtb	r2, r1
 8002530:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3304      	adds	r3, #4
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	429a      	cmp	r2, r3
 8002544:	d228      	bcs.n	8002598 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd fedc 	bl	8000310 <strlen>
 8002558:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4413      	add	r3, r2
 8002560:	6979      	ldr	r1, [r7, #20]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fe6c 	bl	8003240 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	3304      	adds	r3, #4
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	18d0      	adds	r0, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4619      	mov	r1, r3
 8002584:	f00a ff5c 	bl	800d440 <memcpy>
      offset += length_stringsi;
 8002588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	4413      	add	r3, r2
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	3301      	adds	r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e7d1      	b.n	800253c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800259a:	4618      	mov	r0, r3
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08e      	sub	sp, #56	; 0x38
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025bc:	3301      	adds	r3, #1
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	021b      	lsls	r3, r3, #8
 80025c6:	6a3a      	ldr	r2, [r7, #32]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	3302      	adds	r3, #2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	4313      	orrs	r3, r2
 80025dc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	3303      	adds	r3, #3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	6a3a      	ldr	r2, [r7, #32]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	3304      	adds	r3, #4
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d90a      	bls.n	8002616 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f00a ff2e 	bl	800d46c <realloc>
 8002610:	4602      	mov	r2, r0
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800261c:	2300      	movs	r3, #0
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002626:	429a      	cmp	r2, r3
 8002628:	d236      	bcs.n	8002698 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	440a      	add	r2, r1
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	3301      	adds	r3, #1
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440b      	add	r3, r1
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	3302      	adds	r3, #2
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	440b      	add	r3, r1
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	3303      	adds	r3, #3
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	440b      	add	r3, r1
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	3304      	adds	r3, #4
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002692:	3301      	adds	r3, #1
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
 8002696:	e7c3      	b.n	8002620 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a4:	3301      	adds	r3, #1
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b6:	3302      	adds	r3, #2
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	041b      	lsls	r3, r3, #16
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	3303      	adds	r3, #3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	3304      	adds	r3, #4
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d90a      	bls.n	80026fe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f00a feba 	bl	800d46c <realloc>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002704:	2300      	movs	r3, #0
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800270e:	429a      	cmp	r2, r3
 8002710:	d236      	bcs.n	8002780 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	440a      	add	r2, r1
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002728:	3301      	adds	r3, #1
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	440b      	add	r3, r1
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	3302      	adds	r3, #2
 800273c:	6839      	ldr	r1, [r7, #0]
 800273e:	440b      	add	r3, r1
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	041b      	lsls	r3, r3, #16
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800274c:	3303      	adds	r3, #3
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	440b      	add	r3, r1
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	3304      	adds	r3, #4
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	3214      	adds	r2, #20
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277a:	3301      	adds	r3, #1
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277e:	e7c3      	b.n	8002708 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	4413      	add	r3, r2
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800278a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278c:	3301      	adds	r3, #1
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4413      	add	r3, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	3302      	adds	r3, #2
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	3303      	adds	r3, #3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	3304      	adds	r3, #4
 80027c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d90a      	bls.n	80027e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f00a fe46 	bl	800d46c <realloc>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80027ec:	2300      	movs	r3, #0
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d23f      	bcs.n	800287a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80027fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	441a      	add	r2, r3
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fd38 	bl	800327c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	3304      	adds	r3, #4
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	429a      	cmp	r2, r3
 8002820:	d20c      	bcs.n	800283c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	441a      	add	r2, r3
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	3b01      	subs	r3, #1
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	440b      	add	r3, r1
 8002830:	7812      	ldrb	r2, [r2, #0]
 8002832:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	3301      	adds	r3, #1
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
 800283a:	e7ec      	b.n	8002816 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800283c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4413      	add	r3, r2
 8002842:	3b01      	subs	r3, #1
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	4413      	add	r3, r2
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284e:	3b01      	subs	r3, #1
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	441a      	add	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	3220      	adds	r2, #32
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	3301      	adds	r3, #1
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
 8002878:	e7ba      	b.n	80027f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800287a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800287c:	4618      	mov	r0, r3
 800287e:	3738      	adds	r7, #56	; 0x38
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	0800d8d8 	.word	0x0800d8d8

080028a0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	0800d838 	.word	0x0800d838

080028bc <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
  }
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d068      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a40      	ldr	r2, [pc, #256]	; (80029f4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d061      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a3d      	ldr	r2, [pc, #244]	; (80029f8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d05a      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a3b      	ldr	r2, [pc, #236]	; (80029fc <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d053      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a38      	ldr	r2, [pc, #224]	; (8002a00 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d04c      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a36      	ldr	r2, [pc, #216]	; (8002a04 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d045      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a33      	ldr	r2, [pc, #204]	; (8002a08 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d03e      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d037      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2e      	ldr	r2, [pc, #184]	; (8002a10 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d030      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d029      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d022      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01b      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d014      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00d      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d006      	beq.n	80029bc <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d109      	bne.n	80029d0 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80029ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ce:	e008      	b.n	80029e2 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80029de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40020010 	.word	0x40020010
 80029f4:	40020028 	.word	0x40020028
 80029f8:	40020040 	.word	0x40020040
 80029fc:	40020058 	.word	0x40020058
 8002a00:	40020070 	.word	0x40020070
 8002a04:	40020088 	.word	0x40020088
 8002a08:	400200a0 	.word	0x400200a0
 8002a0c:	400200b8 	.word	0x400200b8
 8002a10:	40020410 	.word	0x40020410
 8002a14:	40020428 	.word	0x40020428
 8002a18:	40020440 	.word	0x40020440
 8002a1c:	40020458 	.word	0x40020458
 8002a20:	40020470 	.word	0x40020470
 8002a24:	40020488 	.word	0x40020488
 8002a28:	400204a0 	.word	0x400204a0
 8002a2c:	400204b8 	.word	0x400204b8

08002a30 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <_ZN13STM32HardwareC1Ev+0x3c>)
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2300      	movs	r3, #0
 8002a50:	6093      	str	r3, [r2, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60d3      	str	r3, [r2, #12]
    }
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	2400070c 	.word	0x2400070c

08002a70 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f804 	bl	8002a86 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f009 f84e 	bl	800bb3c <HAL_UART_Receive_DMA>
    }
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff09 	bl	80028d4 <_ZN13STM32Hardware10getRdmaIndEv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	429c      	cmp	r4, r3
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d012      	beq.n	8002af8 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002ad8:	1c59      	adds	r1, r3, #1
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	791b      	ldrb	r3, [r3, #4]
 8002ae6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002aee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002af8:	68fb      	ldr	r3, [r7, #12]
    }
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}
	...

08002b04 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	d108      	bne.n	8002b2a <_ZN13STM32Hardware5flushEv+0x26>
 8002b18:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <_ZN13STM32Hardware5flushEv+0xc8>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	f083 0301 	eor.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <_ZN13STM32Hardware5flushEv+0x26>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <_ZN13STM32Hardware5flushEv+0x28>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d049      	beq.n	8002bc4 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002b30:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <_ZN13STM32Hardware5flushEv+0xc8>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d039      	beq.n	8002bbe <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20c      	bcs.n	8002b78 <_ZN13STM32Hardware5flushEv+0x74>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	e007      	b.n	8002b88 <_ZN13STM32Hardware5flushEv+0x84>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	89fa      	ldrh	r2, [r7, #14]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f008 ff39 	bl	800ba18 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bbc:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002bbe:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <_ZN13STM32Hardware5flushEv+0xc8>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
      }
    }
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	2400088c 	.word	0x2400088c

08002bd0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
      int n = length;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be6:	bfa8      	it	ge
 8002be8:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002bec:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	bf28      	it	cs
 8002c00:	4613      	movcs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f00a fc11 	bl	800d440 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c34:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d00b      	beq.n	8002c56 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	18d1      	adds	r1, r2, r3
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	f00a fbf5 	bl	800d440 <memcpy>
      }

      flush();
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff ff54 	bl	8002b04 <_ZN13STM32Hardware5flushEv>
    }
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	f002 f8b8 	bl	8004de0 <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
      data(0)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe ffe2 	bl	8001c50 <_ZN3ros3MsgC1Ev>
 8002c8c:	4a07      	ldr	r2, [pc, #28]	; (8002cac <_ZN8std_msgs5Int64C1Ev+0x30>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	0800d928 	.word	0x0800d928

08002cb0 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ccc:	6979      	ldr	r1, [r7, #20]
 8002cce:	6838      	ldr	r0, [r7, #0]
 8002cd0:	4401      	add	r1, r0
 8002cd2:	b2d3      	uxtb	r3, r2
 8002cd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002cd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	0a02      	lsrs	r2, r0, #8
 8002ce4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002ce8:	0a0b      	lsrs	r3, r1, #8
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	3101      	adds	r1, #1
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	4401      	add	r1, r0
 8002cf2:	b2d3      	uxtb	r3, r2
 8002cf4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002cf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	0c02      	lsrs	r2, r0, #16
 8002d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d08:	0c0b      	lsrs	r3, r1, #16
 8002d0a:	6979      	ldr	r1, [r7, #20]
 8002d0c:	3102      	adds	r1, #2
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	4401      	add	r1, r0
 8002d12:	b2d3      	uxtb	r3, r2
 8002d14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	0e02      	lsrs	r2, r0, #24
 8002d24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d28:	0e0b      	lsrs	r3, r1, #24
 8002d2a:	6979      	ldr	r1, [r7, #20]
 8002d2c:	3103      	adds	r1, #3
 8002d2e:	6838      	ldr	r0, [r7, #0]
 8002d30:	4401      	add	r1, r0
 8002d32:	b2d3      	uxtb	r3, r2
 8002d34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8002d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	000a      	movs	r2, r1
 8002d44:	2300      	movs	r3, #0
 8002d46:	6979      	ldr	r1, [r7, #20]
 8002d48:	3104      	adds	r1, #4
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	4401      	add	r1, r0
 8002d4e:	b2d3      	uxtb	r3, r2
 8002d50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8002d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	0a0a      	lsrs	r2, r1, #8
 8002d60:	2300      	movs	r3, #0
 8002d62:	6979      	ldr	r1, [r7, #20]
 8002d64:	3105      	adds	r1, #5
 8002d66:	6838      	ldr	r0, [r7, #0]
 8002d68:	4401      	add	r1, r0
 8002d6a:	b2d3      	uxtb	r3, r2
 8002d6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8002d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	0c0a      	lsrs	r2, r1, #16
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6979      	ldr	r1, [r7, #20]
 8002d80:	3106      	adds	r1, #6
 8002d82:	6838      	ldr	r0, [r7, #0]
 8002d84:	4401      	add	r1, r0
 8002d86:	b2d3      	uxtb	r3, r2
 8002d88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8002d8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	0e0a      	lsrs	r2, r1, #24
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6979      	ldr	r1, [r7, #20]
 8002d9c:	3107      	adds	r1, #7
 8002d9e:	6838      	ldr	r0, [r7, #0]
 8002da0:	4401      	add	r1, r0
 8002da2:	b2d3      	uxtb	r3, r2
 8002da4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3308      	adds	r3, #8
 8002daa:	617b      	str	r3, [r7, #20]
      return offset;
 8002dac:	697b      	ldr	r3, [r7, #20]
    }
 8002dae:	4618      	mov	r0, r3
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002dba:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002dbe:	b0a3      	sub	sp, #140	; 0x8c
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6778      	str	r0, [r7, #116]	; 0x74
 8002dc4:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002dd8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002ddc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	461c      	mov	r4, r3
 8002dec:	4615      	mov	r5, r2
 8002dee:	ea40 0804 	orr.w	r8, r0, r4
 8002df2:	ea41 0905 	orr.w	r9, r1, r5
 8002df6:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dfa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002dfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e06:	4413      	add	r3, r2
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	469a      	mov	sl, r3
 8002e10:	4693      	mov	fp, r2
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002e1e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002e22:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002e26:	ea40 0402 	orr.w	r4, r0, r2
 8002e2a:	66bc      	str	r4, [r7, #104]	; 0x68
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e30:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002e34:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e38:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e40:	1c9a      	adds	r2, r3, #2
 8002e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e44:	4413      	add	r3, r2
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8002e4e:	667a      	str	r2, [r7, #100]	; 0x64
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e5c:	464c      	mov	r4, r9
 8002e5e:	0423      	lsls	r3, r4, #16
 8002e60:	4644      	mov	r4, r8
 8002e62:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002e66:	4644      	mov	r4, r8
 8002e68:	0422      	lsls	r2, r4, #16
 8002e6a:	ea40 0402 	orr.w	r4, r0, r2
 8002e6e:	65bc      	str	r4, [r7, #88]	; 0x58
 8002e70:	430b      	orrs	r3, r1
 8002e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e74:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002e78:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e7c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e84:	1cda      	adds	r2, r3, #3
 8002e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e88:	4413      	add	r3, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2200      	movs	r2, #0
 8002e90:	653b      	str	r3, [r7, #80]	; 0x50
 8002e92:	657a      	str	r2, [r7, #84]	; 0x54
 8002e94:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002e98:	4623      	mov	r3, r4
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ea4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ea8:	4623      	mov	r3, r4
 8002eaa:	4303      	orrs	r3, r0
 8002eac:	643b      	str	r3, [r7, #64]	; 0x40
 8002eae:	462b      	mov	r3, r5
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002eb8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ebc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec4:	1d1a      	adds	r2, r3, #4
 8002ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec8:	4413      	add	r3, r2
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2200      	movs	r2, #0
 8002ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002ede:	0023      	movs	r3, r4
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	ea40 0402 	orr.w	r4, r0, r2
 8002ee6:	633c      	str	r4, [r7, #48]	; 0x30
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34
 8002eec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002ef0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ef4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002efc:	1d5a      	adds	r2, r3, #5
 8002efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f00:	4413      	add	r3, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2200      	movs	r2, #0
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002f16:	0223      	lsls	r3, r4, #8
 8002f18:	2200      	movs	r2, #0
 8002f1a:	ea40 0402 	orr.w	r4, r0, r2
 8002f1e:	623c      	str	r4, [r7, #32]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
 8002f24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002f28:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002f2c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f34:	3306      	adds	r3, #6
 8002f36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f38:	4413      	add	r3, r2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2200      	movs	r2, #0
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	61fa      	str	r2, [r7, #28]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	69bc      	ldr	r4, [r7, #24]
 8002f4e:	0423      	lsls	r3, r4, #16
 8002f50:	2200      	movs	r2, #0
 8002f52:	ea40 0402 	orr.w	r4, r0, r2
 8002f56:	613c      	str	r4, [r7, #16]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f60:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002f64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f6c:	3307      	adds	r3, #7
 8002f6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	60fa      	str	r2, [r7, #12]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	68bc      	ldr	r4, [r7, #8]
 8002f86:	0623      	lsls	r3, r4, #24
 8002f88:	2200      	movs	r2, #0
 8002f8a:	ea40 0402 	orr.w	r4, r0, r2
 8002f8e:	603c      	str	r4, [r7, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002f98:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8002f9c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002fa0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002fa2:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8002fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002faa:	3308      	adds	r3, #8
 8002fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8002fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	378c      	adds	r7, #140	; 0x8c
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002fbe:	4770      	bx	lr

08002fc0 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	0800d85c 	.word	0x0800d85c

08002fdc <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	0800d86c 	.word	0x0800d86c

08002ff8 <_ZN6PUSHERC1Ev>:
#define PUSHER_D_IN2_PIN GPIO_PIN_15

#define PUSHER_SPEED 33.6


class PUSHER{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	e9c1 2300 	strd	r2, r3, [r1]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <main_function>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim8;
extern TIM_HandleTypeDef htim23;

void setup(void);
void main_function(){
 8003040:	b580      	push	{r7, lr}
 8003042:	b090      	sub	sp, #64	; 0x40
 8003044:	af00      	add	r7, sp, #0
	PUSHER pusher_A;
 8003046:	f107 0320 	add.w	r3, r7, #32
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ffd4 	bl	8002ff8 <_ZN6PUSHERC1Ev>
	PUSHER pusher_B;
 8003050:	463b      	mov	r3, r7
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ffd0 	bl	8002ff8 <_ZN6PUSHERC1Ev>
//	PUSHER pusher_C;
//	PUSHER pusher_D;
//	SCRIPT script_a;
	setup();
 8003058:	f000 f8d8 	bl	800320c <_Z5setupv>
	stm_setup();
 800305c:	f000 f814 	bl	8003088 <stm_setup>
	script_a.scriptrun = 1;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <main_function+0x44>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]
	while(1){
		pusher_A.distence();
 8003066:	f107 0320 	add.w	r3, r7, #32
 800306a:	4618      	mov	r0, r3
 800306c:	f000 ffdc 	bl	8004028 <_ZN6PUSHER8distenceEv>
		pusher_B.distence();
 8003070:	463b      	mov	r3, r7
 8003072:	4618      	mov	r0, r3
 8003074:	f000 ffd8 	bl	8004028 <_ZN6PUSHER8distenceEv>
		script();
 8003078:	f001 f826 	bl	80040c8 <_Z6scriptv>
		loop();
 800307c:	f000 f8d6 	bl	800322c <loop>
		pusher_A.distence();
 8003080:	e7f1      	b.n	8003066 <main_function+0x26>
 8003082:	bf00      	nop
 8003084:	24001e38 	.word	0x24001e38

08003088 <stm_setup>:

	}
}
void stm_setup(void){
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 800308c:	4806      	ldr	r0, [pc, #24]	; (80030a8 <stm_setup+0x20>)
 800308e:	f006 fffb 	bl	800a088 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8003092:	4806      	ldr	r0, [pc, #24]	; (80030ac <stm_setup+0x24>)
 8003094:	f006 fff8 	bl	800a088 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim23);//main Timer
 8003098:	4805      	ldr	r0, [pc, #20]	; (80030b0 <stm_setup+0x28>)
 800309a:	f006 fff5 	bl	800a088 <HAL_TIM_Base_Start_IT>
	DC_motor_init();
 800309e:	f7fd ff57 	bl	8000f50 <_Z13DC_motor_initv>
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	24000460 	.word	0x24000460
 80030ac:	240005dc 	.word	0x240005dc
 80030b0:	240006c0 	.word	0x240006c0

080030b4 <_Z8callbackRKN8std_msgs5Int64E>:

int count;

void callback(const std_msgs::Int64 &msg)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
   count = msg.data;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030c2:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 80030c4:	601a      	str	r2, [r3, #0]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	24000890 	.word	0x24000890

080030d8 <_Z13Error_Handlerv>:
ros::Subscriber<std_msgs::Int64> sub("counting", callback);


/* UART Communication */
void Error_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030dc:	b672      	cpsid	i
}
 80030de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030e0:	e7fe      	b.n	80030e0 <_Z13Error_Handlerv+0x8>
	...

080030e4 <_ZL19MX_USART1_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART1_UART_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030e8:	4b2c      	ldr	r3, [pc, #176]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80030ea:	4a2d      	ldr	r2, [pc, #180]	; (80031a0 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80030ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030ee:	4b2b      	ldr	r3, [pc, #172]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80030f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800310a:	220c      	movs	r2, #12
 800310c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800311c:	2200      	movs	r2, #0
 800311e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003120:	4b1e      	ldr	r3, [pc, #120]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003122:	2200      	movs	r2, #0
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003128:	2200      	movs	r2, #0
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800312c:	481b      	ldr	r0, [pc, #108]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800312e:	f008 fbe7 	bl	800b900 <HAL_UART_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003142:	f7ff ffc9 	bl	80030d8 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003146:	2100      	movs	r1, #0
 8003148:	4814      	ldr	r0, [pc, #80]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 800314a:	f00a f868 	bl	800d21e <HAL_UARTEx_SetTxFifoThreshold>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800315e:	f7ff ffbb 	bl	80030d8 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003162:	2100      	movs	r1, #0
 8003164:	480d      	ldr	r0, [pc, #52]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003166:	f00a f898 	bl	800d29a <HAL_UARTEx_SetRxFifoThreshold>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf14      	ite	ne
 8003170:	2301      	movne	r3, #1
 8003172:	2300      	moveq	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800317a:	f7ff ffad 	bl	80030d8 <_Z13Error_Handlerv>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800317e:	4807      	ldr	r0, [pc, #28]	; (800319c <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003180:	f00a f814 	bl	800d1ac <HAL_UARTEx_DisableFifoMode>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	bf14      	ite	ne
 800318a:	2301      	movne	r3, #1
 800318c:	2300      	moveq	r3, #0
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003194:	f7ff ffa0 	bl	80030d8 <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}
 800319c:	2400070c 	.word	0x2400070c
 80031a0:	40011000 	.word	0x40011000

080031a4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <HAL_UART_ErrorCallback+0x38>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10e      	bne.n	80031d2 <HAL_UART_ErrorCallback+0x2e>
    // set velocity 0 before uart reinitialization
    	count = 0;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_UART_ErrorCallback+0x3c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]

		HAL_UART_DeInit(&huart1);
 80031ba:	4808      	ldr	r0, [pc, #32]	; (80031dc <HAL_UART_ErrorCallback+0x38>)
 80031bc:	f008 fbf0 	bl	800b9a0 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 80031c0:	f7ff ff90 	bl	80030e4 <_ZL19MX_USART1_UART_Initv>
		nh.getHardware()->init();
 80031c4:	4807      	ldr	r0, [pc, #28]	; (80031e4 <HAL_UART_ErrorCallback+0x40>)
 80031c6:	f000 f95d 	bl	8003484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fc4f 	bl	8002a70 <_ZN13STM32Hardware4initEv>
    }
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	2400070c 	.word	0x2400070c
 80031e0:	24000890 	.word	0x24000890
 80031e4:	24000894 	.word	0x24000894

080031e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80031f0:	4805      	ldr	r0, [pc, #20]	; (8003208 <HAL_UART_TxCpltCallback+0x20>)
 80031f2:	f000 f947 	bl	8003484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fc83 	bl	8002b04 <_ZN13STM32Hardware5flushEv>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	24000894 	.word	0x24000894

0800320c <_Z5setupv>:

void setup(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
    nh.initNode();
 8003210:	4804      	ldr	r0, [pc, #16]	; (8003224 <_Z5setupv+0x18>)
 8003212:	f000 f943 	bl	800349c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8003216:	4904      	ldr	r1, [pc, #16]	; (8003228 <_Z5setupv+0x1c>)
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <_Z5setupv+0x18>)
 800321a:	f000 f968 	bl	80034ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	24000894 	.word	0x24000894
 8003228:	24001dd0 	.word	0x24001dd0

0800322c <loop>:
void loop(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <loop+0x10>)
 8003232:	f000 f987 	bl	8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	24000894 	.word	0x24000894

08003240 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d80d      	bhi.n	8003270 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	fa22 f103 	lsr.w	r1, r2, r3
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	b2ca      	uxtb	r2, r1
 8003266:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e7ee      	b.n	800324e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d811      	bhi.n	80032ba <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	440a      	add	r2, r1
 80032a0:	7812      	ldrb	r2, [r2, #0]
 80032a2:	4611      	mov	r1, r2
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	00d2      	lsls	r2, r2, #3
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3301      	adds	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e7ea      	b.n	8003290 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	0800d958 	.word	0x0800d958

080032e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ffe8 	bl	80032c8 <_ZN3ros15NodeHandleBase_C1Ev>
 80032f8:	4a47      	ldr	r2, [pc, #284]	; (8003418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fb94 	bl	8002a30 <_ZN13STM32HardwareC1Ev>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	f241 5314 	movw	r3, #5396	; 0x1514
 800331a:	4413      	add	r3, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f80b 	bl	8002338 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b18      	cmp	r3, #24
 800332a:	d80b      	bhi.n	8003344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	2200      	movs	r2, #0
 800333a:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3301      	adds	r3, #1
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e7f0      	b.n	8003326 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b18      	cmp	r3, #24
 800334c:	d80a      	bhi.n	8003364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003356:	2100      	movs	r1, #0
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	3301      	adds	r3, #1
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	e7f1      	b.n	8003348 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336e:	d20b      	bcs.n	8003388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	441a      	add	r2, r3
 8003376:	f241 0324 	movw	r3, #4132	; 0x1024
 800337a:	4413      	add	r3, r2
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	e7ef      	b.n	8003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003392:	d20b      	bcs.n	80033ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	441a      	add	r2, r3
 800339a:	f241 2324 	movw	r3, #4644	; 0x1224
 800339e:	4413      	add	r3, r2
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	e7ef      	b.n	800338c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b2:	461a      	mov	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c0:	461a      	mov	r2, r3
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ce:	461a      	mov	r2, r3
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033dc:	461a      	mov	r2, r3
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ea:	461a      	mov	r2, r3
 80033ec:	2300      	movs	r3, #0
 80033ee:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f8:	461a      	mov	r2, r3
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003406:	461a      	mov	r2, r3
 8003408:	2300      	movs	r3, #0
 800340a:	6213      	str	r3, [r2, #32]
  }
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	0800d914 	.word	0x0800d914

0800341c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	0800d940 	.word	0x0800d940

0800343c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ffe5 	bl	800341c <_ZN3ros11Subscriber_C1Ev>
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3310      	adds	r3, #16
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fc0d 	bl	8002c7c <_ZN8std_msgs5Int64C1Ev>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	621a      	str	r2, [r3, #32]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24
  {
    topic_ = topic_name;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]
  };
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	0800d8fc 	.word	0x0800d8fc

08003484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
  }
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fae1 	bl	8002a70 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b4:	461a      	mov	r2, r3
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c2:	461a      	mov	r2, r3
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d0:	461a      	mov	r2, r3
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034de:	461a      	mov	r2, r3
 80034e0:	2300      	movs	r3, #0
 80034e2:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b18      	cmp	r3, #24
 8003500:	dc19      	bgt.n	8003536 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800350a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10d      	bne.n	800352e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800351c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	605a      	str	r2, [r3, #4]
        return true;
 800352a:	2301      	movs	r3, #1
 800352c:	e004      	b.n	8003538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e7e2      	b.n	80034fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
      }
    }
    return false;
 8003536:	2300      	movs	r3, #0
  }
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fb87 	bl	8002c64 <_ZN13STM32Hardware4timeEv>
 8003556:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800355e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800356a:	4293      	cmp	r3, r2
 800356c:	d905      	bls.n	800357a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003580:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	429a      	cmp	r2, r3
 8003596:	d906      	bls.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800359e:	461a      	mov	r2, r3
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d015      	beq.n	80035de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fb54 	bl	8002c64 <_ZN13STM32Hardware4timeEv>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad2      	subs	r2, r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	bf8c      	ite	hi
 80035ce:	2301      	movhi	r3, #1
 80035d0:	2300      	movls	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80035d8:	f06f 0301 	mvn.w	r3, #1
 80035dc:	e226      	b.n	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fa60 	bl	8002aa8 <_ZN13STM32Hardware4readEv>
 80035e8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f2c0 81ff 	blt.w	80039f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f8:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4413      	add	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003606:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003610:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003614:	2b07      	cmp	r3, #7
 8003616:	d12d      	bne.n	8003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800361e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800362a:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	b2d1      	uxtb	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	441a      	add	r2, r3
 8003636:	f241 0324 	movw	r3, #4132	; 0x1024
 800363a:	4413      	add	r3, r2
 800363c:	460a      	mov	r2, r1
 800363e:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003646:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800364a:	3b01      	subs	r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003652:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1a0      	bne.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800366a:	461a      	mov	r2, r3
 800366c:	2308      	movs	r3, #8
 800366e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003672:	e798      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800367e:	2b00      	cmp	r3, #0
 8003680:	d130      	bne.n	80036e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2bff      	cmp	r3, #255	; 0xff
 8003686:	d112      	bne.n	80036ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003692:	3301      	adds	r3, #1
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800369a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3314      	adds	r3, #20
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036a8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80036ac:	e77b      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fad6 	bl	8002c64 <_ZN13STM32Hardware4timeEv>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	bf8c      	ite	hi
 80036c6:	2301      	movhi	r3, #1
 80036c8:	2300      	movls	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f43f af6a 	beq.w	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80036de:	f06f 0301 	mvn.w	r3, #1
 80036e2:	e1a3      	b.n	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ea:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d121      	bne.n	8003736 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2bfe      	cmp	r3, #254	; 0xfe
 80036f6:	d10b      	bne.n	8003710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fe:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003702:	3301      	adds	r3, #1
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800370a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800370e:	e74a      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003716:	461a      	mov	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003724:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003728:	2b00      	cmp	r3, #0
 800372a:	f47f af3c 	bne.w	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f980 	bl	8003a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003734:	e737      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800373c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003740:	2b02      	cmp	r3, #2
 8003742:	d120      	bne.n	8003786 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003758:	461a      	mov	r2, r3
 800375a:	2300      	movs	r3, #0
 800375c:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003766:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800376a:	3301      	adds	r3, #1
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003772:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800377c:	461a      	mov	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003784:	e70f      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003790:	2b03      	cmp	r3, #3
 8003792:	d118      	bne.n	80037c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	4413      	add	r3, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037aa:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037b4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037b8:	3301      	adds	r3, #1
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037c0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80037c4:	e6ef      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037cc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d11f      	bne.n	8003814 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037da:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80037de:	425a      	negs	r2, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	bf58      	it	pl
 80037e6:	4253      	negpl	r3, r2
 80037e8:	2bff      	cmp	r3, #255	; 0xff
 80037ea:	d10b      	bne.n	8003804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80037f6:	3301      	adds	r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037fe:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003802:	e6d0      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380a:	461a      	mov	r2, r3
 800380c:	2300      	movs	r3, #0
 800380e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8003812:	e6c8      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800381e:	2b05      	cmp	r3, #5
 8003820:	d119      	bne.n	8003856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003836:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800383a:	3301      	adds	r3, #1
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003842:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8003854:	e6a7      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8003860:	2b06      	cmp	r3, #6
 8003862:	d123      	bne.n	80038ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800386a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	4413      	add	r3, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800387a:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003884:	461a      	mov	r2, r3
 8003886:	2307      	movs	r3, #7
 8003888:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003892:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8003896:	2b00      	cmp	r3, #0
 8003898:	f47f ae85 	bne.w	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038a2:	461a      	mov	r2, r3
 80038a4:	2308      	movs	r3, #8
 80038a6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80038aa:	e67c      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	f47f ae75 	bne.w	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c2:	461a      	mov	r2, r3
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038d4:	425a      	negs	r2, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	bf58      	it	pl
 80038dc:	4253      	negpl	r3, r2
 80038de:	2bff      	cmp	r3, #255	; 0xff
 80038e0:	f47f ae61 	bne.w	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ea:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f89e 	bl	8003a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f8ba 	bl	8003a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003904:	461a      	mov	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003912:	461a      	mov	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	e085      	b.n	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003926:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800392a:	2b0a      	cmp	r3, #10
 800392c:	d108      	bne.n	8003940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	f241 0324 	movw	r3, #4132	; 0x1024
 8003934:	4413      	add	r3, r2
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f97b 	bl	8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800393e:	e632      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003946:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800394a:	2b06      	cmp	r3, #6
 800394c:	d112      	bne.n	8003974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	f241 5314 	movw	r3, #5396	; 0x1514
 8003954:	4413      	add	r3, r2
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	f241 0224 	movw	r2, #4132	; 0x1024
 800395c:	440a      	add	r2, r1
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7fe fe1e 	bl	80025a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8003972:	e618      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800397e:	2b0b      	cmp	r3, #11
 8003980:	d106      	bne.n	8003990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800398e:	e60a      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003996:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800399a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f43f adfc 	beq.w	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039b8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80039c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039cc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80039d0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80039da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	f241 0324 	movw	r3, #4132	; 0x1024
 80039e8:	440b      	add	r3, r1
 80039ea:	4619      	mov	r1, r3
 80039ec:	4790      	blx	r2
    while (true)
 80039ee:	e5da      	b.n	80035a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80039f0:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039f8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d014      	beq.n	8003a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d909      	bls.n	8003a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f80c 	bl	8003a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8003a2a:	2300      	movs	r3, #0
  }
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003a3c:	f107 030c 	add.w	r3, r7, #12
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe f915 	bl	8001c70 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f107 020c 	add.w	r2, r7, #12
 8003a50:	210a      	movs	r1, #10
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
    rt_time = hardware_.time();
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff f902 	bl	8002c64 <_ZN13STM32Hardware4timeEv>
 8003a60:	4602      	mov	r2, r0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a68:	615a      	str	r2, [r3, #20]
  }
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003a72:	b590      	push	{r4, r7, lr}
 8003a74:	b08b      	sub	sp, #44	; 0x2c
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe f9e6 	bl	8001e50 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	2b18      	cmp	r3, #24
 8003a8c:	dc63      	bgt.n	8003b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d056      	beq.n	8003b4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4608      	mov	r0, r1
 8003aee:	4798      	blx	r3
 8003af0:	4603      	mov	r3, r0
 8003af2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4608      	mov	r0, r1
 8003b1c:	4798      	blx	r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b26:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681c      	ldr	r4, [r3, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe febd 	bl	80028bc <_ZN3ros9Publisher15getEndpointTypeEv>
 8003b42:	4601      	mov	r1, r0
 8003b44:	f107 030c 	add.w	r3, r7, #12
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	e798      	b.n	8003a88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	2b18      	cmp	r3, #24
 8003b5e:	dc5f      	bgt.n	8003c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d053      	beq.n	8003c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b86:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b96:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003b9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3308      	adds	r3, #8
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	4798      	blx	r3
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4608      	mov	r0, r1
 8003bd8:	4798      	blx	r3
 8003bda:	4603      	mov	r3, r0
 8003bdc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003be2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681c      	ldr	r4, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bee:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bf2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3304      	adds	r3, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4798      	blx	r3
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	461a      	mov	r2, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	e79c      	b.n	8003b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8003c2c:	bf00      	nop
 8003c2e:	372c      	adds	r7, #44	; 0x2c
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}

08003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe f814 	bl	8001c70 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff f809 	bl	8002c64 <_ZN13STM32Hardware4timeEv>
 8003c52:	4602      	mov	r2, r0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	6839      	ldr	r1, [r7, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe f872 	bl	8001d50 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4915      	ldr	r1, [pc, #84]	; (8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003c72:	fba1 1303 	umull	r1, r3, r1, r3
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	4413      	add	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003c7c:	6939      	ldr	r1, [r7, #16]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003c82:	fba3 0302 	umull	r0, r3, r3, r2
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c8c:	fb00 f303 	mul.w	r3, r0, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	440b      	add	r3, r1
 8003c9a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003c9c:	f107 0308 	add.w	r3, r7, #8
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f8bf 	bl	8003e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3304      	adds	r3, #4
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe ffd8 	bl	8002c64 <_ZN13STM32Hardware4timeEv>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8003cc0:	bf00      	nop
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	10624dd3 	.word	0x10624dd3
 8003ccc:	000f4240 	.word	0x000f4240

08003cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b63      	cmp	r3, #99	; 0x63
 8003ce0:	dd0b      	ble.n	8003cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce8:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8003cec:	f083 0301 	eor.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e090      	b.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68f9      	ldr	r1, [r7, #12]
 8003d02:	f241 2324 	movw	r3, #4644	; 0x1224
 8003d06:	440b      	add	r3, r1
 8003d08:	3307      	adds	r3, #7
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	4790      	blx	r2
 8003d10:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d24:	22fe      	movs	r2, #254	; 0xfe
 8003d26:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d34:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d48:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d52:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8003d60:	4413      	add	r3, r2
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	b21b      	sxth	r3, r3
 8003d84:	121b      	asrs	r3, r3, #8
 8003d86:	b21b      	sxth	r3, r3
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003d98:	2305      	movs	r3, #5
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3306      	adds	r3, #6
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	dc0e      	bgt.n	8003dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	441a      	add	r2, r3
 8003dac:	f241 2324 	movw	r3, #4644	; 0x1224
 8003db0:	4413      	add	r3, r2
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e7eb      	b.n	8003d9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3307      	adds	r3, #7
 8003dc8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	425a      	negs	r2, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	bf58      	it	pl
 8003dd4:	4253      	negpl	r3, r2
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	6179      	str	r1, [r7, #20]
 8003dde:	43d2      	mvns	r2, r2
 8003de0:	b2d1      	uxtb	r1, r2
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	441a      	add	r2, r3
 8003de6:	f241 2324 	movw	r3, #4644	; 0x1224
 8003dea:	4413      	add	r3, r2
 8003dec:	460a      	mov	r2, r1
 8003dee:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df6:	dc0b      	bgt.n	8003e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1d18      	adds	r0, r3, #4
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	f241 2324 	movw	r3, #4644	; 0x1224
 8003e02:	4413      	add	r3, r2
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4619      	mov	r1, r3
 8003e08:	f7fe fee2 	bl	8002bd0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	e005      	b.n	8003e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003e10:	4904      	ldr	r1, [pc, #16]	; (8003e24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f84c 	bl	8003eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	0800d890 	.word	0x0800d890

08003e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe ff14 	bl	8002c64 <_ZN13STM32Hardware4timeEv>
 8003e3c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4917      	ldr	r1, [pc, #92]	; (8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003e46:	fba1 1303 	umull	r1, r3, r1, r3
 8003e4a:	099b      	lsrs	r3, r3, #6
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e56:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4b11      	ldr	r3, [pc, #68]	; (8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8003e60:	fba3 0302 	umull	r0, r3, r3, r2
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e6a:	fb00 f303 	mul.w	r3, r0, r3
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	4a0d      	ldr	r2, [pc, #52]	; (8003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	1aca      	subs	r2, r1, r3
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8003e7a:	4413      	add	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e82:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e8a:	4413      	add	r3, r2
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	f241 021c 	movw	r2, #4124	; 0x101c
 8003e92:	440a      	add	r2, r1
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc fbc4 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	10624dd3 	.word	0x10624dd3
 8003ea8:	000f4240 	.word	0x000f4240
 8003eac:	3b9aca00 	.word	0x3b9aca00

08003eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	2103      	movs	r1, #3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f804 	bl	8003ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003eda:	f107 0314 	add.w	r3, r7, #20
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe f97a 	bl	80021d8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003ee4:	7afb      	ldrb	r3, [r7, #11]
 8003ee6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f107 0214 	add.w	r2, r7, #20
 8003ef6:	2107      	movs	r1, #7
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	4798      	blx	r3
  }
 8003efc:	bf00      	nop
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_Z41__static_initialization_and_destruction_0ii>:
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10d      	bne.n	8003f30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <_Z41__static_initialization_and_destruction_0ii+0x2c>
ros::NodeHandle nh;
 8003f1e:	4806      	ldr	r0, [pc, #24]	; (8003f38 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003f20:	f7ff f9e2 	bl	80032e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8003f24:	2301      	movs	r3, #1
 8003f26:	4a05      	ldr	r2, [pc, #20]	; (8003f3c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003f28:	4905      	ldr	r1, [pc, #20]	; (8003f40 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003f2a:	4806      	ldr	r0, [pc, #24]	; (8003f44 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003f2c:	f7ff fa86 	bl	800343c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	24000894 	.word	0x24000894
 8003f3c:	080030b5 	.word	0x080030b5
 8003f40:	0800d8cc 	.word	0x0800d8cc
 8003f44:	24001dd0 	.word	0x24001dd0

08003f48 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3310      	adds	r3, #16
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe ff2e 	bl	8002dba <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	3210      	adds	r2, #16
 8003f66:	4610      	mov	r0, r2
 8003f68:	4798      	blx	r3
  }
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3310      	adds	r3, #16
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff f812 	bl	8002fc0 <_ZN8std_msgs5Int647getTypeEv>
 8003f9c:	4603      	mov	r3, r0
  }
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3310      	adds	r3, #16
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff f812 	bl	8002fdc <_ZN8std_msgs5Int646getMD5Ev>
 8003fb8:	4603      	mov	r3, r0
  }
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
    return configured_;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd0:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <_GLOBAL__sub_I_main_function>:
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7ff ff8b 	bl	8003f04 <_Z41__static_initialization_and_destruction_0ii>
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_Z13script_pusherdd>:
PUSHER pusher_A;
PUSHER pusher_B;
//PUSHER pusher_C;
//PUSHER pusher_D;

void script_pusher(double hight_a,double hight_b){
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ffa:	ed87 1b00 	vstr	d1, [r7]
	pusher_A.state = hight_a;
 8003ffe:	4908      	ldr	r1, [pc, #32]	; (8004020 <_Z13script_pusherdd+0x30>)
 8004000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004004:	e9c1 2300 	strd	r2, r3, [r1]
	pusher_B.state = hight_b;
 8004008:	4906      	ldr	r1, [pc, #24]	; (8004024 <_Z13script_pusherdd+0x34>)
 800400a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800400e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	24001df8 	.word	0x24001df8
 8004024:	24001e18 	.word	0x24001e18

08004028 <_ZN6PUSHER8distenceEv>:

void PUSHER::distence(){
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

	pusher_A.d = (pusher_A.state - pusher_A.p_state)*10;
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <_ZN6PUSHER8distenceEv+0x50>)
 8004032:	ed93 6b00 	vldr	d6, [r3]
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <_ZN6PUSHER8distenceEv+0x50>)
 8004038:	ed93 7b02 	vldr	d7, [r3, #8]
 800403c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004040:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004044:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <_ZN6PUSHER8distenceEv+0x50>)
 800404a:	ed83 7b04 	vstr	d7, [r3, #16]
	pusher_B.d = (pusher_B.state - pusher_B.p_state)*10;
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <_ZN6PUSHER8distenceEv+0x54>)
 8004050:	ed93 6b00 	vldr	d6, [r3]
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <_ZN6PUSHER8distenceEv+0x54>)
 8004056:	ed93 7b02 	vldr	d7, [r3, #8]
 800405a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800405e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004062:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <_ZN6PUSHER8distenceEv+0x54>)
 8004068:	ed83 7b04 	vstr	d7, [r3, #16]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	24001df8 	.word	0x24001df8
 800407c:	24001e18 	.word	0x24001e18

08004080 <_Z41__static_initialization_and_destruction_0ii>:
//	if(pusher_D.d ==0){
//		HAL_GPIO_WritePin(PUSHER_D_IN1_PORT, PUSHER_D_IN1_PIN, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(PUSHER_D_IN2_PORT, PUSHER_D_IN2_PIN, GPIO_PIN_RESET);
//
//	}
}
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10a      	bne.n	80040a6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004096:	4293      	cmp	r3, r2
 8004098:	d105      	bne.n	80040a6 <_Z41__static_initialization_and_destruction_0ii+0x26>
PUSHER pusher_A;
 800409a:	4805      	ldr	r0, [pc, #20]	; (80040b0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800409c:	f7fe ffac 	bl	8002ff8 <_ZN6PUSHERC1Ev>
PUSHER pusher_B;
 80040a0:	4804      	ldr	r0, [pc, #16]	; (80040b4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80040a2:	f7fe ffa9 	bl	8002ff8 <_ZN6PUSHERC1Ev>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	24001df8 	.word	0x24001df8
 80040b4:	24001e18 	.word	0x24001e18

080040b8 <_GLOBAL__sub_I_pusher_A>:
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80040c0:	2001      	movs	r0, #1
 80040c2:	f7ff ffdd 	bl	8004080 <_Z41__static_initialization_and_destruction_0ii>
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_Z6scriptv>:
SCRIPT script_a;
//extern PUSHER pusher_A;
//extern PUSHER pusher_B;
//extern PUSHER pusher_C;
//extern PUSHER pusher_D;
void script(){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
	if(script_a.scriptrun == 1){
 80040cc:	4b6e      	ldr	r3, [pc, #440]	; (8004288 <_Z6scriptv+0x1c0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	f040 80d2 	bne.w	800427a <_Z6scriptv+0x1b2>
		if(delay_start == 0){
 80040d6:	4b6d      	ldr	r3, [pc, #436]	; (800428c <_Z6scriptv+0x1c4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d110      	bne.n	8004100 <_Z6scriptv+0x38>
			script_wheel(5,0,0);
 80040de:	ed9f 2b68 	vldr	d2, [pc, #416]	; 8004280 <_Z6scriptv+0x1b8>
 80040e2:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8004280 <_Z6scriptv+0x1b8>
 80040e6:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 80040ea:	f000 f8d3 	bl	8004294 <_Z12script_wheelddd>
			script_pusher(5,5);
 80040ee:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80040f2:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 80040f6:	f7ff ff7b 	bl	8003ff0 <_Z13script_pusherdd>
			delay_start = 1;
 80040fa:	4b64      	ldr	r3, [pc, #400]	; (800428c <_Z6scriptv+0x1c4>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
		}
		if(delay == 250 && delay_start == 1){
 8004100:	4b63      	ldr	r3, [pc, #396]	; (8004290 <_Z6scriptv+0x1c8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2bfa      	cmp	r3, #250	; 0xfa
 8004106:	d10c      	bne.n	8004122 <_Z6scriptv+0x5a>
 8004108:	4b60      	ldr	r3, [pc, #384]	; (800428c <_Z6scriptv+0x1c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d108      	bne.n	8004122 <_Z6scriptv+0x5a>
//			script_wheel(0,0,0);
			script_pusher(11,5);
 8004110:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004114:	eeb2 0b06 	vmov.f64	d0, #38	; 0x41300000  11.0
 8004118:	f7ff ff6a 	bl	8003ff0 <_Z13script_pusherdd>
			delay_start = 2;
 800411c:	4b5b      	ldr	r3, [pc, #364]	; (800428c <_Z6scriptv+0x1c4>)
 800411e:	2202      	movs	r2, #2
 8004120:	601a      	str	r2, [r3, #0]
		}
		if(delay == 550 && delay_start == 2){
 8004122:	4b5b      	ldr	r3, [pc, #364]	; (8004290 <_Z6scriptv+0x1c8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f240 2226 	movw	r2, #550	; 0x226
 800412a:	4293      	cmp	r3, r2
 800412c:	d10e      	bne.n	800414c <_Z6scriptv+0x84>
 800412e:	4b57      	ldr	r3, [pc, #348]	; (800428c <_Z6scriptv+0x1c4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d10a      	bne.n	800414c <_Z6scriptv+0x84>
			script_wheel(20,0,0);
 8004136:	ed9f 2b52 	vldr	d2, [pc, #328]	; 8004280 <_Z6scriptv+0x1b8>
 800413a:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8004280 <_Z6scriptv+0x1b8>
 800413e:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8004142:	f000 f8a7 	bl	8004294 <_Z12script_wheelddd>
			delay_start = 3;
 8004146:	4b51      	ldr	r3, [pc, #324]	; (800428c <_Z6scriptv+0x1c4>)
 8004148:	2203      	movs	r2, #3
 800414a:	601a      	str	r2, [r3, #0]
		}
		if(delay == 700 && delay_start == 3){
 800414c:	4b50      	ldr	r3, [pc, #320]	; (8004290 <_Z6scriptv+0x1c8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004154:	d114      	bne.n	8004180 <_Z6scriptv+0xb8>
 8004156:	4b4d      	ldr	r3, [pc, #308]	; (800428c <_Z6scriptv+0x1c4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d110      	bne.n	8004180 <_Z6scriptv+0xb8>
			script_wheel(10,0,0);
 800415e:	ed9f 2b48 	vldr	d2, [pc, #288]	; 8004280 <_Z6scriptv+0x1b8>
 8004162:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8004280 <_Z6scriptv+0x1b8>
 8004166:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 800416a:	f000 f893 	bl	8004294 <_Z12script_wheelddd>
			script_pusher(-2,5);
 800416e:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8004172:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004176:	f7ff ff3b 	bl	8003ff0 <_Z13script_pusherdd>
			delay_start = 4;
 800417a:	4b44      	ldr	r3, [pc, #272]	; (800428c <_Z6scriptv+0x1c4>)
 800417c:	2204      	movs	r2, #4
 800417e:	601a      	str	r2, [r3, #0]
		}
		if(delay == 900 && delay_start == 4){
 8004180:	4b43      	ldr	r3, [pc, #268]	; (8004290 <_Z6scriptv+0x1c8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004188:	d114      	bne.n	80041b4 <_Z6scriptv+0xec>
 800418a:	4b40      	ldr	r3, [pc, #256]	; (800428c <_Z6scriptv+0x1c4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b04      	cmp	r3, #4
 8004190:	d110      	bne.n	80041b4 <_Z6scriptv+0xec>
			script_wheel(0,0,0);
 8004192:	ed9f 2b3b 	vldr	d2, [pc, #236]	; 8004280 <_Z6scriptv+0x1b8>
 8004196:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8004280 <_Z6scriptv+0x1b8>
 800419a:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8004280 <_Z6scriptv+0x1b8>
 800419e:	f000 f879 	bl	8004294 <_Z12script_wheelddd>
			script_pusher(-2,10);
 80041a2:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 80041a6:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 80041aa:	f7ff ff21 	bl	8003ff0 <_Z13script_pusherdd>
			delay_start = 5;
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <_Z6scriptv+0x1c4>)
 80041b0:	2205      	movs	r2, #5
 80041b2:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1050 && delay_start == 5){/*-50*/
 80041b4:	4b36      	ldr	r3, [pc, #216]	; (8004290 <_Z6scriptv+0x1c8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f240 421a 	movw	r2, #1050	; 0x41a
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10e      	bne.n	80041de <_Z6scriptv+0x116>
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <_Z6scriptv+0x1c4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d10a      	bne.n	80041de <_Z6scriptv+0x116>
//			script_pusher(-2,10);
			script_wheel(10,0,0);
 80041c8:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8004280 <_Z6scriptv+0x1b8>
 80041cc:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8004280 <_Z6scriptv+0x1b8>
 80041d0:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80041d4:	f000 f85e 	bl	8004294 <_Z12script_wheelddd>
			delay_start = 6;
 80041d8:	4b2c      	ldr	r3, [pc, #176]	; (800428c <_Z6scriptv+0x1c4>)
 80041da:	2206      	movs	r2, #6
 80041dc:	601a      	str	r2, [r3, #0]
		}
		if(delay == 1250 && delay_start == 6){/*-50*/
 80041de:	4b2c      	ldr	r3, [pc, #176]	; (8004290 <_Z6scriptv+0x1c8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10c      	bne.n	8004204 <_Z6scriptv+0x13c>
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <_Z6scriptv+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b06      	cmp	r3, #6
 80041f0:	d108      	bne.n	8004204 <_Z6scriptv+0x13c>
			script_pusher(10,0);
 80041f2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004280 <_Z6scriptv+0x1b8>
 80041f6:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80041fa:	f7ff fef9 	bl	8003ff0 <_Z13script_pusherdd>
			delay_start = 7;
 80041fe:	4b23      	ldr	r3, [pc, #140]	; (800428c <_Z6scriptv+0x1c4>)
 8004200:	2207      	movs	r2, #7
 8004202:	601a      	str	r2, [r3, #0]
//		if(delay == 1700 && delay_start == 6){
//			script_wheel(0,0,0);
//			script_pusher(10,0);
//			delay_start = 7;
//		}
		if(delay == 1800 && delay_start == 7){
 8004204:	4b22      	ldr	r3, [pc, #136]	; (8004290 <_Z6scriptv+0x1c8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800420c:	d114      	bne.n	8004238 <_Z6scriptv+0x170>
 800420e:	4b1f      	ldr	r3, [pc, #124]	; (800428c <_Z6scriptv+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b07      	cmp	r3, #7
 8004214:	d110      	bne.n	8004238 <_Z6scriptv+0x170>
			script_wheel(10,0,0);
 8004216:	ed9f 2b1a 	vldr	d2, [pc, #104]	; 8004280 <_Z6scriptv+0x1b8>
 800421a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004280 <_Z6scriptv+0x1b8>
 800421e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8004222:	f000 f837 	bl	8004294 <_Z12script_wheelddd>
			script_pusher(-2,10);
 8004226:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0
 800422a:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 800422e:	f7ff fedf 	bl	8003ff0 <_Z13script_pusherdd>
			delay_start = 8;
 8004232:	4b16      	ldr	r3, [pc, #88]	; (800428c <_Z6scriptv+0x1c4>)
 8004234:	2208      	movs	r2, #8
 8004236:	601a      	str	r2, [r3, #0]
//		}
//		if(delay == 2900 && delay_start == 9){
//			script_wheel(10,0,0);
//			delay_start = 10;
//		}
		if(delay == 2500 && delay_start == 8){
 8004238:	4b15      	ldr	r3, [pc, #84]	; (8004290 <_Z6scriptv+0x1c8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004240:	4293      	cmp	r3, r2
 8004242:	d11a      	bne.n	800427a <_Z6scriptv+0x1b2>
 8004244:	4b11      	ldr	r3, [pc, #68]	; (800428c <_Z6scriptv+0x1c4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d116      	bne.n	800427a <_Z6scriptv+0x1b2>
			script_wheel(0,0,0);
 800424c:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8004280 <_Z6scriptv+0x1b8>
 8004250:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8004280 <_Z6scriptv+0x1b8>
 8004254:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8004280 <_Z6scriptv+0x1b8>
 8004258:	f000 f81c 	bl	8004294 <_Z12script_wheelddd>
			script_pusher(-2,0);
 800425c:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8004280 <_Z6scriptv+0x1b8>
 8004260:	eeb8 0b00 	vmov.f64	d0, #128	; 0xc0000000 -2.0
 8004264:	f7ff fec4 	bl	8003ff0 <_Z13script_pusherdd>
			delay_start = 0;
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <_Z6scriptv+0x1c4>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
			script_a.scriptrun = 0;
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <_Z6scriptv+0x1c0>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
			delay = 0;
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <_Z6scriptv+0x1c8>)
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
		}
	}

}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
	...
 8004288:	24001e38 	.word	0x24001e38
 800428c:	24000278 	.word	0x24000278
 8004290:	2400027c 	.word	0x2400027c

08004294 <_Z12script_wheelddd>:
void script_wheel(double s_Vx,double s_Vy,double s_w){
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	ed87 0b04 	vstr	d0, [r7, #16]
 800429e:	ed87 1b02 	vstr	d1, [r7, #8]
 80042a2:	ed87 2b00 	vstr	d2, [r7]
	Vx = s_Vx;
 80042a6:	490a      	ldr	r1, [pc, #40]	; (80042d0 <_Z12script_wheelddd+0x3c>)
 80042a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042ac:	e9c1 2300 	strd	r2, r3, [r1]
	Vy = s_Vy;
 80042b0:	4908      	ldr	r1, [pc, #32]	; (80042d4 <_Z12script_wheelddd+0x40>)
 80042b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b6:	e9c1 2300 	strd	r2, r3, [r1]
	W = s_w;
 80042ba:	4907      	ldr	r1, [pc, #28]	; (80042d8 <_Z12script_wheelddd+0x44>)
 80042bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042c0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	24000260 	.word	0x24000260
 80042d4:	24000268 	.word	0x24000268
 80042d8:	24000270 	.word	0x24000270

080042dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <HAL_MspInit+0x3c>)
 80042e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042e8:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <HAL_MspInit+0x3c>)
 80042ea:	f043 0302 	orr.w	r3, r3, #2
 80042ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_MspInit+0x3c>)
 80042f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004300:	2200      	movs	r2, #0
 8004302:	2100      	movs	r1, #0
 8004304:	2005      	movs	r0, #5
 8004306:	f000 fe52 	bl	8004fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800430a:	2005      	movs	r0, #5
 800430c:	f000 fe69 	bl	8004fe2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	58024400 	.word	0x58024400

0800431c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a43      	ldr	r2, [pc, #268]	; (8004438 <HAL_TIM_Base_MspInit+0x11c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d12f      	bne.n	800438e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800432e:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 8004330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004334:	4a41      	ldr	r2, [pc, #260]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800433e:	4b3f      	ldr	r3, [pc, #252]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 8004340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	2018      	movs	r0, #24
 8004352:	f000 fe2c 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004356:	2018      	movs	r0, #24
 8004358:	f000 fe43 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800435c:	2200      	movs	r2, #0
 800435e:	2100      	movs	r1, #0
 8004360:	2019      	movs	r0, #25
 8004362:	f000 fe24 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004366:	2019      	movs	r0, #25
 8004368:	f000 fe3b 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2100      	movs	r1, #0
 8004370:	201a      	movs	r0, #26
 8004372:	f000 fe1c 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004376:	201a      	movs	r0, #26
 8004378:	f000 fe33 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800437c:	2200      	movs	r2, #0
 800437e:	2100      	movs	r1, #0
 8004380:	201b      	movs	r0, #27
 8004382:	f000 fe14 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004386:	201b      	movs	r0, #27
 8004388:	f000 fe2b 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 800438c:	e050      	b.n	8004430 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_TIM_Base_MspInit+0x124>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d12f      	bne.n	80043f8 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004398:	4b28      	ldr	r3, [pc, #160]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 800439a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800439e:	4a27      	ldr	r2, [pc, #156]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 80043aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2100      	movs	r1, #0
 80043ba:	202b      	movs	r0, #43	; 0x2b
 80043bc:	f000 fdf7 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80043c0:	202b      	movs	r0, #43	; 0x2b
 80043c2:	f000 fe0e 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2100      	movs	r1, #0
 80043ca:	202c      	movs	r0, #44	; 0x2c
 80043cc:	f000 fdef 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80043d0:	202c      	movs	r0, #44	; 0x2c
 80043d2:	f000 fe06 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80043d6:	2200      	movs	r2, #0
 80043d8:	2100      	movs	r1, #0
 80043da:	202d      	movs	r0, #45	; 0x2d
 80043dc:	f000 fde7 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80043e0:	202d      	movs	r0, #45	; 0x2d
 80043e2:	f000 fdfe 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2100      	movs	r1, #0
 80043ea:	202e      	movs	r0, #46	; 0x2e
 80043ec:	f000 fddf 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80043f0:	202e      	movs	r0, #46	; 0x2e
 80043f2:	f000 fdf6 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
}
 80043f6:	e01b      	b.n	8004430 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM23)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a11      	ldr	r2, [pc, #68]	; (8004444 <HAL_TIM_Base_MspInit+0x128>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d116      	bne.n	8004430 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 8004404:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004408:	4a0c      	ldr	r2, [pc, #48]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800440e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <HAL_TIM_Base_MspInit+0x120>)
 8004414:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	2100      	movs	r1, #0
 8004424:	20a1      	movs	r0, #161	; 0xa1
 8004426:	f000 fdc2 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800442a:	20a1      	movs	r0, #161	; 0xa1
 800442c:	f000 fdd9 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
}
 8004430:	bf00      	nop
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40010000 	.word	0x40010000
 800443c:	58024400 	.word	0x58024400
 8004440:	40010400 	.word	0x40010400
 8004444:	4000e000 	.word	0x4000e000

08004448 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b090      	sub	sp, #64	; 0x40
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004468:	d14e      	bne.n	8004508 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800446a:	4b77      	ldr	r3, [pc, #476]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800446c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004470:	4a75      	ldr	r2, [pc, #468]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800447a:	4b73      	ldr	r3, [pc, #460]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800447c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
 8004486:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004488:	4b6f      	ldr	r3, [pc, #444]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800448a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800448e:	4a6e      	ldr	r2, [pc, #440]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004498:	4b6b      	ldr	r3, [pc, #428]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800449a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a6:	4b68      	ldr	r3, [pc, #416]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 80044a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ac:	4a66      	ldr	r2, [pc, #408]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 80044ae:	f043 0302 	orr.w	r3, r3, #2
 80044b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044b6:	4b64      	ldr	r3, [pc, #400]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 80044b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80044c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ca:	2302      	movs	r3, #2
 80044cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d2:	2300      	movs	r3, #0
 80044d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044d6:	2301      	movs	r3, #1
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044de:	4619      	mov	r1, r3
 80044e0:	485a      	ldr	r0, [pc, #360]	; (800464c <HAL_TIM_Encoder_MspInit+0x204>)
 80044e2:	f003 f825 	bl	8007530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044e6:	2308      	movs	r3, #8
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ea:	2302      	movs	r3, #2
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044f6:	2301      	movs	r3, #1
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044fe:	4619      	mov	r1, r3
 8004500:	4853      	ldr	r0, [pc, #332]	; (8004650 <HAL_TIM_Encoder_MspInit+0x208>)
 8004502:	f003 f815 	bl	8007530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8004506:	e09b      	b.n	8004640 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM3)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a51      	ldr	r2, [pc, #324]	; (8004654 <HAL_TIM_Encoder_MspInit+0x20c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d12e      	bne.n	8004570 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004512:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004514:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004518:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800451a:	f043 0302 	orr.w	r3, r3, #2
 800451e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004522:	4b49      	ldr	r3, [pc, #292]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	61fb      	str	r3, [r7, #28]
 800452e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004530:	4b45      	ldr	r3, [pc, #276]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004536:	4a44      	ldr	r2, [pc, #272]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004540:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800454e:	2330      	movs	r3, #48	; 0x30
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004552:	2302      	movs	r3, #2
 8004554:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004556:	2300      	movs	r3, #0
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455a:	2300      	movs	r3, #0
 800455c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800455e:	2302      	movs	r3, #2
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004566:	4619      	mov	r1, r3
 8004568:	4839      	ldr	r0, [pc, #228]	; (8004650 <HAL_TIM_Encoder_MspInit+0x208>)
 800456a:	f002 ffe1 	bl	8007530 <HAL_GPIO_Init>
}
 800456e:	e067      	b.n	8004640 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a38      	ldr	r2, [pc, #224]	; (8004658 <HAL_TIM_Encoder_MspInit+0x210>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d12f      	bne.n	80045da <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800457a:	4b33      	ldr	r3, [pc, #204]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800457c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004580:	4a31      	ldr	r2, [pc, #196]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004582:	f043 0304 	orr.w	r3, r3, #4
 8004586:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800458a:	4b2f      	ldr	r3, [pc, #188]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800458c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800459a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800459e:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 80045a0:	f043 0308 	orr.w	r3, r3, #8
 80045a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 80045aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80045b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c4:	2300      	movs	r3, #0
 80045c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045c8:	2302      	movs	r3, #2
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d0:	4619      	mov	r1, r3
 80045d2:	4822      	ldr	r0, [pc, #136]	; (800465c <HAL_TIM_Encoder_MspInit+0x214>)
 80045d4:	f002 ffac 	bl	8007530 <HAL_GPIO_Init>
}
 80045d8:	e032      	b.n	8004640 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a20      	ldr	r2, [pc, #128]	; (8004660 <HAL_TIM_Encoder_MspInit+0x218>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d12d      	bne.n	8004640 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045e4:	4b18      	ldr	r3, [pc, #96]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 80045e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 80045ec:	f043 0308 	orr.w	r3, r3, #8
 80045f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045f4:	4b14      	ldr	r3, [pc, #80]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 80045f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004602:	4b11      	ldr	r3, [pc, #68]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004608:	4a0f      	ldr	r2, [pc, #60]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004612:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <HAL_TIM_Encoder_MspInit+0x200>)
 8004614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004620:	2303      	movs	r3, #3
 8004622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004624:	2302      	movs	r3, #2
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	2300      	movs	r3, #0
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462c:	2300      	movs	r3, #0
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004630:	2302      	movs	r3, #2
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004638:	4619      	mov	r1, r3
 800463a:	4804      	ldr	r0, [pc, #16]	; (800464c <HAL_TIM_Encoder_MspInit+0x204>)
 800463c:	f002 ff78 	bl	8007530 <HAL_GPIO_Init>
}
 8004640:	bf00      	nop
 8004642:	3740      	adds	r7, #64	; 0x40
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	58024400 	.word	0x58024400
 800464c:	58020000 	.word	0x58020000
 8004650:	58020400 	.word	0x58020400
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	58020c00 	.word	0x58020c00
 8004660:	40000c00 	.word	0x40000c00

08004664 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_TIM_PWM_MspInit+0x74>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d117      	bne.n	80046a6 <HAL_TIM_PWM_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_TIM_PWM_MspInit+0x78>)
 8004678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800467c:	4a17      	ldr	r2, [pc, #92]	; (80046dc <HAL_TIM_PWM_MspInit+0x78>)
 800467e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004682:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <HAL_TIM_PWM_MspInit+0x78>)
 8004688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004694:	2200      	movs	r2, #0
 8004696:	2100      	movs	r1, #0
 8004698:	202b      	movs	r0, #43	; 0x2b
 800469a:	f000 fc88 	bl	8004fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800469e:	202b      	movs	r0, #43	; 0x2b
 80046a0:	f000 fc9f 	bl	8004fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80046a4:	e013      	b.n	80046ce <HAL_TIM_PWM_MspInit+0x6a>
  else if(htim_pwm->Instance==TIM15)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <HAL_TIM_PWM_MspInit+0x7c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10e      	bne.n	80046ce <HAL_TIM_PWM_MspInit+0x6a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <HAL_TIM_PWM_MspInit+0x78>)
 80046b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046b6:	4a09      	ldr	r2, [pc, #36]	; (80046dc <HAL_TIM_PWM_MspInit+0x78>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_TIM_PWM_MspInit+0x78>)
 80046c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40001800 	.word	0x40001800
 80046dc:	58024400 	.word	0x58024400
 80046e0:	40014000 	.word	0x40014000

080046e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ec:	f107 0314 	add.w	r3, r7, #20
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a25      	ldr	r2, [pc, #148]	; (8004798 <HAL_TIM_MspPostInit+0xb4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d120      	bne.n	8004748 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004706:	4b25      	ldr	r3, [pc, #148]	; (800479c <HAL_TIM_MspPostInit+0xb8>)
 8004708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800470c:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_TIM_MspPostInit+0xb8>)
 800470e:	f043 0302 	orr.w	r3, r3, #2
 8004712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004716:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_TIM_MspPostInit+0xb8>)
 8004718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	693b      	ldr	r3, [r7, #16]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    PB15     ------> TIM12_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004724:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004736:	2302      	movs	r3, #2
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	4619      	mov	r1, r3
 8004740:	4817      	ldr	r0, [pc, #92]	; (80047a0 <HAL_TIM_MspPostInit+0xbc>)
 8004742:	f002 fef5 	bl	8007530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004746:	e023      	b.n	8004790 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM15)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <HAL_TIM_MspPostInit+0xc0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d11e      	bne.n	8004790 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_TIM_MspPostInit+0xb8>)
 8004754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004758:	4a10      	ldr	r2, [pc, #64]	; (800479c <HAL_TIM_MspPostInit+0xb8>)
 800475a:	f043 0310 	orr.w	r3, r3, #16
 800475e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004762:	4b0e      	ldr	r3, [pc, #56]	; (800479c <HAL_TIM_MspPostInit+0xb8>)
 8004764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004770:	2360      	movs	r3, #96	; 0x60
 8004772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800477c:	2300      	movs	r3, #0
 800477e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004780:	2304      	movs	r3, #4
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004784:	f107 0314 	add.w	r3, r7, #20
 8004788:	4619      	mov	r1, r3
 800478a:	4807      	ldr	r0, [pc, #28]	; (80047a8 <HAL_TIM_MspPostInit+0xc4>)
 800478c:	f002 fed0 	bl	8007530 <HAL_GPIO_Init>
}
 8004790:	bf00      	nop
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40001800 	.word	0x40001800
 800479c:	58024400 	.word	0x58024400
 80047a0:	58020400 	.word	0x58020400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	58021000 	.word	0x58021000

080047ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b0b6      	sub	sp, #216	; 0xd8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047c4:	f107 0310 	add.w	r3, r7, #16
 80047c8:	22b4      	movs	r2, #180	; 0xb4
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f008 fe45 	bl	800d45c <memset>
  if(huart->Instance==USART1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a54      	ldr	r2, [pc, #336]	; (8004928 <HAL_UART_MspInit+0x17c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	f040 80a0 	bne.w	800491e <HAL_UART_MspInit+0x172>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80047de:	2301      	movs	r3, #1
 80047e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047e8:	f107 0310 	add.w	r3, r7, #16
 80047ec:	4618      	mov	r0, r3
 80047ee:	f004 f8d7 	bl	80089a0 <HAL_RCCEx_PeriphCLKConfig>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80047f8:	f7fd fa14 	bl	8001c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047fc:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_UART_MspInit+0x180>)
 80047fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004802:	4a4a      	ldr	r2, [pc, #296]	; (800492c <HAL_UART_MspInit+0x180>)
 8004804:	f043 0310 	orr.w	r3, r3, #16
 8004808:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800480c:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_UART_MspInit+0x180>)
 800480e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800481a:	4b44      	ldr	r3, [pc, #272]	; (800492c <HAL_UART_MspInit+0x180>)
 800481c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004820:	4a42      	ldr	r2, [pc, #264]	; (800492c <HAL_UART_MspInit+0x180>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800482a:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_UART_MspInit+0x180>)
 800482c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004838:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800483c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004840:	2302      	movs	r3, #2
 8004842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004846:	2300      	movs	r3, #0
 8004848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484c:	2300      	movs	r3, #0
 800484e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004852:	2307      	movs	r3, #7
 8004854:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004858:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800485c:	4619      	mov	r1, r3
 800485e:	4834      	ldr	r0, [pc, #208]	; (8004930 <HAL_UART_MspInit+0x184>)
 8004860:	f002 fe66 	bl	8007530 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004864:	4b33      	ldr	r3, [pc, #204]	; (8004934 <HAL_UART_MspInit+0x188>)
 8004866:	4a34      	ldr	r2, [pc, #208]	; (8004938 <HAL_UART_MspInit+0x18c>)
 8004868:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800486a:	4b32      	ldr	r3, [pc, #200]	; (8004934 <HAL_UART_MspInit+0x188>)
 800486c:	2229      	movs	r2, #41	; 0x29
 800486e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004870:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_UART_MspInit+0x188>)
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004876:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <HAL_UART_MspInit+0x188>)
 8004878:	2200      	movs	r2, #0
 800487a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800487c:	4b2d      	ldr	r3, [pc, #180]	; (8004934 <HAL_UART_MspInit+0x188>)
 800487e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004882:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_UART_MspInit+0x188>)
 8004886:	2200      	movs	r2, #0
 8004888:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800488a:	4b2a      	ldr	r3, [pc, #168]	; (8004934 <HAL_UART_MspInit+0x188>)
 800488c:	2200      	movs	r2, #0
 800488e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <HAL_UART_MspInit+0x188>)
 8004892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004896:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004898:	4b26      	ldr	r3, [pc, #152]	; (8004934 <HAL_UART_MspInit+0x188>)
 800489a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800489e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048a0:	4b24      	ldr	r3, [pc, #144]	; (8004934 <HAL_UART_MspInit+0x188>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80048a6:	4823      	ldr	r0, [pc, #140]	; (8004934 <HAL_UART_MspInit+0x188>)
 80048a8:	f000 fbb6 	bl	8005018 <HAL_DMA_Init>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80048b2:	f7fd f9b7 	bl	8001c24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <HAL_UART_MspInit+0x188>)
 80048ba:	67da      	str	r2, [r3, #124]	; 0x7c
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <HAL_UART_MspInit+0x188>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80048c2:	4b1e      	ldr	r3, [pc, #120]	; (800493c <HAL_UART_MspInit+0x190>)
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <HAL_UART_MspInit+0x194>)
 80048c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80048c8:	4b1c      	ldr	r3, [pc, #112]	; (800493c <HAL_UART_MspInit+0x190>)
 80048ca:	222a      	movs	r2, #42	; 0x2a
 80048cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048ce:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_UART_MspInit+0x190>)
 80048d0:	2240      	movs	r2, #64	; 0x40
 80048d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_UART_MspInit+0x190>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048da:	4b18      	ldr	r3, [pc, #96]	; (800493c <HAL_UART_MspInit+0x190>)
 80048dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <HAL_UART_MspInit+0x190>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048e8:	4b14      	ldr	r3, [pc, #80]	; (800493c <HAL_UART_MspInit+0x190>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_UART_MspInit+0x190>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <HAL_UART_MspInit+0x190>)
 80048f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_UART_MspInit+0x190>)
 80048fe:	2200      	movs	r2, #0
 8004900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004902:	480e      	ldr	r0, [pc, #56]	; (800493c <HAL_UART_MspInit+0x190>)
 8004904:	f000 fb88 	bl	8005018 <HAL_DMA_Init>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800490e:	f7fd f989 	bl	8001c24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a09      	ldr	r2, [pc, #36]	; (800493c <HAL_UART_MspInit+0x190>)
 8004916:	679a      	str	r2, [r3, #120]	; 0x78
 8004918:	4a08      	ldr	r2, [pc, #32]	; (800493c <HAL_UART_MspInit+0x190>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800491e:	bf00      	nop
 8004920:	37d8      	adds	r7, #216	; 0xd8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40011000 	.word	0x40011000
 800492c:	58024400 	.word	0x58024400
 8004930:	58020000 	.word	0x58020000
 8004934:	2400079c 	.word	0x2400079c
 8004938:	40020010 	.word	0x40020010
 800493c:	24000814 	.word	0x24000814
 8004940:	40020028 	.word	0x40020028

08004944 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <HAL_UART_MspDeInit+0x48>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d116      	bne.n	8004984 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <HAL_UART_MspDeInit+0x4c>)
 8004958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800495c:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <HAL_UART_MspDeInit+0x4c>)
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004966:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800496a:	480a      	ldr	r0, [pc, #40]	; (8004994 <HAL_UART_MspDeInit+0x50>)
 800496c:	f002 ff88 	bl	8007880 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fea9 	bl	80056cc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fea4 	bl	80056cc <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40011000 	.word	0x40011000
 8004990:	58024400 	.word	0x58024400
 8004994:	58020000 	.word	0x58020000

08004998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800499c:	e7fe      	b.n	800499c <NMI_Handler+0x4>

0800499e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049a2:	e7fe      	b.n	80049a2 <HardFault_Handler+0x4>

080049a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049a8:	e7fe      	b.n	80049a8 <MemManage_Handler+0x4>

080049aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ae:	e7fe      	b.n	80049ae <BusFault_Handler+0x4>

080049b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <UsageFault_Handler+0x4>

080049b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049d6:	bf00      	nop
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e4:	f000 f9e8 	bl	8004db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}

080049ec <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
	...

080049fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004a00:	4802      	ldr	r0, [pc, #8]	; (8004a0c <DMA1_Stream0_IRQHandler+0x10>)
 8004a02:	f001 fa83 	bl	8005f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	2400079c 	.word	0x2400079c

08004a10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004a14:	4802      	ldr	r0, [pc, #8]	; (8004a20 <DMA1_Stream1_IRQHandler+0x10>)
 8004a16:	f001 fa79 	bl	8005f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	24000814 	.word	0x24000814

08004a24 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <TIM1_BRK_IRQHandler+0x10>)
 8004a2a:	f005 fe7b 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	24000460 	.word	0x24000460

08004a38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a3c:	4802      	ldr	r0, [pc, #8]	; (8004a48 <TIM1_UP_IRQHandler+0x10>)
 8004a3e:	f005 fe71 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	24000460 	.word	0x24000460

08004a4c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a50:	4802      	ldr	r0, [pc, #8]	; (8004a5c <TIM1_TRG_COM_IRQHandler+0x10>)
 8004a52:	f005 fe67 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	24000460 	.word	0x24000460

08004a60 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a64:	4802      	ldr	r0, [pc, #8]	; (8004a70 <TIM1_CC_IRQHandler+0x10>)
 8004a66:	f005 fe5d 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	24000460 	.word	0x24000460

08004a74 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004a78:	4803      	ldr	r0, [pc, #12]	; (8004a88 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8004a7a:	f005 fe53 	bl	800a724 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8004a7e:	4803      	ldr	r0, [pc, #12]	; (8004a8c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8004a80:	f005 fe50 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	240005dc 	.word	0x240005dc
 8004a8c:	24000628 	.word	0x24000628

08004a90 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004a96:	f005 fe45 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	240005dc 	.word	0x240005dc

08004aa4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004aa8:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004aaa:	f005 fe3b 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	240005dc 	.word	0x240005dc

08004ab8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004abc:	4802      	ldr	r0, [pc, #8]	; (8004ac8 <TIM8_CC_IRQHandler+0x10>)
 8004abe:	f005 fe31 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	240005dc 	.word	0x240005dc

08004acc <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8004ad0:	4802      	ldr	r0, [pc, #8]	; (8004adc <TIM23_IRQHandler+0x10>)
 8004ad2:	f005 fe27 	bl	800a724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	240006c0 	.word	0x240006c0

08004ae0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
	return 1;
 8004ae4:	2301      	movs	r3, #1
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <_kill>:

int _kill(int pid, int sig)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004afa:	f008 fc77 	bl	800d3ec <__errno>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2216      	movs	r2, #22
 8004b02:	601a      	str	r2, [r3, #0]
	return -1;
 8004b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_exit>:

void _exit (int status)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004b18:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff ffe7 	bl	8004af0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004b22:	e7fe      	b.n	8004b22 <_exit+0x12>

08004b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b2c:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <_sbrk+0x5c>)
 8004b2e:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <_sbrk+0x60>)
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b38:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <_sbrk+0x64>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <_sbrk+0x64>)
 8004b42:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <_sbrk+0x68>)
 8004b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b46:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <_sbrk+0x64>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d207      	bcs.n	8004b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b54:	f008 fc4a 	bl	800d3ec <__errno>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	220c      	movs	r2, #12
 8004b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	e009      	b.n	8004b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <_sbrk+0x64>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <_sbrk+0x64>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <_sbrk+0x64>)
 8004b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b76:	68fb      	ldr	r3, [r7, #12]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	24050000 	.word	0x24050000
 8004b84:	00000400 	.word	0x00000400
 8004b88:	24001e3c 	.word	0x24001e3c
 8004b8c:	24001e58 	.word	0x24001e58

08004b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004b94:	4b32      	ldr	r3, [pc, #200]	; (8004c60 <SystemInit+0xd0>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	4a31      	ldr	r2, [pc, #196]	; (8004c60 <SystemInit+0xd0>)
 8004b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ba4:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <SystemInit+0xd4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	2b06      	cmp	r3, #6
 8004bae:	d807      	bhi.n	8004bc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bb0:	4b2c      	ldr	r3, [pc, #176]	; (8004c64 <SystemInit+0xd4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 030f 	bic.w	r3, r3, #15
 8004bb8:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <SystemInit+0xd4>)
 8004bba:	f043 0307 	orr.w	r3, r3, #7
 8004bbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004bc0:	4b29      	ldr	r3, [pc, #164]	; (8004c68 <SystemInit+0xd8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <SystemInit+0xd8>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bcc:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <SystemInit+0xd8>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004bd2:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <SystemInit+0xd8>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4924      	ldr	r1, [pc, #144]	; (8004c68 <SystemInit+0xd8>)
 8004bd8:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <SystemInit+0xdc>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bde:	4b21      	ldr	r3, [pc, #132]	; (8004c64 <SystemInit+0xd4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bea:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <SystemInit+0xd4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 030f 	bic.w	r3, r3, #15
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <SystemInit+0xd4>)
 8004bf4:	f043 0307 	orr.w	r3, r3, #7
 8004bf8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004bfa:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <SystemInit+0xd8>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c00:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <SystemInit+0xd8>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c06:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <SystemInit+0xd8>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c0c:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <SystemInit+0xd8>)
 8004c0e:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <SystemInit+0xe0>)
 8004c10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c12:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <SystemInit+0xd8>)
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <SystemInit+0xe4>)
 8004c16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c18:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <SystemInit+0xd8>)
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <SystemInit+0xe8>)
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c1e:	4b12      	ldr	r3, [pc, #72]	; (8004c68 <SystemInit+0xd8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c24:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <SystemInit+0xd8>)
 8004c26:	4a14      	ldr	r2, [pc, #80]	; (8004c78 <SystemInit+0xe8>)
 8004c28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c2a:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <SystemInit+0xd8>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c30:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <SystemInit+0xd8>)
 8004c32:	4a11      	ldr	r2, [pc, #68]	; (8004c78 <SystemInit+0xe8>)
 8004c34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <SystemInit+0xd8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <SystemInit+0xd8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <SystemInit+0xd8>)
 8004c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c48:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <SystemInit+0xd8>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <SystemInit+0xec>)
 8004c50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c54:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000ed00 	.word	0xe000ed00
 8004c64:	52002000 	.word	0x52002000
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c70:	02020200 	.word	0x02020200
 8004c74:	01ff0000 	.word	0x01ff0000
 8004c78:	01010280 	.word	0x01010280
 8004c7c:	52004000 	.word	0x52004000

08004c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c84:	f7ff ff84 	bl	8004b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c88:	480c      	ldr	r0, [pc, #48]	; (8004cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c8a:	490d      	ldr	r1, [pc, #52]	; (8004cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c8c:	4a0d      	ldr	r2, [pc, #52]	; (8004cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c90:	e002      	b.n	8004c98 <LoopCopyDataInit>

08004c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c96:	3304      	adds	r3, #4

08004c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c9c:	d3f9      	bcc.n	8004c92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ca0:	4c0a      	ldr	r4, [pc, #40]	; (8004ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ca4:	e001      	b.n	8004caa <LoopFillZerobss>

08004ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ca8:	3204      	adds	r2, #4

08004caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cac:	d3fb      	bcc.n	8004ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cae:	f008 fba3 	bl	800d3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cb2:	f7fc fa71 	bl	8001198 <main>
  bx  lr
 8004cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cb8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004cbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004cc0:	24000240 	.word	0x24000240
  ldr r2, =_sidata
 8004cc4:	0800da38 	.word	0x0800da38
  ldr r2, =_sbss
 8004cc8:	24000240 	.word	0x24000240
  ldr r4, =_ebss
 8004ccc:	24001e54 	.word	0x24001e54

08004cd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cd0:	e7fe      	b.n	8004cd0 <ADC3_IRQHandler>
	...

08004cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cda:	2003      	movs	r0, #3
 8004cdc:	f000 f95c 	bl	8004f98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ce0:	f003 fc88 	bl	80085f4 <HAL_RCC_GetSysClockFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_Init+0x68>)
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	4913      	ldr	r1, [pc, #76]	; (8004d40 <HAL_Init+0x6c>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <HAL_Init+0x68>)
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	4a0e      	ldr	r2, [pc, #56]	; (8004d40 <HAL_Init+0x6c>)
 8004d08:	5cd3      	ldrb	r3, [r2, r3]
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
 8004d14:	4a0b      	ldr	r2, [pc, #44]	; (8004d44 <HAL_Init+0x70>)
 8004d16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d18:	4a0b      	ldr	r2, [pc, #44]	; (8004d48 <HAL_Init+0x74>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d1e:	200f      	movs	r0, #15
 8004d20:	f000 f814 	bl	8004d4c <HAL_InitTick>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e002      	b.n	8004d34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d2e:	f7ff fad5 	bl	80042dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	0800d9dc 	.word	0x0800d9dc
 8004d44:	240001cc 	.word	0x240001cc
 8004d48:	240001c8 	.word	0x240001c8

08004d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d54:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_InitTick+0x60>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e021      	b.n	8004da4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <HAL_InitTick+0x64>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_InitTick+0x60>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f941 	bl	8004ffe <HAL_SYSTICK_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00e      	b.n	8004da4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d80a      	bhi.n	8004da2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	f000 f90b 	bl	8004fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d98:	4a06      	ldr	r2, [pc, #24]	; (8004db4 <HAL_InitTick+0x68>)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e000      	b.n	8004da4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	240001d4 	.word	0x240001d4
 8004db0:	240001c8 	.word	0x240001c8
 8004db4:	240001d0 	.word	0x240001d0

08004db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004db8:	b480      	push	{r7}
 8004dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_IncTick+0x20>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_IncTick+0x24>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <HAL_IncTick+0x24>)
 8004dca:	6013      	str	r3, [r2, #0]
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	240001d4 	.word	0x240001d4
 8004ddc:	24001e40 	.word	0x24001e40

08004de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return uwTick;
 8004de4:	4b03      	ldr	r3, [pc, #12]	; (8004df4 <HAL_GetTick+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	24001e40 	.word	0x24001e40

08004df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <__NVIC_SetPriorityGrouping+0x40>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e14:	4013      	ands	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <__NVIC_SetPriorityGrouping+0x44>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e26:	4a04      	ldr	r2, [pc, #16]	; (8004e38 <__NVIC_SetPriorityGrouping+0x40>)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	60d3      	str	r3, [r2, #12]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	e000ed00 	.word	0xe000ed00
 8004e3c:	05fa0000 	.word	0x05fa0000

08004e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <__NVIC_GetPriorityGrouping+0x18>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	f003 0307 	and.w	r3, r3, #7
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db0b      	blt.n	8004e86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	f003 021f 	and.w	r2, r3, #31
 8004e74:	4907      	ldr	r1, [pc, #28]	; (8004e94 <__NVIC_EnableIRQ+0x38>)
 8004e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	e000e100 	.word	0xe000e100

08004e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	6039      	str	r1, [r7, #0]
 8004ea2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	db0a      	blt.n	8004ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	490c      	ldr	r1, [pc, #48]	; (8004ee4 <__NVIC_SetPriority+0x4c>)
 8004eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eb6:	0112      	lsls	r2, r2, #4
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	440b      	add	r3, r1
 8004ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ec0:	e00a      	b.n	8004ed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	4908      	ldr	r1, [pc, #32]	; (8004ee8 <__NVIC_SetPriority+0x50>)
 8004ec8:	88fb      	ldrh	r3, [r7, #6]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	3b04      	subs	r3, #4
 8004ed0:	0112      	lsls	r2, r2, #4
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	761a      	strb	r2, [r3, #24]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	e000e100 	.word	0xe000e100
 8004ee8:	e000ed00 	.word	0xe000ed00

08004eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b089      	sub	sp, #36	; 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f1c3 0307 	rsb	r3, r3, #7
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	bf28      	it	cs
 8004f0a:	2304      	movcs	r3, #4
 8004f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d902      	bls.n	8004f1c <NVIC_EncodePriority+0x30>
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3b03      	subs	r3, #3
 8004f1a:	e000      	b.n	8004f1e <NVIC_EncodePriority+0x32>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f20:	f04f 32ff 	mov.w	r2, #4294967295
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	401a      	ands	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f34:	f04f 31ff 	mov.w	r1, #4294967295
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3e:	43d9      	mvns	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f44:	4313      	orrs	r3, r2
         );
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3724      	adds	r7, #36	; 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f64:	d301      	bcc.n	8004f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00f      	b.n	8004f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <SysTick_Config+0x40>)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f72:	210f      	movs	r1, #15
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	f7ff ff8e 	bl	8004e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <SysTick_Config+0x40>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f82:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <SysTick_Config+0x40>)
 8004f84:	2207      	movs	r2, #7
 8004f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	e000e010 	.word	0xe000e010

08004f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ff29 	bl	8004df8 <__NVIC_SetPriorityGrouping>
}
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b086      	sub	sp, #24
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004fbc:	f7ff ff40 	bl	8004e40 <__NVIC_GetPriorityGrouping>
 8004fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	6978      	ldr	r0, [r7, #20]
 8004fc8:	f7ff ff90 	bl	8004eec <NVIC_EncodePriority>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff5f 	bl	8004e98 <__NVIC_SetPriority>
}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	4603      	mov	r3, r0
 8004fea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff ff33 	bl	8004e5c <__NVIC_EnableIRQ>
}
 8004ff6:	bf00      	nop
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ffa4 	bl	8004f54 <SysTick_Config>
 800500c:	4603      	mov	r3, r0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005020:	f7ff fede 	bl	8004de0 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e314      	b.n	800565a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a66      	ldr	r2, [pc, #408]	; (80051d0 <HAL_DMA_Init+0x1b8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d04a      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a65      	ldr	r2, [pc, #404]	; (80051d4 <HAL_DMA_Init+0x1bc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d045      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a63      	ldr	r2, [pc, #396]	; (80051d8 <HAL_DMA_Init+0x1c0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d040      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a62      	ldr	r2, [pc, #392]	; (80051dc <HAL_DMA_Init+0x1c4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d03b      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a60      	ldr	r2, [pc, #384]	; (80051e0 <HAL_DMA_Init+0x1c8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d036      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a5f      	ldr	r2, [pc, #380]	; (80051e4 <HAL_DMA_Init+0x1cc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d031      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a5d      	ldr	r2, [pc, #372]	; (80051e8 <HAL_DMA_Init+0x1d0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d02c      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a5c      	ldr	r2, [pc, #368]	; (80051ec <HAL_DMA_Init+0x1d4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d027      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a5a      	ldr	r2, [pc, #360]	; (80051f0 <HAL_DMA_Init+0x1d8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d022      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a59      	ldr	r2, [pc, #356]	; (80051f4 <HAL_DMA_Init+0x1dc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d01d      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a57      	ldr	r2, [pc, #348]	; (80051f8 <HAL_DMA_Init+0x1e0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d018      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a56      	ldr	r2, [pc, #344]	; (80051fc <HAL_DMA_Init+0x1e4>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d013      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a54      	ldr	r2, [pc, #336]	; (8005200 <HAL_DMA_Init+0x1e8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d00e      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a53      	ldr	r2, [pc, #332]	; (8005204 <HAL_DMA_Init+0x1ec>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d009      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a51      	ldr	r2, [pc, #324]	; (8005208 <HAL_DMA_Init+0x1f0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <HAL_DMA_Init+0xb8>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a50      	ldr	r2, [pc, #320]	; (800520c <HAL_DMA_Init+0x1f4>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <HAL_DMA_Init+0xbc>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <HAL_DMA_Init+0xbe>
 80050d4:	2300      	movs	r3, #0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 813c 	beq.w	8005354 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a37      	ldr	r2, [pc, #220]	; (80051d0 <HAL_DMA_Init+0x1b8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d04a      	beq.n	800518c <HAL_DMA_Init+0x174>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a36      	ldr	r2, [pc, #216]	; (80051d4 <HAL_DMA_Init+0x1bc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d045      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a34      	ldr	r2, [pc, #208]	; (80051d8 <HAL_DMA_Init+0x1c0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d040      	beq.n	800518c <HAL_DMA_Init+0x174>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a33      	ldr	r2, [pc, #204]	; (80051dc <HAL_DMA_Init+0x1c4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d03b      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a31      	ldr	r2, [pc, #196]	; (80051e0 <HAL_DMA_Init+0x1c8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d036      	beq.n	800518c <HAL_DMA_Init+0x174>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a30      	ldr	r2, [pc, #192]	; (80051e4 <HAL_DMA_Init+0x1cc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d031      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <HAL_DMA_Init+0x1d0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d02c      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a2d      	ldr	r2, [pc, #180]	; (80051ec <HAL_DMA_Init+0x1d4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d027      	beq.n	800518c <HAL_DMA_Init+0x174>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2b      	ldr	r2, [pc, #172]	; (80051f0 <HAL_DMA_Init+0x1d8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d022      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2a      	ldr	r2, [pc, #168]	; (80051f4 <HAL_DMA_Init+0x1dc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d01d      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a28      	ldr	r2, [pc, #160]	; (80051f8 <HAL_DMA_Init+0x1e0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d018      	beq.n	800518c <HAL_DMA_Init+0x174>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a27      	ldr	r2, [pc, #156]	; (80051fc <HAL_DMA_Init+0x1e4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d013      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a25      	ldr	r2, [pc, #148]	; (8005200 <HAL_DMA_Init+0x1e8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00e      	beq.n	800518c <HAL_DMA_Init+0x174>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a24      	ldr	r2, [pc, #144]	; (8005204 <HAL_DMA_Init+0x1ec>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d009      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a22      	ldr	r2, [pc, #136]	; (8005208 <HAL_DMA_Init+0x1f0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d004      	beq.n	800518c <HAL_DMA_Init+0x174>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a21      	ldr	r2, [pc, #132]	; (800520c <HAL_DMA_Init+0x1f4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d108      	bne.n	800519e <HAL_DMA_Init+0x186>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e007      	b.n	80051ae <HAL_DMA_Init+0x196>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051ae:	e02f      	b.n	8005210 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051b0:	f7ff fe16 	bl	8004de0 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d928      	bls.n	8005210 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2203      	movs	r2, #3
 80051c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e244      	b.n	800565a <HAL_DMA_Init+0x642>
 80051d0:	40020010 	.word	0x40020010
 80051d4:	40020028 	.word	0x40020028
 80051d8:	40020040 	.word	0x40020040
 80051dc:	40020058 	.word	0x40020058
 80051e0:	40020070 	.word	0x40020070
 80051e4:	40020088 	.word	0x40020088
 80051e8:	400200a0 	.word	0x400200a0
 80051ec:	400200b8 	.word	0x400200b8
 80051f0:	40020410 	.word	0x40020410
 80051f4:	40020428 	.word	0x40020428
 80051f8:	40020440 	.word	0x40020440
 80051fc:	40020458 	.word	0x40020458
 8005200:	40020470 	.word	0x40020470
 8005204:	40020488 	.word	0x40020488
 8005208:	400204a0 	.word	0x400204a0
 800520c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1c8      	bne.n	80051b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4b84      	ldr	r3, [pc, #528]	; (800543c <HAL_DMA_Init+0x424>)
 800522a:	4013      	ands	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005236:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005242:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800524e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	2b04      	cmp	r3, #4
 8005262:	d107      	bne.n	8005274 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	4313      	orrs	r3, r2
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b28      	cmp	r3, #40	; 0x28
 800527a:	d903      	bls.n	8005284 <HAL_DMA_Init+0x26c>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b2e      	cmp	r3, #46	; 0x2e
 8005282:	d91f      	bls.n	80052c4 <HAL_DMA_Init+0x2ac>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b3e      	cmp	r3, #62	; 0x3e
 800528a:	d903      	bls.n	8005294 <HAL_DMA_Init+0x27c>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b42      	cmp	r3, #66	; 0x42
 8005292:	d917      	bls.n	80052c4 <HAL_DMA_Init+0x2ac>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b46      	cmp	r3, #70	; 0x46
 800529a:	d903      	bls.n	80052a4 <HAL_DMA_Init+0x28c>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b48      	cmp	r3, #72	; 0x48
 80052a2:	d90f      	bls.n	80052c4 <HAL_DMA_Init+0x2ac>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b4e      	cmp	r3, #78	; 0x4e
 80052aa:	d903      	bls.n	80052b4 <HAL_DMA_Init+0x29c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b52      	cmp	r3, #82	; 0x52
 80052b2:	d907      	bls.n	80052c4 <HAL_DMA_Init+0x2ac>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b73      	cmp	r3, #115	; 0x73
 80052ba:	d905      	bls.n	80052c8 <HAL_DMA_Init+0x2b0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b77      	cmp	r3, #119	; 0x77
 80052c2:	d801      	bhi.n	80052c8 <HAL_DMA_Init+0x2b0>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <HAL_DMA_Init+0x2b2>
 80052c8:	2300      	movs	r3, #0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052d4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f023 0307 	bic.w	r3, r3, #7
 80052ec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d117      	bne.n	8005330 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f001 ff82 	bl	800721c <DMA_CheckFifoParam>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e194      	b.n	800565a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 febd 	bl	80070b8 <DMA_CalcBaseAndBitshift>
 800533e:	4603      	mov	r3, r0
 8005340:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	223f      	movs	r2, #63	; 0x3f
 800534c:	409a      	lsls	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	609a      	str	r2, [r3, #8]
 8005352:	e0ca      	b.n	80054ea <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a39      	ldr	r2, [pc, #228]	; (8005440 <HAL_DMA_Init+0x428>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d022      	beq.n	80053a4 <HAL_DMA_Init+0x38c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a38      	ldr	r2, [pc, #224]	; (8005444 <HAL_DMA_Init+0x42c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d01d      	beq.n	80053a4 <HAL_DMA_Init+0x38c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a36      	ldr	r2, [pc, #216]	; (8005448 <HAL_DMA_Init+0x430>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d018      	beq.n	80053a4 <HAL_DMA_Init+0x38c>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a35      	ldr	r2, [pc, #212]	; (800544c <HAL_DMA_Init+0x434>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <HAL_DMA_Init+0x38c>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a33      	ldr	r2, [pc, #204]	; (8005450 <HAL_DMA_Init+0x438>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00e      	beq.n	80053a4 <HAL_DMA_Init+0x38c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a32      	ldr	r2, [pc, #200]	; (8005454 <HAL_DMA_Init+0x43c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d009      	beq.n	80053a4 <HAL_DMA_Init+0x38c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a30      	ldr	r2, [pc, #192]	; (8005458 <HAL_DMA_Init+0x440>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_DMA_Init+0x38c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a2f      	ldr	r2, [pc, #188]	; (800545c <HAL_DMA_Init+0x444>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d101      	bne.n	80053a8 <HAL_DMA_Init+0x390>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_DMA_Init+0x392>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8094 	beq.w	80054d8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a22      	ldr	r2, [pc, #136]	; (8005440 <HAL_DMA_Init+0x428>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d021      	beq.n	80053fe <HAL_DMA_Init+0x3e6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a21      	ldr	r2, [pc, #132]	; (8005444 <HAL_DMA_Init+0x42c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d01c      	beq.n	80053fe <HAL_DMA_Init+0x3e6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1f      	ldr	r2, [pc, #124]	; (8005448 <HAL_DMA_Init+0x430>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d017      	beq.n	80053fe <HAL_DMA_Init+0x3e6>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1e      	ldr	r2, [pc, #120]	; (800544c <HAL_DMA_Init+0x434>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d012      	beq.n	80053fe <HAL_DMA_Init+0x3e6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1c      	ldr	r2, [pc, #112]	; (8005450 <HAL_DMA_Init+0x438>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00d      	beq.n	80053fe <HAL_DMA_Init+0x3e6>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1b      	ldr	r2, [pc, #108]	; (8005454 <HAL_DMA_Init+0x43c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d008      	beq.n	80053fe <HAL_DMA_Init+0x3e6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a19      	ldr	r2, [pc, #100]	; (8005458 <HAL_DMA_Init+0x440>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <HAL_DMA_Init+0x3e6>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a18      	ldr	r2, [pc, #96]	; (800545c <HAL_DMA_Init+0x444>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4b11      	ldr	r3, [pc, #68]	; (8005460 <HAL_DMA_Init+0x448>)
 800541c:	4013      	ands	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	d01d      	beq.n	8005464 <HAL_DMA_Init+0x44c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d102      	bne.n	8005436 <HAL_DMA_Init+0x41e>
 8005430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005434:	e017      	b.n	8005466 <HAL_DMA_Init+0x44e>
 8005436:	2300      	movs	r3, #0
 8005438:	e015      	b.n	8005466 <HAL_DMA_Init+0x44e>
 800543a:	bf00      	nop
 800543c:	fe10803f 	.word	0xfe10803f
 8005440:	58025408 	.word	0x58025408
 8005444:	5802541c 	.word	0x5802541c
 8005448:	58025430 	.word	0x58025430
 800544c:	58025444 	.word	0x58025444
 8005450:	58025458 	.word	0x58025458
 8005454:	5802546c 	.word	0x5802546c
 8005458:	58025480 	.word	0x58025480
 800545c:	58025494 	.word	0x58025494
 8005460:	fffe000f 	.word	0xfffe000f
 8005464:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	68d2      	ldr	r2, [r2, #12]
 800546a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800546c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800547c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800548c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005494:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	4b6e      	ldr	r3, [pc, #440]	; (8005664 <HAL_DMA_Init+0x64c>)
 80054ac:	4413      	add	r3, r2
 80054ae:	4a6e      	ldr	r2, [pc, #440]	; (8005668 <HAL_DMA_Init+0x650>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	009a      	lsls	r2, r3, #2
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 fdfb 	bl	80070b8 <DMA_CalcBaseAndBitshift>
 80054c2:	4603      	mov	r3, r0
 80054c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	2201      	movs	r2, #1
 80054d0:	409a      	lsls	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	e008      	b.n	80054ea <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2240      	movs	r2, #64	; 0x40
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2203      	movs	r2, #3
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e0b7      	b.n	800565a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a5f      	ldr	r2, [pc, #380]	; (800566c <HAL_DMA_Init+0x654>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d072      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a5d      	ldr	r2, [pc, #372]	; (8005670 <HAL_DMA_Init+0x658>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d06d      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a5c      	ldr	r2, [pc, #368]	; (8005674 <HAL_DMA_Init+0x65c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d068      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a5a      	ldr	r2, [pc, #360]	; (8005678 <HAL_DMA_Init+0x660>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d063      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a59      	ldr	r2, [pc, #356]	; (800567c <HAL_DMA_Init+0x664>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d05e      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a57      	ldr	r2, [pc, #348]	; (8005680 <HAL_DMA_Init+0x668>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d059      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a56      	ldr	r2, [pc, #344]	; (8005684 <HAL_DMA_Init+0x66c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d054      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a54      	ldr	r2, [pc, #336]	; (8005688 <HAL_DMA_Init+0x670>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d04f      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a53      	ldr	r2, [pc, #332]	; (800568c <HAL_DMA_Init+0x674>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d04a      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a51      	ldr	r2, [pc, #324]	; (8005690 <HAL_DMA_Init+0x678>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d045      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a50      	ldr	r2, [pc, #320]	; (8005694 <HAL_DMA_Init+0x67c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d040      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a4e      	ldr	r2, [pc, #312]	; (8005698 <HAL_DMA_Init+0x680>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d03b      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a4d      	ldr	r2, [pc, #308]	; (800569c <HAL_DMA_Init+0x684>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d036      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a4b      	ldr	r2, [pc, #300]	; (80056a0 <HAL_DMA_Init+0x688>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d031      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <HAL_DMA_Init+0x68c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d02c      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a48      	ldr	r2, [pc, #288]	; (80056a8 <HAL_DMA_Init+0x690>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d027      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a47      	ldr	r2, [pc, #284]	; (80056ac <HAL_DMA_Init+0x694>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d022      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a45      	ldr	r2, [pc, #276]	; (80056b0 <HAL_DMA_Init+0x698>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01d      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a44      	ldr	r2, [pc, #272]	; (80056b4 <HAL_DMA_Init+0x69c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d018      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a42      	ldr	r2, [pc, #264]	; (80056b8 <HAL_DMA_Init+0x6a0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a41      	ldr	r2, [pc, #260]	; (80056bc <HAL_DMA_Init+0x6a4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00e      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3f      	ldr	r2, [pc, #252]	; (80056c0 <HAL_DMA_Init+0x6a8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a3e      	ldr	r2, [pc, #248]	; (80056c4 <HAL_DMA_Init+0x6ac>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d004      	beq.n	80055da <HAL_DMA_Init+0x5c2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a3c      	ldr	r2, [pc, #240]	; (80056c8 <HAL_DMA_Init+0x6b0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d101      	bne.n	80055de <HAL_DMA_Init+0x5c6>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_DMA_Init+0x5c8>
 80055de:	2300      	movs	r3, #0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d032      	beq.n	800564a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f001 fe95 	bl	8007314 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d102      	bne.n	80055f8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800560c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d010      	beq.n	8005638 <HAL_DMA_Init+0x620>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b08      	cmp	r3, #8
 800561c:	d80c      	bhi.n	8005638 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f001 ff12 	bl	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	e008      	b.n	800564a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	a7fdabf8 	.word	0xa7fdabf8
 8005668:	cccccccd 	.word	0xcccccccd
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
 80056ac:	58025408 	.word	0x58025408
 80056b0:	5802541c 	.word	0x5802541c
 80056b4:	58025430 	.word	0x58025430
 80056b8:	58025444 	.word	0x58025444
 80056bc:	58025458 	.word	0x58025458
 80056c0:	5802546c 	.word	0x5802546c
 80056c4:	58025480 	.word	0x58025480
 80056c8:	58025494 	.word	0x58025494

080056cc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e1a8      	b.n	8005a30 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a82      	ldr	r2, [pc, #520]	; (80058ec <HAL_DMA_DeInit+0x220>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d04a      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a80      	ldr	r2, [pc, #512]	; (80058f0 <HAL_DMA_DeInit+0x224>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d045      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a7f      	ldr	r2, [pc, #508]	; (80058f4 <HAL_DMA_DeInit+0x228>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d040      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a7d      	ldr	r2, [pc, #500]	; (80058f8 <HAL_DMA_DeInit+0x22c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d03b      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a7c      	ldr	r2, [pc, #496]	; (80058fc <HAL_DMA_DeInit+0x230>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d036      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a7a      	ldr	r2, [pc, #488]	; (8005900 <HAL_DMA_DeInit+0x234>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d031      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a79      	ldr	r2, [pc, #484]	; (8005904 <HAL_DMA_DeInit+0x238>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d02c      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a77      	ldr	r2, [pc, #476]	; (8005908 <HAL_DMA_DeInit+0x23c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d027      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a76      	ldr	r2, [pc, #472]	; (800590c <HAL_DMA_DeInit+0x240>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d022      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a74      	ldr	r2, [pc, #464]	; (8005910 <HAL_DMA_DeInit+0x244>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01d      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a73      	ldr	r2, [pc, #460]	; (8005914 <HAL_DMA_DeInit+0x248>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d018      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a71      	ldr	r2, [pc, #452]	; (8005918 <HAL_DMA_DeInit+0x24c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a70      	ldr	r2, [pc, #448]	; (800591c <HAL_DMA_DeInit+0x250>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a6e      	ldr	r2, [pc, #440]	; (8005920 <HAL_DMA_DeInit+0x254>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a6d      	ldr	r2, [pc, #436]	; (8005924 <HAL_DMA_DeInit+0x258>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_DMA_DeInit+0xb2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a6b      	ldr	r2, [pc, #428]	; (8005928 <HAL_DMA_DeInit+0x25c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d108      	bne.n	8005790 <HAL_DMA_DeInit+0xc4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e007      	b.n	80057a0 <HAL_DMA_DeInit+0xd4>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0201 	bic.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a51      	ldr	r2, [pc, #324]	; (80058ec <HAL_DMA_DeInit+0x220>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d04a      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a50      	ldr	r2, [pc, #320]	; (80058f0 <HAL_DMA_DeInit+0x224>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d045      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a4e      	ldr	r2, [pc, #312]	; (80058f4 <HAL_DMA_DeInit+0x228>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d040      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a4d      	ldr	r2, [pc, #308]	; (80058f8 <HAL_DMA_DeInit+0x22c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d03b      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a4b      	ldr	r2, [pc, #300]	; (80058fc <HAL_DMA_DeInit+0x230>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d036      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a4a      	ldr	r2, [pc, #296]	; (8005900 <HAL_DMA_DeInit+0x234>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d031      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a48      	ldr	r2, [pc, #288]	; (8005904 <HAL_DMA_DeInit+0x238>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d02c      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a47      	ldr	r2, [pc, #284]	; (8005908 <HAL_DMA_DeInit+0x23c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d027      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a45      	ldr	r2, [pc, #276]	; (800590c <HAL_DMA_DeInit+0x240>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d022      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a44      	ldr	r2, [pc, #272]	; (8005910 <HAL_DMA_DeInit+0x244>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d01d      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a42      	ldr	r2, [pc, #264]	; (8005914 <HAL_DMA_DeInit+0x248>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d018      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a41      	ldr	r2, [pc, #260]	; (8005918 <HAL_DMA_DeInit+0x24c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a3f      	ldr	r2, [pc, #252]	; (800591c <HAL_DMA_DeInit+0x250>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00e      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a3e      	ldr	r2, [pc, #248]	; (8005920 <HAL_DMA_DeInit+0x254>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d009      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a3c      	ldr	r2, [pc, #240]	; (8005924 <HAL_DMA_DeInit+0x258>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_DMA_DeInit+0x174>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a3b      	ldr	r2, [pc, #236]	; (8005928 <HAL_DMA_DeInit+0x25c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d101      	bne.n	8005844 <HAL_DMA_DeInit+0x178>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_DMA_DeInit+0x17a>
 8005844:	2300      	movs	r3, #0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d025      	beq.n	8005896 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2200      	movs	r2, #0
 8005858:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2200      	movs	r2, #0
 8005860:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2221      	movs	r2, #33	; 0x21
 8005878:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fc1c 	bl	80070b8 <DMA_CalcBaseAndBitshift>
 8005880:	4603      	mov	r3, r0
 8005882:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	f003 031f 	and.w	r3, r3, #31
 800588c:	223f      	movs	r2, #63	; 0x3f
 800588e:	409a      	lsls	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	e081      	b.n	800599a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a24      	ldr	r2, [pc, #144]	; (800592c <HAL_DMA_DeInit+0x260>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d022      	beq.n	80058e6 <HAL_DMA_DeInit+0x21a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a22      	ldr	r2, [pc, #136]	; (8005930 <HAL_DMA_DeInit+0x264>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01d      	beq.n	80058e6 <HAL_DMA_DeInit+0x21a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a21      	ldr	r2, [pc, #132]	; (8005934 <HAL_DMA_DeInit+0x268>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d018      	beq.n	80058e6 <HAL_DMA_DeInit+0x21a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1f      	ldr	r2, [pc, #124]	; (8005938 <HAL_DMA_DeInit+0x26c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_DMA_DeInit+0x21a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1e      	ldr	r2, [pc, #120]	; (800593c <HAL_DMA_DeInit+0x270>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_DMA_DeInit+0x21a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1c      	ldr	r2, [pc, #112]	; (8005940 <HAL_DMA_DeInit+0x274>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_DMA_DeInit+0x21a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <HAL_DMA_DeInit+0x278>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_DMA_DeInit+0x21a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a19      	ldr	r2, [pc, #100]	; (8005948 <HAL_DMA_DeInit+0x27c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d132      	bne.n	800594c <HAL_DMA_DeInit+0x280>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e031      	b.n	800594e <HAL_DMA_DeInit+0x282>
 80058ea:	bf00      	nop
 80058ec:	40020010 	.word	0x40020010
 80058f0:	40020028 	.word	0x40020028
 80058f4:	40020040 	.word	0x40020040
 80058f8:	40020058 	.word	0x40020058
 80058fc:	40020070 	.word	0x40020070
 8005900:	40020088 	.word	0x40020088
 8005904:	400200a0 	.word	0x400200a0
 8005908:	400200b8 	.word	0x400200b8
 800590c:	40020410 	.word	0x40020410
 8005910:	40020428 	.word	0x40020428
 8005914:	40020440 	.word	0x40020440
 8005918:	40020458 	.word	0x40020458
 800591c:	40020470 	.word	0x40020470
 8005920:	40020488 	.word	0x40020488
 8005924:	400204a0 	.word	0x400204a0
 8005928:	400204b8 	.word	0x400204b8
 800592c:	58025408 	.word	0x58025408
 8005930:	5802541c 	.word	0x5802541c
 8005934:	58025430 	.word	0x58025430
 8005938:	58025444 	.word	0x58025444
 800593c:	58025458 	.word	0x58025458
 8005940:	5802546c 	.word	0x5802546c
 8005944:	58025480 	.word	0x58025480
 8005948:	58025494 	.word	0x58025494
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d021      	beq.n	8005996 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2200      	movs	r2, #0
 8005970:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 fb9c 	bl	80070b8 <DMA_CalcBaseAndBitshift>
 8005980:	4603      	mov	r3, r0
 8005982:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005988:	f003 031f 	and.w	r3, r3, #31
 800598c:	2201      	movs	r2, #1
 800598e:	409a      	lsls	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	605a      	str	r2, [r3, #4]
 8005994:	e001      	b.n	800599a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e04a      	b.n	8005a30 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fcba 	bl	8007314 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059b8:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00f      	beq.n	80059e2 <HAL_DMA_DeInit+0x316>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d80b      	bhi.n	80059e2 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 fd3c 	bl	8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059e0:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e226      	b.n	8005ea2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_DMA_Start_IT+0x2a>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e21f      	b.n	8005ea2 <HAL_DMA_Start_IT+0x46a>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	f040 820a 	bne.w	8005e8c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a68      	ldr	r2, [pc, #416]	; (8005c2c <HAL_DMA_Start_IT+0x1f4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d04a      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a66      	ldr	r2, [pc, #408]	; (8005c30 <HAL_DMA_Start_IT+0x1f8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d045      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a65      	ldr	r2, [pc, #404]	; (8005c34 <HAL_DMA_Start_IT+0x1fc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d040      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a63      	ldr	r2, [pc, #396]	; (8005c38 <HAL_DMA_Start_IT+0x200>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d03b      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a62      	ldr	r2, [pc, #392]	; (8005c3c <HAL_DMA_Start_IT+0x204>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d036      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a60      	ldr	r2, [pc, #384]	; (8005c40 <HAL_DMA_Start_IT+0x208>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d031      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a5f      	ldr	r2, [pc, #380]	; (8005c44 <HAL_DMA_Start_IT+0x20c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d02c      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a5d      	ldr	r2, [pc, #372]	; (8005c48 <HAL_DMA_Start_IT+0x210>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d027      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a5c      	ldr	r2, [pc, #368]	; (8005c4c <HAL_DMA_Start_IT+0x214>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d022      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a5a      	ldr	r2, [pc, #360]	; (8005c50 <HAL_DMA_Start_IT+0x218>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01d      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a59      	ldr	r2, [pc, #356]	; (8005c54 <HAL_DMA_Start_IT+0x21c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d018      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a57      	ldr	r2, [pc, #348]	; (8005c58 <HAL_DMA_Start_IT+0x220>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a56      	ldr	r2, [pc, #344]	; (8005c5c <HAL_DMA_Start_IT+0x224>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00e      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a54      	ldr	r2, [pc, #336]	; (8005c60 <HAL_DMA_Start_IT+0x228>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d009      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a53      	ldr	r2, [pc, #332]	; (8005c64 <HAL_DMA_Start_IT+0x22c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_DMA_Start_IT+0xee>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a51      	ldr	r2, [pc, #324]	; (8005c68 <HAL_DMA_Start_IT+0x230>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d108      	bne.n	8005b38 <HAL_DMA_Start_IT+0x100>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e007      	b.n	8005b48 <HAL_DMA_Start_IT+0x110>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f001 f906 	bl	8006d60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a34      	ldr	r2, [pc, #208]	; (8005c2c <HAL_DMA_Start_IT+0x1f4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d04a      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a33      	ldr	r2, [pc, #204]	; (8005c30 <HAL_DMA_Start_IT+0x1f8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d045      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	; (8005c34 <HAL_DMA_Start_IT+0x1fc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d040      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a30      	ldr	r2, [pc, #192]	; (8005c38 <HAL_DMA_Start_IT+0x200>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d03b      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2e      	ldr	r2, [pc, #184]	; (8005c3c <HAL_DMA_Start_IT+0x204>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d036      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2d      	ldr	r2, [pc, #180]	; (8005c40 <HAL_DMA_Start_IT+0x208>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d031      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2b      	ldr	r2, [pc, #172]	; (8005c44 <HAL_DMA_Start_IT+0x20c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d02c      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <HAL_DMA_Start_IT+0x210>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d027      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <HAL_DMA_Start_IT+0x214>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d022      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <HAL_DMA_Start_IT+0x218>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d01d      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a25      	ldr	r2, [pc, #148]	; (8005c54 <HAL_DMA_Start_IT+0x21c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d018      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a24      	ldr	r2, [pc, #144]	; (8005c58 <HAL_DMA_Start_IT+0x220>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a22      	ldr	r2, [pc, #136]	; (8005c5c <HAL_DMA_Start_IT+0x224>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00e      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <HAL_DMA_Start_IT+0x228>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d009      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1f      	ldr	r2, [pc, #124]	; (8005c64 <HAL_DMA_Start_IT+0x22c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d004      	beq.n	8005bf4 <HAL_DMA_Start_IT+0x1bc>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <HAL_DMA_Start_IT+0x230>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d101      	bne.n	8005bf8 <HAL_DMA_Start_IT+0x1c0>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <HAL_DMA_Start_IT+0x1c2>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d036      	beq.n	8005c6c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f023 021e 	bic.w	r2, r3, #30
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 0216 	orr.w	r2, r2, #22
 8005c10:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d03e      	beq.n	8005c98 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0208 	orr.w	r2, r2, #8
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e035      	b.n	8005c98 <HAL_DMA_Start_IT+0x260>
 8005c2c:	40020010 	.word	0x40020010
 8005c30:	40020028 	.word	0x40020028
 8005c34:	40020040 	.word	0x40020040
 8005c38:	40020058 	.word	0x40020058
 8005c3c:	40020070 	.word	0x40020070
 8005c40:	40020088 	.word	0x40020088
 8005c44:	400200a0 	.word	0x400200a0
 8005c48:	400200b8 	.word	0x400200b8
 8005c4c:	40020410 	.word	0x40020410
 8005c50:	40020428 	.word	0x40020428
 8005c54:	40020440 	.word	0x40020440
 8005c58:	40020458 	.word	0x40020458
 8005c5c:	40020470 	.word	0x40020470
 8005c60:	40020488 	.word	0x40020488
 8005c64:	400204a0 	.word	0x400204a0
 8005c68:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 020e 	bic.w	r2, r3, #14
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 020a 	orr.w	r2, r2, #10
 8005c7e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0204 	orr.w	r2, r2, #4
 8005c96:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a83      	ldr	r2, [pc, #524]	; (8005eac <HAL_DMA_Start_IT+0x474>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d072      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a82      	ldr	r2, [pc, #520]	; (8005eb0 <HAL_DMA_Start_IT+0x478>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d06d      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a80      	ldr	r2, [pc, #512]	; (8005eb4 <HAL_DMA_Start_IT+0x47c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d068      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a7f      	ldr	r2, [pc, #508]	; (8005eb8 <HAL_DMA_Start_IT+0x480>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d063      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a7d      	ldr	r2, [pc, #500]	; (8005ebc <HAL_DMA_Start_IT+0x484>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d05e      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a7c      	ldr	r2, [pc, #496]	; (8005ec0 <HAL_DMA_Start_IT+0x488>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d059      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a7a      	ldr	r2, [pc, #488]	; (8005ec4 <HAL_DMA_Start_IT+0x48c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d054      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a79      	ldr	r2, [pc, #484]	; (8005ec8 <HAL_DMA_Start_IT+0x490>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d04f      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a77      	ldr	r2, [pc, #476]	; (8005ecc <HAL_DMA_Start_IT+0x494>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d04a      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a76      	ldr	r2, [pc, #472]	; (8005ed0 <HAL_DMA_Start_IT+0x498>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d045      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a74      	ldr	r2, [pc, #464]	; (8005ed4 <HAL_DMA_Start_IT+0x49c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d040      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a73      	ldr	r2, [pc, #460]	; (8005ed8 <HAL_DMA_Start_IT+0x4a0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d03b      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a71      	ldr	r2, [pc, #452]	; (8005edc <HAL_DMA_Start_IT+0x4a4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d036      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a70      	ldr	r2, [pc, #448]	; (8005ee0 <HAL_DMA_Start_IT+0x4a8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d031      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a6e      	ldr	r2, [pc, #440]	; (8005ee4 <HAL_DMA_Start_IT+0x4ac>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02c      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6d      	ldr	r2, [pc, #436]	; (8005ee8 <HAL_DMA_Start_IT+0x4b0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d027      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a6b      	ldr	r2, [pc, #428]	; (8005eec <HAL_DMA_Start_IT+0x4b4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d022      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a6a      	ldr	r2, [pc, #424]	; (8005ef0 <HAL_DMA_Start_IT+0x4b8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d01d      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a68      	ldr	r2, [pc, #416]	; (8005ef4 <HAL_DMA_Start_IT+0x4bc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d018      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a67      	ldr	r2, [pc, #412]	; (8005ef8 <HAL_DMA_Start_IT+0x4c0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a65      	ldr	r2, [pc, #404]	; (8005efc <HAL_DMA_Start_IT+0x4c4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00e      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a64      	ldr	r2, [pc, #400]	; (8005f00 <HAL_DMA_Start_IT+0x4c8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d009      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a62      	ldr	r2, [pc, #392]	; (8005f04 <HAL_DMA_Start_IT+0x4cc>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <HAL_DMA_Start_IT+0x350>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a61      	ldr	r2, [pc, #388]	; (8005f08 <HAL_DMA_Start_IT+0x4d0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d101      	bne.n	8005d8c <HAL_DMA_Start_IT+0x354>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <HAL_DMA_Start_IT+0x356>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01a      	beq.n	8005dc8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dae:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d007      	beq.n	8005dc8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a37      	ldr	r2, [pc, #220]	; (8005eac <HAL_DMA_Start_IT+0x474>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d04a      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a36      	ldr	r2, [pc, #216]	; (8005eb0 <HAL_DMA_Start_IT+0x478>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d045      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a34      	ldr	r2, [pc, #208]	; (8005eb4 <HAL_DMA_Start_IT+0x47c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d040      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a33      	ldr	r2, [pc, #204]	; (8005eb8 <HAL_DMA_Start_IT+0x480>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d03b      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a31      	ldr	r2, [pc, #196]	; (8005ebc <HAL_DMA_Start_IT+0x484>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d036      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a30      	ldr	r2, [pc, #192]	; (8005ec0 <HAL_DMA_Start_IT+0x488>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d031      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a2e      	ldr	r2, [pc, #184]	; (8005ec4 <HAL_DMA_Start_IT+0x48c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d02c      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a2d      	ldr	r2, [pc, #180]	; (8005ec8 <HAL_DMA_Start_IT+0x490>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d027      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a2b      	ldr	r2, [pc, #172]	; (8005ecc <HAL_DMA_Start_IT+0x494>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d022      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a2a      	ldr	r2, [pc, #168]	; (8005ed0 <HAL_DMA_Start_IT+0x498>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d01d      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a28      	ldr	r2, [pc, #160]	; (8005ed4 <HAL_DMA_Start_IT+0x49c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a27      	ldr	r2, [pc, #156]	; (8005ed8 <HAL_DMA_Start_IT+0x4a0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d013      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a25      	ldr	r2, [pc, #148]	; (8005edc <HAL_DMA_Start_IT+0x4a4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00e      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a24      	ldr	r2, [pc, #144]	; (8005ee0 <HAL_DMA_Start_IT+0x4a8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a22      	ldr	r2, [pc, #136]	; (8005ee4 <HAL_DMA_Start_IT+0x4ac>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_DMA_Start_IT+0x430>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a21      	ldr	r2, [pc, #132]	; (8005ee8 <HAL_DMA_Start_IT+0x4b0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d108      	bne.n	8005e7a <HAL_DMA_Start_IT+0x442>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0201 	orr.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e012      	b.n	8005ea0 <HAL_DMA_Start_IT+0x468>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e009      	b.n	8005ea0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8
 8005eec:	58025408 	.word	0x58025408
 8005ef0:	5802541c 	.word	0x5802541c
 8005ef4:	58025430 	.word	0x58025430
 8005ef8:	58025444 	.word	0x58025444
 8005efc:	58025458 	.word	0x58025458
 8005f00:	5802546c 	.word	0x5802546c
 8005f04:	58025480 	.word	0x58025480
 8005f08:	58025494 	.word	0x58025494

08005f0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	; 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f18:	4b67      	ldr	r3, [pc, #412]	; (80060b8 <HAL_DMA_IRQHandler+0x1ac>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a67      	ldr	r2, [pc, #412]	; (80060bc <HAL_DMA_IRQHandler+0x1b0>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	0a9b      	lsrs	r3, r3, #10
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5f      	ldr	r2, [pc, #380]	; (80060c0 <HAL_DMA_IRQHandler+0x1b4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d04a      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5d      	ldr	r2, [pc, #372]	; (80060c4 <HAL_DMA_IRQHandler+0x1b8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d045      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5c      	ldr	r2, [pc, #368]	; (80060c8 <HAL_DMA_IRQHandler+0x1bc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d040      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5a      	ldr	r2, [pc, #360]	; (80060cc <HAL_DMA_IRQHandler+0x1c0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d03b      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a59      	ldr	r2, [pc, #356]	; (80060d0 <HAL_DMA_IRQHandler+0x1c4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d036      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_DMA_IRQHandler+0x1c8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a56      	ldr	r2, [pc, #344]	; (80060d8 <HAL_DMA_IRQHandler+0x1cc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d02c      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a54      	ldr	r2, [pc, #336]	; (80060dc <HAL_DMA_IRQHandler+0x1d0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d027      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a53      	ldr	r2, [pc, #332]	; (80060e0 <HAL_DMA_IRQHandler+0x1d4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d022      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a51      	ldr	r2, [pc, #324]	; (80060e4 <HAL_DMA_IRQHandler+0x1d8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a50      	ldr	r2, [pc, #320]	; (80060e8 <HAL_DMA_IRQHandler+0x1dc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a4e      	ldr	r2, [pc, #312]	; (80060ec <HAL_DMA_IRQHandler+0x1e0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a4d      	ldr	r2, [pc, #308]	; (80060f0 <HAL_DMA_IRQHandler+0x1e4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a4b      	ldr	r2, [pc, #300]	; (80060f4 <HAL_DMA_IRQHandler+0x1e8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a4a      	ldr	r2, [pc, #296]	; (80060f8 <HAL_DMA_IRQHandler+0x1ec>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_DMA_IRQHandler+0xd2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a48      	ldr	r2, [pc, #288]	; (80060fc <HAL_DMA_IRQHandler+0x1f0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d101      	bne.n	8005fe2 <HAL_DMA_IRQHandler+0xd6>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <HAL_DMA_IRQHandler+0xd8>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 842b 	beq.w	8006840 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	2208      	movs	r2, #8
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 80a2 	beq.w	8006144 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2e      	ldr	r2, [pc, #184]	; (80060c0 <HAL_DMA_IRQHandler+0x1b4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d04a      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2d      	ldr	r2, [pc, #180]	; (80060c4 <HAL_DMA_IRQHandler+0x1b8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d045      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <HAL_DMA_IRQHandler+0x1bc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d040      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <HAL_DMA_IRQHandler+0x1c0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d03b      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <HAL_DMA_IRQHandler+0x1c4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d036      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a27      	ldr	r2, [pc, #156]	; (80060d4 <HAL_DMA_IRQHandler+0x1c8>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d031      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a25      	ldr	r2, [pc, #148]	; (80060d8 <HAL_DMA_IRQHandler+0x1cc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d02c      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a24      	ldr	r2, [pc, #144]	; (80060dc <HAL_DMA_IRQHandler+0x1d0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d027      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <HAL_DMA_IRQHandler+0x1d4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d022      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <HAL_DMA_IRQHandler+0x1d8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d01d      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <HAL_DMA_IRQHandler+0x1dc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d018      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1e      	ldr	r2, [pc, #120]	; (80060ec <HAL_DMA_IRQHandler+0x1e0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d013      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <HAL_DMA_IRQHandler+0x1e4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00e      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1b      	ldr	r2, [pc, #108]	; (80060f4 <HAL_DMA_IRQHandler+0x1e8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d009      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a19      	ldr	r2, [pc, #100]	; (80060f8 <HAL_DMA_IRQHandler+0x1ec>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d004      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x194>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a18      	ldr	r2, [pc, #96]	; (80060fc <HAL_DMA_IRQHandler+0x1f0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d12f      	bne.n	8006100 <HAL_DMA_IRQHandler+0x1f4>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bf14      	ite	ne
 80060ae:	2301      	movne	r3, #1
 80060b0:	2300      	moveq	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	e02e      	b.n	8006114 <HAL_DMA_IRQHandler+0x208>
 80060b6:	bf00      	nop
 80060b8:	240001c8 	.word	0x240001c8
 80060bc:	1b4e81b5 	.word	0x1b4e81b5
 80060c0:	40020010 	.word	0x40020010
 80060c4:	40020028 	.word	0x40020028
 80060c8:	40020040 	.word	0x40020040
 80060cc:	40020058 	.word	0x40020058
 80060d0:	40020070 	.word	0x40020070
 80060d4:	40020088 	.word	0x40020088
 80060d8:	400200a0 	.word	0x400200a0
 80060dc:	400200b8 	.word	0x400200b8
 80060e0:	40020410 	.word	0x40020410
 80060e4:	40020428 	.word	0x40020428
 80060e8:	40020440 	.word	0x40020440
 80060ec:	40020458 	.word	0x40020458
 80060f0:	40020470 	.word	0x40020470
 80060f4:	40020488 	.word	0x40020488
 80060f8:	400204a0 	.word	0x400204a0
 80060fc:	400204b8 	.word	0x400204b8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0308 	and.w	r3, r3, #8
 800610a:	2b00      	cmp	r3, #0
 800610c:	bf14      	ite	ne
 800610e:	2301      	movne	r3, #1
 8006110:	2300      	moveq	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d015      	beq.n	8006144 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0204 	bic.w	r2, r2, #4
 8006126:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	2208      	movs	r2, #8
 8006132:	409a      	lsls	r2, r3
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613c:	f043 0201 	orr.w	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	fa22 f303 	lsr.w	r3, r2, r3
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d06e      	beq.n	8006238 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a69      	ldr	r2, [pc, #420]	; (8006304 <HAL_DMA_IRQHandler+0x3f8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d04a      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a67      	ldr	r2, [pc, #412]	; (8006308 <HAL_DMA_IRQHandler+0x3fc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d045      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a66      	ldr	r2, [pc, #408]	; (800630c <HAL_DMA_IRQHandler+0x400>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d040      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a64      	ldr	r2, [pc, #400]	; (8006310 <HAL_DMA_IRQHandler+0x404>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d03b      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a63      	ldr	r2, [pc, #396]	; (8006314 <HAL_DMA_IRQHandler+0x408>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d036      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a61      	ldr	r2, [pc, #388]	; (8006318 <HAL_DMA_IRQHandler+0x40c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d031      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a60      	ldr	r2, [pc, #384]	; (800631c <HAL_DMA_IRQHandler+0x410>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d02c      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5e      	ldr	r2, [pc, #376]	; (8006320 <HAL_DMA_IRQHandler+0x414>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d027      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a5d      	ldr	r2, [pc, #372]	; (8006324 <HAL_DMA_IRQHandler+0x418>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d022      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a5b      	ldr	r2, [pc, #364]	; (8006328 <HAL_DMA_IRQHandler+0x41c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01d      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a5a      	ldr	r2, [pc, #360]	; (800632c <HAL_DMA_IRQHandler+0x420>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d018      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a58      	ldr	r2, [pc, #352]	; (8006330 <HAL_DMA_IRQHandler+0x424>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a57      	ldr	r2, [pc, #348]	; (8006334 <HAL_DMA_IRQHandler+0x428>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00e      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a55      	ldr	r2, [pc, #340]	; (8006338 <HAL_DMA_IRQHandler+0x42c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d009      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a54      	ldr	r2, [pc, #336]	; (800633c <HAL_DMA_IRQHandler+0x430>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_DMA_IRQHandler+0x2ee>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a52      	ldr	r2, [pc, #328]	; (8006340 <HAL_DMA_IRQHandler+0x434>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d10a      	bne.n	8006210 <HAL_DMA_IRQHandler+0x304>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006204:	2b00      	cmp	r3, #0
 8006206:	bf14      	ite	ne
 8006208:	2301      	movne	r3, #1
 800620a:	2300      	moveq	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	e003      	b.n	8006218 <HAL_DMA_IRQHandler+0x30c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	2201      	movs	r2, #1
 8006226:	409a      	lsls	r2, r3
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006230:	f043 0202 	orr.w	r2, r3, #2
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	2204      	movs	r2, #4
 8006242:	409a      	lsls	r2, r3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	4013      	ands	r3, r2
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 808f 	beq.w	800636c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a2c      	ldr	r2, [pc, #176]	; (8006304 <HAL_DMA_IRQHandler+0x3f8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d04a      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a2a      	ldr	r2, [pc, #168]	; (8006308 <HAL_DMA_IRQHandler+0x3fc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d045      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a29      	ldr	r2, [pc, #164]	; (800630c <HAL_DMA_IRQHandler+0x400>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d040      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a27      	ldr	r2, [pc, #156]	; (8006310 <HAL_DMA_IRQHandler+0x404>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d03b      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a26      	ldr	r2, [pc, #152]	; (8006314 <HAL_DMA_IRQHandler+0x408>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d036      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a24      	ldr	r2, [pc, #144]	; (8006318 <HAL_DMA_IRQHandler+0x40c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d031      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a23      	ldr	r2, [pc, #140]	; (800631c <HAL_DMA_IRQHandler+0x410>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d02c      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a21      	ldr	r2, [pc, #132]	; (8006320 <HAL_DMA_IRQHandler+0x414>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d027      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a20      	ldr	r2, [pc, #128]	; (8006324 <HAL_DMA_IRQHandler+0x418>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d022      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <HAL_DMA_IRQHandler+0x41c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01d      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1d      	ldr	r2, [pc, #116]	; (800632c <HAL_DMA_IRQHandler+0x420>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d018      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1b      	ldr	r2, [pc, #108]	; (8006330 <HAL_DMA_IRQHandler+0x424>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a1a      	ldr	r2, [pc, #104]	; (8006334 <HAL_DMA_IRQHandler+0x428>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a18      	ldr	r2, [pc, #96]	; (8006338 <HAL_DMA_IRQHandler+0x42c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a17      	ldr	r2, [pc, #92]	; (800633c <HAL_DMA_IRQHandler+0x430>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_DMA_IRQHandler+0x3e2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a15      	ldr	r2, [pc, #84]	; (8006340 <HAL_DMA_IRQHandler+0x434>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d12a      	bne.n	8006344 <HAL_DMA_IRQHandler+0x438>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	bf14      	ite	ne
 80062fc:	2301      	movne	r3, #1
 80062fe:	2300      	moveq	r3, #0
 8006300:	b2db      	uxtb	r3, r3
 8006302:	e023      	b.n	800634c <HAL_DMA_IRQHandler+0x440>
 8006304:	40020010 	.word	0x40020010
 8006308:	40020028 	.word	0x40020028
 800630c:	40020040 	.word	0x40020040
 8006310:	40020058 	.word	0x40020058
 8006314:	40020070 	.word	0x40020070
 8006318:	40020088 	.word	0x40020088
 800631c:	400200a0 	.word	0x400200a0
 8006320:	400200b8 	.word	0x400200b8
 8006324:	40020410 	.word	0x40020410
 8006328:	40020428 	.word	0x40020428
 800632c:	40020440 	.word	0x40020440
 8006330:	40020458 	.word	0x40020458
 8006334:	40020470 	.word	0x40020470
 8006338:	40020488 	.word	0x40020488
 800633c:	400204a0 	.word	0x400204a0
 8006340:	400204b8 	.word	0x400204b8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2300      	movs	r3, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006354:	f003 031f 	and.w	r3, r3, #31
 8006358:	2204      	movs	r2, #4
 800635a:	409a      	lsls	r2, r3
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f043 0204 	orr.w	r2, r3, #4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	2210      	movs	r2, #16
 8006376:	409a      	lsls	r2, r3
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80a6 	beq.w	80064ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a85      	ldr	r2, [pc, #532]	; (800659c <HAL_DMA_IRQHandler+0x690>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d04a      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a83      	ldr	r2, [pc, #524]	; (80065a0 <HAL_DMA_IRQHandler+0x694>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d045      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a82      	ldr	r2, [pc, #520]	; (80065a4 <HAL_DMA_IRQHandler+0x698>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d040      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a80      	ldr	r2, [pc, #512]	; (80065a8 <HAL_DMA_IRQHandler+0x69c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d03b      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a7f      	ldr	r2, [pc, #508]	; (80065ac <HAL_DMA_IRQHandler+0x6a0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d036      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a7d      	ldr	r2, [pc, #500]	; (80065b0 <HAL_DMA_IRQHandler+0x6a4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d031      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a7c      	ldr	r2, [pc, #496]	; (80065b4 <HAL_DMA_IRQHandler+0x6a8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d02c      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a7a      	ldr	r2, [pc, #488]	; (80065b8 <HAL_DMA_IRQHandler+0x6ac>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d027      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a79      	ldr	r2, [pc, #484]	; (80065bc <HAL_DMA_IRQHandler+0x6b0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d022      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a77      	ldr	r2, [pc, #476]	; (80065c0 <HAL_DMA_IRQHandler+0x6b4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01d      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a76      	ldr	r2, [pc, #472]	; (80065c4 <HAL_DMA_IRQHandler+0x6b8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d018      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a74      	ldr	r2, [pc, #464]	; (80065c8 <HAL_DMA_IRQHandler+0x6bc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a73      	ldr	r2, [pc, #460]	; (80065cc <HAL_DMA_IRQHandler+0x6c0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00e      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a71      	ldr	r2, [pc, #452]	; (80065d0 <HAL_DMA_IRQHandler+0x6c4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a70      	ldr	r2, [pc, #448]	; (80065d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_DMA_IRQHandler+0x516>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a6e      	ldr	r2, [pc, #440]	; (80065d8 <HAL_DMA_IRQHandler+0x6cc>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d10a      	bne.n	8006438 <HAL_DMA_IRQHandler+0x52c>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b00      	cmp	r3, #0
 800642e:	bf14      	ite	ne
 8006430:	2301      	movne	r3, #1
 8006432:	2300      	moveq	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	e009      	b.n	800644c <HAL_DMA_IRQHandler+0x540>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	bf14      	ite	ne
 8006446:	2301      	movne	r3, #1
 8006448:	2300      	moveq	r3, #0
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d03e      	beq.n	80064ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	2210      	movs	r2, #16
 800645a:	409a      	lsls	r2, r3
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d018      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d108      	bne.n	800648e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d024      	beq.n	80064ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
 800648c:	e01f      	b.n	80064ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01b      	beq.n	80064ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
 800649e:	e016      	b.n	80064ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d107      	bne.n	80064be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0208 	bic.w	r2, r2, #8
 80064bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d2:	f003 031f 	and.w	r3, r3, #31
 80064d6:	2220      	movs	r2, #32
 80064d8:	409a      	lsls	r2, r3
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	4013      	ands	r3, r2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8110 	beq.w	8006704 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <HAL_DMA_IRQHandler+0x690>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d04a      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2b      	ldr	r2, [pc, #172]	; (80065a0 <HAL_DMA_IRQHandler+0x694>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d045      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <HAL_DMA_IRQHandler+0x698>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d040      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a28      	ldr	r2, [pc, #160]	; (80065a8 <HAL_DMA_IRQHandler+0x69c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d03b      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a26      	ldr	r2, [pc, #152]	; (80065ac <HAL_DMA_IRQHandler+0x6a0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d036      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a25      	ldr	r2, [pc, #148]	; (80065b0 <HAL_DMA_IRQHandler+0x6a4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d031      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a23      	ldr	r2, [pc, #140]	; (80065b4 <HAL_DMA_IRQHandler+0x6a8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d02c      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a22      	ldr	r2, [pc, #136]	; (80065b8 <HAL_DMA_IRQHandler+0x6ac>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d027      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a20      	ldr	r2, [pc, #128]	; (80065bc <HAL_DMA_IRQHandler+0x6b0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d022      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <HAL_DMA_IRQHandler+0x6b4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d01d      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <HAL_DMA_IRQHandler+0x6b8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d018      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1c      	ldr	r2, [pc, #112]	; (80065c8 <HAL_DMA_IRQHandler+0x6bc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <HAL_DMA_IRQHandler+0x6c0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00e      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a19      	ldr	r2, [pc, #100]	; (80065d0 <HAL_DMA_IRQHandler+0x6c4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_DMA_IRQHandler+0x678>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a16      	ldr	r2, [pc, #88]	; (80065d8 <HAL_DMA_IRQHandler+0x6cc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d12b      	bne.n	80065dc <HAL_DMA_IRQHandler+0x6d0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b00      	cmp	r3, #0
 8006590:	bf14      	ite	ne
 8006592:	2301      	movne	r3, #1
 8006594:	2300      	moveq	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	e02a      	b.n	80065f0 <HAL_DMA_IRQHandler+0x6e4>
 800659a:	bf00      	nop
 800659c:	40020010 	.word	0x40020010
 80065a0:	40020028 	.word	0x40020028
 80065a4:	40020040 	.word	0x40020040
 80065a8:	40020058 	.word	0x40020058
 80065ac:	40020070 	.word	0x40020070
 80065b0:	40020088 	.word	0x40020088
 80065b4:	400200a0 	.word	0x400200a0
 80065b8:	400200b8 	.word	0x400200b8
 80065bc:	40020410 	.word	0x40020410
 80065c0:	40020428 	.word	0x40020428
 80065c4:	40020440 	.word	0x40020440
 80065c8:	40020458 	.word	0x40020458
 80065cc:	40020470 	.word	0x40020470
 80065d0:	40020488 	.word	0x40020488
 80065d4:	400204a0 	.word	0x400204a0
 80065d8:	400204b8 	.word	0x400204b8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	bf14      	ite	ne
 80065ea:	2301      	movne	r3, #1
 80065ec:	2300      	moveq	r3, #0
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8087 	beq.w	8006704 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	2220      	movs	r2, #32
 8006600:	409a      	lsls	r2, r3
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b04      	cmp	r3, #4
 8006610:	d139      	bne.n	8006686 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0216 	bic.w	r2, r2, #22
 8006620:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006630:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_DMA_IRQHandler+0x736>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0208 	bic.w	r2, r2, #8
 8006650:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	223f      	movs	r2, #63	; 0x3f
 800665c:	409a      	lsls	r2, r3
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 834a 	beq.w	8006d10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
          }
          return;
 8006684:	e344      	b.n	8006d10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d018      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d108      	bne.n	80066b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02c      	beq.n	8006704 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
 80066b2:	e027      	b.n	8006704 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d023      	beq.n	8006704 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
 80066c4:	e01e      	b.n	8006704 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10f      	bne.n	80066f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0210 	bic.w	r2, r2, #16
 80066e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 8306 	beq.w	8006d1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 8088 	beq.w	800682c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2204      	movs	r2, #4
 8006720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a7a      	ldr	r2, [pc, #488]	; (8006914 <HAL_DMA_IRQHandler+0xa08>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d04a      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a79      	ldr	r2, [pc, #484]	; (8006918 <HAL_DMA_IRQHandler+0xa0c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d045      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a77      	ldr	r2, [pc, #476]	; (800691c <HAL_DMA_IRQHandler+0xa10>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d040      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a76      	ldr	r2, [pc, #472]	; (8006920 <HAL_DMA_IRQHandler+0xa14>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d03b      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a74      	ldr	r2, [pc, #464]	; (8006924 <HAL_DMA_IRQHandler+0xa18>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d036      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a73      	ldr	r2, [pc, #460]	; (8006928 <HAL_DMA_IRQHandler+0xa1c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d031      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a71      	ldr	r2, [pc, #452]	; (800692c <HAL_DMA_IRQHandler+0xa20>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d02c      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a70      	ldr	r2, [pc, #448]	; (8006930 <HAL_DMA_IRQHandler+0xa24>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d027      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a6e      	ldr	r2, [pc, #440]	; (8006934 <HAL_DMA_IRQHandler+0xa28>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a6d      	ldr	r2, [pc, #436]	; (8006938 <HAL_DMA_IRQHandler+0xa2c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d01d      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a6b      	ldr	r2, [pc, #428]	; (800693c <HAL_DMA_IRQHandler+0xa30>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a6a      	ldr	r2, [pc, #424]	; (8006940 <HAL_DMA_IRQHandler+0xa34>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a68      	ldr	r2, [pc, #416]	; (8006944 <HAL_DMA_IRQHandler+0xa38>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a67      	ldr	r2, [pc, #412]	; (8006948 <HAL_DMA_IRQHandler+0xa3c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a65      	ldr	r2, [pc, #404]	; (800694c <HAL_DMA_IRQHandler+0xa40>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x8b8>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a64      	ldr	r2, [pc, #400]	; (8006950 <HAL_DMA_IRQHandler+0xa44>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d108      	bne.n	80067d6 <HAL_DMA_IRQHandler+0x8ca>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e007      	b.n	80067e6 <HAL_DMA_IRQHandler+0x8da>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d307      	bcc.n	8006802 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f2      	bne.n	80067e6 <HAL_DMA_IRQHandler+0x8da>
 8006800:	e000      	b.n	8006804 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006802:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d004      	beq.n	800681c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2203      	movs	r2, #3
 8006816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800681a:	e003      	b.n	8006824 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8272 	beq.w	8006d1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	4798      	blx	r3
 800683e:	e26c      	b.n	8006d1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a43      	ldr	r2, [pc, #268]	; (8006954 <HAL_DMA_IRQHandler+0xa48>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d022      	beq.n	8006890 <HAL_DMA_IRQHandler+0x984>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a42      	ldr	r2, [pc, #264]	; (8006958 <HAL_DMA_IRQHandler+0xa4c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d01d      	beq.n	8006890 <HAL_DMA_IRQHandler+0x984>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a40      	ldr	r2, [pc, #256]	; (800695c <HAL_DMA_IRQHandler+0xa50>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d018      	beq.n	8006890 <HAL_DMA_IRQHandler+0x984>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a3f      	ldr	r2, [pc, #252]	; (8006960 <HAL_DMA_IRQHandler+0xa54>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_DMA_IRQHandler+0x984>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a3d      	ldr	r2, [pc, #244]	; (8006964 <HAL_DMA_IRQHandler+0xa58>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <HAL_DMA_IRQHandler+0x984>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a3c      	ldr	r2, [pc, #240]	; (8006968 <HAL_DMA_IRQHandler+0xa5c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <HAL_DMA_IRQHandler+0x984>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a3a      	ldr	r2, [pc, #232]	; (800696c <HAL_DMA_IRQHandler+0xa60>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <HAL_DMA_IRQHandler+0x984>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a39      	ldr	r2, [pc, #228]	; (8006970 <HAL_DMA_IRQHandler+0xa64>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d101      	bne.n	8006894 <HAL_DMA_IRQHandler+0x988>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <HAL_DMA_IRQHandler+0x98a>
 8006894:	2300      	movs	r3, #0
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 823f 	beq.w	8006d1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2204      	movs	r2, #4
 80068ae:	409a      	lsls	r2, r3
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80cd 	beq.w	8006a54 <HAL_DMA_IRQHandler+0xb48>
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80c7 	beq.w	8006a54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2204      	movs	r2, #4
 80068d0:	409a      	lsls	r2, r3
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d049      	beq.n	8006974 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8210 	beq.w	8006d14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068fc:	e20a      	b.n	8006d14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8206 	beq.w	8006d14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006910:	e200      	b.n	8006d14 <HAL_DMA_IRQHandler+0xe08>
 8006912:	bf00      	nop
 8006914:	40020010 	.word	0x40020010
 8006918:	40020028 	.word	0x40020028
 800691c:	40020040 	.word	0x40020040
 8006920:	40020058 	.word	0x40020058
 8006924:	40020070 	.word	0x40020070
 8006928:	40020088 	.word	0x40020088
 800692c:	400200a0 	.word	0x400200a0
 8006930:	400200b8 	.word	0x400200b8
 8006934:	40020410 	.word	0x40020410
 8006938:	40020428 	.word	0x40020428
 800693c:	40020440 	.word	0x40020440
 8006940:	40020458 	.word	0x40020458
 8006944:	40020470 	.word	0x40020470
 8006948:	40020488 	.word	0x40020488
 800694c:	400204a0 	.word	0x400204a0
 8006950:	400204b8 	.word	0x400204b8
 8006954:	58025408 	.word	0x58025408
 8006958:	5802541c 	.word	0x5802541c
 800695c:	58025430 	.word	0x58025430
 8006960:	58025444 	.word	0x58025444
 8006964:	58025458 	.word	0x58025458
 8006968:	5802546c 	.word	0x5802546c
 800696c:	58025480 	.word	0x58025480
 8006970:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d160      	bne.n	8006a40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a7f      	ldr	r2, [pc, #508]	; (8006b80 <HAL_DMA_IRQHandler+0xc74>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d04a      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a7d      	ldr	r2, [pc, #500]	; (8006b84 <HAL_DMA_IRQHandler+0xc78>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d045      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a7c      	ldr	r2, [pc, #496]	; (8006b88 <HAL_DMA_IRQHandler+0xc7c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d040      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a7a      	ldr	r2, [pc, #488]	; (8006b8c <HAL_DMA_IRQHandler+0xc80>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d03b      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a79      	ldr	r2, [pc, #484]	; (8006b90 <HAL_DMA_IRQHandler+0xc84>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d036      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a77      	ldr	r2, [pc, #476]	; (8006b94 <HAL_DMA_IRQHandler+0xc88>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d031      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a76      	ldr	r2, [pc, #472]	; (8006b98 <HAL_DMA_IRQHandler+0xc8c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d02c      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a74      	ldr	r2, [pc, #464]	; (8006b9c <HAL_DMA_IRQHandler+0xc90>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d027      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a73      	ldr	r2, [pc, #460]	; (8006ba0 <HAL_DMA_IRQHandler+0xc94>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d022      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a71      	ldr	r2, [pc, #452]	; (8006ba4 <HAL_DMA_IRQHandler+0xc98>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a70      	ldr	r2, [pc, #448]	; (8006ba8 <HAL_DMA_IRQHandler+0xc9c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a6e      	ldr	r2, [pc, #440]	; (8006bac <HAL_DMA_IRQHandler+0xca0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a6d      	ldr	r2, [pc, #436]	; (8006bb0 <HAL_DMA_IRQHandler+0xca4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a6b      	ldr	r2, [pc, #428]	; (8006bb4 <HAL_DMA_IRQHandler+0xca8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a6a      	ldr	r2, [pc, #424]	; (8006bb8 <HAL_DMA_IRQHandler+0xcac>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xb12>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a68      	ldr	r2, [pc, #416]	; (8006bbc <HAL_DMA_IRQHandler+0xcb0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d108      	bne.n	8006a30 <HAL_DMA_IRQHandler+0xb24>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0208 	bic.w	r2, r2, #8
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e007      	b.n	8006a40 <HAL_DMA_IRQHandler+0xb34>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0204 	bic.w	r2, r2, #4
 8006a3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8165 	beq.w	8006d14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a52:	e15f      	b.n	8006d14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a58:	f003 031f 	and.w	r3, r3, #31
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	409a      	lsls	r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80c5 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xce8>
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80bf 	beq.w	8006bf4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7a:	f003 031f 	and.w	r3, r3, #31
 8006a7e:	2202      	movs	r2, #2
 8006a80:	409a      	lsls	r2, r3
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d018      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 813a 	beq.w	8006d18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aac:	e134      	b.n	8006d18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 8130 	beq.w	8006d18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac0:	e12a      	b.n	8006d18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f040 8089 	bne.w	8006be0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2b      	ldr	r2, [pc, #172]	; (8006b80 <HAL_DMA_IRQHandler+0xc74>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d04a      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a29      	ldr	r2, [pc, #164]	; (8006b84 <HAL_DMA_IRQHandler+0xc78>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d045      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a28      	ldr	r2, [pc, #160]	; (8006b88 <HAL_DMA_IRQHandler+0xc7c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d040      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a26      	ldr	r2, [pc, #152]	; (8006b8c <HAL_DMA_IRQHandler+0xc80>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a25      	ldr	r2, [pc, #148]	; (8006b90 <HAL_DMA_IRQHandler+0xc84>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d036      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <HAL_DMA_IRQHandler+0xc88>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a22      	ldr	r2, [pc, #136]	; (8006b98 <HAL_DMA_IRQHandler+0xc8c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a20      	ldr	r2, [pc, #128]	; (8006b9c <HAL_DMA_IRQHandler+0xc90>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1f      	ldr	r2, [pc, #124]	; (8006ba0 <HAL_DMA_IRQHandler+0xc94>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <HAL_DMA_IRQHandler+0xc98>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1c      	ldr	r2, [pc, #112]	; (8006ba8 <HAL_DMA_IRQHandler+0xc9c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1a      	ldr	r2, [pc, #104]	; (8006bac <HAL_DMA_IRQHandler+0xca0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a19      	ldr	r2, [pc, #100]	; (8006bb0 <HAL_DMA_IRQHandler+0xca4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <HAL_DMA_IRQHandler+0xca8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <HAL_DMA_IRQHandler+0xcac>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_DMA_IRQHandler+0xc62>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <HAL_DMA_IRQHandler+0xcb0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d128      	bne.n	8006bc0 <HAL_DMA_IRQHandler+0xcb4>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0214 	bic.w	r2, r2, #20
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e027      	b.n	8006bd0 <HAL_DMA_IRQHandler+0xcc4>
 8006b80:	40020010 	.word	0x40020010
 8006b84:	40020028 	.word	0x40020028
 8006b88:	40020040 	.word	0x40020040
 8006b8c:	40020058 	.word	0x40020058
 8006b90:	40020070 	.word	0x40020070
 8006b94:	40020088 	.word	0x40020088
 8006b98:	400200a0 	.word	0x400200a0
 8006b9c:	400200b8 	.word	0x400200b8
 8006ba0:	40020410 	.word	0x40020410
 8006ba4:	40020428 	.word	0x40020428
 8006ba8:	40020440 	.word	0x40020440
 8006bac:	40020458 	.word	0x40020458
 8006bb0:	40020470 	.word	0x40020470
 8006bb4:	40020488 	.word	0x40020488
 8006bb8:	400204a0 	.word	0x400204a0
 8006bbc:	400204b8 	.word	0x400204b8
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 020a 	bic.w	r2, r2, #10
 8006bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8097 	beq.w	8006d18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf2:	e091      	b.n	8006d18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	409a      	lsls	r2, r3
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 8088 	beq.w	8006d1a <HAL_DMA_IRQHandler+0xe0e>
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8082 	beq.w	8006d1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a41      	ldr	r2, [pc, #260]	; (8006d20 <HAL_DMA_IRQHandler+0xe14>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d04a      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a3f      	ldr	r2, [pc, #252]	; (8006d24 <HAL_DMA_IRQHandler+0xe18>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d045      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a3e      	ldr	r2, [pc, #248]	; (8006d28 <HAL_DMA_IRQHandler+0xe1c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d040      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a3c      	ldr	r2, [pc, #240]	; (8006d2c <HAL_DMA_IRQHandler+0xe20>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d03b      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <HAL_DMA_IRQHandler+0xe24>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d036      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a39      	ldr	r2, [pc, #228]	; (8006d34 <HAL_DMA_IRQHandler+0xe28>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d031      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a38      	ldr	r2, [pc, #224]	; (8006d38 <HAL_DMA_IRQHandler+0xe2c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d02c      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a36      	ldr	r2, [pc, #216]	; (8006d3c <HAL_DMA_IRQHandler+0xe30>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d027      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a35      	ldr	r2, [pc, #212]	; (8006d40 <HAL_DMA_IRQHandler+0xe34>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d022      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a33      	ldr	r2, [pc, #204]	; (8006d44 <HAL_DMA_IRQHandler+0xe38>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01d      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a32      	ldr	r2, [pc, #200]	; (8006d48 <HAL_DMA_IRQHandler+0xe3c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d018      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a30      	ldr	r2, [pc, #192]	; (8006d4c <HAL_DMA_IRQHandler+0xe40>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d013      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a2f      	ldr	r2, [pc, #188]	; (8006d50 <HAL_DMA_IRQHandler+0xe44>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00e      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a2d      	ldr	r2, [pc, #180]	; (8006d54 <HAL_DMA_IRQHandler+0xe48>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d009      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a2c      	ldr	r2, [pc, #176]	; (8006d58 <HAL_DMA_IRQHandler+0xe4c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <HAL_DMA_IRQHandler+0xdaa>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2a      	ldr	r2, [pc, #168]	; (8006d5c <HAL_DMA_IRQHandler+0xe50>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d108      	bne.n	8006cc8 <HAL_DMA_IRQHandler+0xdbc>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 021c 	bic.w	r2, r2, #28
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	e007      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xdcc>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 020e 	bic.w	r2, r2, #14
 8006cd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cdc:	f003 031f 	and.w	r3, r3, #31
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	409a      	lsls	r2, r3
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
 8006d0e:	e004      	b.n	8006d1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d10:	bf00      	nop
 8006d12:	e002      	b.n	8006d1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d1a:	3728      	adds	r7, #40	; 0x28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40020010 	.word	0x40020010
 8006d24:	40020028 	.word	0x40020028
 8006d28:	40020040 	.word	0x40020040
 8006d2c:	40020058 	.word	0x40020058
 8006d30:	40020070 	.word	0x40020070
 8006d34:	40020088 	.word	0x40020088
 8006d38:	400200a0 	.word	0x400200a0
 8006d3c:	400200b8 	.word	0x400200b8
 8006d40:	40020410 	.word	0x40020410
 8006d44:	40020428 	.word	0x40020428
 8006d48:	40020440 	.word	0x40020440
 8006d4c:	40020458 	.word	0x40020458
 8006d50:	40020470 	.word	0x40020470
 8006d54:	40020488 	.word	0x40020488
 8006d58:	400204a0 	.word	0x400204a0
 8006d5c:	400204b8 	.word	0x400204b8

08006d60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a7f      	ldr	r2, [pc, #508]	; (8006f7c <DMA_SetConfig+0x21c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d072      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a7d      	ldr	r2, [pc, #500]	; (8006f80 <DMA_SetConfig+0x220>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d06d      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a7c      	ldr	r2, [pc, #496]	; (8006f84 <DMA_SetConfig+0x224>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d068      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a7a      	ldr	r2, [pc, #488]	; (8006f88 <DMA_SetConfig+0x228>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d063      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a79      	ldr	r2, [pc, #484]	; (8006f8c <DMA_SetConfig+0x22c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d05e      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a77      	ldr	r2, [pc, #476]	; (8006f90 <DMA_SetConfig+0x230>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d059      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a76      	ldr	r2, [pc, #472]	; (8006f94 <DMA_SetConfig+0x234>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d054      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a74      	ldr	r2, [pc, #464]	; (8006f98 <DMA_SetConfig+0x238>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d04f      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a73      	ldr	r2, [pc, #460]	; (8006f9c <DMA_SetConfig+0x23c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d04a      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a71      	ldr	r2, [pc, #452]	; (8006fa0 <DMA_SetConfig+0x240>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d045      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a70      	ldr	r2, [pc, #448]	; (8006fa4 <DMA_SetConfig+0x244>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d040      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a6e      	ldr	r2, [pc, #440]	; (8006fa8 <DMA_SetConfig+0x248>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d03b      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a6d      	ldr	r2, [pc, #436]	; (8006fac <DMA_SetConfig+0x24c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d036      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a6b      	ldr	r2, [pc, #428]	; (8006fb0 <DMA_SetConfig+0x250>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d031      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a6a      	ldr	r2, [pc, #424]	; (8006fb4 <DMA_SetConfig+0x254>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d02c      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a68      	ldr	r2, [pc, #416]	; (8006fb8 <DMA_SetConfig+0x258>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d027      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a67      	ldr	r2, [pc, #412]	; (8006fbc <DMA_SetConfig+0x25c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d022      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a65      	ldr	r2, [pc, #404]	; (8006fc0 <DMA_SetConfig+0x260>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d01d      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a64      	ldr	r2, [pc, #400]	; (8006fc4 <DMA_SetConfig+0x264>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d018      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a62      	ldr	r2, [pc, #392]	; (8006fc8 <DMA_SetConfig+0x268>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a61      	ldr	r2, [pc, #388]	; (8006fcc <DMA_SetConfig+0x26c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00e      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a5f      	ldr	r2, [pc, #380]	; (8006fd0 <DMA_SetConfig+0x270>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d009      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a5e      	ldr	r2, [pc, #376]	; (8006fd4 <DMA_SetConfig+0x274>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d004      	beq.n	8006e6a <DMA_SetConfig+0x10a>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a5c      	ldr	r2, [pc, #368]	; (8006fd8 <DMA_SetConfig+0x278>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d101      	bne.n	8006e6e <DMA_SetConfig+0x10e>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <DMA_SetConfig+0x110>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00d      	beq.n	8006e90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d004      	beq.n	8006e90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a39      	ldr	r2, [pc, #228]	; (8006f7c <DMA_SetConfig+0x21c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d04a      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a38      	ldr	r2, [pc, #224]	; (8006f80 <DMA_SetConfig+0x220>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d045      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a36      	ldr	r2, [pc, #216]	; (8006f84 <DMA_SetConfig+0x224>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d040      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a35      	ldr	r2, [pc, #212]	; (8006f88 <DMA_SetConfig+0x228>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d03b      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a33      	ldr	r2, [pc, #204]	; (8006f8c <DMA_SetConfig+0x22c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d036      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a32      	ldr	r2, [pc, #200]	; (8006f90 <DMA_SetConfig+0x230>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d031      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a30      	ldr	r2, [pc, #192]	; (8006f94 <DMA_SetConfig+0x234>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d02c      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a2f      	ldr	r2, [pc, #188]	; (8006f98 <DMA_SetConfig+0x238>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d027      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a2d      	ldr	r2, [pc, #180]	; (8006f9c <DMA_SetConfig+0x23c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d022      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a2c      	ldr	r2, [pc, #176]	; (8006fa0 <DMA_SetConfig+0x240>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d01d      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a2a      	ldr	r2, [pc, #168]	; (8006fa4 <DMA_SetConfig+0x244>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d018      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a29      	ldr	r2, [pc, #164]	; (8006fa8 <DMA_SetConfig+0x248>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d013      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a27      	ldr	r2, [pc, #156]	; (8006fac <DMA_SetConfig+0x24c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00e      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a26      	ldr	r2, [pc, #152]	; (8006fb0 <DMA_SetConfig+0x250>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d009      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a24      	ldr	r2, [pc, #144]	; (8006fb4 <DMA_SetConfig+0x254>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <DMA_SetConfig+0x1d0>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a23      	ldr	r2, [pc, #140]	; (8006fb8 <DMA_SetConfig+0x258>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d101      	bne.n	8006f34 <DMA_SetConfig+0x1d4>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <DMA_SetConfig+0x1d6>
 8006f34:	2300      	movs	r3, #0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d059      	beq.n	8006fee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	223f      	movs	r2, #63	; 0x3f
 8006f44:	409a      	lsls	r2, r3
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2b40      	cmp	r3, #64	; 0x40
 8006f68:	d138      	bne.n	8006fdc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f7a:	e086      	b.n	800708a <DMA_SetConfig+0x32a>
 8006f7c:	40020010 	.word	0x40020010
 8006f80:	40020028 	.word	0x40020028
 8006f84:	40020040 	.word	0x40020040
 8006f88:	40020058 	.word	0x40020058
 8006f8c:	40020070 	.word	0x40020070
 8006f90:	40020088 	.word	0x40020088
 8006f94:	400200a0 	.word	0x400200a0
 8006f98:	400200b8 	.word	0x400200b8
 8006f9c:	40020410 	.word	0x40020410
 8006fa0:	40020428 	.word	0x40020428
 8006fa4:	40020440 	.word	0x40020440
 8006fa8:	40020458 	.word	0x40020458
 8006fac:	40020470 	.word	0x40020470
 8006fb0:	40020488 	.word	0x40020488
 8006fb4:	400204a0 	.word	0x400204a0
 8006fb8:	400204b8 	.word	0x400204b8
 8006fbc:	58025408 	.word	0x58025408
 8006fc0:	5802541c 	.word	0x5802541c
 8006fc4:	58025430 	.word	0x58025430
 8006fc8:	58025444 	.word	0x58025444
 8006fcc:	58025458 	.word	0x58025458
 8006fd0:	5802546c 	.word	0x5802546c
 8006fd4:	58025480 	.word	0x58025480
 8006fd8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	60da      	str	r2, [r3, #12]
}
 8006fec:	e04d      	b.n	800708a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a29      	ldr	r2, [pc, #164]	; (8007098 <DMA_SetConfig+0x338>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <DMA_SetConfig+0x2de>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a27      	ldr	r2, [pc, #156]	; (800709c <DMA_SetConfig+0x33c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <DMA_SetConfig+0x2de>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a26      	ldr	r2, [pc, #152]	; (80070a0 <DMA_SetConfig+0x340>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <DMA_SetConfig+0x2de>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a24      	ldr	r2, [pc, #144]	; (80070a4 <DMA_SetConfig+0x344>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <DMA_SetConfig+0x2de>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a23      	ldr	r2, [pc, #140]	; (80070a8 <DMA_SetConfig+0x348>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <DMA_SetConfig+0x2de>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a21      	ldr	r2, [pc, #132]	; (80070ac <DMA_SetConfig+0x34c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <DMA_SetConfig+0x2de>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <DMA_SetConfig+0x350>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <DMA_SetConfig+0x2de>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <DMA_SetConfig+0x354>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <DMA_SetConfig+0x2e2>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <DMA_SetConfig+0x2e4>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d020      	beq.n	800708a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	2201      	movs	r2, #1
 8007052:	409a      	lsls	r2, r3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d108      	bne.n	800707a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	60da      	str	r2, [r3, #12]
}
 8007078:	e007      	b.n	800708a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	60da      	str	r2, [r3, #12]
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	58025408 	.word	0x58025408
 800709c:	5802541c 	.word	0x5802541c
 80070a0:	58025430 	.word	0x58025430
 80070a4:	58025444 	.word	0x58025444
 80070a8:	58025458 	.word	0x58025458
 80070ac:	5802546c 	.word	0x5802546c
 80070b0:	58025480 	.word	0x58025480
 80070b4:	58025494 	.word	0x58025494

080070b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a42      	ldr	r2, [pc, #264]	; (80071d0 <DMA_CalcBaseAndBitshift+0x118>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d04a      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a41      	ldr	r2, [pc, #260]	; (80071d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d045      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a3f      	ldr	r2, [pc, #252]	; (80071d8 <DMA_CalcBaseAndBitshift+0x120>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d040      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a3e      	ldr	r2, [pc, #248]	; (80071dc <DMA_CalcBaseAndBitshift+0x124>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d03b      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a3c      	ldr	r2, [pc, #240]	; (80071e0 <DMA_CalcBaseAndBitshift+0x128>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d036      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a3b      	ldr	r2, [pc, #236]	; (80071e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d031      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a39      	ldr	r2, [pc, #228]	; (80071e8 <DMA_CalcBaseAndBitshift+0x130>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d02c      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a38      	ldr	r2, [pc, #224]	; (80071ec <DMA_CalcBaseAndBitshift+0x134>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d027      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a36      	ldr	r2, [pc, #216]	; (80071f0 <DMA_CalcBaseAndBitshift+0x138>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a35      	ldr	r2, [pc, #212]	; (80071f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01d      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a33      	ldr	r2, [pc, #204]	; (80071f8 <DMA_CalcBaseAndBitshift+0x140>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a32      	ldr	r2, [pc, #200]	; (80071fc <DMA_CalcBaseAndBitshift+0x144>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a30      	ldr	r2, [pc, #192]	; (8007200 <DMA_CalcBaseAndBitshift+0x148>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a2f      	ldr	r2, [pc, #188]	; (8007204 <DMA_CalcBaseAndBitshift+0x14c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a2d      	ldr	r2, [pc, #180]	; (8007208 <DMA_CalcBaseAndBitshift+0x150>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <DMA_CalcBaseAndBitshift+0xa8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a2c      	ldr	r2, [pc, #176]	; (800720c <DMA_CalcBaseAndBitshift+0x154>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <DMA_CalcBaseAndBitshift+0xac>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <DMA_CalcBaseAndBitshift+0xae>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d024      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	b2db      	uxtb	r3, r3
 8007170:	3b10      	subs	r3, #16
 8007172:	4a27      	ldr	r2, [pc, #156]	; (8007210 <DMA_CalcBaseAndBitshift+0x158>)
 8007174:	fba2 2303 	umull	r2, r3, r2, r3
 8007178:	091b      	lsrs	r3, r3, #4
 800717a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	4a24      	ldr	r2, [pc, #144]	; (8007214 <DMA_CalcBaseAndBitshift+0x15c>)
 8007184:	5cd3      	ldrb	r3, [r2, r3]
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b03      	cmp	r3, #3
 8007190:	d908      	bls.n	80071a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	4b1f      	ldr	r3, [pc, #124]	; (8007218 <DMA_CalcBaseAndBitshift+0x160>)
 800719a:	4013      	ands	r3, r2
 800719c:	1d1a      	adds	r2, r3, #4
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	659a      	str	r2, [r3, #88]	; 0x58
 80071a2:	e00d      	b.n	80071c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	4b1b      	ldr	r3, [pc, #108]	; (8007218 <DMA_CalcBaseAndBitshift+0x160>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	6593      	str	r3, [r2, #88]	; 0x58
 80071b2:	e005      	b.n	80071c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	40020010 	.word	0x40020010
 80071d4:	40020028 	.word	0x40020028
 80071d8:	40020040 	.word	0x40020040
 80071dc:	40020058 	.word	0x40020058
 80071e0:	40020070 	.word	0x40020070
 80071e4:	40020088 	.word	0x40020088
 80071e8:	400200a0 	.word	0x400200a0
 80071ec:	400200b8 	.word	0x400200b8
 80071f0:	40020410 	.word	0x40020410
 80071f4:	40020428 	.word	0x40020428
 80071f8:	40020440 	.word	0x40020440
 80071fc:	40020458 	.word	0x40020458
 8007200:	40020470 	.word	0x40020470
 8007204:	40020488 	.word	0x40020488
 8007208:	400204a0 	.word	0x400204a0
 800720c:	400204b8 	.word	0x400204b8
 8007210:	aaaaaaab 	.word	0xaaaaaaab
 8007214:	0800d9ec 	.word	0x0800d9ec
 8007218:	fffffc00 	.word	0xfffffc00

0800721c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d120      	bne.n	8007272 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	2b03      	cmp	r3, #3
 8007236:	d858      	bhi.n	80072ea <DMA_CheckFifoParam+0xce>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <DMA_CheckFifoParam+0x24>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	08007251 	.word	0x08007251
 8007244:	08007263 	.word	0x08007263
 8007248:	08007251 	.word	0x08007251
 800724c:	080072eb 	.word	0x080072eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d048      	beq.n	80072ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007260:	e045      	b.n	80072ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800726a:	d142      	bne.n	80072f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007270:	e03f      	b.n	80072f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800727a:	d123      	bne.n	80072c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	2b03      	cmp	r3, #3
 8007282:	d838      	bhi.n	80072f6 <DMA_CheckFifoParam+0xda>
 8007284:	a201      	add	r2, pc, #4	; (adr r2, 800728c <DMA_CheckFifoParam+0x70>)
 8007286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728a:	bf00      	nop
 800728c:	0800729d 	.word	0x0800729d
 8007290:	080072a3 	.word	0x080072a3
 8007294:	0800729d 	.word	0x0800729d
 8007298:	080072b5 	.word	0x080072b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	73fb      	strb	r3, [r7, #15]
        break;
 80072a0:	e030      	b.n	8007304 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d025      	beq.n	80072fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072b2:	e022      	b.n	80072fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072bc:	d11f      	bne.n	80072fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072c2:	e01c      	b.n	80072fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d902      	bls.n	80072d2 <DMA_CheckFifoParam+0xb6>
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d003      	beq.n	80072d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80072d0:	e018      	b.n	8007304 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]
        break;
 80072d6:	e015      	b.n	8007304 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00e      	beq.n	8007302 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
    break;
 80072e8:	e00b      	b.n	8007302 <DMA_CheckFifoParam+0xe6>
        break;
 80072ea:	bf00      	nop
 80072ec:	e00a      	b.n	8007304 <DMA_CheckFifoParam+0xe8>
        break;
 80072ee:	bf00      	nop
 80072f0:	e008      	b.n	8007304 <DMA_CheckFifoParam+0xe8>
        break;
 80072f2:	bf00      	nop
 80072f4:	e006      	b.n	8007304 <DMA_CheckFifoParam+0xe8>
        break;
 80072f6:	bf00      	nop
 80072f8:	e004      	b.n	8007304 <DMA_CheckFifoParam+0xe8>
        break;
 80072fa:	bf00      	nop
 80072fc:	e002      	b.n	8007304 <DMA_CheckFifoParam+0xe8>
        break;
 80072fe:	bf00      	nop
 8007300:	e000      	b.n	8007304 <DMA_CheckFifoParam+0xe8>
    break;
 8007302:	bf00      	nop
    }
  }

  return status;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop

08007314 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a38      	ldr	r2, [pc, #224]	; (8007408 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d022      	beq.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a36      	ldr	r2, [pc, #216]	; (800740c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d01d      	beq.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a35      	ldr	r2, [pc, #212]	; (8007410 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d018      	beq.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a33      	ldr	r2, [pc, #204]	; (8007414 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a32      	ldr	r2, [pc, #200]	; (8007418 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00e      	beq.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a30      	ldr	r2, [pc, #192]	; (800741c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d009      	beq.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a2f      	ldr	r2, [pc, #188]	; (8007420 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d004      	beq.n	8007372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d101      	bne.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007376:	2300      	movs	r3, #0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01a      	beq.n	80073b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	3b08      	subs	r3, #8
 8007384:	4a28      	ldr	r2, [pc, #160]	; (8007428 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	091b      	lsrs	r3, r3, #4
 800738c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4b26      	ldr	r3, [pc, #152]	; (800742c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a24      	ldr	r2, [pc, #144]	; (8007430 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80073a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 031f 	and.w	r3, r3, #31
 80073a8:	2201      	movs	r2, #1
 80073aa:	409a      	lsls	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80073b0:	e024      	b.n	80073fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	3b10      	subs	r3, #16
 80073ba:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	091b      	lsrs	r3, r3, #4
 80073c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4a1c      	ldr	r2, [pc, #112]	; (8007438 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d806      	bhi.n	80073da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4a1b      	ldr	r2, [pc, #108]	; (800743c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d902      	bls.n	80073da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3308      	adds	r3, #8
 80073d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4b18      	ldr	r3, [pc, #96]	; (8007440 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	461a      	mov	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a16      	ldr	r2, [pc, #88]	; (8007444 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	2201      	movs	r2, #1
 80073f6:	409a      	lsls	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073fc:	bf00      	nop
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	58025408 	.word	0x58025408
 800740c:	5802541c 	.word	0x5802541c
 8007410:	58025430 	.word	0x58025430
 8007414:	58025444 	.word	0x58025444
 8007418:	58025458 	.word	0x58025458
 800741c:	5802546c 	.word	0x5802546c
 8007420:	58025480 	.word	0x58025480
 8007424:	58025494 	.word	0x58025494
 8007428:	cccccccd 	.word	0xcccccccd
 800742c:	16009600 	.word	0x16009600
 8007430:	58025880 	.word	0x58025880
 8007434:	aaaaaaab 	.word	0xaaaaaaab
 8007438:	400204b8 	.word	0x400204b8
 800743c:	4002040f 	.word	0x4002040f
 8007440:	10008200 	.word	0x10008200
 8007444:	40020880 	.word	0x40020880

08007448 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d04a      	beq.n	80074f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b08      	cmp	r3, #8
 8007462:	d847      	bhi.n	80074f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a25      	ldr	r2, [pc, #148]	; (8007500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d022      	beq.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a24      	ldr	r2, [pc, #144]	; (8007504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d01d      	beq.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a22      	ldr	r2, [pc, #136]	; (8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d018      	beq.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a21      	ldr	r2, [pc, #132]	; (800750c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00e      	beq.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1e      	ldr	r2, [pc, #120]	; (8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d009      	beq.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d004      	beq.n	80074b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1b      	ldr	r2, [pc, #108]	; (800751c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d101      	bne.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80074b8:	2300      	movs	r3, #0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4b17      	ldr	r3, [pc, #92]	; (8007520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a15      	ldr	r2, [pc, #84]	; (8007524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80074d0:	671a      	str	r2, [r3, #112]	; 0x70
 80074d2:	e009      	b.n	80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a11      	ldr	r2, [pc, #68]	; (800752c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80074e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	2201      	movs	r2, #1
 80074ee:	409a      	lsls	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	58025408 	.word	0x58025408
 8007504:	5802541c 	.word	0x5802541c
 8007508:	58025430 	.word	0x58025430
 800750c:	58025444 	.word	0x58025444
 8007510:	58025458 	.word	0x58025458
 8007514:	5802546c 	.word	0x5802546c
 8007518:	58025480 	.word	0x58025480
 800751c:	58025494 	.word	0x58025494
 8007520:	1600963f 	.word	0x1600963f
 8007524:	58025940 	.word	0x58025940
 8007528:	1000823f 	.word	0x1000823f
 800752c:	40020940 	.word	0x40020940

08007530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007530:	b480      	push	{r7}
 8007532:	b089      	sub	sp, #36	; 0x24
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800753e:	4b86      	ldr	r3, [pc, #536]	; (8007758 <HAL_GPIO_Init+0x228>)
 8007540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007542:	e18c      	b.n	800785e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	2101      	movs	r1, #1
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	fa01 f303 	lsl.w	r3, r1, r3
 8007550:	4013      	ands	r3, r2
 8007552:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 817e 	beq.w	8007858 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d005      	beq.n	8007574 <HAL_GPIO_Init+0x44>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d130      	bne.n	80075d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	2203      	movs	r2, #3
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	43db      	mvns	r3, r3
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	4013      	ands	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	4313      	orrs	r3, r2
 800759c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80075aa:	2201      	movs	r2, #1
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4013      	ands	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	f003 0201 	and.w	r2, r3, #1
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d017      	beq.n	8007612 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	2203      	movs	r2, #3
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	43db      	mvns	r3, r3
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	4013      	ands	r3, r2
 80075f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	4313      	orrs	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d123      	bne.n	8007666 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	08da      	lsrs	r2, r3, #3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3208      	adds	r2, #8
 8007626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	220f      	movs	r2, #15
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4013      	ands	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	691a      	ldr	r2, [r3, #16]
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	f003 0307 	and.w	r3, r3, #7
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	fa02 f303 	lsl.w	r3, r2, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	4313      	orrs	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	08da      	lsrs	r2, r3, #3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3208      	adds	r2, #8
 8007660:	69b9      	ldr	r1, [r7, #24]
 8007662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	2203      	movs	r2, #3
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	43db      	mvns	r3, r3
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	4013      	ands	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f003 0203 	and.w	r2, r3, #3
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	4313      	orrs	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 80d8 	beq.w	8007858 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076a8:	4b2c      	ldr	r3, [pc, #176]	; (800775c <HAL_GPIO_Init+0x22c>)
 80076aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076ae:	4a2b      	ldr	r2, [pc, #172]	; (800775c <HAL_GPIO_Init+0x22c>)
 80076b0:	f043 0302 	orr.w	r3, r3, #2
 80076b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80076b8:	4b28      	ldr	r3, [pc, #160]	; (800775c <HAL_GPIO_Init+0x22c>)
 80076ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80076c6:	4a26      	ldr	r2, [pc, #152]	; (8007760 <HAL_GPIO_Init+0x230>)
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	089b      	lsrs	r3, r3, #2
 80076cc:	3302      	adds	r3, #2
 80076ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	220f      	movs	r2, #15
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <HAL_GPIO_Init+0x234>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d04a      	beq.n	8007788 <HAL_GPIO_Init+0x258>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a1c      	ldr	r2, [pc, #112]	; (8007768 <HAL_GPIO_Init+0x238>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d02b      	beq.n	8007752 <HAL_GPIO_Init+0x222>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a1b      	ldr	r2, [pc, #108]	; (800776c <HAL_GPIO_Init+0x23c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d025      	beq.n	800774e <HAL_GPIO_Init+0x21e>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a1a      	ldr	r2, [pc, #104]	; (8007770 <HAL_GPIO_Init+0x240>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d01f      	beq.n	800774a <HAL_GPIO_Init+0x21a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a19      	ldr	r2, [pc, #100]	; (8007774 <HAL_GPIO_Init+0x244>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d019      	beq.n	8007746 <HAL_GPIO_Init+0x216>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a18      	ldr	r2, [pc, #96]	; (8007778 <HAL_GPIO_Init+0x248>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_GPIO_Init+0x212>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a17      	ldr	r2, [pc, #92]	; (800777c <HAL_GPIO_Init+0x24c>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00d      	beq.n	800773e <HAL_GPIO_Init+0x20e>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a16      	ldr	r2, [pc, #88]	; (8007780 <HAL_GPIO_Init+0x250>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <HAL_GPIO_Init+0x20a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a15      	ldr	r2, [pc, #84]	; (8007784 <HAL_GPIO_Init+0x254>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d101      	bne.n	8007736 <HAL_GPIO_Init+0x206>
 8007732:	2309      	movs	r3, #9
 8007734:	e029      	b.n	800778a <HAL_GPIO_Init+0x25a>
 8007736:	230a      	movs	r3, #10
 8007738:	e027      	b.n	800778a <HAL_GPIO_Init+0x25a>
 800773a:	2307      	movs	r3, #7
 800773c:	e025      	b.n	800778a <HAL_GPIO_Init+0x25a>
 800773e:	2306      	movs	r3, #6
 8007740:	e023      	b.n	800778a <HAL_GPIO_Init+0x25a>
 8007742:	2305      	movs	r3, #5
 8007744:	e021      	b.n	800778a <HAL_GPIO_Init+0x25a>
 8007746:	2304      	movs	r3, #4
 8007748:	e01f      	b.n	800778a <HAL_GPIO_Init+0x25a>
 800774a:	2303      	movs	r3, #3
 800774c:	e01d      	b.n	800778a <HAL_GPIO_Init+0x25a>
 800774e:	2302      	movs	r3, #2
 8007750:	e01b      	b.n	800778a <HAL_GPIO_Init+0x25a>
 8007752:	2301      	movs	r3, #1
 8007754:	e019      	b.n	800778a <HAL_GPIO_Init+0x25a>
 8007756:	bf00      	nop
 8007758:	58000080 	.word	0x58000080
 800775c:	58024400 	.word	0x58024400
 8007760:	58000400 	.word	0x58000400
 8007764:	58020000 	.word	0x58020000
 8007768:	58020400 	.word	0x58020400
 800776c:	58020800 	.word	0x58020800
 8007770:	58020c00 	.word	0x58020c00
 8007774:	58021000 	.word	0x58021000
 8007778:	58021400 	.word	0x58021400
 800777c:	58021800 	.word	0x58021800
 8007780:	58021c00 	.word	0x58021c00
 8007784:	58022400 	.word	0x58022400
 8007788:	2300      	movs	r3, #0
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	f002 0203 	and.w	r2, r2, #3
 8007790:	0092      	lsls	r2, r2, #2
 8007792:	4093      	lsls	r3, r2
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	4313      	orrs	r3, r2
 8007798:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800779a:	4938      	ldr	r1, [pc, #224]	; (800787c <HAL_GPIO_Init+0x34c>)
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	089b      	lsrs	r3, r3, #2
 80077a0:	3302      	adds	r3, #2
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	43db      	mvns	r3, r3
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	4013      	ands	r3, r2
 80077b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80077ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80077d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	43db      	mvns	r3, r3
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	4013      	ands	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80077fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	43db      	mvns	r3, r3
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	4013      	ands	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	43db      	mvns	r3, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4013      	ands	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	3301      	adds	r3, #1
 800785c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	fa22 f303 	lsr.w	r3, r2, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	f47f ae6b 	bne.w	8007544 <HAL_GPIO_Init+0x14>
  }
}
 800786e:	bf00      	nop
 8007870:	bf00      	nop
 8007872:	3724      	adds	r7, #36	; 0x24
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58000400 	.word	0x58000400

08007880 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800788e:	4b72      	ldr	r3, [pc, #456]	; (8007a58 <HAL_GPIO_DeInit+0x1d8>)
 8007890:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8007892:	e0d3      	b.n	8007a3c <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007894:	2201      	movs	r2, #1
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	fa02 f303 	lsl.w	r3, r2, r3
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	4013      	ands	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80c6 	beq.w	8007a36 <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80078aa:	4a6c      	ldr	r2, [pc, #432]	; (8007a5c <HAL_GPIO_DeInit+0x1dc>)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	089b      	lsrs	r3, r3, #2
 80078b0:	3302      	adds	r3, #2
 80078b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	220f      	movs	r2, #15
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	4013      	ands	r3, r2
 80078ca:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a64      	ldr	r2, [pc, #400]	; (8007a60 <HAL_GPIO_DeInit+0x1e0>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d031      	beq.n	8007938 <HAL_GPIO_DeInit+0xb8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a63      	ldr	r2, [pc, #396]	; (8007a64 <HAL_GPIO_DeInit+0x1e4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d02b      	beq.n	8007934 <HAL_GPIO_DeInit+0xb4>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a62      	ldr	r2, [pc, #392]	; (8007a68 <HAL_GPIO_DeInit+0x1e8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d025      	beq.n	8007930 <HAL_GPIO_DeInit+0xb0>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a61      	ldr	r2, [pc, #388]	; (8007a6c <HAL_GPIO_DeInit+0x1ec>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d01f      	beq.n	800792c <HAL_GPIO_DeInit+0xac>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a60      	ldr	r2, [pc, #384]	; (8007a70 <HAL_GPIO_DeInit+0x1f0>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d019      	beq.n	8007928 <HAL_GPIO_DeInit+0xa8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a5f      	ldr	r2, [pc, #380]	; (8007a74 <HAL_GPIO_DeInit+0x1f4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d013      	beq.n	8007924 <HAL_GPIO_DeInit+0xa4>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a5e      	ldr	r2, [pc, #376]	; (8007a78 <HAL_GPIO_DeInit+0x1f8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00d      	beq.n	8007920 <HAL_GPIO_DeInit+0xa0>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a5d      	ldr	r2, [pc, #372]	; (8007a7c <HAL_GPIO_DeInit+0x1fc>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d007      	beq.n	800791c <HAL_GPIO_DeInit+0x9c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a5c      	ldr	r2, [pc, #368]	; (8007a80 <HAL_GPIO_DeInit+0x200>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d101      	bne.n	8007918 <HAL_GPIO_DeInit+0x98>
 8007914:	2309      	movs	r3, #9
 8007916:	e010      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 8007918:	230a      	movs	r3, #10
 800791a:	e00e      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 800791c:	2307      	movs	r3, #7
 800791e:	e00c      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 8007920:	2306      	movs	r3, #6
 8007922:	e00a      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 8007924:	2305      	movs	r3, #5
 8007926:	e008      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 8007928:	2304      	movs	r3, #4
 800792a:	e006      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 800792c:	2303      	movs	r3, #3
 800792e:	e004      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 8007930:	2302      	movs	r3, #2
 8007932:	e002      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 8007934:	2301      	movs	r3, #1
 8007936:	e000      	b.n	800793a <HAL_GPIO_DeInit+0xba>
 8007938:	2300      	movs	r3, #0
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	f002 0203 	and.w	r2, r2, #3
 8007940:	0092      	lsls	r2, r2, #2
 8007942:	4093      	lsls	r3, r2
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	429a      	cmp	r2, r3
 8007948:	d136      	bne.n	80079b8 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	43db      	mvns	r3, r3
 8007952:	401a      	ands	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	43db      	mvns	r3, r3
 8007960:	401a      	ands	r2, r3
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	43db      	mvns	r3, r3
 8007970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007974:	4013      	ands	r3, r2
 8007976:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	43db      	mvns	r3, r3
 8007982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007986:	4013      	ands	r3, r2
 8007988:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	220f      	movs	r2, #15
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800799a:	4a30      	ldr	r2, [pc, #192]	; (8007a5c <HAL_GPIO_DeInit+0x1dc>)
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	089b      	lsrs	r3, r3, #2
 80079a0:	3302      	adds	r3, #2
 80079a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	43da      	mvns	r2, r3
 80079aa:	482c      	ldr	r0, [pc, #176]	; (8007a5c <HAL_GPIO_DeInit+0x1dc>)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	089b      	lsrs	r3, r3, #2
 80079b0:	400a      	ands	r2, r1
 80079b2:	3302      	adds	r3, #2
 80079b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	2103      	movs	r1, #3
 80079c2:	fa01 f303 	lsl.w	r3, r1, r3
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	08da      	lsrs	r2, r3, #3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3208      	adds	r2, #8
 80079d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	220f      	movs	r2, #15
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43db      	mvns	r3, r3
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	08d2      	lsrs	r2, r2, #3
 80079ec:	4019      	ands	r1, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3208      	adds	r2, #8
 80079f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2103      	movs	r1, #3
 8007a00:	fa01 f303 	lsl.w	r3, r1, r3
 8007a04:	43db      	mvns	r3, r3
 8007a06:	401a      	ands	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	2101      	movs	r1, #1
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	fa01 f303 	lsl.w	r3, r1, r3
 8007a18:	43db      	mvns	r3, r3
 8007a1a:	401a      	ands	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	2103      	movs	r1, #3
 8007a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2e:	43db      	mvns	r3, r3
 8007a30:	401a      	ands	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	fa22 f303 	lsr.w	r3, r2, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f47f af25 	bne.w	8007894 <HAL_GPIO_DeInit+0x14>
  }
}
 8007a4a:	bf00      	nop
 8007a4c:	bf00      	nop
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	58000080 	.word	0x58000080
 8007a5c:	58000400 	.word	0x58000400
 8007a60:	58020000 	.word	0x58020000
 8007a64:	58020400 	.word	0x58020400
 8007a68:	58020800 	.word	0x58020800
 8007a6c:	58020c00 	.word	0x58020c00
 8007a70:	58021000 	.word	0x58021000
 8007a74:	58021400 	.word	0x58021400
 8007a78:	58021800 	.word	0x58021800
 8007a7c:	58021c00 	.word	0x58021c00
 8007a80:	58022400 	.word	0x58022400

08007a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	807b      	strh	r3, [r7, #2]
 8007a90:	4613      	mov	r3, r2
 8007a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a94:	787b      	ldrb	r3, [r7, #1]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a9a:	887a      	ldrh	r2, [r7, #2]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007aa0:	e003      	b.n	8007aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007aa2:	887b      	ldrh	r3, [r7, #2]
 8007aa4:	041a      	lsls	r2, r3, #16
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	619a      	str	r2, [r3, #24]
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ac0:	4b19      	ldr	r3, [pc, #100]	; (8007b28 <HAL_PWREx_ConfigSupply+0x70>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0304 	and.w	r3, r3, #4
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d00a      	beq.n	8007ae2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007acc:	4b16      	ldr	r3, [pc, #88]	; (8007b28 <HAL_PWREx_ConfigSupply+0x70>)
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d001      	beq.n	8007ade <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e01f      	b.n	8007b1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e01d      	b.n	8007b1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ae2:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <HAL_PWREx_ConfigSupply+0x70>)
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f023 0207 	bic.w	r2, r3, #7
 8007aea:	490f      	ldr	r1, [pc, #60]	; (8007b28 <HAL_PWREx_ConfigSupply+0x70>)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007af2:	f7fd f975 	bl	8004de0 <HAL_GetTick>
 8007af6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007af8:	e009      	b.n	8007b0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007afa:	f7fd f971 	bl	8004de0 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b08:	d901      	bls.n	8007b0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e007      	b.n	8007b1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b0e:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <HAL_PWREx_ConfigSupply+0x70>)
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b1a:	d1ee      	bne.n	8007afa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	58024800 	.word	0x58024800

08007b2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08c      	sub	sp, #48	; 0x30
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e39d      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8087 	beq.w	8007c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b4c:	4b88      	ldr	r3, [pc, #544]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b56:	4b86      	ldr	r3, [pc, #536]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d007      	beq.n	8007b72 <HAL_RCC_OscConfig+0x46>
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	2b18      	cmp	r3, #24
 8007b66:	d110      	bne.n	8007b8a <HAL_RCC_OscConfig+0x5e>
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d10b      	bne.n	8007b8a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b72:	4b7f      	ldr	r3, [pc, #508]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d06c      	beq.n	8007c58 <HAL_RCC_OscConfig+0x12c>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d168      	bne.n	8007c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e377      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b92:	d106      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x76>
 8007b94:	4b76      	ldr	r3, [pc, #472]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a75      	ldr	r2, [pc, #468]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e02e      	b.n	8007c00 <HAL_RCC_OscConfig+0xd4>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10c      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x98>
 8007baa:	4b71      	ldr	r3, [pc, #452]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a70      	ldr	r2, [pc, #448]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	4b6e      	ldr	r3, [pc, #440]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a6d      	ldr	r2, [pc, #436]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	e01d      	b.n	8007c00 <HAL_RCC_OscConfig+0xd4>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bcc:	d10c      	bne.n	8007be8 <HAL_RCC_OscConfig+0xbc>
 8007bce:	4b68      	ldr	r3, [pc, #416]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a67      	ldr	r2, [pc, #412]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	4b65      	ldr	r3, [pc, #404]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a64      	ldr	r2, [pc, #400]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	e00b      	b.n	8007c00 <HAL_RCC_OscConfig+0xd4>
 8007be8:	4b61      	ldr	r3, [pc, #388]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a60      	ldr	r2, [pc, #384]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	4b5e      	ldr	r3, [pc, #376]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a5d      	ldr	r2, [pc, #372]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d013      	beq.n	8007c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c08:	f7fd f8ea 	bl	8004de0 <HAL_GetTick>
 8007c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c10:	f7fd f8e6 	bl	8004de0 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b64      	cmp	r3, #100	; 0x64
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e32b      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c22:	4b53      	ldr	r3, [pc, #332]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f0      	beq.n	8007c10 <HAL_RCC_OscConfig+0xe4>
 8007c2e:	e014      	b.n	8007c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c30:	f7fd f8d6 	bl	8004de0 <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c38:	f7fd f8d2 	bl	8004de0 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b64      	cmp	r3, #100	; 0x64
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e317      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c4a:	4b49      	ldr	r3, [pc, #292]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f0      	bne.n	8007c38 <HAL_RCC_OscConfig+0x10c>
 8007c56:	e000      	b.n	8007c5a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 808c 	beq.w	8007d80 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c68:	4b41      	ldr	r3, [pc, #260]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c72:	4b3f      	ldr	r3, [pc, #252]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <HAL_RCC_OscConfig+0x162>
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	2b18      	cmp	r3, #24
 8007c82:	d137      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x1c8>
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d132      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c8e:	4b38      	ldr	r3, [pc, #224]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x17a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e2e9      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ca6:	4b32      	ldr	r3, [pc, #200]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f023 0219 	bic.w	r2, r3, #25
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	492f      	ldr	r1, [pc, #188]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cb8:	f7fd f892 	bl	8004de0 <HAL_GetTick>
 8007cbc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cc0:	f7fd f88e 	bl	8004de0 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e2d3      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cd2:	4b27      	ldr	r3, [pc, #156]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0f0      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cde:	4b24      	ldr	r3, [pc, #144]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	061b      	lsls	r3, r3, #24
 8007cec:	4920      	ldr	r1, [pc, #128]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cf2:	e045      	b.n	8007d80 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d026      	beq.n	8007d4a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007cfc:	4b1c      	ldr	r3, [pc, #112]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f023 0219 	bic.w	r2, r3, #25
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	4919      	ldr	r1, [pc, #100]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0e:	f7fd f867 	bl	8004de0 <HAL_GetTick>
 8007d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d16:	f7fd f863 	bl	8004de0 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e2a8      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f0      	beq.n	8007d16 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	061b      	lsls	r3, r3, #24
 8007d42:	490b      	ldr	r1, [pc, #44]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	604b      	str	r3, [r1, #4]
 8007d48:	e01a      	b.n	8007d80 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d4a:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a08      	ldr	r2, [pc, #32]	; (8007d70 <HAL_RCC_OscConfig+0x244>)
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d56:	f7fd f843 	bl	8004de0 <HAL_GetTick>
 8007d5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d5c:	e00a      	b.n	8007d74 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d5e:	f7fd f83f 	bl	8004de0 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d903      	bls.n	8007d74 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e284      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
 8007d70:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d74:	4b96      	ldr	r3, [pc, #600]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1ee      	bne.n	8007d5e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0310 	and.w	r3, r3, #16
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d06a      	beq.n	8007e62 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d8c:	4b90      	ldr	r3, [pc, #576]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d94:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d96:	4b8e      	ldr	r3, [pc, #568]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	d007      	beq.n	8007db2 <HAL_RCC_OscConfig+0x286>
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b18      	cmp	r3, #24
 8007da6:	d11b      	bne.n	8007de0 <HAL_RCC_OscConfig+0x2b4>
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d116      	bne.n	8007de0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007db2:	4b87      	ldr	r3, [pc, #540]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <HAL_RCC_OscConfig+0x29e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	2b80      	cmp	r3, #128	; 0x80
 8007dc4:	d001      	beq.n	8007dca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e257      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dca:	4b81      	ldr	r3, [pc, #516]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	061b      	lsls	r3, r3, #24
 8007dd8:	497d      	ldr	r1, [pc, #500]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dde:	e040      	b.n	8007e62 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d023      	beq.n	8007e30 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007de8:	4b79      	ldr	r3, [pc, #484]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a78      	ldr	r2, [pc, #480]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df4:	f7fc fff4 	bl	8004de0 <HAL_GetTick>
 8007df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dfa:	e008      	b.n	8007e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007dfc:	f7fc fff0 	bl	8004de0 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e235      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e0e:	4b70      	ldr	r3, [pc, #448]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0f0      	beq.n	8007dfc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e1a:	4b6d      	ldr	r3, [pc, #436]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	061b      	lsls	r3, r3, #24
 8007e28:	4969      	ldr	r1, [pc, #420]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60cb      	str	r3, [r1, #12]
 8007e2e:	e018      	b.n	8007e62 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e30:	4b67      	ldr	r3, [pc, #412]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a66      	ldr	r2, [pc, #408]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3c:	f7fc ffd0 	bl	8004de0 <HAL_GetTick>
 8007e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e44:	f7fc ffcc 	bl	8004de0 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e211      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e56:	4b5e      	ldr	r3, [pc, #376]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f0      	bne.n	8007e44 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d036      	beq.n	8007edc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d019      	beq.n	8007eaa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e76:	4b56      	ldr	r3, [pc, #344]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7a:	4a55      	ldr	r2, [pc, #340]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e7c:	f043 0301 	orr.w	r3, r3, #1
 8007e80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e82:	f7fc ffad 	bl	8004de0 <HAL_GetTick>
 8007e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e88:	e008      	b.n	8007e9c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e8a:	f7fc ffa9 	bl	8004de0 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d901      	bls.n	8007e9c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e1ee      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e9c:	4b4c      	ldr	r3, [pc, #304]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0f0      	beq.n	8007e8a <HAL_RCC_OscConfig+0x35e>
 8007ea8:	e018      	b.n	8007edc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eaa:	4b49      	ldr	r3, [pc, #292]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eae:	4a48      	ldr	r2, [pc, #288]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb6:	f7fc ff93 	bl	8004de0 <HAL_GetTick>
 8007eba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ebe:	f7fc ff8f 	bl	8004de0 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e1d4      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ed0:	4b3f      	ldr	r3, [pc, #252]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f0      	bne.n	8007ebe <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d036      	beq.n	8007f56 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d019      	beq.n	8007f24 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ef0:	4b37      	ldr	r3, [pc, #220]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a36      	ldr	r2, [pc, #216]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007efa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007efc:	f7fc ff70 	bl	8004de0 <HAL_GetTick>
 8007f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f04:	f7fc ff6c 	bl	8004de0 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e1b1      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f16:	4b2e      	ldr	r3, [pc, #184]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0f0      	beq.n	8007f04 <HAL_RCC_OscConfig+0x3d8>
 8007f22:	e018      	b.n	8007f56 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f24:	4b2a      	ldr	r3, [pc, #168]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a29      	ldr	r2, [pc, #164]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f30:	f7fc ff56 	bl	8004de0 <HAL_GetTick>
 8007f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f36:	e008      	b.n	8007f4a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f38:	f7fc ff52 	bl	8004de0 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e197      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f4a:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1f0      	bne.n	8007f38 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8086 	beq.w	8008070 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f64:	4b1b      	ldr	r3, [pc, #108]	; (8007fd4 <HAL_RCC_OscConfig+0x4a8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a1a      	ldr	r2, [pc, #104]	; (8007fd4 <HAL_RCC_OscConfig+0x4a8>)
 8007f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f70:	f7fc ff36 	bl	8004de0 <HAL_GetTick>
 8007f74:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f76:	e008      	b.n	8007f8a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f78:	f7fc ff32 	bl	8004de0 <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b64      	cmp	r3, #100	; 0x64
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e177      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <HAL_RCC_OscConfig+0x4a8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d106      	bne.n	8007fac <HAL_RCC_OscConfig+0x480>
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa2:	4a0b      	ldr	r2, [pc, #44]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8007faa:	e032      	b.n	8008012 <HAL_RCC_OscConfig+0x4e6>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d111      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x4ac>
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb8:	4a05      	ldr	r2, [pc, #20]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc0:	4b03      	ldr	r3, [pc, #12]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc4:	4a02      	ldr	r2, [pc, #8]	; (8007fd0 <HAL_RCC_OscConfig+0x4a4>)
 8007fc6:	f023 0304 	bic.w	r3, r3, #4
 8007fca:	6713      	str	r3, [r2, #112]	; 0x70
 8007fcc:	e021      	b.n	8008012 <HAL_RCC_OscConfig+0x4e6>
 8007fce:	bf00      	nop
 8007fd0:	58024400 	.word	0x58024400
 8007fd4:	58024800 	.word	0x58024800
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d10c      	bne.n	8007ffa <HAL_RCC_OscConfig+0x4ce>
 8007fe0:	4b83      	ldr	r3, [pc, #524]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe4:	4a82      	ldr	r2, [pc, #520]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8007fe6:	f043 0304 	orr.w	r3, r3, #4
 8007fea:	6713      	str	r3, [r2, #112]	; 0x70
 8007fec:	4b80      	ldr	r3, [pc, #512]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8007fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff0:	4a7f      	ldr	r2, [pc, #508]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff8:	e00b      	b.n	8008012 <HAL_RCC_OscConfig+0x4e6>
 8007ffa:	4b7d      	ldr	r3, [pc, #500]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	4a7c      	ldr	r2, [pc, #496]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	6713      	str	r3, [r2, #112]	; 0x70
 8008006:	4b7a      	ldr	r3, [pc, #488]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	4a79      	ldr	r2, [pc, #484]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800800c:	f023 0304 	bic.w	r3, r3, #4
 8008010:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d015      	beq.n	8008046 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801a:	f7fc fee1 	bl	8004de0 <HAL_GetTick>
 800801e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008020:	e00a      	b.n	8008038 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008022:	f7fc fedd 	bl	8004de0 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008030:	4293      	cmp	r3, r2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e120      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008038:	4b6d      	ldr	r3, [pc, #436]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0ee      	beq.n	8008022 <HAL_RCC_OscConfig+0x4f6>
 8008044:	e014      	b.n	8008070 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008046:	f7fc fecb 	bl	8004de0 <HAL_GetTick>
 800804a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800804c:	e00a      	b.n	8008064 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800804e:	f7fc fec7 	bl	8004de0 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f241 3288 	movw	r2, #5000	; 0x1388
 800805c:	4293      	cmp	r3, r2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e10a      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008064:	4b62      	ldr	r3, [pc, #392]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1ee      	bne.n	800804e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 80ff 	beq.w	8008278 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800807a:	4b5d      	ldr	r3, [pc, #372]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008082:	2b18      	cmp	r3, #24
 8008084:	f000 80ba 	beq.w	80081fc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	2b02      	cmp	r3, #2
 800808e:	f040 8095 	bne.w	80081bc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008092:	4b57      	ldr	r3, [pc, #348]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a56      	ldr	r2, [pc, #344]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800809c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809e:	f7fc fe9f 	bl	8004de0 <HAL_GetTick>
 80080a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080a4:	e008      	b.n	80080b8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080a6:	f7fc fe9b 	bl	8004de0 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e0e0      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080b8:	4b4d      	ldr	r3, [pc, #308]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f0      	bne.n	80080a6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080c4:	4b4a      	ldr	r3, [pc, #296]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 80080c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080c8:	4b4a      	ldr	r3, [pc, #296]	; (80081f4 <HAL_RCC_OscConfig+0x6c8>)
 80080ca:	4013      	ands	r3, r2
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080d4:	0112      	lsls	r2, r2, #4
 80080d6:	430a      	orrs	r2, r1
 80080d8:	4945      	ldr	r1, [pc, #276]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	628b      	str	r3, [r1, #40]	; 0x28
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	3b01      	subs	r3, #1
 80080e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ec:	3b01      	subs	r3, #1
 80080ee:	025b      	lsls	r3, r3, #9
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	3b01      	subs	r3, #1
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008106:	3b01      	subs	r3, #1
 8008108:	061b      	lsls	r3, r3, #24
 800810a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800810e:	4938      	ldr	r1, [pc, #224]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008110:	4313      	orrs	r3, r2
 8008112:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008114:	4b36      	ldr	r3, [pc, #216]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	4a35      	ldr	r2, [pc, #212]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800811a:	f023 0301 	bic.w	r3, r3, #1
 800811e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008120:	4b33      	ldr	r3, [pc, #204]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008124:	4b34      	ldr	r3, [pc, #208]	; (80081f8 <HAL_RCC_OscConfig+0x6cc>)
 8008126:	4013      	ands	r3, r2
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800812c:	00d2      	lsls	r2, r2, #3
 800812e:	4930      	ldr	r1, [pc, #192]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008130:	4313      	orrs	r3, r2
 8008132:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008134:	4b2e      	ldr	r3, [pc, #184]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	f023 020c 	bic.w	r2, r3, #12
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	492b      	ldr	r1, [pc, #172]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008142:	4313      	orrs	r3, r2
 8008144:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008146:	4b2a      	ldr	r3, [pc, #168]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814a:	f023 0202 	bic.w	r2, r3, #2
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008152:	4927      	ldr	r1, [pc, #156]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008154:	4313      	orrs	r3, r2
 8008156:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008158:	4b25      	ldr	r3, [pc, #148]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815c:	4a24      	ldr	r2, [pc, #144]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800815e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008162:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008164:	4b22      	ldr	r3, [pc, #136]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	4a21      	ldr	r2, [pc, #132]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800816a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800816e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008170:	4b1f      	ldr	r3, [pc, #124]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	4a1e      	ldr	r2, [pc, #120]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800817a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800817c:	4b1c      	ldr	r3, [pc, #112]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800817e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008180:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008188:	4b19      	ldr	r3, [pc, #100]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a18      	ldr	r2, [pc, #96]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 800818e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008194:	f7fc fe24 	bl	8004de0 <HAL_GetTick>
 8008198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800819a:	e008      	b.n	80081ae <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800819c:	f7fc fe20 	bl	8004de0 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e065      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081ae:	4b10      	ldr	r3, [pc, #64]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0f0      	beq.n	800819c <HAL_RCC_OscConfig+0x670>
 80081ba:	e05d      	b.n	8008278 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081bc:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0b      	ldr	r2, [pc, #44]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 80081c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c8:	f7fc fe0a 	bl	8004de0 <HAL_GetTick>
 80081cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081ce:	e008      	b.n	80081e2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081d0:	f7fc fe06 	bl	8004de0 <HAL_GetTick>
 80081d4:	4602      	mov	r2, r0
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d901      	bls.n	80081e2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e04b      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081e2:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <HAL_RCC_OscConfig+0x6c4>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f0      	bne.n	80081d0 <HAL_RCC_OscConfig+0x6a4>
 80081ee:	e043      	b.n	8008278 <HAL_RCC_OscConfig+0x74c>
 80081f0:	58024400 	.word	0x58024400
 80081f4:	fffffc0c 	.word	0xfffffc0c
 80081f8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80081fc:	4b21      	ldr	r3, [pc, #132]	; (8008284 <HAL_RCC_OscConfig+0x758>)
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008202:	4b20      	ldr	r3, [pc, #128]	; (8008284 <HAL_RCC_OscConfig+0x758>)
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	2b01      	cmp	r3, #1
 800820e:	d031      	beq.n	8008274 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f003 0203 	and.w	r2, r3, #3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800821a:	429a      	cmp	r2, r3
 800821c:	d12a      	bne.n	8008274 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	091b      	lsrs	r3, r3, #4
 8008222:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800822a:	429a      	cmp	r2, r3
 800822c:	d122      	bne.n	8008274 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008238:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800823a:	429a      	cmp	r2, r3
 800823c:	d11a      	bne.n	8008274 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	0a5b      	lsrs	r3, r3, #9
 8008242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800824c:	429a      	cmp	r2, r3
 800824e:	d111      	bne.n	8008274 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800825e:	429a      	cmp	r2, r3
 8008260:	d108      	bne.n	8008274 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	0e1b      	lsrs	r3, r3, #24
 8008266:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008270:	429a      	cmp	r2, r3
 8008272:	d001      	beq.n	8008278 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e000      	b.n	800827a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3730      	adds	r7, #48	; 0x30
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	58024400 	.word	0x58024400

08008288 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e19c      	b.n	80085d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800829c:	4b8a      	ldr	r3, [pc, #552]	; (80084c8 <HAL_RCC_ClockConfig+0x240>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d910      	bls.n	80082cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082aa:	4b87      	ldr	r3, [pc, #540]	; (80084c8 <HAL_RCC_ClockConfig+0x240>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f023 020f 	bic.w	r2, r3, #15
 80082b2:	4985      	ldr	r1, [pc, #532]	; (80084c8 <HAL_RCC_ClockConfig+0x240>)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ba:	4b83      	ldr	r3, [pc, #524]	; (80084c8 <HAL_RCC_ClockConfig+0x240>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d001      	beq.n	80082cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e184      	b.n	80085d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d010      	beq.n	80082fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d908      	bls.n	80082fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80082e8:	4b78      	ldr	r3, [pc, #480]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	4975      	ldr	r1, [pc, #468]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b00      	cmp	r3, #0
 8008304:	d010      	beq.n	8008328 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695a      	ldr	r2, [r3, #20]
 800830a:	4b70      	ldr	r3, [pc, #448]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008312:	429a      	cmp	r2, r3
 8008314:	d908      	bls.n	8008328 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008316:	4b6d      	ldr	r3, [pc, #436]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	496a      	ldr	r1, [pc, #424]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008324:	4313      	orrs	r3, r2
 8008326:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0310 	and.w	r3, r3, #16
 8008330:	2b00      	cmp	r3, #0
 8008332:	d010      	beq.n	8008356 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	4b64      	ldr	r3, [pc, #400]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008340:	429a      	cmp	r2, r3
 8008342:	d908      	bls.n	8008356 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008344:	4b61      	ldr	r3, [pc, #388]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	495e      	ldr	r1, [pc, #376]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008352:	4313      	orrs	r3, r2
 8008354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d010      	beq.n	8008384 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69da      	ldr	r2, [r3, #28]
 8008366:	4b59      	ldr	r3, [pc, #356]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800836e:	429a      	cmp	r2, r3
 8008370:	d908      	bls.n	8008384 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008372:	4b56      	ldr	r3, [pc, #344]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	4953      	ldr	r1, [pc, #332]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008380:	4313      	orrs	r3, r2
 8008382:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d010      	beq.n	80083b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	4b4d      	ldr	r3, [pc, #308]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	429a      	cmp	r2, r3
 800839e:	d908      	bls.n	80083b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083a0:	4b4a      	ldr	r3, [pc, #296]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	f023 020f 	bic.w	r2, r3, #15
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	4947      	ldr	r1, [pc, #284]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d055      	beq.n	800846a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80083be:	4b43      	ldr	r3, [pc, #268]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	4940      	ldr	r1, [pc, #256]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d107      	bne.n	80083e8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80083d8:	4b3c      	ldr	r3, [pc, #240]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d121      	bne.n	8008428 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e0f6      	b.n	80085d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d107      	bne.n	8008400 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083f0:	4b36      	ldr	r3, [pc, #216]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d115      	bne.n	8008428 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0ea      	b.n	80085d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d107      	bne.n	8008418 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008408:	4b30      	ldr	r3, [pc, #192]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008410:	2b00      	cmp	r3, #0
 8008412:	d109      	bne.n	8008428 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e0de      	b.n	80085d6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008418:	4b2c      	ldr	r3, [pc, #176]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e0d6      	b.n	80085d6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008428:	4b28      	ldr	r3, [pc, #160]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f023 0207 	bic.w	r2, r3, #7
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	4925      	ldr	r1, [pc, #148]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008436:	4313      	orrs	r3, r2
 8008438:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843a:	f7fc fcd1 	bl	8004de0 <HAL_GetTick>
 800843e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008440:	e00a      	b.n	8008458 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008442:	f7fc fccd 	bl	8004de0 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008450:	4293      	cmp	r3, r2
 8008452:	d901      	bls.n	8008458 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e0be      	b.n	80085d6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008458:	4b1c      	ldr	r3, [pc, #112]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	429a      	cmp	r2, r3
 8008468:	d1eb      	bne.n	8008442 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d010      	beq.n	8008498 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	4b14      	ldr	r3, [pc, #80]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	429a      	cmp	r2, r3
 8008484:	d208      	bcs.n	8008498 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	f023 020f 	bic.w	r2, r3, #15
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	490e      	ldr	r1, [pc, #56]	; (80084cc <HAL_RCC_ClockConfig+0x244>)
 8008494:	4313      	orrs	r3, r2
 8008496:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008498:	4b0b      	ldr	r3, [pc, #44]	; (80084c8 <HAL_RCC_ClockConfig+0x240>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d214      	bcs.n	80084d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084a6:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <HAL_RCC_ClockConfig+0x240>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f023 020f 	bic.w	r2, r3, #15
 80084ae:	4906      	ldr	r1, [pc, #24]	; (80084c8 <HAL_RCC_ClockConfig+0x240>)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b6:	4b04      	ldr	r3, [pc, #16]	; (80084c8 <HAL_RCC_ClockConfig+0x240>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d005      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e086      	b.n	80085d6 <HAL_RCC_ClockConfig+0x34e>
 80084c8:	52002000 	.word	0x52002000
 80084cc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d010      	beq.n	80084fe <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	4b3f      	ldr	r3, [pc, #252]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d208      	bcs.n	80084fe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80084ec:	4b3c      	ldr	r3, [pc, #240]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	4939      	ldr	r1, [pc, #228]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d010      	beq.n	800852c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	695a      	ldr	r2, [r3, #20]
 800850e:	4b34      	ldr	r3, [pc, #208]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008516:	429a      	cmp	r2, r3
 8008518:	d208      	bcs.n	800852c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800851a:	4b31      	ldr	r3, [pc, #196]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	492e      	ldr	r1, [pc, #184]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 8008528:	4313      	orrs	r3, r2
 800852a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0310 	and.w	r3, r3, #16
 8008534:	2b00      	cmp	r3, #0
 8008536:	d010      	beq.n	800855a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	699a      	ldr	r2, [r3, #24]
 800853c:	4b28      	ldr	r3, [pc, #160]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008544:	429a      	cmp	r2, r3
 8008546:	d208      	bcs.n	800855a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008548:	4b25      	ldr	r3, [pc, #148]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	4922      	ldr	r1, [pc, #136]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 8008556:	4313      	orrs	r3, r2
 8008558:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	d010      	beq.n	8008588 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69da      	ldr	r2, [r3, #28]
 800856a:	4b1d      	ldr	r3, [pc, #116]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008572:	429a      	cmp	r2, r3
 8008574:	d208      	bcs.n	8008588 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008576:	4b1a      	ldr	r3, [pc, #104]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	4917      	ldr	r1, [pc, #92]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 8008584:	4313      	orrs	r3, r2
 8008586:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008588:	f000 f834 	bl	80085f4 <HAL_RCC_GetSysClockFreq>
 800858c:	4602      	mov	r2, r0
 800858e:	4b14      	ldr	r3, [pc, #80]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	0a1b      	lsrs	r3, r3, #8
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	4912      	ldr	r1, [pc, #72]	; (80085e4 <HAL_RCC_ClockConfig+0x35c>)
 800859a:	5ccb      	ldrb	r3, [r1, r3]
 800859c:	f003 031f 	and.w	r3, r3, #31
 80085a0:	fa22 f303 	lsr.w	r3, r2, r3
 80085a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80085a6:	4b0e      	ldr	r3, [pc, #56]	; (80085e0 <HAL_RCC_ClockConfig+0x358>)
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	4a0d      	ldr	r2, [pc, #52]	; (80085e4 <HAL_RCC_ClockConfig+0x35c>)
 80085b0:	5cd3      	ldrb	r3, [r2, r3]
 80085b2:	f003 031f 	and.w	r3, r3, #31
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	fa22 f303 	lsr.w	r3, r2, r3
 80085bc:	4a0a      	ldr	r2, [pc, #40]	; (80085e8 <HAL_RCC_ClockConfig+0x360>)
 80085be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80085c0:	4a0a      	ldr	r2, [pc, #40]	; (80085ec <HAL_RCC_ClockConfig+0x364>)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <HAL_RCC_ClockConfig+0x368>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fc fbbe 	bl	8004d4c <HAL_InitTick>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	58024400 	.word	0x58024400
 80085e4:	0800d9dc 	.word	0x0800d9dc
 80085e8:	240001cc 	.word	0x240001cc
 80085ec:	240001c8 	.word	0x240001c8
 80085f0:	240001d0 	.word	0x240001d0

080085f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b089      	sub	sp, #36	; 0x24
 80085f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085fa:	4bb3      	ldr	r3, [pc, #716]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008602:	2b18      	cmp	r3, #24
 8008604:	f200 8155 	bhi.w	80088b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008608:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <HAL_RCC_GetSysClockFreq+0x1c>)
 800860a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860e:	bf00      	nop
 8008610:	08008675 	.word	0x08008675
 8008614:	080088b3 	.word	0x080088b3
 8008618:	080088b3 	.word	0x080088b3
 800861c:	080088b3 	.word	0x080088b3
 8008620:	080088b3 	.word	0x080088b3
 8008624:	080088b3 	.word	0x080088b3
 8008628:	080088b3 	.word	0x080088b3
 800862c:	080088b3 	.word	0x080088b3
 8008630:	0800869b 	.word	0x0800869b
 8008634:	080088b3 	.word	0x080088b3
 8008638:	080088b3 	.word	0x080088b3
 800863c:	080088b3 	.word	0x080088b3
 8008640:	080088b3 	.word	0x080088b3
 8008644:	080088b3 	.word	0x080088b3
 8008648:	080088b3 	.word	0x080088b3
 800864c:	080088b3 	.word	0x080088b3
 8008650:	080086a1 	.word	0x080086a1
 8008654:	080088b3 	.word	0x080088b3
 8008658:	080088b3 	.word	0x080088b3
 800865c:	080088b3 	.word	0x080088b3
 8008660:	080088b3 	.word	0x080088b3
 8008664:	080088b3 	.word	0x080088b3
 8008668:	080088b3 	.word	0x080088b3
 800866c:	080088b3 	.word	0x080088b3
 8008670:	080086a7 	.word	0x080086a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008674:	4b94      	ldr	r3, [pc, #592]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b00      	cmp	r3, #0
 800867e:	d009      	beq.n	8008694 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008680:	4b91      	ldr	r3, [pc, #580]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	08db      	lsrs	r3, r3, #3
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	4a90      	ldr	r2, [pc, #576]	; (80088cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800868c:	fa22 f303 	lsr.w	r3, r2, r3
 8008690:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008692:	e111      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008694:	4b8d      	ldr	r3, [pc, #564]	; (80088cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008696:	61bb      	str	r3, [r7, #24]
    break;
 8008698:	e10e      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800869a:	4b8d      	ldr	r3, [pc, #564]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800869c:	61bb      	str	r3, [r7, #24]
    break;
 800869e:	e10b      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80086a0:	4b8c      	ldr	r3, [pc, #560]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80086a2:	61bb      	str	r3, [r7, #24]
    break;
 80086a4:	e108      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086a6:	4b88      	ldr	r3, [pc, #544]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80086b0:	4b85      	ldr	r3, [pc, #532]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	091b      	lsrs	r3, r3, #4
 80086b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80086bc:	4b82      	ldr	r3, [pc, #520]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80086c6:	4b80      	ldr	r3, [pc, #512]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ca:	08db      	lsrs	r3, r3, #3
 80086cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 80e1 	beq.w	80088ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	f000 8083 	beq.w	80087f8 <HAL_RCC_GetSysClockFreq+0x204>
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	f200 80a1 	bhi.w	800883c <HAL_RCC_GetSysClockFreq+0x248>
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <HAL_RCC_GetSysClockFreq+0x114>
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d056      	beq.n	80087b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008706:	e099      	b.n	800883c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008708:	4b6f      	ldr	r3, [pc, #444]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 0320 	and.w	r3, r3, #32
 8008710:	2b00      	cmp	r3, #0
 8008712:	d02d      	beq.n	8008770 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008714:	4b6c      	ldr	r3, [pc, #432]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	08db      	lsrs	r3, r3, #3
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	4a6b      	ldr	r2, [pc, #428]	; (80088cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008720:	fa22 f303 	lsr.w	r3, r2, r3
 8008724:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	ee07 3a90 	vmov	s15, r3
 800872c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b62      	ldr	r3, [pc, #392]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008752:	eddf 5a61 	vldr	s11, [pc, #388]	; 80088d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800876e:	e087      	b.n	8008880 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80088dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b51      	ldr	r3, [pc, #324]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a02 	vldr	s12, [r7, #8]
 8008796:	eddf 5a50 	vldr	s11, [pc, #320]	; 80088d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087b2:	e065      	b.n	8008880 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80088e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b40      	ldr	r3, [pc, #256]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80088d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087f6:	e043      	b.n	8008880 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eddf 6a38 	vldr	s13, [pc, #224]	; 80088e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b2f      	ldr	r3, [pc, #188]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a02 	vldr	s12, [r7, #8]
 800881e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80088d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800883a:	e021      	b.n	8008880 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eddf 6a26 	vldr	s13, [pc, #152]	; 80088e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800884a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884e:	4b1e      	ldr	r3, [pc, #120]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008862:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80088d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800887e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008880:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008884:	0a5b      	lsrs	r3, r3, #9
 8008886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888a:	3301      	adds	r3, #1
 800888c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	ee07 3a90 	vmov	s15, r3
 8008894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008898:	edd7 6a07 	vldr	s13, [r7, #28]
 800889c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a4:	ee17 3a90 	vmov	r3, s15
 80088a8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80088aa:	e005      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
    break;
 80088b0:	e002      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80088b2:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088b4:	61bb      	str	r3, [r7, #24]
    break;
 80088b6:	bf00      	nop
  }

  return sysclockfreq;
 80088b8:	69bb      	ldr	r3, [r7, #24]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3724      	adds	r7, #36	; 0x24
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	58024400 	.word	0x58024400
 80088cc:	03d09000 	.word	0x03d09000
 80088d0:	003d0900 	.word	0x003d0900
 80088d4:	007a1200 	.word	0x007a1200
 80088d8:	46000000 	.word	0x46000000
 80088dc:	4c742400 	.word	0x4c742400
 80088e0:	4a742400 	.word	0x4a742400
 80088e4:	4af42400 	.word	0x4af42400

080088e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80088ee:	f7ff fe81 	bl	80085f4 <HAL_RCC_GetSysClockFreq>
 80088f2:	4602      	mov	r2, r0
 80088f4:	4b10      	ldr	r3, [pc, #64]	; (8008938 <HAL_RCC_GetHCLKFreq+0x50>)
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	0a1b      	lsrs	r3, r3, #8
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	490f      	ldr	r1, [pc, #60]	; (800893c <HAL_RCC_GetHCLKFreq+0x54>)
 8008900:	5ccb      	ldrb	r3, [r1, r3]
 8008902:	f003 031f 	and.w	r3, r3, #31
 8008906:	fa22 f303 	lsr.w	r3, r2, r3
 800890a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800890c:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <HAL_RCC_GetHCLKFreq+0x50>)
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	4a09      	ldr	r2, [pc, #36]	; (800893c <HAL_RCC_GetHCLKFreq+0x54>)
 8008916:	5cd3      	ldrb	r3, [r2, r3]
 8008918:	f003 031f 	and.w	r3, r3, #31
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	fa22 f303 	lsr.w	r3, r2, r3
 8008922:	4a07      	ldr	r2, [pc, #28]	; (8008940 <HAL_RCC_GetHCLKFreq+0x58>)
 8008924:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008926:	4a07      	ldr	r2, [pc, #28]	; (8008944 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800892c:	4b04      	ldr	r3, [pc, #16]	; (8008940 <HAL_RCC_GetHCLKFreq+0x58>)
 800892e:	681b      	ldr	r3, [r3, #0]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	58024400 	.word	0x58024400
 800893c:	0800d9dc 	.word	0x0800d9dc
 8008940:	240001cc 	.word	0x240001cc
 8008944:	240001c8 	.word	0x240001c8

08008948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800894c:	f7ff ffcc 	bl	80088e8 <HAL_RCC_GetHCLKFreq>
 8008950:	4602      	mov	r2, r0
 8008952:	4b06      	ldr	r3, [pc, #24]	; (800896c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008954:	69db      	ldr	r3, [r3, #28]
 8008956:	091b      	lsrs	r3, r3, #4
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	4904      	ldr	r1, [pc, #16]	; (8008970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800895e:	5ccb      	ldrb	r3, [r1, r3]
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008968:	4618      	mov	r0, r3
 800896a:	bd80      	pop	{r7, pc}
 800896c:	58024400 	.word	0x58024400
 8008970:	0800d9dc 	.word	0x0800d9dc

08008974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008978:	f7ff ffb6 	bl	80088e8 <HAL_RCC_GetHCLKFreq>
 800897c:	4602      	mov	r2, r0
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	4904      	ldr	r1, [pc, #16]	; (800899c <HAL_RCC_GetPCLK2Freq+0x28>)
 800898a:	5ccb      	ldrb	r3, [r1, r3]
 800898c:	f003 031f 	and.w	r3, r3, #31
 8008990:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008994:	4618      	mov	r0, r3
 8008996:	bd80      	pop	{r7, pc}
 8008998:	58024400 	.word	0x58024400
 800899c:	0800d9dc 	.word	0x0800d9dc

080089a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80089a8:	2300      	movs	r3, #0
 80089aa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089ac:	2300      	movs	r3, #0
 80089ae:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d03f      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c4:	d02a      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80089c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089ca:	d824      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80089cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d0:	d018      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d6:	d81e      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80089dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089e0:	d007      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80089e2:	e018      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e4:	4ba4      	ldr	r3, [pc, #656]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	4aa3      	ldr	r2, [pc, #652]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80089ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80089f0:	e015      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3304      	adds	r3, #4
 80089f6:	2102      	movs	r1, #2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 f989 	bl	8009d10 <RCCEx_PLL2_Config>
 80089fe:	4603      	mov	r3, r0
 8008a00:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a02:	e00c      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3324      	adds	r3, #36	; 0x24
 8008a08:	2102      	movs	r1, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f001 fa32 	bl	8009e74 <RCCEx_PLL3_Config>
 8008a10:	4603      	mov	r3, r0
 8008a12:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008a14:	e003      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	75fb      	strb	r3, [r7, #23]
      break;
 8008a1a:	e000      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d109      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a24:	4b94      	ldr	r3, [pc, #592]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a30:	4991      	ldr	r1, [pc, #580]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	650b      	str	r3, [r1, #80]	; 0x50
 8008a36:	e001      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d03d      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d826      	bhi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008a6d 	.word	0x08008a6d
 8008a5c:	08008a7b 	.word	0x08008a7b
 8008a60:	08008a8d 	.word	0x08008a8d
 8008a64:	08008aa5 	.word	0x08008aa5
 8008a68:	08008aa5 	.word	0x08008aa5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a6c:	4b82      	ldr	r3, [pc, #520]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	4a81      	ldr	r2, [pc, #516]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a78:	e015      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 f945 	bl	8009d10 <RCCEx_PLL2_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a8a:	e00c      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3324      	adds	r3, #36	; 0x24
 8008a90:	2100      	movs	r1, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f001 f9ee 	bl	8009e74 <RCCEx_PLL3_Config>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a9c:	e003      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8008aa2:	e000      	b.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d109      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008aac:	4b72      	ldr	r3, [pc, #456]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab0:	f023 0207 	bic.w	r2, r3, #7
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab8:	496f      	ldr	r1, [pc, #444]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	650b      	str	r3, [r1, #80]	; 0x50
 8008abe:	e001      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d051      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ad6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008ada:	d036      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008adc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008ae0:	d830      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008ae2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ae6:	d032      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008ae8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008aec:	d82a      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008aee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008af2:	d02e      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008af4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008af8:	d824      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008afe:	d018      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b04:	d81e      	bhi.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8008b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b0e:	d007      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008b10:	e018      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b12:	4b59      	ldr	r3, [pc, #356]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	4a58      	ldr	r2, [pc, #352]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b1e:	e019      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	2100      	movs	r1, #0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f001 f8f2 	bl	8009d10 <RCCEx_PLL2_Config>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008b30:	e010      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3324      	adds	r3, #36	; 0x24
 8008b36:	2100      	movs	r1, #0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f001 f99b 	bl	8009e74 <RCCEx_PLL3_Config>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b42:	e007      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
      break;
 8008b48:	e004      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008b4a:	bf00      	nop
 8008b4c:	e002      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008b4e:	bf00      	nop
 8008b50:	e000      	b.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b5a:	4b47      	ldr	r3, [pc, #284]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b68:	4943      	ldr	r1, [pc, #268]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	658b      	str	r3, [r1, #88]	; 0x58
 8008b6e:	e001      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
 8008b72:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d051      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b86:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008b8a:	d036      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008b8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008b90:	d830      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b96:	d032      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008b98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b9c:	d82a      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008b9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ba2:	d02e      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8008ba4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ba8:	d824      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bae:	d018      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008bb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bb4:	d81e      	bhi.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008bba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bbe:	d007      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008bc0:	e018      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc2:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc6:	4a2c      	ldr	r2, [pc, #176]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bce:	e019      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 f89a 	bl	8009d10 <RCCEx_PLL2_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008be0:	e010      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3324      	adds	r3, #36	; 0x24
 8008be6:	2100      	movs	r1, #0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 f943 	bl	8009e74 <RCCEx_PLL3_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bf2:	e007      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf8:	e004      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008bfa:	bf00      	nop
 8008bfc:	e002      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008bfe:	bf00      	nop
 8008c00:	e000      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10a      	bne.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c0e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c18:	4917      	ldr	r1, [pc, #92]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	658b      	str	r3, [r1, #88]	; 0x58
 8008c1e:	e001      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
 8008c22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d035      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c34:	2b30      	cmp	r3, #48	; 0x30
 8008c36:	d01c      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008c38:	2b30      	cmp	r3, #48	; 0x30
 8008c3a:	d817      	bhi.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d00c      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d813      	bhi.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d019      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d10f      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	4a09      	ldr	r2, [pc, #36]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008c58:	e011      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	2102      	movs	r1, #2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 f855 	bl	8009d10 <RCCEx_PLL2_Config>
 8008c66:	4603      	mov	r3, r0
 8008c68:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008c6a:	e008      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c70:	e005      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008c72:	bf00      	nop
 8008c74:	e003      	b.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008c76:	bf00      	nop
 8008c78:	58024400 	.word	0x58024400
      break;
 8008c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d109      	bne.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008c84:	4ba3      	ldr	r3, [pc, #652]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c90:	49a0      	ldr	r1, [pc, #640]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c96:	e001      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c98:	7dfb      	ldrb	r3, [r7, #23]
 8008c9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d047      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cb0:	d030      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8008cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cb6:	d82a      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cbc:	d02c      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc2:	d824      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc8:	d018      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cce:	d81e      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d003      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd8:	d007      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008cda:	e018      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cdc:	4b8d      	ldr	r3, [pc, #564]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	4a8c      	ldr	r2, [pc, #560]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ce8:	e017      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3304      	adds	r3, #4
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f001 f80d 	bl	8009d10 <RCCEx_PLL2_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008cfa:	e00e      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3324      	adds	r3, #36	; 0x24
 8008d00:	2100      	movs	r1, #0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f001 f8b6 	bl	8009e74 <RCCEx_PLL3_Config>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008d0c:	e005      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	75fb      	strb	r3, [r7, #23]
      break;
 8008d12:	e002      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008d14:	bf00      	nop
 8008d16:	e000      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d109      	bne.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d20:	4b7c      	ldr	r3, [pc, #496]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d24:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2c:	4979      	ldr	r1, [pc, #484]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	650b      	str	r3, [r1, #80]	; 0x50
 8008d32:	e001      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d049      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d4c:	d02e      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d52:	d828      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d58:	d02a      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d5e:	d822      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008d60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d64:	d026      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008d66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d6a:	d81c      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d70:	d010      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d76:	d816      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01d      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d80:	d111      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	3304      	adds	r3, #4
 8008d86:	2101      	movs	r1, #1
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 ffc1 	bl	8009d10 <RCCEx_PLL2_Config>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008d92:	e012      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3324      	adds	r3, #36	; 0x24
 8008d98:	2101      	movs	r1, #1
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 f86a 	bl	8009e74 <RCCEx_PLL3_Config>
 8008da0:	4603      	mov	r3, r0
 8008da2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008da4:	e009      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	75fb      	strb	r3, [r7, #23]
      break;
 8008daa:	e006      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008dac:	bf00      	nop
 8008dae:	e004      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008db0:	bf00      	nop
 8008db2:	e002      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008db4:	bf00      	nop
 8008db6:	e000      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d109      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008dc0:	4b54      	ldr	r3, [pc, #336]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dcc:	4951      	ldr	r1, [pc, #324]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	650b      	str	r3, [r1, #80]	; 0x50
 8008dd2:	e001      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd4:	7dfb      	ldrb	r3, [r7, #23]
 8008dd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d04b      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dee:	d02e      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008df4:	d828      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfa:	d02a      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e00:	d822      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008e02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e06:	d026      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008e08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e0c:	d81c      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e12:	d010      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e18:	d816      	bhi.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01d      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8008e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e22:	d111      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3304      	adds	r3, #4
 8008e28:	2101      	movs	r1, #1
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 ff70 	bl	8009d10 <RCCEx_PLL2_Config>
 8008e30:	4603      	mov	r3, r0
 8008e32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008e34:	e012      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3324      	adds	r3, #36	; 0x24
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 f819 	bl	8009e74 <RCCEx_PLL3_Config>
 8008e42:	4603      	mov	r3, r0
 8008e44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008e46:	e009      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e4c:	e006      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008e4e:	bf00      	nop
 8008e50:	e004      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008e52:	bf00      	nop
 8008e54:	e002      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008e56:	bf00      	nop
 8008e58:	e000      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10a      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e62:	4b2c      	ldr	r3, [pc, #176]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e70:	4928      	ldr	r1, [pc, #160]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	658b      	str	r3, [r1, #88]	; 0x58
 8008e76:	e001      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d02f      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e90:	d00e      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8008e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e96:	d814      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d015      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ea0:	d10f      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	4a1b      	ldr	r2, [pc, #108]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008eac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008eae:	e00c      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 ff2a 	bl	8009d10 <RCCEx_PLL2_Config>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008ec0:	e003      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec6:	e000      	b.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008ec8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d109      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ed0:	4b10      	ldr	r3, [pc, #64]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008edc:	490d      	ldr	r1, [pc, #52]	; (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	650b      	str	r3, [r1, #80]	; 0x50
 8008ee2:	e001      	b.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d034      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d81d      	bhi.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008efc:	a201      	add	r2, pc, #4	; (adr r2, 8008f04 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f02:	bf00      	nop
 8008f04:	08008f3f 	.word	0x08008f3f
 8008f08:	08008f19 	.word	0x08008f19
 8008f0c:	08008f27 	.word	0x08008f27
 8008f10:	08008f3f 	.word	0x08008f3f
 8008f14:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f18:	4bb1      	ldr	r3, [pc, #708]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	4ab0      	ldr	r2, [pc, #704]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008f24:	e00c      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	2102      	movs	r1, #2
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 feef 	bl	8009d10 <RCCEx_PLL2_Config>
 8008f32:	4603      	mov	r3, r0
 8008f34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008f36:	e003      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f3c:	e000      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8008f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d109      	bne.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f46:	4ba6      	ldr	r3, [pc, #664]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4a:	f023 0203 	bic.w	r2, r3, #3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f52:	49a3      	ldr	r1, [pc, #652]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008f54:	4313      	orrs	r3, r2
 8008f56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f58:	e001      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8086 	beq.w	8009078 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f6c:	4b9d      	ldr	r3, [pc, #628]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a9c      	ldr	r2, [pc, #624]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f78:	f7fb ff32 	bl	8004de0 <HAL_GetTick>
 8008f7c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f7e:	e009      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f80:	f7fb ff2e 	bl	8004de0 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b64      	cmp	r3, #100	; 0x64
 8008f8c:	d902      	bls.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	75fb      	strb	r3, [r7, #23]
        break;
 8008f92:	e005      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f94:	4b93      	ldr	r3, [pc, #588]	; (80091e4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0ef      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d166      	bne.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008fa6:	4b8e      	ldr	r3, [pc, #568]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fb0:	4053      	eors	r3, r2
 8008fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d013      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fba:	4b89      	ldr	r3, [pc, #548]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fc2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fc4:	4b86      	ldr	r3, [pc, #536]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc8:	4a85      	ldr	r2, [pc, #532]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fd0:	4b83      	ldr	r3, [pc, #524]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fd4:	4a82      	ldr	r2, [pc, #520]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fda:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008fdc:	4a80      	ldr	r2, [pc, #512]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fec:	d115      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fee:	f7fb fef7 	bl	8004de0 <HAL_GetTick>
 8008ff2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ff4:	e00b      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ff6:	f7fb fef3 	bl	8004de0 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	f241 3288 	movw	r2, #5000	; 0x1388
 8009004:	4293      	cmp	r3, r2
 8009006:	d902      	bls.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	75fb      	strb	r3, [r7, #23]
            break;
 800900c:	e005      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800900e:	4b74      	ldr	r3, [pc, #464]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0ed      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d126      	bne.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800902a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800902e:	d10d      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009030:	4b6b      	ldr	r3, [pc, #428]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800903e:	0919      	lsrs	r1, r3, #4
 8009040:	4b69      	ldr	r3, [pc, #420]	; (80091e8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009042:	400b      	ands	r3, r1
 8009044:	4966      	ldr	r1, [pc, #408]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009046:	4313      	orrs	r3, r2
 8009048:	610b      	str	r3, [r1, #16]
 800904a:	e005      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800904c:	4b64      	ldr	r3, [pc, #400]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	4a63      	ldr	r2, [pc, #396]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009052:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009056:	6113      	str	r3, [r2, #16]
 8009058:	4b61      	ldr	r3, [pc, #388]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800905a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009066:	495e      	ldr	r1, [pc, #376]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009068:	4313      	orrs	r3, r2
 800906a:	670b      	str	r3, [r1, #112]	; 0x70
 800906c:	e004      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	75bb      	strb	r3, [r7, #22]
 8009072:	e001      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b00      	cmp	r3, #0
 8009082:	d07e      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009088:	2b28      	cmp	r3, #40	; 0x28
 800908a:	d867      	bhi.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800908c:	a201      	add	r2, pc, #4	; (adr r2, 8009094 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	08009163 	.word	0x08009163
 8009098:	0800915d 	.word	0x0800915d
 800909c:	0800915d 	.word	0x0800915d
 80090a0:	0800915d 	.word	0x0800915d
 80090a4:	0800915d 	.word	0x0800915d
 80090a8:	0800915d 	.word	0x0800915d
 80090ac:	0800915d 	.word	0x0800915d
 80090b0:	0800915d 	.word	0x0800915d
 80090b4:	08009139 	.word	0x08009139
 80090b8:	0800915d 	.word	0x0800915d
 80090bc:	0800915d 	.word	0x0800915d
 80090c0:	0800915d 	.word	0x0800915d
 80090c4:	0800915d 	.word	0x0800915d
 80090c8:	0800915d 	.word	0x0800915d
 80090cc:	0800915d 	.word	0x0800915d
 80090d0:	0800915d 	.word	0x0800915d
 80090d4:	0800914b 	.word	0x0800914b
 80090d8:	0800915d 	.word	0x0800915d
 80090dc:	0800915d 	.word	0x0800915d
 80090e0:	0800915d 	.word	0x0800915d
 80090e4:	0800915d 	.word	0x0800915d
 80090e8:	0800915d 	.word	0x0800915d
 80090ec:	0800915d 	.word	0x0800915d
 80090f0:	0800915d 	.word	0x0800915d
 80090f4:	08009163 	.word	0x08009163
 80090f8:	0800915d 	.word	0x0800915d
 80090fc:	0800915d 	.word	0x0800915d
 8009100:	0800915d 	.word	0x0800915d
 8009104:	0800915d 	.word	0x0800915d
 8009108:	0800915d 	.word	0x0800915d
 800910c:	0800915d 	.word	0x0800915d
 8009110:	0800915d 	.word	0x0800915d
 8009114:	08009163 	.word	0x08009163
 8009118:	0800915d 	.word	0x0800915d
 800911c:	0800915d 	.word	0x0800915d
 8009120:	0800915d 	.word	0x0800915d
 8009124:	0800915d 	.word	0x0800915d
 8009128:	0800915d 	.word	0x0800915d
 800912c:	0800915d 	.word	0x0800915d
 8009130:	0800915d 	.word	0x0800915d
 8009134:	08009163 	.word	0x08009163
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3304      	adds	r3, #4
 800913c:	2101      	movs	r1, #1
 800913e:	4618      	mov	r0, r3
 8009140:	f000 fde6 	bl	8009d10 <RCCEx_PLL2_Config>
 8009144:	4603      	mov	r3, r0
 8009146:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009148:	e00c      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3324      	adds	r3, #36	; 0x24
 800914e:	2101      	movs	r1, #1
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fe8f 	bl	8009e74 <RCCEx_PLL3_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800915a:	e003      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	75fb      	strb	r3, [r7, #23]
      break;
 8009160:	e000      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800916a:	4b1d      	ldr	r3, [pc, #116]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800916c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009176:	491a      	ldr	r1, [pc, #104]	; (80091e0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009178:	4313      	orrs	r3, r2
 800917a:	654b      	str	r3, [r1, #84]	; 0x54
 800917c:	e001      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d03e      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009192:	2b05      	cmp	r3, #5
 8009194:	d820      	bhi.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091ed 	.word	0x080091ed
 80091a0:	080091b5 	.word	0x080091b5
 80091a4:	080091c7 	.word	0x080091c7
 80091a8:	080091ed 	.word	0x080091ed
 80091ac:	080091ed 	.word	0x080091ed
 80091b0:	080091ed 	.word	0x080091ed
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3304      	adds	r3, #4
 80091b8:	2101      	movs	r1, #1
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fda8 	bl	8009d10 <RCCEx_PLL2_Config>
 80091c0:	4603      	mov	r3, r0
 80091c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80091c4:	e013      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3324      	adds	r3, #36	; 0x24
 80091ca:	2101      	movs	r1, #1
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fe51 	bl	8009e74 <RCCEx_PLL3_Config>
 80091d2:	4603      	mov	r3, r0
 80091d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80091d6:	e00a      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	75fb      	strb	r3, [r7, #23]
      break;
 80091dc:	e007      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80091de:	bf00      	nop
 80091e0:	58024400 	.word	0x58024400
 80091e4:	58024800 	.word	0x58024800
 80091e8:	00ffffcf 	.word	0x00ffffcf
      break;
 80091ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d109      	bne.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80091f4:	4b9f      	ldr	r3, [pc, #636]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80091f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f8:	f023 0207 	bic.w	r2, r3, #7
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009200:	499c      	ldr	r1, [pc, #624]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009202:	4313      	orrs	r3, r2
 8009204:	654b      	str	r3, [r1, #84]	; 0x54
 8009206:	e001      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d039      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800921e:	2b05      	cmp	r3, #5
 8009220:	d820      	bhi.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009222:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	0800926b 	.word	0x0800926b
 800922c:	08009241 	.word	0x08009241
 8009230:	08009253 	.word	0x08009253
 8009234:	0800926b 	.word	0x0800926b
 8009238:	0800926b 	.word	0x0800926b
 800923c:	0800926b 	.word	0x0800926b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	2101      	movs	r1, #1
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fd62 	bl	8009d10 <RCCEx_PLL2_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009250:	e00c      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3324      	adds	r3, #36	; 0x24
 8009256:	2101      	movs	r1, #1
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fe0b 	bl	8009e74 <RCCEx_PLL3_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009262:	e003      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	75fb      	strb	r3, [r7, #23]
      break;
 8009268:	e000      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800926a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800926c:	7dfb      	ldrb	r3, [r7, #23]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009272:	4b80      	ldr	r3, [pc, #512]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009276:	f023 0207 	bic.w	r2, r3, #7
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009280:	497c      	ldr	r1, [pc, #496]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009282:	4313      	orrs	r3, r2
 8009284:	658b      	str	r3, [r1, #88]	; 0x58
 8009286:	e001      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0320 	and.w	r3, r3, #32
 8009294:	2b00      	cmp	r3, #0
 8009296:	d04b      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092a2:	d02e      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80092a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092a8:	d828      	bhi.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80092aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ae:	d02a      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80092b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b4:	d822      	bhi.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80092b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092ba:	d026      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80092bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092c0:	d81c      	bhi.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80092c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c6:	d010      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80092c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092cc:	d816      	bhi.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d01d      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80092d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092d6:	d111      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3304      	adds	r3, #4
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fd16 	bl	8009d10 <RCCEx_PLL2_Config>
 80092e4:	4603      	mov	r3, r0
 80092e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80092e8:	e012      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3324      	adds	r3, #36	; 0x24
 80092ee:	2102      	movs	r1, #2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fdbf 	bl	8009e74 <RCCEx_PLL3_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80092fa:	e009      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009300:	e006      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009302:	bf00      	nop
 8009304:	e004      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009306:	bf00      	nop
 8009308:	e002      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800930e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10a      	bne.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009316:	4b57      	ldr	r3, [pc, #348]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009324:	4953      	ldr	r1, [pc, #332]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009326:	4313      	orrs	r3, r2
 8009328:	654b      	str	r3, [r1, #84]	; 0x54
 800932a:	e001      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932c:	7dfb      	ldrb	r3, [r7, #23]
 800932e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d04b      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009342:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009346:	d02e      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009348:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800934c:	d828      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800934e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009352:	d02a      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009358:	d822      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800935a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800935e:	d026      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009360:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009364:	d81c      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800936a:	d010      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800936c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009370:	d816      	bhi.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d01d      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800937a:	d111      	bne.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fcc4 	bl	8009d10 <RCCEx_PLL2_Config>
 8009388:	4603      	mov	r3, r0
 800938a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800938c:	e012      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3324      	adds	r3, #36	; 0x24
 8009392:	2102      	movs	r1, #2
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fd6d 	bl	8009e74 <RCCEx_PLL3_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800939e:	e009      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	75fb      	strb	r3, [r7, #23]
      break;
 80093a4:	e006      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80093a6:	bf00      	nop
 80093a8:	e004      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80093aa:	bf00      	nop
 80093ac:	e002      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80093ae:	bf00      	nop
 80093b0:	e000      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80093b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093ba:	4b2e      	ldr	r3, [pc, #184]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80093bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093c8:	492a      	ldr	r1, [pc, #168]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	658b      	str	r3, [r1, #88]	; 0x58
 80093ce:	e001      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
 80093d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d04d      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80093ea:	d02e      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80093ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80093f0:	d828      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80093f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093f6:	d02a      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80093f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093fc:	d822      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80093fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009402:	d026      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009404:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009408:	d81c      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800940a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800940e:	d010      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009414:	d816      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01d      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800941a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800941e:	d111      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3304      	adds	r3, #4
 8009424:	2100      	movs	r1, #0
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fc72 	bl	8009d10 <RCCEx_PLL2_Config>
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009430:	e012      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3324      	adds	r3, #36	; 0x24
 8009436:	2102      	movs	r1, #2
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fd1b 	bl	8009e74 <RCCEx_PLL3_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009442:	e009      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
      break;
 8009448:	e006      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800944a:	bf00      	nop
 800944c:	e004      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800944e:	bf00      	nop
 8009450:	e002      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009452:	bf00      	nop
 8009454:	e000      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10c      	bne.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800946c:	4901      	ldr	r1, [pc, #4]	; (8009474 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800946e:	4313      	orrs	r3, r2
 8009470:	658b      	str	r3, [r1, #88]	; 0x58
 8009472:	e003      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b00      	cmp	r3, #0
 8009486:	d018      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800948c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009490:	d10a      	bne.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	3324      	adds	r3, #36	; 0x24
 8009496:	2102      	movs	r1, #2
 8009498:	4618      	mov	r0, r3
 800949a:	f000 fceb 	bl	8009e74 <RCCEx_PLL3_Config>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80094a8:	4b8a      	ldr	r3, [pc, #552]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80094aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b4:	4987      	ldr	r1, [pc, #540]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80094b6:	4313      	orrs	r3, r2
 80094b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0310 	and.w	r3, r3, #16
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d01a      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d0:	d10a      	bne.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3324      	adds	r3, #36	; 0x24
 80094d6:	2102      	movs	r1, #2
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 fccb 	bl	8009e74 <RCCEx_PLL3_Config>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094e8:	4b7a      	ldr	r3, [pc, #488]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80094ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f6:	4977      	ldr	r1, [pc, #476]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d034      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800950e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009512:	d01d      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009518:	d817      	bhi.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800951e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009522:	d009      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009524:	e011      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3304      	adds	r3, #4
 800952a:	2100      	movs	r1, #0
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fbef 	bl	8009d10 <RCCEx_PLL2_Config>
 8009532:	4603      	mov	r3, r0
 8009534:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009536:	e00c      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3324      	adds	r3, #36	; 0x24
 800953c:	2102      	movs	r1, #2
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fc98 	bl	8009e74 <RCCEx_PLL3_Config>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009548:	e003      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	75fb      	strb	r3, [r7, #23]
      break;
 800954e:	e000      	b.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009558:	4b5e      	ldr	r3, [pc, #376]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800955a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800955c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009566:	495b      	ldr	r1, [pc, #364]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009568:	4313      	orrs	r3, r2
 800956a:	658b      	str	r3, [r1, #88]	; 0x58
 800956c:	e001      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d033      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009584:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009588:	d01c      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800958a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800958e:	d816      	bhi.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009594:	d003      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800959a:	d007      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800959c:	e00f      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800959e:	4b4d      	ldr	r3, [pc, #308]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a2:	4a4c      	ldr	r2, [pc, #304]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80095aa:	e00c      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3324      	adds	r3, #36	; 0x24
 80095b0:	2101      	movs	r1, #1
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fc5e 	bl	8009e74 <RCCEx_PLL3_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80095bc:	e003      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	75fb      	strb	r3, [r7, #23]
      break;
 80095c2:	e000      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80095c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10a      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095cc:	4b41      	ldr	r3, [pc, #260]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095da:	493e      	ldr	r1, [pc, #248]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	654b      	str	r3, [r1, #84]	; 0x54
 80095e0:	e001      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d029      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80095fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095fe:	d007      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009600:	e00f      	b.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009602:	4b34      	ldr	r3, [pc, #208]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009606:	4a33      	ldr	r2, [pc, #204]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800960c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800960e:	e00b      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	3304      	adds	r3, #4
 8009614:	2102      	movs	r1, #2
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fb7a 	bl	8009d10 <RCCEx_PLL2_Config>
 800961c:	4603      	mov	r3, r0
 800961e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009620:	e002      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	75fb      	strb	r3, [r7, #23]
      break;
 8009626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009628:	7dfb      	ldrb	r3, [r7, #23]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d109      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800962e:	4b29      	ldr	r3, [pc, #164]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009632:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963a:	4926      	ldr	r1, [pc, #152]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800963c:	4313      	orrs	r3, r2
 800963e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009640:	e001      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	3324      	adds	r3, #36	; 0x24
 8009656:	2102      	movs	r1, #2
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fc0b 	bl	8009e74 <RCCEx_PLL3_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d033      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800967c:	d017      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800967e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009682:	d811      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009688:	d013      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800968a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800968e:	d80b      	bhi.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d010      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009698:	d106      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800969a:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	4a0d      	ldr	r2, [pc, #52]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80096a6:	e007      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	75fb      	strb	r3, [r7, #23]
      break;
 80096ac:	e004      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80096ae:	bf00      	nop
 80096b0:	e002      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80096b2:	bf00      	nop
 80096b4:	e000      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80096b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10c      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096be:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ca:	4902      	ldr	r1, [pc, #8]	; (80096d4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	654b      	str	r3, [r1, #84]	; 0x54
 80096d0:	e004      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 80096d2:	bf00      	nop
 80096d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d008      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096e8:	4b29      	ldr	r3, [pc, #164]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80096ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f4:	4926      	ldr	r1, [pc, #152]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009706:	4b22      	ldr	r3, [pc, #136]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009712:	491f      	ldr	r1, [pc, #124]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009714:	4313      	orrs	r3, r2
 8009716:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00d      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009724:	4b1a      	ldr	r3, [pc, #104]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	4a19      	ldr	r2, [pc, #100]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800972a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800972e:	6113      	str	r3, [r2, #16]
 8009730:	4b17      	ldr	r3, [pc, #92]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800973a:	4915      	ldr	r1, [pc, #84]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800973c:	4313      	orrs	r3, r2
 800973e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	da08      	bge.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009748:	4b11      	ldr	r3, [pc, #68]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800974a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009754:	490e      	ldr	r1, [pc, #56]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009756:	4313      	orrs	r3, r2
 8009758:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d009      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009766:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009774:	4906      	ldr	r1, [pc, #24]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009776:	4313      	orrs	r3, r2
 8009778:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800977a:	7dbb      	ldrb	r3, [r7, #22]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	e000      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009784:	2301      	movs	r3, #1
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	58024400 	.word	0x58024400

08009794 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009798:	f7ff f8a6 	bl	80088e8 <HAL_RCC_GetHCLKFreq>
 800979c:	4602      	mov	r2, r0
 800979e:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097a0:	6a1b      	ldr	r3, [r3, #32]
 80097a2:	091b      	lsrs	r3, r3, #4
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	4904      	ldr	r1, [pc, #16]	; (80097bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097aa:	5ccb      	ldrb	r3, [r1, r3]
 80097ac:	f003 031f 	and.w	r3, r3, #31
 80097b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	58024400 	.word	0x58024400
 80097bc:	0800d9dc 	.word	0x0800d9dc

080097c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b089      	sub	sp, #36	; 0x24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097c8:	4ba1      	ldr	r3, [pc, #644]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80097d2:	4b9f      	ldr	r3, [pc, #636]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	0b1b      	lsrs	r3, r3, #12
 80097d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80097de:	4b9c      	ldr	r3, [pc, #624]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e2:	091b      	lsrs	r3, r3, #4
 80097e4:	f003 0301 	and.w	r3, r3, #1
 80097e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80097ea:	4b99      	ldr	r3, [pc, #612]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ee:	08db      	lsrs	r3, r3, #3
 80097f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	fb02 f303 	mul.w	r3, r2, r3
 80097fa:	ee07 3a90 	vmov	s15, r3
 80097fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009802:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8111 	beq.w	8009a30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	2b02      	cmp	r3, #2
 8009812:	f000 8083 	beq.w	800991c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b02      	cmp	r3, #2
 800981a:	f200 80a1 	bhi.w	8009960 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d003      	beq.n	800982c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d056      	beq.n	80098d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800982a:	e099      	b.n	8009960 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800982c:	4b88      	ldr	r3, [pc, #544]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 0320 	and.w	r3, r3, #32
 8009834:	2b00      	cmp	r3, #0
 8009836:	d02d      	beq.n	8009894 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009838:	4b85      	ldr	r3, [pc, #532]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	08db      	lsrs	r3, r3, #3
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	4a84      	ldr	r2, [pc, #528]	; (8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009844:	fa22 f303 	lsr.w	r3, r2, r3
 8009848:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	ee07 3a90 	vmov	s15, r3
 8009850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009862:	4b7b      	ldr	r3, [pc, #492]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	ee07 3a90 	vmov	s15, r3
 800986e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009872:	ed97 6a03 	vldr	s12, [r7, #12]
 8009876:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800987a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800987e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800988e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009892:	e087      	b.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	ee07 3a90 	vmov	s15, r3
 800989a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800989e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a6:	4b6a      	ldr	r3, [pc, #424]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d6:	e065      	b.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80098e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ea:	4b59      	ldr	r3, [pc, #356]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80098fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800991a:	e043      	b.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009926:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800992a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992e:	4b48      	ldr	r3, [pc, #288]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009942:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800995e:	e021      	b.n	80099a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800996e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009972:	4b37      	ldr	r3, [pc, #220]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009982:	ed97 6a03 	vldr	s12, [r7, #12]
 8009986:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800998a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80099a4:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a8:	0a5b      	lsrs	r3, r3, #9
 80099aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099be:	edd7 6a07 	vldr	s13, [r7, #28]
 80099c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ca:	ee17 2a90 	vmov	r2, s15
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80099d2:	4b1f      	ldr	r3, [pc, #124]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	0c1b      	lsrs	r3, r3, #16
 80099d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099dc:	ee07 3a90 	vmov	s15, r3
 80099e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099f8:	ee17 2a90 	vmov	r2, s15
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009a00:	4b13      	ldr	r3, [pc, #76]	; (8009a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a04:	0e1b      	lsrs	r3, r3, #24
 8009a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a26:	ee17 2a90 	vmov	r2, s15
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a2e:	e008      	b.n	8009a42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	609a      	str	r2, [r3, #8]
}
 8009a42:	bf00      	nop
 8009a44:	3724      	adds	r7, #36	; 0x24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	58024400 	.word	0x58024400
 8009a54:	03d09000 	.word	0x03d09000
 8009a58:	46000000 	.word	0x46000000
 8009a5c:	4c742400 	.word	0x4c742400
 8009a60:	4a742400 	.word	0x4a742400
 8009a64:	4af42400 	.word	0x4af42400

08009a68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b089      	sub	sp, #36	; 0x24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a70:	4ba1      	ldr	r3, [pc, #644]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	f003 0303 	and.w	r3, r3, #3
 8009a78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009a7a:	4b9f      	ldr	r3, [pc, #636]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7e:	0d1b      	lsrs	r3, r3, #20
 8009a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009a86:	4b9c      	ldr	r3, [pc, #624]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8a:	0a1b      	lsrs	r3, r3, #8
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009a92:	4b99      	ldr	r3, [pc, #612]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	fb02 f303 	mul.w	r3, r2, r3
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 8111 	beq.w	8009cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	f000 8083 	beq.w	8009bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	f200 80a1 	bhi.w	8009c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d056      	beq.n	8009b80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ad2:	e099      	b.n	8009c08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad4:	4b88      	ldr	r3, [pc, #544]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d02d      	beq.n	8009b3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ae0:	4b85      	ldr	r3, [pc, #532]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	08db      	lsrs	r3, r3, #3
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	4a84      	ldr	r2, [pc, #528]	; (8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009aec:	fa22 f303 	lsr.w	r3, r2, r3
 8009af0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	ee07 3a90 	vmov	s15, r3
 8009af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0a:	4b7b      	ldr	r3, [pc, #492]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009b3a:	e087      	b.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4e:	4b6a      	ldr	r3, [pc, #424]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b7e:	e065      	b.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b92:	4b59      	ldr	r3, [pc, #356]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ba6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bc2:	e043      	b.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd6:	4b48      	ldr	r3, [pc, #288]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c06:	e021      	b.n	8009c4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1a:	4b37      	ldr	r3, [pc, #220]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009c4c:	4b2a      	ldr	r3, [pc, #168]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c50:	0a5b      	lsrs	r3, r3, #9
 8009c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c72:	ee17 2a90 	vmov	r2, s15
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009c7a:	4b1f      	ldr	r3, [pc, #124]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	0c1b      	lsrs	r3, r3, #16
 8009c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c84:	ee07 3a90 	vmov	s15, r3
 8009c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca0:	ee17 2a90 	vmov	r2, s15
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ca8:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cac:	0e1b      	lsrs	r3, r3, #24
 8009cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cce:	ee17 2a90 	vmov	r2, s15
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009cd6:	e008      	b.n	8009cea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	609a      	str	r2, [r3, #8]
}
 8009cea:	bf00      	nop
 8009cec:	3724      	adds	r7, #36	; 0x24
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	03d09000 	.word	0x03d09000
 8009d00:	46000000 	.word	0x46000000
 8009d04:	4c742400 	.word	0x4c742400
 8009d08:	4a742400 	.word	0x4a742400
 8009d0c:	4af42400 	.word	0x4af42400

08009d10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d1e:	4b53      	ldr	r3, [pc, #332]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	d101      	bne.n	8009d2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e099      	b.n	8009e62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d2e:	4b4f      	ldr	r3, [pc, #316]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a4e      	ldr	r2, [pc, #312]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d3a:	f7fb f851 	bl	8004de0 <HAL_GetTick>
 8009d3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d40:	e008      	b.n	8009d54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009d42:	f7fb f84d 	bl	8004de0 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d901      	bls.n	8009d54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e086      	b.n	8009e62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d54:	4b45      	ldr	r3, [pc, #276]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1f0      	bne.n	8009d42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d60:	4b42      	ldr	r3, [pc, #264]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	031b      	lsls	r3, r3, #12
 8009d6e:	493f      	ldr	r1, [pc, #252]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	628b      	str	r3, [r1, #40]	; 0x28
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	025b      	lsls	r3, r3, #9
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	041b      	lsls	r3, r3, #16
 8009d92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d96:	431a      	orrs	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	061b      	lsls	r3, r3, #24
 8009da0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009da4:	4931      	ldr	r1, [pc, #196]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009daa:	4b30      	ldr	r3, [pc, #192]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	492d      	ldr	r1, [pc, #180]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009dbc:	4b2b      	ldr	r3, [pc, #172]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	f023 0220 	bic.w	r2, r3, #32
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	4928      	ldr	r1, [pc, #160]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009dce:	4b27      	ldr	r3, [pc, #156]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	4a26      	ldr	r2, [pc, #152]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dd4:	f023 0310 	bic.w	r3, r3, #16
 8009dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009dda:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009ddc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dde:	4b24      	ldr	r3, [pc, #144]	; (8009e70 <RCCEx_PLL2_Config+0x160>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	69d2      	ldr	r2, [r2, #28]
 8009de6:	00d2      	lsls	r2, r2, #3
 8009de8:	4920      	ldr	r1, [pc, #128]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009dee:	4b1f      	ldr	r3, [pc, #124]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df2:	4a1e      	ldr	r2, [pc, #120]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009df4:	f043 0310 	orr.w	r3, r3, #16
 8009df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d106      	bne.n	8009e0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e00:	4b1a      	ldr	r3, [pc, #104]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e04:	4a19      	ldr	r2, [pc, #100]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e0c:	e00f      	b.n	8009e2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d106      	bne.n	8009e22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e14:	4b15      	ldr	r3, [pc, #84]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	4a14      	ldr	r2, [pc, #80]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e20:	e005      	b.n	8009e2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e22:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	4a11      	ldr	r2, [pc, #68]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e2e:	4b0f      	ldr	r3, [pc, #60]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a0e      	ldr	r2, [pc, #56]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e3a:	f7fa ffd1 	bl	8004de0 <HAL_GetTick>
 8009e3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e40:	e008      	b.n	8009e54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e42:	f7fa ffcd 	bl	8004de0 <HAL_GetTick>
 8009e46:	4602      	mov	r2, r0
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	1ad3      	subs	r3, r2, r3
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d901      	bls.n	8009e54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e006      	b.n	8009e62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <RCCEx_PLL2_Config+0x15c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d0f0      	beq.n	8009e42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	58024400 	.word	0x58024400
 8009e70:	ffff0007 	.word	0xffff0007

08009e74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e82:	4b53      	ldr	r3, [pc, #332]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d101      	bne.n	8009e92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e099      	b.n	8009fc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009e92:	4b4f      	ldr	r3, [pc, #316]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a4e      	ldr	r2, [pc, #312]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e9e:	f7fa ff9f 	bl	8004de0 <HAL_GetTick>
 8009ea2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ea4:	e008      	b.n	8009eb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ea6:	f7fa ff9b 	bl	8004de0 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d901      	bls.n	8009eb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e086      	b.n	8009fc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009eb8:	4b45      	ldr	r3, [pc, #276]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1f0      	bne.n	8009ea6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ec4:	4b42      	ldr	r3, [pc, #264]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	051b      	lsls	r3, r3, #20
 8009ed2:	493f      	ldr	r1, [pc, #252]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	628b      	str	r3, [r1, #40]	; 0x28
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	025b      	lsls	r3, r3, #9
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	041b      	lsls	r3, r3, #16
 8009ef6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	061b      	lsls	r3, r3, #24
 8009f04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f08:	4931      	ldr	r1, [pc, #196]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f0e:	4b30      	ldr	r3, [pc, #192]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	492d      	ldr	r1, [pc, #180]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f20:	4b2b      	ldr	r3, [pc, #172]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	4928      	ldr	r1, [pc, #160]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f32:	4b27      	ldr	r3, [pc, #156]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	4a26      	ldr	r2, [pc, #152]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f3e:	4b24      	ldr	r3, [pc, #144]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f42:	4b24      	ldr	r3, [pc, #144]	; (8009fd4 <RCCEx_PLL3_Config+0x160>)
 8009f44:	4013      	ands	r3, r2
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	69d2      	ldr	r2, [r2, #28]
 8009f4a:	00d2      	lsls	r2, r2, #3
 8009f4c:	4920      	ldr	r1, [pc, #128]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f52:	4b1f      	ldr	r3, [pc, #124]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	4a1e      	ldr	r2, [pc, #120]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f64:	4b1a      	ldr	r3, [pc, #104]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	4a19      	ldr	r2, [pc, #100]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f70:	e00f      	b.n	8009f92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d106      	bne.n	8009f86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009f78:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	4a14      	ldr	r2, [pc, #80]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f84:	e005      	b.n	8009f92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009f86:	4b12      	ldr	r3, [pc, #72]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	4a11      	ldr	r2, [pc, #68]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009f92:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a0e      	ldr	r2, [pc, #56]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f9e:	f7fa ff1f 	bl	8004de0 <HAL_GetTick>
 8009fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fa4:	e008      	b.n	8009fb8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009fa6:	f7fa ff1b 	bl	8004de0 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d901      	bls.n	8009fb8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e006      	b.n	8009fc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <RCCEx_PLL3_Config+0x15c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0f0      	beq.n	8009fa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	58024400 	.word	0x58024400
 8009fd4:	ffff0007 	.word	0xffff0007

08009fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e049      	b.n	800a07e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fa f98c 	bl	800431c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3304      	adds	r3, #4
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f000 fed8 	bl	800adcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
	...

0800a088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d001      	beq.n	800a0a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e05e      	b.n	800a15e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f042 0201 	orr.w	r2, r2, #1
 800a0b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a2b      	ldr	r2, [pc, #172]	; (800a16c <HAL_TIM_Base_Start_IT+0xe4>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d02c      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ca:	d027      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a27      	ldr	r2, [pc, #156]	; (800a170 <HAL_TIM_Base_Start_IT+0xe8>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d022      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a26      	ldr	r2, [pc, #152]	; (800a174 <HAL_TIM_Base_Start_IT+0xec>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d01d      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a24      	ldr	r2, [pc, #144]	; (800a178 <HAL_TIM_Base_Start_IT+0xf0>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d018      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a23      	ldr	r2, [pc, #140]	; (800a17c <HAL_TIM_Base_Start_IT+0xf4>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d013      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a21      	ldr	r2, [pc, #132]	; (800a180 <HAL_TIM_Base_Start_IT+0xf8>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d00e      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a20      	ldr	r2, [pc, #128]	; (800a184 <HAL_TIM_Base_Start_IT+0xfc>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d009      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a1e      	ldr	r2, [pc, #120]	; (800a188 <HAL_TIM_Base_Start_IT+0x100>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d004      	beq.n	800a11c <HAL_TIM_Base_Start_IT+0x94>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a1d      	ldr	r2, [pc, #116]	; (800a18c <HAL_TIM_Base_Start_IT+0x104>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d115      	bne.n	800a148 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	4b1b      	ldr	r3, [pc, #108]	; (800a190 <HAL_TIM_Base_Start_IT+0x108>)
 800a124:	4013      	ands	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b06      	cmp	r3, #6
 800a12c:	d015      	beq.n	800a15a <HAL_TIM_Base_Start_IT+0xd2>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a134:	d011      	beq.n	800a15a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0201 	orr.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a146:	e008      	b.n	800a15a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0201 	orr.w	r2, r2, #1
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e000      	b.n	800a15c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a15a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	40010000 	.word	0x40010000
 800a170:	40000400 	.word	0x40000400
 800a174:	40000800 	.word	0x40000800
 800a178:	40000c00 	.word	0x40000c00
 800a17c:	40010400 	.word	0x40010400
 800a180:	40001800 	.word	0x40001800
 800a184:	40014000 	.word	0x40014000
 800a188:	4000e000 	.word	0x4000e000
 800a18c:	4000e400 	.word	0x4000e400
 800a190:	00010007 	.word	0x00010007

0800a194 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e049      	b.n	800a23a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d106      	bne.n	800a1c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7fa fa52 	bl	8004664 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	3304      	adds	r3, #4
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	f000 fdfa 	bl	800adcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
	...

0800a244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d109      	bne.n	800a268 <HAL_TIM_PWM_Start+0x24>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	bf14      	ite	ne
 800a260:	2301      	movne	r3, #1
 800a262:	2300      	moveq	r3, #0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	e03c      	b.n	800a2e2 <HAL_TIM_PWM_Start+0x9e>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	2b04      	cmp	r3, #4
 800a26c:	d109      	bne.n	800a282 <HAL_TIM_PWM_Start+0x3e>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b01      	cmp	r3, #1
 800a278:	bf14      	ite	ne
 800a27a:	2301      	movne	r3, #1
 800a27c:	2300      	moveq	r3, #0
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	e02f      	b.n	800a2e2 <HAL_TIM_PWM_Start+0x9e>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b08      	cmp	r3, #8
 800a286:	d109      	bne.n	800a29c <HAL_TIM_PWM_Start+0x58>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b01      	cmp	r3, #1
 800a292:	bf14      	ite	ne
 800a294:	2301      	movne	r3, #1
 800a296:	2300      	moveq	r3, #0
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	e022      	b.n	800a2e2 <HAL_TIM_PWM_Start+0x9e>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b0c      	cmp	r3, #12
 800a2a0:	d109      	bne.n	800a2b6 <HAL_TIM_PWM_Start+0x72>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	bf14      	ite	ne
 800a2ae:	2301      	movne	r3, #1
 800a2b0:	2300      	moveq	r3, #0
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	e015      	b.n	800a2e2 <HAL_TIM_PWM_Start+0x9e>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b10      	cmp	r3, #16
 800a2ba:	d109      	bne.n	800a2d0 <HAL_TIM_PWM_Start+0x8c>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	bf14      	ite	ne
 800a2c8:	2301      	movne	r3, #1
 800a2ca:	2300      	moveq	r3, #0
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	e008      	b.n	800a2e2 <HAL_TIM_PWM_Start+0x9e>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	bf14      	ite	ne
 800a2dc:	2301      	movne	r3, #1
 800a2de:	2300      	moveq	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e0ab      	b.n	800a442 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d104      	bne.n	800a2fa <HAL_TIM_PWM_Start+0xb6>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2f8:	e023      	b.n	800a342 <HAL_TIM_PWM_Start+0xfe>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	d104      	bne.n	800a30a <HAL_TIM_PWM_Start+0xc6>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2202      	movs	r2, #2
 800a304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a308:	e01b      	b.n	800a342 <HAL_TIM_PWM_Start+0xfe>
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d104      	bne.n	800a31a <HAL_TIM_PWM_Start+0xd6>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a318:	e013      	b.n	800a342 <HAL_TIM_PWM_Start+0xfe>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b0c      	cmp	r3, #12
 800a31e:	d104      	bne.n	800a32a <HAL_TIM_PWM_Start+0xe6>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2202      	movs	r2, #2
 800a324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a328:	e00b      	b.n	800a342 <HAL_TIM_PWM_Start+0xfe>
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	2b10      	cmp	r3, #16
 800a32e:	d104      	bne.n	800a33a <HAL_TIM_PWM_Start+0xf6>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2202      	movs	r2, #2
 800a334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a338:	e003      	b.n	800a342 <HAL_TIM_PWM_Start+0xfe>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2202      	movs	r2, #2
 800a33e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2201      	movs	r2, #1
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 f958 	bl	800b600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a3d      	ldr	r2, [pc, #244]	; (800a44c <HAL_TIM_PWM_Start+0x208>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d013      	beq.n	800a382 <HAL_TIM_PWM_Start+0x13e>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a3c      	ldr	r2, [pc, #240]	; (800a450 <HAL_TIM_PWM_Start+0x20c>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d00e      	beq.n	800a382 <HAL_TIM_PWM_Start+0x13e>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a3a      	ldr	r2, [pc, #232]	; (800a454 <HAL_TIM_PWM_Start+0x210>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d009      	beq.n	800a382 <HAL_TIM_PWM_Start+0x13e>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a39      	ldr	r2, [pc, #228]	; (800a458 <HAL_TIM_PWM_Start+0x214>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d004      	beq.n	800a382 <HAL_TIM_PWM_Start+0x13e>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a37      	ldr	r2, [pc, #220]	; (800a45c <HAL_TIM_PWM_Start+0x218>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d101      	bne.n	800a386 <HAL_TIM_PWM_Start+0x142>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <HAL_TIM_PWM_Start+0x144>
 800a386:	2300      	movs	r3, #0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d007      	beq.n	800a39c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a39a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a2a      	ldr	r2, [pc, #168]	; (800a44c <HAL_TIM_PWM_Start+0x208>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d02c      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ae:	d027      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a2a      	ldr	r2, [pc, #168]	; (800a460 <HAL_TIM_PWM_Start+0x21c>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d022      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a29      	ldr	r2, [pc, #164]	; (800a464 <HAL_TIM_PWM_Start+0x220>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d01d      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a27      	ldr	r2, [pc, #156]	; (800a468 <HAL_TIM_PWM_Start+0x224>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d018      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a1f      	ldr	r2, [pc, #124]	; (800a450 <HAL_TIM_PWM_Start+0x20c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d013      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a23      	ldr	r2, [pc, #140]	; (800a46c <HAL_TIM_PWM_Start+0x228>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d00e      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a1b      	ldr	r2, [pc, #108]	; (800a454 <HAL_TIM_PWM_Start+0x210>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d009      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a1f      	ldr	r2, [pc, #124]	; (800a470 <HAL_TIM_PWM_Start+0x22c>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d004      	beq.n	800a400 <HAL_TIM_PWM_Start+0x1bc>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <HAL_TIM_PWM_Start+0x230>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d115      	bne.n	800a42c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689a      	ldr	r2, [r3, #8]
 800a406:	4b1c      	ldr	r3, [pc, #112]	; (800a478 <HAL_TIM_PWM_Start+0x234>)
 800a408:	4013      	ands	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b06      	cmp	r3, #6
 800a410:	d015      	beq.n	800a43e <HAL_TIM_PWM_Start+0x1fa>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a418:	d011      	beq.n	800a43e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0201 	orr.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a42a:	e008      	b.n	800a43e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	e000      	b.n	800a440 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a43e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	40010000 	.word	0x40010000
 800a450:	40010400 	.word	0x40010400
 800a454:	40014000 	.word	0x40014000
 800a458:	40014400 	.word	0x40014400
 800a45c:	40014800 	.word	0x40014800
 800a460:	40000400 	.word	0x40000400
 800a464:	40000800 	.word	0x40000800
 800a468:	40000c00 	.word	0x40000c00
 800a46c:	40001800 	.word	0x40001800
 800a470:	4000e000 	.word	0x4000e000
 800a474:	4000e400 	.word	0x4000e400
 800a478:	00010007 	.word	0x00010007

0800a47c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e08f      	b.n	800a5b0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d106      	bne.n	800a4aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7f9 ffcf 	bl	8004448 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	6899      	ldr	r1, [r3, #8]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	4b3e      	ldr	r3, [pc, #248]	; (800a5b8 <HAL_TIM_Encoder_Init+0x13c>)
 800a4be:	400b      	ands	r3, r1
 800a4c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4610      	mov	r0, r2
 800a4ce:	f000 fc7d 	bl	800adcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	4b31      	ldr	r3, [pc, #196]	; (800a5bc <HAL_TIM_Encoder_Init+0x140>)
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	4313      	orrs	r3, r2
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	4b2b      	ldr	r3, [pc, #172]	; (800a5c0 <HAL_TIM_Encoder_Init+0x144>)
 800a512:	4013      	ands	r3, r2
 800a514:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	4b2a      	ldr	r3, [pc, #168]	; (800a5c4 <HAL_TIM_Encoder_Init+0x148>)
 800a51a:	4013      	ands	r3, r2
 800a51c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	4313      	orrs	r3, r2
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	011a      	lsls	r2, r3, #4
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	031b      	lsls	r3, r3, #12
 800a53c:	4313      	orrs	r3, r2
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	4313      	orrs	r3, r2
 800a542:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a54a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a552:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	011b      	lsls	r3, r3, #4
 800a55e:	4313      	orrs	r3, r2
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4313      	orrs	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	fffebff8 	.word	0xfffebff8
 800a5bc:	fffffcfc 	.word	0xfffffcfc
 800a5c0:	fffff3f3 	.word	0xfffff3f3
 800a5c4:	ffff0f0f 	.word	0xffff0f0f

0800a5c8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d110      	bne.n	800a61a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d102      	bne.n	800a604 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5fe:	7b7b      	ldrb	r3, [r7, #13]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d001      	beq.n	800a608 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e089      	b.n	800a71c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2202      	movs	r2, #2
 800a60c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a618:	e031      	b.n	800a67e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	d110      	bne.n	800a642 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a620:	7bbb      	ldrb	r3, [r7, #14]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d102      	bne.n	800a62c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a626:	7b3b      	ldrb	r3, [r7, #12]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d001      	beq.n	800a630 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e075      	b.n	800a71c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2202      	movs	r2, #2
 800a63c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a640:	e01d      	b.n	800a67e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d108      	bne.n	800a65a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d105      	bne.n	800a65a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a64e:	7b7b      	ldrb	r3, [r7, #13]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d102      	bne.n	800a65a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a654:	7b3b      	ldrb	r3, [r7, #12]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d001      	beq.n	800a65e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e05e      	b.n	800a71c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2202      	movs	r2, #2
 800a662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2202      	movs	r2, #2
 800a672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2202      	movs	r2, #2
 800a67a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <HAL_TIM_Encoder_Start_IT+0xc4>
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2b04      	cmp	r3, #4
 800a688:	d010      	beq.n	800a6ac <HAL_TIM_Encoder_Start_IT+0xe4>
 800a68a:	e01f      	b.n	800a6cc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2201      	movs	r2, #1
 800a692:	2100      	movs	r1, #0
 800a694:	4618      	mov	r0, r3
 800a696:	f000 ffb3 	bl	800b600 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f042 0202 	orr.w	r2, r2, #2
 800a6a8:	60da      	str	r2, [r3, #12]
      break;
 800a6aa:	e02e      	b.n	800a70a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	2104      	movs	r1, #4
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 ffa3 	bl	800b600 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f042 0204 	orr.w	r2, r2, #4
 800a6c8:	60da      	str	r2, [r3, #12]
      break;
 800a6ca:	e01e      	b.n	800a70a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 ff93 	bl	800b600 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	2104      	movs	r1, #4
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 ff8c 	bl	800b600 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68da      	ldr	r2, [r3, #12]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f042 0202 	orr.w	r2, r2, #2
 800a6f6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f042 0204 	orr.w	r2, r2, #4
 800a706:	60da      	str	r2, [r3, #12]
      break;
 800a708:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f042 0201 	orr.w	r2, r2, #1
 800a718:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b02      	cmp	r3, #2
 800a738:	d122      	bne.n	800a780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	2b02      	cmp	r3, #2
 800a746:	d11b      	bne.n	800a780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f06f 0202 	mvn.w	r2, #2
 800a750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2201      	movs	r2, #1
 800a756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fb12 	bl	800ad90 <HAL_TIM_IC_CaptureCallback>
 800a76c:	e005      	b.n	800a77a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fb04 	bl	800ad7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fb15 	bl	800ada4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d122      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d11b      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f06f 0204 	mvn.w	r2, #4
 800a7a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fae8 	bl	800ad90 <HAL_TIM_IC_CaptureCallback>
 800a7c0:	e005      	b.n	800a7ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fada 	bl	800ad7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 faeb 	bl	800ada4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	f003 0308 	and.w	r3, r3, #8
 800a7de:	2b08      	cmp	r3, #8
 800a7e0:	d122      	bne.n	800a828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f003 0308 	and.w	r3, r3, #8
 800a7ec:	2b08      	cmp	r3, #8
 800a7ee:	d11b      	bne.n	800a828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f06f 0208 	mvn.w	r2, #8
 800a7f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2204      	movs	r2, #4
 800a7fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	69db      	ldr	r3, [r3, #28]
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fabe 	bl	800ad90 <HAL_TIM_IC_CaptureCallback>
 800a814:	e005      	b.n	800a822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fab0 	bl	800ad7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fac1 	bl	800ada4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	f003 0310 	and.w	r3, r3, #16
 800a832:	2b10      	cmp	r3, #16
 800a834:	d122      	bne.n	800a87c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f003 0310 	and.w	r3, r3, #16
 800a840:	2b10      	cmp	r3, #16
 800a842:	d11b      	bne.n	800a87c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f06f 0210 	mvn.w	r2, #16
 800a84c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2208      	movs	r2, #8
 800a852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa94 	bl	800ad90 <HAL_TIM_IC_CaptureCallback>
 800a868:	e005      	b.n	800a876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa86 	bl	800ad7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fa97 	bl	800ada4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b01      	cmp	r3, #1
 800a888:	d10e      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b01      	cmp	r3, #1
 800a896:	d107      	bne.n	800a8a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f06f 0201 	mvn.w	r2, #1
 800a8a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7f6 f894 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b2:	2b80      	cmp	r3, #128	; 0x80
 800a8b4:	d10e      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c0:	2b80      	cmp	r3, #128	; 0x80
 800a8c2:	d107      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f001 f802 	bl	800b8d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8e2:	d10e      	bne.n	800a902 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ee:	2b80      	cmp	r3, #128	; 0x80
 800a8f0:	d107      	bne.n	800a902 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a8fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fff5 	bl	800b8ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90c:	2b40      	cmp	r3, #64	; 0x40
 800a90e:	d10e      	bne.n	800a92e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91a:	2b40      	cmp	r3, #64	; 0x40
 800a91c:	d107      	bne.n	800a92e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fa45 	bl	800adb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b20      	cmp	r3, #32
 800a93a:	d10e      	bne.n	800a95a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	f003 0320 	and.w	r3, r3, #32
 800a946:	2b20      	cmp	r3, #32
 800a948:	d107      	bne.n	800a95a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f06f 0220 	mvn.w	r2, #32
 800a952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 ffb5 	bl	800b8c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a970:	2300      	movs	r3, #0
 800a972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d101      	bne.n	800a982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a97e:	2302      	movs	r3, #2
 800a980:	e0ff      	b.n	800ab82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b14      	cmp	r3, #20
 800a98e:	f200 80f0 	bhi.w	800ab72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a992:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a998:	0800a9ed 	.word	0x0800a9ed
 800a99c:	0800ab73 	.word	0x0800ab73
 800a9a0:	0800ab73 	.word	0x0800ab73
 800a9a4:	0800ab73 	.word	0x0800ab73
 800a9a8:	0800aa2d 	.word	0x0800aa2d
 800a9ac:	0800ab73 	.word	0x0800ab73
 800a9b0:	0800ab73 	.word	0x0800ab73
 800a9b4:	0800ab73 	.word	0x0800ab73
 800a9b8:	0800aa6f 	.word	0x0800aa6f
 800a9bc:	0800ab73 	.word	0x0800ab73
 800a9c0:	0800ab73 	.word	0x0800ab73
 800a9c4:	0800ab73 	.word	0x0800ab73
 800a9c8:	0800aaaf 	.word	0x0800aaaf
 800a9cc:	0800ab73 	.word	0x0800ab73
 800a9d0:	0800ab73 	.word	0x0800ab73
 800a9d4:	0800ab73 	.word	0x0800ab73
 800a9d8:	0800aaf1 	.word	0x0800aaf1
 800a9dc:	0800ab73 	.word	0x0800ab73
 800a9e0:	0800ab73 	.word	0x0800ab73
 800a9e4:	0800ab73 	.word	0x0800ab73
 800a9e8:	0800ab31 	.word	0x0800ab31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68b9      	ldr	r1, [r7, #8]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fa90 	bl	800af18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	699a      	ldr	r2, [r3, #24]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f042 0208 	orr.w	r2, r2, #8
 800aa06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f022 0204 	bic.w	r2, r2, #4
 800aa16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6999      	ldr	r1, [r3, #24]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	691a      	ldr	r2, [r3, #16]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	430a      	orrs	r2, r1
 800aa28:	619a      	str	r2, [r3, #24]
      break;
 800aa2a:	e0a5      	b.n	800ab78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68b9      	ldr	r1, [r7, #8]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fb00 	bl	800b038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699a      	ldr	r2, [r3, #24]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6999      	ldr	r1, [r3, #24]
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	021a      	lsls	r2, r3, #8
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	619a      	str	r2, [r3, #24]
      break;
 800aa6c:	e084      	b.n	800ab78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fb69 	bl	800b14c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	69da      	ldr	r2, [r3, #28]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f042 0208 	orr.w	r2, r2, #8
 800aa88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69da      	ldr	r2, [r3, #28]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f022 0204 	bic.w	r2, r2, #4
 800aa98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69d9      	ldr	r1, [r3, #28]
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	691a      	ldr	r2, [r3, #16]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	430a      	orrs	r2, r1
 800aaaa:	61da      	str	r2, [r3, #28]
      break;
 800aaac:	e064      	b.n	800ab78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68b9      	ldr	r1, [r7, #8]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 fbd1 	bl	800b25c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69da      	ldr	r2, [r3, #28]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	69da      	ldr	r2, [r3, #28]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69d9      	ldr	r1, [r3, #28]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	021a      	lsls	r2, r3, #8
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	61da      	str	r2, [r3, #28]
      break;
 800aaee:	e043      	b.n	800ab78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fc1a 	bl	800b330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0208 	orr.w	r2, r2, #8
 800ab0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0204 	bic.w	r2, r2, #4
 800ab1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	691a      	ldr	r2, [r3, #16]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	430a      	orrs	r2, r1
 800ab2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab2e:	e023      	b.n	800ab78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68b9      	ldr	r1, [r7, #8]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fc5e 	bl	800b3f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	021a      	lsls	r2, r3, #8
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	430a      	orrs	r2, r1
 800ab6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab70:	e002      	b.n	800ab78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	75fb      	strb	r3, [r7, #23]
      break;
 800ab76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop

0800ab8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d101      	bne.n	800aba8 <HAL_TIM_ConfigClockSource+0x1c>
 800aba4:	2302      	movs	r3, #2
 800aba6:	e0dc      	b.n	800ad62 <HAL_TIM_ConfigClockSource+0x1d6>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	4b6a      	ldr	r3, [pc, #424]	; (800ad6c <HAL_TIM_ConfigClockSource+0x1e0>)
 800abc4:	4013      	ands	r3, r2
 800abc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a64      	ldr	r2, [pc, #400]	; (800ad70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	f000 80a9 	beq.w	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800abe4:	4a62      	ldr	r2, [pc, #392]	; (800ad70 <HAL_TIM_ConfigClockSource+0x1e4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	f200 80ae 	bhi.w	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800abec:	4a61      	ldr	r2, [pc, #388]	; (800ad74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	f000 80a1 	beq.w	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800abf4:	4a5f      	ldr	r2, [pc, #380]	; (800ad74 <HAL_TIM_ConfigClockSource+0x1e8>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	f200 80a6 	bhi.w	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800abfc:	4a5e      	ldr	r2, [pc, #376]	; (800ad78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	f000 8099 	beq.w	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac04:	4a5c      	ldr	r2, [pc, #368]	; (800ad78 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	f200 809e 	bhi.w	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac10:	f000 8091 	beq.w	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac18:	f200 8096 	bhi.w	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac20:	f000 8089 	beq.w	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac28:	f200 808e 	bhi.w	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac30:	d03e      	beq.n	800acb0 <HAL_TIM_ConfigClockSource+0x124>
 800ac32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac36:	f200 8087 	bhi.w	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac3e:	f000 8086 	beq.w	800ad4e <HAL_TIM_ConfigClockSource+0x1c2>
 800ac42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac46:	d87f      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac48:	2b70      	cmp	r3, #112	; 0x70
 800ac4a:	d01a      	beq.n	800ac82 <HAL_TIM_ConfigClockSource+0xf6>
 800ac4c:	2b70      	cmp	r3, #112	; 0x70
 800ac4e:	d87b      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac50:	2b60      	cmp	r3, #96	; 0x60
 800ac52:	d050      	beq.n	800acf6 <HAL_TIM_ConfigClockSource+0x16a>
 800ac54:	2b60      	cmp	r3, #96	; 0x60
 800ac56:	d877      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac58:	2b50      	cmp	r3, #80	; 0x50
 800ac5a:	d03c      	beq.n	800acd6 <HAL_TIM_ConfigClockSource+0x14a>
 800ac5c:	2b50      	cmp	r3, #80	; 0x50
 800ac5e:	d873      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac60:	2b40      	cmp	r3, #64	; 0x40
 800ac62:	d058      	beq.n	800ad16 <HAL_TIM_ConfigClockSource+0x18a>
 800ac64:	2b40      	cmp	r3, #64	; 0x40
 800ac66:	d86f      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac68:	2b30      	cmp	r3, #48	; 0x30
 800ac6a:	d064      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac6c:	2b30      	cmp	r3, #48	; 0x30
 800ac6e:	d86b      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac70:	2b20      	cmp	r3, #32
 800ac72:	d060      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac74:	2b20      	cmp	r3, #32
 800ac76:	d867      	bhi.n	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d05c      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d05a      	beq.n	800ad36 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac80:	e062      	b.n	800ad48 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6818      	ldr	r0, [r3, #0]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	6899      	ldr	r1, [r3, #8]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	f000 fc95 	bl	800b5c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	609a      	str	r2, [r3, #8]
      break;
 800acae:	e04f      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6818      	ldr	r0, [r3, #0]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	6899      	ldr	r1, [r3, #8]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	f000 fc7e 	bl	800b5c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689a      	ldr	r2, [r3, #8]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acd2:	609a      	str	r2, [r3, #8]
      break;
 800acd4:	e03c      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	6859      	ldr	r1, [r3, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	461a      	mov	r2, r3
 800ace4:	f000 fbee 	bl	800b4c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2150      	movs	r1, #80	; 0x50
 800acee:	4618      	mov	r0, r3
 800acf0:	f000 fc48 	bl	800b584 <TIM_ITRx_SetConfig>
      break;
 800acf4:	e02c      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6859      	ldr	r1, [r3, #4]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	461a      	mov	r2, r3
 800ad04:	f000 fc0d 	bl	800b522 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2160      	movs	r1, #96	; 0x60
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fc38 	bl	800b584 <TIM_ITRx_SetConfig>
      break;
 800ad14:	e01c      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	6859      	ldr	r1, [r3, #4]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f000 fbce 	bl	800b4c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2140      	movs	r1, #64	; 0x40
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 fc28 	bl	800b584 <TIM_ITRx_SetConfig>
      break;
 800ad34:	e00c      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	4610      	mov	r0, r2
 800ad42:	f000 fc1f 	bl	800b584 <TIM_ITRx_SetConfig>
      break;
 800ad46:	e003      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad4c:	e000      	b.n	800ad50 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ad4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	ffceff88 	.word	0xffceff88
 800ad70:	00100040 	.word	0x00100040
 800ad74:	00100030 	.word	0x00100030
 800ad78:	00100020 	.word	0x00100020

0800ad7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad84:	bf00      	nop
 800ad86:	370c      	adds	r7, #12
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a44      	ldr	r2, [pc, #272]	; (800aef0 <TIM_Base_SetConfig+0x124>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d013      	beq.n	800ae0c <TIM_Base_SetConfig+0x40>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adea:	d00f      	beq.n	800ae0c <TIM_Base_SetConfig+0x40>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a41      	ldr	r2, [pc, #260]	; (800aef4 <TIM_Base_SetConfig+0x128>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00b      	beq.n	800ae0c <TIM_Base_SetConfig+0x40>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a40      	ldr	r2, [pc, #256]	; (800aef8 <TIM_Base_SetConfig+0x12c>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d007      	beq.n	800ae0c <TIM_Base_SetConfig+0x40>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a3f      	ldr	r2, [pc, #252]	; (800aefc <TIM_Base_SetConfig+0x130>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d003      	beq.n	800ae0c <TIM_Base_SetConfig+0x40>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a3e      	ldr	r2, [pc, #248]	; (800af00 <TIM_Base_SetConfig+0x134>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d108      	bne.n	800ae1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a33      	ldr	r2, [pc, #204]	; (800aef0 <TIM_Base_SetConfig+0x124>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d027      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae2c:	d023      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a30      	ldr	r2, [pc, #192]	; (800aef4 <TIM_Base_SetConfig+0x128>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d01f      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a2f      	ldr	r2, [pc, #188]	; (800aef8 <TIM_Base_SetConfig+0x12c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d01b      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a2e      	ldr	r2, [pc, #184]	; (800aefc <TIM_Base_SetConfig+0x130>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d017      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a2d      	ldr	r2, [pc, #180]	; (800af00 <TIM_Base_SetConfig+0x134>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d013      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a2c      	ldr	r2, [pc, #176]	; (800af04 <TIM_Base_SetConfig+0x138>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00f      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a2b      	ldr	r2, [pc, #172]	; (800af08 <TIM_Base_SetConfig+0x13c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d00b      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a2a      	ldr	r2, [pc, #168]	; (800af0c <TIM_Base_SetConfig+0x140>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d007      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4a29      	ldr	r2, [pc, #164]	; (800af10 <TIM_Base_SetConfig+0x144>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d003      	beq.n	800ae76 <TIM_Base_SetConfig+0xaa>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a28      	ldr	r2, [pc, #160]	; (800af14 <TIM_Base_SetConfig+0x148>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d108      	bne.n	800ae88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	689a      	ldr	r2, [r3, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a10      	ldr	r2, [pc, #64]	; (800aef0 <TIM_Base_SetConfig+0x124>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d00f      	beq.n	800aed4 <TIM_Base_SetConfig+0x108>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a12      	ldr	r2, [pc, #72]	; (800af00 <TIM_Base_SetConfig+0x134>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d00b      	beq.n	800aed4 <TIM_Base_SetConfig+0x108>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a11      	ldr	r2, [pc, #68]	; (800af04 <TIM_Base_SetConfig+0x138>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d007      	beq.n	800aed4 <TIM_Base_SetConfig+0x108>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a10      	ldr	r2, [pc, #64]	; (800af08 <TIM_Base_SetConfig+0x13c>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d003      	beq.n	800aed4 <TIM_Base_SetConfig+0x108>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a0f      	ldr	r2, [pc, #60]	; (800af0c <TIM_Base_SetConfig+0x140>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d103      	bne.n	800aedc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	691a      	ldr	r2, [r3, #16]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	615a      	str	r2, [r3, #20]
}
 800aee2:	bf00      	nop
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	40010000 	.word	0x40010000
 800aef4:	40000400 	.word	0x40000400
 800aef8:	40000800 	.word	0x40000800
 800aefc:	40000c00 	.word	0x40000c00
 800af00:	40010400 	.word	0x40010400
 800af04:	40014000 	.word	0x40014000
 800af08:	40014400 	.word	0x40014400
 800af0c:	40014800 	.word	0x40014800
 800af10:	4000e000 	.word	0x4000e000
 800af14:	4000e400 	.word	0x4000e400

0800af18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f023 0201 	bic.w	r2, r3, #1
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	4b37      	ldr	r3, [pc, #220]	; (800b020 <TIM_OC1_SetConfig+0x108>)
 800af44:	4013      	ands	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	f023 0302 	bic.w	r3, r3, #2
 800af60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	4313      	orrs	r3, r2
 800af6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a2d      	ldr	r2, [pc, #180]	; (800b024 <TIM_OC1_SetConfig+0x10c>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d00f      	beq.n	800af94 <TIM_OC1_SetConfig+0x7c>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a2c      	ldr	r2, [pc, #176]	; (800b028 <TIM_OC1_SetConfig+0x110>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d00b      	beq.n	800af94 <TIM_OC1_SetConfig+0x7c>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a2b      	ldr	r2, [pc, #172]	; (800b02c <TIM_OC1_SetConfig+0x114>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d007      	beq.n	800af94 <TIM_OC1_SetConfig+0x7c>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a2a      	ldr	r2, [pc, #168]	; (800b030 <TIM_OC1_SetConfig+0x118>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d003      	beq.n	800af94 <TIM_OC1_SetConfig+0x7c>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a29      	ldr	r2, [pc, #164]	; (800b034 <TIM_OC1_SetConfig+0x11c>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d10c      	bne.n	800afae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	f023 0308 	bic.w	r3, r3, #8
 800af9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	697a      	ldr	r2, [r7, #20]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	f023 0304 	bic.w	r3, r3, #4
 800afac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a1c      	ldr	r2, [pc, #112]	; (800b024 <TIM_OC1_SetConfig+0x10c>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d00f      	beq.n	800afd6 <TIM_OC1_SetConfig+0xbe>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a1b      	ldr	r2, [pc, #108]	; (800b028 <TIM_OC1_SetConfig+0x110>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d00b      	beq.n	800afd6 <TIM_OC1_SetConfig+0xbe>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a1a      	ldr	r2, [pc, #104]	; (800b02c <TIM_OC1_SetConfig+0x114>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d007      	beq.n	800afd6 <TIM_OC1_SetConfig+0xbe>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a19      	ldr	r2, [pc, #100]	; (800b030 <TIM_OC1_SetConfig+0x118>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d003      	beq.n	800afd6 <TIM_OC1_SetConfig+0xbe>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a18      	ldr	r2, [pc, #96]	; (800b034 <TIM_OC1_SetConfig+0x11c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d111      	bne.n	800affa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	4313      	orrs	r3, r2
 800afee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	621a      	str	r2, [r3, #32]
}
 800b014:	bf00      	nop
 800b016:	371c      	adds	r7, #28
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	fffeff8f 	.word	0xfffeff8f
 800b024:	40010000 	.word	0x40010000
 800b028:	40010400 	.word	0x40010400
 800b02c:	40014000 	.word	0x40014000
 800b030:	40014400 	.word	0x40014400
 800b034:	40014800 	.word	0x40014800

0800b038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	f023 0210 	bic.w	r2, r3, #16
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	4b34      	ldr	r3, [pc, #208]	; (800b134 <TIM_OC2_SetConfig+0xfc>)
 800b064:	4013      	ands	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f023 0320 	bic.w	r3, r3, #32
 800b082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a29      	ldr	r2, [pc, #164]	; (800b138 <TIM_OC2_SetConfig+0x100>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d003      	beq.n	800b0a0 <TIM_OC2_SetConfig+0x68>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a28      	ldr	r2, [pc, #160]	; (800b13c <TIM_OC2_SetConfig+0x104>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d10d      	bne.n	800b0bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a1e      	ldr	r2, [pc, #120]	; (800b138 <TIM_OC2_SetConfig+0x100>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d00f      	beq.n	800b0e4 <TIM_OC2_SetConfig+0xac>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a1d      	ldr	r2, [pc, #116]	; (800b13c <TIM_OC2_SetConfig+0x104>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d00b      	beq.n	800b0e4 <TIM_OC2_SetConfig+0xac>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a1c      	ldr	r2, [pc, #112]	; (800b140 <TIM_OC2_SetConfig+0x108>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d007      	beq.n	800b0e4 <TIM_OC2_SetConfig+0xac>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a1b      	ldr	r2, [pc, #108]	; (800b144 <TIM_OC2_SetConfig+0x10c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d003      	beq.n	800b0e4 <TIM_OC2_SetConfig+0xac>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a1a      	ldr	r2, [pc, #104]	; (800b148 <TIM_OC2_SetConfig+0x110>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d113      	bne.n	800b10c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	4313      	orrs	r3, r2
 800b10a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	697a      	ldr	r2, [r7, #20]
 800b124:	621a      	str	r2, [r3, #32]
}
 800b126:	bf00      	nop
 800b128:	371c      	adds	r7, #28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	feff8fff 	.word	0xfeff8fff
 800b138:	40010000 	.word	0x40010000
 800b13c:	40010400 	.word	0x40010400
 800b140:	40014000 	.word	0x40014000
 800b144:	40014400 	.word	0x40014400
 800b148:	40014800 	.word	0x40014800

0800b14c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b087      	sub	sp, #28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	4b33      	ldr	r3, [pc, #204]	; (800b244 <TIM_OC3_SetConfig+0xf8>)
 800b178:	4013      	ands	r3, r2
 800b17a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f023 0303 	bic.w	r3, r3, #3
 800b182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	021b      	lsls	r3, r3, #8
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a28      	ldr	r2, [pc, #160]	; (800b248 <TIM_OC3_SetConfig+0xfc>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d003      	beq.n	800b1b2 <TIM_OC3_SetConfig+0x66>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a27      	ldr	r2, [pc, #156]	; (800b24c <TIM_OC3_SetConfig+0x100>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d10d      	bne.n	800b1ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	697a      	ldr	r2, [r7, #20]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a1d      	ldr	r2, [pc, #116]	; (800b248 <TIM_OC3_SetConfig+0xfc>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d00f      	beq.n	800b1f6 <TIM_OC3_SetConfig+0xaa>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a1c      	ldr	r2, [pc, #112]	; (800b24c <TIM_OC3_SetConfig+0x100>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d00b      	beq.n	800b1f6 <TIM_OC3_SetConfig+0xaa>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a1b      	ldr	r2, [pc, #108]	; (800b250 <TIM_OC3_SetConfig+0x104>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d007      	beq.n	800b1f6 <TIM_OC3_SetConfig+0xaa>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a1a      	ldr	r2, [pc, #104]	; (800b254 <TIM_OC3_SetConfig+0x108>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d003      	beq.n	800b1f6 <TIM_OC3_SetConfig+0xaa>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a19      	ldr	r2, [pc, #100]	; (800b258 <TIM_OC3_SetConfig+0x10c>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d113      	bne.n	800b21e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	011b      	lsls	r3, r3, #4
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	4313      	orrs	r3, r2
 800b210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	011b      	lsls	r3, r3, #4
 800b218:	693a      	ldr	r2, [r7, #16]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	621a      	str	r2, [r3, #32]
}
 800b238:	bf00      	nop
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	fffeff8f 	.word	0xfffeff8f
 800b248:	40010000 	.word	0x40010000
 800b24c:	40010400 	.word	0x40010400
 800b250:	40014000 	.word	0x40014000
 800b254:	40014400 	.word	0x40014400
 800b258:	40014800 	.word	0x40014800

0800b25c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a1b      	ldr	r3, [r3, #32]
 800b26a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	69db      	ldr	r3, [r3, #28]
 800b282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4b24      	ldr	r3, [pc, #144]	; (800b318 <TIM_OC4_SetConfig+0xbc>)
 800b288:	4013      	ands	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	021b      	lsls	r3, r3, #8
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	031b      	lsls	r3, r3, #12
 800b2ae:	693a      	ldr	r2, [r7, #16]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a19      	ldr	r2, [pc, #100]	; (800b31c <TIM_OC4_SetConfig+0xc0>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d00f      	beq.n	800b2dc <TIM_OC4_SetConfig+0x80>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a18      	ldr	r2, [pc, #96]	; (800b320 <TIM_OC4_SetConfig+0xc4>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d00b      	beq.n	800b2dc <TIM_OC4_SetConfig+0x80>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a17      	ldr	r2, [pc, #92]	; (800b324 <TIM_OC4_SetConfig+0xc8>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d007      	beq.n	800b2dc <TIM_OC4_SetConfig+0x80>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a16      	ldr	r2, [pc, #88]	; (800b328 <TIM_OC4_SetConfig+0xcc>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d003      	beq.n	800b2dc <TIM_OC4_SetConfig+0x80>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a15      	ldr	r2, [pc, #84]	; (800b32c <TIM_OC4_SetConfig+0xd0>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d109      	bne.n	800b2f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	695b      	ldr	r3, [r3, #20]
 800b2e8:	019b      	lsls	r3, r3, #6
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	621a      	str	r2, [r3, #32]
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	feff8fff 	.word	0xfeff8fff
 800b31c:	40010000 	.word	0x40010000
 800b320:	40010400 	.word	0x40010400
 800b324:	40014000 	.word	0x40014000
 800b328:	40014400 	.word	0x40014400
 800b32c:	40014800 	.word	0x40014800

0800b330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b330:	b480      	push	{r7}
 800b332:	b087      	sub	sp, #28
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	4b21      	ldr	r3, [pc, #132]	; (800b3e0 <TIM_OC5_SetConfig+0xb0>)
 800b35c:	4013      	ands	r3, r2
 800b35e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	4313      	orrs	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b370:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	041b      	lsls	r3, r3, #16
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a18      	ldr	r2, [pc, #96]	; (800b3e4 <TIM_OC5_SetConfig+0xb4>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d00f      	beq.n	800b3a6 <TIM_OC5_SetConfig+0x76>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a17      	ldr	r2, [pc, #92]	; (800b3e8 <TIM_OC5_SetConfig+0xb8>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d00b      	beq.n	800b3a6 <TIM_OC5_SetConfig+0x76>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a16      	ldr	r2, [pc, #88]	; (800b3ec <TIM_OC5_SetConfig+0xbc>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d007      	beq.n	800b3a6 <TIM_OC5_SetConfig+0x76>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a15      	ldr	r2, [pc, #84]	; (800b3f0 <TIM_OC5_SetConfig+0xc0>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d003      	beq.n	800b3a6 <TIM_OC5_SetConfig+0x76>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a14      	ldr	r2, [pc, #80]	; (800b3f4 <TIM_OC5_SetConfig+0xc4>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d109      	bne.n	800b3ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	021b      	lsls	r3, r3, #8
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	685a      	ldr	r2, [r3, #4]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	621a      	str	r2, [r3, #32]
}
 800b3d4:	bf00      	nop
 800b3d6:	371c      	adds	r7, #28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	fffeff8f 	.word	0xfffeff8f
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40010400 	.word	0x40010400
 800b3ec:	40014000 	.word	0x40014000
 800b3f0:	40014400 	.word	0x40014400
 800b3f4:	40014800 	.word	0x40014800

0800b3f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	4b22      	ldr	r3, [pc, #136]	; (800b4ac <TIM_OC6_SetConfig+0xb4>)
 800b424:	4013      	ands	r3, r2
 800b426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	4313      	orrs	r3, r2
 800b432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b43a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	051b      	lsls	r3, r3, #20
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	4313      	orrs	r3, r2
 800b446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a19      	ldr	r2, [pc, #100]	; (800b4b0 <TIM_OC6_SetConfig+0xb8>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d00f      	beq.n	800b470 <TIM_OC6_SetConfig+0x78>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a18      	ldr	r2, [pc, #96]	; (800b4b4 <TIM_OC6_SetConfig+0xbc>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d00b      	beq.n	800b470 <TIM_OC6_SetConfig+0x78>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a17      	ldr	r2, [pc, #92]	; (800b4b8 <TIM_OC6_SetConfig+0xc0>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d007      	beq.n	800b470 <TIM_OC6_SetConfig+0x78>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a16      	ldr	r2, [pc, #88]	; (800b4bc <TIM_OC6_SetConfig+0xc4>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d003      	beq.n	800b470 <TIM_OC6_SetConfig+0x78>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a15      	ldr	r2, [pc, #84]	; (800b4c0 <TIM_OC6_SetConfig+0xc8>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d109      	bne.n	800b484 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b476:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	029b      	lsls	r3, r3, #10
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	4313      	orrs	r3, r2
 800b482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	621a      	str	r2, [r3, #32]
}
 800b49e:	bf00      	nop
 800b4a0:	371c      	adds	r7, #28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	feff8fff 	.word	0xfeff8fff
 800b4b0:	40010000 	.word	0x40010000
 800b4b4:	40010400 	.word	0x40010400
 800b4b8:	40014000 	.word	0x40014000
 800b4bc:	40014400 	.word	0x40014400
 800b4c0:	40014800 	.word	0x40014800

0800b4c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6a1b      	ldr	r3, [r3, #32]
 800b4da:	f023 0201 	bic.w	r2, r3, #1
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b4ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	011b      	lsls	r3, r3, #4
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f023 030a 	bic.w	r3, r3, #10
 800b500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4313      	orrs	r3, r2
 800b508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	621a      	str	r2, [r3, #32]
}
 800b516:	bf00      	nop
 800b518:	371c      	adds	r7, #28
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b522:	b480      	push	{r7}
 800b524:	b087      	sub	sp, #28
 800b526:	af00      	add	r7, sp, #0
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6a1b      	ldr	r3, [r3, #32]
 800b532:	f023 0210 	bic.w	r2, r3, #16
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a1b      	ldr	r3, [r3, #32]
 800b544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b54c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	031b      	lsls	r3, r3, #12
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	4313      	orrs	r3, r2
 800b556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b55e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	4313      	orrs	r3, r2
 800b568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	697a      	ldr	r2, [r7, #20]
 800b56e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	621a      	str	r2, [r3, #32]
}
 800b576:	bf00      	nop
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
	...

0800b584 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4b09      	ldr	r3, [pc, #36]	; (800b5bc <TIM_ITRx_SetConfig+0x38>)
 800b598:	4013      	ands	r3, r2
 800b59a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	f043 0307 	orr.w	r3, r3, #7
 800b5a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	609a      	str	r2, [r3, #8]
}
 800b5ae:	bf00      	nop
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	ffcfff8f 	.word	0xffcfff8f

0800b5c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	021a      	lsls	r2, r3, #8
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	609a      	str	r2, [r3, #8]
}
 800b5f4:	bf00      	nop
 800b5f6:	371c      	adds	r7, #28
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	f003 031f 	and.w	r3, r3, #31
 800b612:	2201      	movs	r2, #1
 800b614:	fa02 f303 	lsl.w	r3, r2, r3
 800b618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6a1a      	ldr	r2, [r3, #32]
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	43db      	mvns	r3, r3
 800b622:	401a      	ands	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6a1a      	ldr	r2, [r3, #32]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	f003 031f 	and.w	r3, r3, #31
 800b632:	6879      	ldr	r1, [r7, #4]
 800b634:	fa01 f303 	lsl.w	r3, r1, r3
 800b638:	431a      	orrs	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	621a      	str	r2, [r3, #32]
}
 800b63e:	bf00      	nop
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
	...

0800b64c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d101      	bne.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b660:	2302      	movs	r3, #2
 800b662:	e077      	b.n	800b754 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2202      	movs	r2, #2
 800b670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a35      	ldr	r2, [pc, #212]	; (800b760 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d004      	beq.n	800b698 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a34      	ldr	r2, [pc, #208]	; (800b764 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d108      	bne.n	800b6aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b69e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a25      	ldr	r2, [pc, #148]	; (800b760 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d02c      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d6:	d027      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a22      	ldr	r2, [pc, #136]	; (800b768 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d022      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a21      	ldr	r2, [pc, #132]	; (800b76c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d01d      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a1f      	ldr	r2, [pc, #124]	; (800b770 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d018      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a1a      	ldr	r2, [pc, #104]	; (800b764 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d013      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a1b      	ldr	r2, [pc, #108]	; (800b774 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d00e      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a1a      	ldr	r2, [pc, #104]	; (800b778 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d009      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a18      	ldr	r2, [pc, #96]	; (800b77c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d004      	beq.n	800b728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a17      	ldr	r2, [pc, #92]	; (800b780 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d10c      	bne.n	800b742 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b72e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	4313      	orrs	r3, r2
 800b738:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	40010000 	.word	0x40010000
 800b764:	40010400 	.word	0x40010400
 800b768:	40000400 	.word	0x40000400
 800b76c:	40000800 	.word	0x40000800
 800b770:	40000c00 	.word	0x40000c00
 800b774:	40001800 	.word	0x40001800
 800b778:	40014000 	.word	0x40014000
 800b77c:	4000e000 	.word	0x4000e000
 800b780:	4000e400 	.word	0x4000e400

0800b784 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d101      	bne.n	800b7a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b79c:	2302      	movs	r3, #2
 800b79e:	e087      	b.n	800b8b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b806:	4313      	orrs	r3, r2
 800b808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	041b      	lsls	r3, r3, #16
 800b816:	4313      	orrs	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a27      	ldr	r2, [pc, #156]	; (800b8bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d004      	beq.n	800b82e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a25      	ldr	r2, [pc, #148]	; (800b8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d106      	bne.n	800b83c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	69db      	ldr	r3, [r3, #28]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a1e      	ldr	r2, [pc, #120]	; (800b8bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d004      	beq.n	800b850 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a1d      	ldr	r2, [pc, #116]	; (800b8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d126      	bne.n	800b89e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85a:	051b      	lsls	r3, r3, #20
 800b85c:	4313      	orrs	r3, r2
 800b85e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	4313      	orrs	r3, r2
 800b87a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a0e      	ldr	r2, [pc, #56]	; (800b8bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d004      	beq.n	800b890 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a0d      	ldr	r2, [pc, #52]	; (800b8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d106      	bne.n	800b89e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89a:	4313      	orrs	r3, r2
 800b89c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3714      	adds	r7, #20
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	40010000 	.word	0x40010000
 800b8c0:	40010400 	.word	0x40010400

0800b8c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8e0:	bf00      	nop
 800b8e2:	370c      	adds	r7, #12
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8f4:	bf00      	nop
 800b8f6:	370c      	adds	r7, #12
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e042      	b.n	800b998 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d106      	bne.n	800b92a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7f8 ff41 	bl	80047ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2224      	movs	r2, #36	; 0x24
 800b92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f022 0201 	bic.w	r2, r2, #1
 800b940:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 f97a 	bl	800bc3c <UART_SetConfig>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d101      	bne.n	800b952 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e022      	b.n	800b998 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b956:	2b00      	cmp	r3, #0
 800b958:	d002      	beq.n	800b960 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 ffda 	bl	800c914 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	685a      	ldr	r2, [r3, #4]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b96e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b97e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f042 0201 	orr.w	r2, r2, #1
 800b98e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f001 f861 	bl	800ca58 <UART_CheckIdleState>
 800b996:	4603      	mov	r3, r0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e02e      	b.n	800ba10 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2224      	movs	r2, #36	; 0x24
 800b9b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f022 0201 	bic.w	r2, r2, #1
 800b9c8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7f8 ffae 	bl	8004944 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08a      	sub	sp, #40	; 0x28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	4613      	mov	r3, r2
 800ba24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba2c:	2b20      	cmp	r3, #32
 800ba2e:	d17a      	bne.n	800bb26 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <HAL_UART_Transmit_DMA+0x24>
 800ba36:	88fb      	ldrh	r3, [r7, #6]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d101      	bne.n	800ba40 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e073      	b.n	800bb28 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d101      	bne.n	800ba4e <HAL_UART_Transmit_DMA+0x36>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e06c      	b.n	800bb28 <HAL_UART_Transmit_DMA+0x110>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	88fa      	ldrh	r2, [r7, #6]
 800ba60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	88fa      	ldrh	r2, [r7, #6]
 800ba68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2221      	movs	r2, #33	; 0x21
 800ba78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02c      	beq.n	800bade <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba88:	4a29      	ldr	r2, [pc, #164]	; (800bb30 <HAL_UART_Transmit_DMA+0x118>)
 800ba8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba90:	4a28      	ldr	r2, [pc, #160]	; (800bb34 <HAL_UART_Transmit_DMA+0x11c>)
 800ba92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba98:	4a27      	ldr	r2, [pc, #156]	; (800bb38 <HAL_UART_Transmit_DMA+0x120>)
 800ba9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baa0:	2200      	movs	r2, #0
 800baa2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baac:	4619      	mov	r1, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3328      	adds	r3, #40	; 0x28
 800bab4:	461a      	mov	r2, r3
 800bab6:	88fb      	ldrh	r3, [r7, #6]
 800bab8:	f7f9 ffbe 	bl	8005a38 <HAL_DMA_Start_IT>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00d      	beq.n	800bade <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2210      	movs	r2, #16
 800bac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2220      	movs	r2, #32
 800bad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e024      	b.n	800bb28 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2240      	movs	r2, #64	; 0x40
 800bae4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3308      	adds	r3, #8
 800baf4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	613b      	str	r3, [r7, #16]
   return(result);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0e:	623a      	str	r2, [r7, #32]
 800bb10:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	69f9      	ldr	r1, [r7, #28]
 800bb14:	6a3a      	ldr	r2, [r7, #32]
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e5      	bne.n	800baee <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	e000      	b.n	800bb28 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bb26:	2302      	movs	r3, #2
  }
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3728      	adds	r7, #40	; 0x28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	0800cf21 	.word	0x0800cf21
 800bb34:	0800cfb7 	.word	0x0800cfb7
 800bb38:	0800d12d 	.word	0x0800d12d

0800bb3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08a      	sub	sp, #40	; 0x28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	4613      	mov	r3, r2
 800bb48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb50:	2b20      	cmp	r3, #32
 800bb52:	d142      	bne.n	800bbda <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <HAL_UART_Receive_DMA+0x24>
 800bb5a:	88fb      	ldrh	r3, [r7, #6]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e03b      	b.n	800bbdc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d101      	bne.n	800bb72 <HAL_UART_Receive_DMA+0x36>
 800bb6e:	2302      	movs	r3, #2
 800bb70:	e034      	b.n	800bbdc <HAL_UART_Receive_DMA+0xa0>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a17      	ldr	r2, [pc, #92]	; (800bbe4 <HAL_UART_Receive_DMA+0xa8>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d01f      	beq.n	800bbca <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d018      	beq.n	800bbca <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	e853 3f00 	ldrex	r3, [r3]
 800bba4:	613b      	str	r3, [r7, #16]
   return(result);
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bbac:	627b      	str	r3, [r7, #36]	; 0x24
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	623b      	str	r3, [r7, #32]
 800bbb8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbba:	69f9      	ldr	r1, [r7, #28]
 800bbbc:	6a3a      	ldr	r2, [r7, #32]
 800bbbe:	e841 2300 	strex	r3, r2, [r1]
 800bbc2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1e6      	bne.n	800bb98 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bbca:	88fb      	ldrh	r3, [r7, #6]
 800bbcc:	461a      	mov	r2, r3
 800bbce:	68b9      	ldr	r1, [r7, #8]
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f001 f855 	bl	800cc80 <UART_Start_Receive_DMA>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	e000      	b.n	800bbdc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bbda:	2302      	movs	r3, #2
  }
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3728      	adds	r7, #40	; 0x28
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	58000c00 	.word	0x58000c00

0800bbe8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b083      	sub	sp, #12
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc40:	b092      	sub	sp, #72	; 0x48
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	689a      	ldr	r2, [r3, #8]
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	431a      	orrs	r2, r3
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	431a      	orrs	r2, r3
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	69db      	ldr	r3, [r3, #28]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	4bbe      	ldr	r3, [pc, #760]	; (800bf64 <UART_SetConfig+0x328>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	6812      	ldr	r2, [r2, #0]
 800bc72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc74:	430b      	orrs	r3, r1
 800bc76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	68da      	ldr	r2, [r3, #12]
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	430a      	orrs	r2, r1
 800bc8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	699b      	ldr	r3, [r3, #24]
 800bc92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4ab3      	ldr	r2, [pc, #716]	; (800bf68 <UART_SetConfig+0x32c>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d004      	beq.n	800bca8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bca4:	4313      	orrs	r3, r2
 800bca6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	689a      	ldr	r2, [r3, #8]
 800bcae:	4baf      	ldr	r3, [pc, #700]	; (800bf6c <UART_SetConfig+0x330>)
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	6812      	ldr	r2, [r2, #0]
 800bcb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcb8:	430b      	orrs	r3, r1
 800bcba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc2:	f023 010f 	bic.w	r1, r3, #15
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	430a      	orrs	r2, r1
 800bcd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4aa6      	ldr	r2, [pc, #664]	; (800bf70 <UART_SetConfig+0x334>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d177      	bne.n	800bdcc <UART_SetConfig+0x190>
 800bcdc:	4ba5      	ldr	r3, [pc, #660]	; (800bf74 <UART_SetConfig+0x338>)
 800bcde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bce4:	2b28      	cmp	r3, #40	; 0x28
 800bce6:	d86d      	bhi.n	800bdc4 <UART_SetConfig+0x188>
 800bce8:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <UART_SetConfig+0xb4>)
 800bcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcee:	bf00      	nop
 800bcf0:	0800bd95 	.word	0x0800bd95
 800bcf4:	0800bdc5 	.word	0x0800bdc5
 800bcf8:	0800bdc5 	.word	0x0800bdc5
 800bcfc:	0800bdc5 	.word	0x0800bdc5
 800bd00:	0800bdc5 	.word	0x0800bdc5
 800bd04:	0800bdc5 	.word	0x0800bdc5
 800bd08:	0800bdc5 	.word	0x0800bdc5
 800bd0c:	0800bdc5 	.word	0x0800bdc5
 800bd10:	0800bd9d 	.word	0x0800bd9d
 800bd14:	0800bdc5 	.word	0x0800bdc5
 800bd18:	0800bdc5 	.word	0x0800bdc5
 800bd1c:	0800bdc5 	.word	0x0800bdc5
 800bd20:	0800bdc5 	.word	0x0800bdc5
 800bd24:	0800bdc5 	.word	0x0800bdc5
 800bd28:	0800bdc5 	.word	0x0800bdc5
 800bd2c:	0800bdc5 	.word	0x0800bdc5
 800bd30:	0800bda5 	.word	0x0800bda5
 800bd34:	0800bdc5 	.word	0x0800bdc5
 800bd38:	0800bdc5 	.word	0x0800bdc5
 800bd3c:	0800bdc5 	.word	0x0800bdc5
 800bd40:	0800bdc5 	.word	0x0800bdc5
 800bd44:	0800bdc5 	.word	0x0800bdc5
 800bd48:	0800bdc5 	.word	0x0800bdc5
 800bd4c:	0800bdc5 	.word	0x0800bdc5
 800bd50:	0800bdad 	.word	0x0800bdad
 800bd54:	0800bdc5 	.word	0x0800bdc5
 800bd58:	0800bdc5 	.word	0x0800bdc5
 800bd5c:	0800bdc5 	.word	0x0800bdc5
 800bd60:	0800bdc5 	.word	0x0800bdc5
 800bd64:	0800bdc5 	.word	0x0800bdc5
 800bd68:	0800bdc5 	.word	0x0800bdc5
 800bd6c:	0800bdc5 	.word	0x0800bdc5
 800bd70:	0800bdb5 	.word	0x0800bdb5
 800bd74:	0800bdc5 	.word	0x0800bdc5
 800bd78:	0800bdc5 	.word	0x0800bdc5
 800bd7c:	0800bdc5 	.word	0x0800bdc5
 800bd80:	0800bdc5 	.word	0x0800bdc5
 800bd84:	0800bdc5 	.word	0x0800bdc5
 800bd88:	0800bdc5 	.word	0x0800bdc5
 800bd8c:	0800bdc5 	.word	0x0800bdc5
 800bd90:	0800bdbd 	.word	0x0800bdbd
 800bd94:	2301      	movs	r3, #1
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd9a:	e326      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bd9c:	2304      	movs	r3, #4
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bda2:	e322      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bda4:	2308      	movs	r3, #8
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdaa:	e31e      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bdac:	2310      	movs	r3, #16
 800bdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdb2:	e31a      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bdb4:	2320      	movs	r3, #32
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdba:	e316      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bdbc:	2340      	movs	r3, #64	; 0x40
 800bdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdc2:	e312      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bdc4:	2380      	movs	r3, #128	; 0x80
 800bdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdca:	e30e      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a69      	ldr	r2, [pc, #420]	; (800bf78 <UART_SetConfig+0x33c>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d130      	bne.n	800be38 <UART_SetConfig+0x1fc>
 800bdd6:	4b67      	ldr	r3, [pc, #412]	; (800bf74 <UART_SetConfig+0x338>)
 800bdd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdda:	f003 0307 	and.w	r3, r3, #7
 800bdde:	2b05      	cmp	r3, #5
 800bde0:	d826      	bhi.n	800be30 <UART_SetConfig+0x1f4>
 800bde2:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <UART_SetConfig+0x1ac>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800be01 	.word	0x0800be01
 800bdec:	0800be09 	.word	0x0800be09
 800bdf0:	0800be11 	.word	0x0800be11
 800bdf4:	0800be19 	.word	0x0800be19
 800bdf8:	0800be21 	.word	0x0800be21
 800bdfc:	0800be29 	.word	0x0800be29
 800be00:	2300      	movs	r3, #0
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be06:	e2f0      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be08:	2304      	movs	r3, #4
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0e:	e2ec      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be10:	2308      	movs	r3, #8
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be16:	e2e8      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be18:	2310      	movs	r3, #16
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1e:	e2e4      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be20:	2320      	movs	r3, #32
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be26:	e2e0      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be28:	2340      	movs	r3, #64	; 0x40
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be2e:	e2dc      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be30:	2380      	movs	r3, #128	; 0x80
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be36:	e2d8      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a4f      	ldr	r2, [pc, #316]	; (800bf7c <UART_SetConfig+0x340>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d130      	bne.n	800bea4 <UART_SetConfig+0x268>
 800be42:	4b4c      	ldr	r3, [pc, #304]	; (800bf74 <UART_SetConfig+0x338>)
 800be44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be46:	f003 0307 	and.w	r3, r3, #7
 800be4a:	2b05      	cmp	r3, #5
 800be4c:	d826      	bhi.n	800be9c <UART_SetConfig+0x260>
 800be4e:	a201      	add	r2, pc, #4	; (adr r2, 800be54 <UART_SetConfig+0x218>)
 800be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be54:	0800be6d 	.word	0x0800be6d
 800be58:	0800be75 	.word	0x0800be75
 800be5c:	0800be7d 	.word	0x0800be7d
 800be60:	0800be85 	.word	0x0800be85
 800be64:	0800be8d 	.word	0x0800be8d
 800be68:	0800be95 	.word	0x0800be95
 800be6c:	2300      	movs	r3, #0
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be72:	e2ba      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be74:	2304      	movs	r3, #4
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7a:	e2b6      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be7c:	2308      	movs	r3, #8
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be82:	e2b2      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be84:	2310      	movs	r3, #16
 800be86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8a:	e2ae      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be8c:	2320      	movs	r3, #32
 800be8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be92:	e2aa      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be94:	2340      	movs	r3, #64	; 0x40
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9a:	e2a6      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800be9c:	2380      	movs	r3, #128	; 0x80
 800be9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bea2:	e2a2      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a35      	ldr	r2, [pc, #212]	; (800bf80 <UART_SetConfig+0x344>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d130      	bne.n	800bf10 <UART_SetConfig+0x2d4>
 800beae:	4b31      	ldr	r3, [pc, #196]	; (800bf74 <UART_SetConfig+0x338>)
 800beb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb2:	f003 0307 	and.w	r3, r3, #7
 800beb6:	2b05      	cmp	r3, #5
 800beb8:	d826      	bhi.n	800bf08 <UART_SetConfig+0x2cc>
 800beba:	a201      	add	r2, pc, #4	; (adr r2, 800bec0 <UART_SetConfig+0x284>)
 800bebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec0:	0800bed9 	.word	0x0800bed9
 800bec4:	0800bee1 	.word	0x0800bee1
 800bec8:	0800bee9 	.word	0x0800bee9
 800becc:	0800bef1 	.word	0x0800bef1
 800bed0:	0800bef9 	.word	0x0800bef9
 800bed4:	0800bf01 	.word	0x0800bf01
 800bed8:	2300      	movs	r3, #0
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bede:	e284      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bee0:	2304      	movs	r3, #4
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee6:	e280      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bee8:	2308      	movs	r3, #8
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beee:	e27c      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bef0:	2310      	movs	r3, #16
 800bef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef6:	e278      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bef8:	2320      	movs	r3, #32
 800befa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befe:	e274      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf00:	2340      	movs	r3, #64	; 0x40
 800bf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf06:	e270      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf08:	2380      	movs	r3, #128	; 0x80
 800bf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf0e:	e26c      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a1b      	ldr	r2, [pc, #108]	; (800bf84 <UART_SetConfig+0x348>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d142      	bne.n	800bfa0 <UART_SetConfig+0x364>
 800bf1a:	4b16      	ldr	r3, [pc, #88]	; (800bf74 <UART_SetConfig+0x338>)
 800bf1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf1e:	f003 0307 	and.w	r3, r3, #7
 800bf22:	2b05      	cmp	r3, #5
 800bf24:	d838      	bhi.n	800bf98 <UART_SetConfig+0x35c>
 800bf26:	a201      	add	r2, pc, #4	; (adr r2, 800bf2c <UART_SetConfig+0x2f0>)
 800bf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf2c:	0800bf45 	.word	0x0800bf45
 800bf30:	0800bf4d 	.word	0x0800bf4d
 800bf34:	0800bf55 	.word	0x0800bf55
 800bf38:	0800bf5d 	.word	0x0800bf5d
 800bf3c:	0800bf89 	.word	0x0800bf89
 800bf40:	0800bf91 	.word	0x0800bf91
 800bf44:	2300      	movs	r3, #0
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4a:	e24e      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf4c:	2304      	movs	r3, #4
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf52:	e24a      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf54:	2308      	movs	r3, #8
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5a:	e246      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf5c:	2310      	movs	r3, #16
 800bf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf62:	e242      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf64:	cfff69f3 	.word	0xcfff69f3
 800bf68:	58000c00 	.word	0x58000c00
 800bf6c:	11fff4ff 	.word	0x11fff4ff
 800bf70:	40011000 	.word	0x40011000
 800bf74:	58024400 	.word	0x58024400
 800bf78:	40004400 	.word	0x40004400
 800bf7c:	40004800 	.word	0x40004800
 800bf80:	40004c00 	.word	0x40004c00
 800bf84:	40005000 	.word	0x40005000
 800bf88:	2320      	movs	r3, #32
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e22c      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf90:	2340      	movs	r3, #64	; 0x40
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e228      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bf98:	2380      	movs	r3, #128	; 0x80
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e224      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4ab1      	ldr	r2, [pc, #708]	; (800c26c <UART_SetConfig+0x630>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d176      	bne.n	800c098 <UART_SetConfig+0x45c>
 800bfaa:	4bb1      	ldr	r3, [pc, #708]	; (800c270 <UART_SetConfig+0x634>)
 800bfac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bfb2:	2b28      	cmp	r3, #40	; 0x28
 800bfb4:	d86c      	bhi.n	800c090 <UART_SetConfig+0x454>
 800bfb6:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <UART_SetConfig+0x380>)
 800bfb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfbc:	0800c061 	.word	0x0800c061
 800bfc0:	0800c091 	.word	0x0800c091
 800bfc4:	0800c091 	.word	0x0800c091
 800bfc8:	0800c091 	.word	0x0800c091
 800bfcc:	0800c091 	.word	0x0800c091
 800bfd0:	0800c091 	.word	0x0800c091
 800bfd4:	0800c091 	.word	0x0800c091
 800bfd8:	0800c091 	.word	0x0800c091
 800bfdc:	0800c069 	.word	0x0800c069
 800bfe0:	0800c091 	.word	0x0800c091
 800bfe4:	0800c091 	.word	0x0800c091
 800bfe8:	0800c091 	.word	0x0800c091
 800bfec:	0800c091 	.word	0x0800c091
 800bff0:	0800c091 	.word	0x0800c091
 800bff4:	0800c091 	.word	0x0800c091
 800bff8:	0800c091 	.word	0x0800c091
 800bffc:	0800c071 	.word	0x0800c071
 800c000:	0800c091 	.word	0x0800c091
 800c004:	0800c091 	.word	0x0800c091
 800c008:	0800c091 	.word	0x0800c091
 800c00c:	0800c091 	.word	0x0800c091
 800c010:	0800c091 	.word	0x0800c091
 800c014:	0800c091 	.word	0x0800c091
 800c018:	0800c091 	.word	0x0800c091
 800c01c:	0800c079 	.word	0x0800c079
 800c020:	0800c091 	.word	0x0800c091
 800c024:	0800c091 	.word	0x0800c091
 800c028:	0800c091 	.word	0x0800c091
 800c02c:	0800c091 	.word	0x0800c091
 800c030:	0800c091 	.word	0x0800c091
 800c034:	0800c091 	.word	0x0800c091
 800c038:	0800c091 	.word	0x0800c091
 800c03c:	0800c081 	.word	0x0800c081
 800c040:	0800c091 	.word	0x0800c091
 800c044:	0800c091 	.word	0x0800c091
 800c048:	0800c091 	.word	0x0800c091
 800c04c:	0800c091 	.word	0x0800c091
 800c050:	0800c091 	.word	0x0800c091
 800c054:	0800c091 	.word	0x0800c091
 800c058:	0800c091 	.word	0x0800c091
 800c05c:	0800c089 	.word	0x0800c089
 800c060:	2301      	movs	r3, #1
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c066:	e1c0      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c068:	2304      	movs	r3, #4
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e1bc      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c070:	2308      	movs	r3, #8
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c076:	e1b8      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c078:	2310      	movs	r3, #16
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07e:	e1b4      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c080:	2320      	movs	r3, #32
 800c082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c086:	e1b0      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c088:	2340      	movs	r3, #64	; 0x40
 800c08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c08e:	e1ac      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c090:	2380      	movs	r3, #128	; 0x80
 800c092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c096:	e1a8      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a75      	ldr	r2, [pc, #468]	; (800c274 <UART_SetConfig+0x638>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d130      	bne.n	800c104 <UART_SetConfig+0x4c8>
 800c0a2:	4b73      	ldr	r3, [pc, #460]	; (800c270 <UART_SetConfig+0x634>)
 800c0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b05      	cmp	r3, #5
 800c0ac:	d826      	bhi.n	800c0fc <UART_SetConfig+0x4c0>
 800c0ae:	a201      	add	r2, pc, #4	; (adr r2, 800c0b4 <UART_SetConfig+0x478>)
 800c0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b4:	0800c0cd 	.word	0x0800c0cd
 800c0b8:	0800c0d5 	.word	0x0800c0d5
 800c0bc:	0800c0dd 	.word	0x0800c0dd
 800c0c0:	0800c0e5 	.word	0x0800c0e5
 800c0c4:	0800c0ed 	.word	0x0800c0ed
 800c0c8:	0800c0f5 	.word	0x0800c0f5
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d2:	e18a      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c0d4:	2304      	movs	r3, #4
 800c0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0da:	e186      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c0dc:	2308      	movs	r3, #8
 800c0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e2:	e182      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c0e4:	2310      	movs	r3, #16
 800c0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ea:	e17e      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c0ec:	2320      	movs	r3, #32
 800c0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f2:	e17a      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c0f4:	2340      	movs	r3, #64	; 0x40
 800c0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fa:	e176      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c0fc:	2380      	movs	r3, #128	; 0x80
 800c0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c102:	e172      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a5b      	ldr	r2, [pc, #364]	; (800c278 <UART_SetConfig+0x63c>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d130      	bne.n	800c170 <UART_SetConfig+0x534>
 800c10e:	4b58      	ldr	r3, [pc, #352]	; (800c270 <UART_SetConfig+0x634>)
 800c110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c112:	f003 0307 	and.w	r3, r3, #7
 800c116:	2b05      	cmp	r3, #5
 800c118:	d826      	bhi.n	800c168 <UART_SetConfig+0x52c>
 800c11a:	a201      	add	r2, pc, #4	; (adr r2, 800c120 <UART_SetConfig+0x4e4>)
 800c11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c120:	0800c139 	.word	0x0800c139
 800c124:	0800c141 	.word	0x0800c141
 800c128:	0800c149 	.word	0x0800c149
 800c12c:	0800c151 	.word	0x0800c151
 800c130:	0800c159 	.word	0x0800c159
 800c134:	0800c161 	.word	0x0800c161
 800c138:	2300      	movs	r3, #0
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13e:	e154      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c140:	2304      	movs	r3, #4
 800c142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c146:	e150      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c148:	2308      	movs	r3, #8
 800c14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14e:	e14c      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c150:	2310      	movs	r3, #16
 800c152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c156:	e148      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c158:	2320      	movs	r3, #32
 800c15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15e:	e144      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c160:	2340      	movs	r3, #64	; 0x40
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c166:	e140      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c168:	2380      	movs	r3, #128	; 0x80
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16e:	e13c      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a41      	ldr	r2, [pc, #260]	; (800c27c <UART_SetConfig+0x640>)
 800c176:	4293      	cmp	r3, r2
 800c178:	f040 8082 	bne.w	800c280 <UART_SetConfig+0x644>
 800c17c:	4b3c      	ldr	r3, [pc, #240]	; (800c270 <UART_SetConfig+0x634>)
 800c17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c180:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c184:	2b28      	cmp	r3, #40	; 0x28
 800c186:	d86d      	bhi.n	800c264 <UART_SetConfig+0x628>
 800c188:	a201      	add	r2, pc, #4	; (adr r2, 800c190 <UART_SetConfig+0x554>)
 800c18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18e:	bf00      	nop
 800c190:	0800c235 	.word	0x0800c235
 800c194:	0800c265 	.word	0x0800c265
 800c198:	0800c265 	.word	0x0800c265
 800c19c:	0800c265 	.word	0x0800c265
 800c1a0:	0800c265 	.word	0x0800c265
 800c1a4:	0800c265 	.word	0x0800c265
 800c1a8:	0800c265 	.word	0x0800c265
 800c1ac:	0800c265 	.word	0x0800c265
 800c1b0:	0800c23d 	.word	0x0800c23d
 800c1b4:	0800c265 	.word	0x0800c265
 800c1b8:	0800c265 	.word	0x0800c265
 800c1bc:	0800c265 	.word	0x0800c265
 800c1c0:	0800c265 	.word	0x0800c265
 800c1c4:	0800c265 	.word	0x0800c265
 800c1c8:	0800c265 	.word	0x0800c265
 800c1cc:	0800c265 	.word	0x0800c265
 800c1d0:	0800c245 	.word	0x0800c245
 800c1d4:	0800c265 	.word	0x0800c265
 800c1d8:	0800c265 	.word	0x0800c265
 800c1dc:	0800c265 	.word	0x0800c265
 800c1e0:	0800c265 	.word	0x0800c265
 800c1e4:	0800c265 	.word	0x0800c265
 800c1e8:	0800c265 	.word	0x0800c265
 800c1ec:	0800c265 	.word	0x0800c265
 800c1f0:	0800c24d 	.word	0x0800c24d
 800c1f4:	0800c265 	.word	0x0800c265
 800c1f8:	0800c265 	.word	0x0800c265
 800c1fc:	0800c265 	.word	0x0800c265
 800c200:	0800c265 	.word	0x0800c265
 800c204:	0800c265 	.word	0x0800c265
 800c208:	0800c265 	.word	0x0800c265
 800c20c:	0800c265 	.word	0x0800c265
 800c210:	0800c255 	.word	0x0800c255
 800c214:	0800c265 	.word	0x0800c265
 800c218:	0800c265 	.word	0x0800c265
 800c21c:	0800c265 	.word	0x0800c265
 800c220:	0800c265 	.word	0x0800c265
 800c224:	0800c265 	.word	0x0800c265
 800c228:	0800c265 	.word	0x0800c265
 800c22c:	0800c265 	.word	0x0800c265
 800c230:	0800c25d 	.word	0x0800c25d
 800c234:	2301      	movs	r3, #1
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23a:	e0d6      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c23c:	2304      	movs	r3, #4
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c242:	e0d2      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c244:	2308      	movs	r3, #8
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24a:	e0ce      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c24c:	2310      	movs	r3, #16
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e0ca      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c254:	2320      	movs	r3, #32
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e0c6      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c25c:	2340      	movs	r3, #64	; 0x40
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e0c2      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c264:	2380      	movs	r3, #128	; 0x80
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26a:	e0be      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c26c:	40011400 	.word	0x40011400
 800c270:	58024400 	.word	0x58024400
 800c274:	40007800 	.word	0x40007800
 800c278:	40007c00 	.word	0x40007c00
 800c27c:	40011800 	.word	0x40011800
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4aad      	ldr	r2, [pc, #692]	; (800c53c <UART_SetConfig+0x900>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d176      	bne.n	800c378 <UART_SetConfig+0x73c>
 800c28a:	4bad      	ldr	r3, [pc, #692]	; (800c540 <UART_SetConfig+0x904>)
 800c28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c28e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c292:	2b28      	cmp	r3, #40	; 0x28
 800c294:	d86c      	bhi.n	800c370 <UART_SetConfig+0x734>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <UART_SetConfig+0x660>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c341 	.word	0x0800c341
 800c2a0:	0800c371 	.word	0x0800c371
 800c2a4:	0800c371 	.word	0x0800c371
 800c2a8:	0800c371 	.word	0x0800c371
 800c2ac:	0800c371 	.word	0x0800c371
 800c2b0:	0800c371 	.word	0x0800c371
 800c2b4:	0800c371 	.word	0x0800c371
 800c2b8:	0800c371 	.word	0x0800c371
 800c2bc:	0800c349 	.word	0x0800c349
 800c2c0:	0800c371 	.word	0x0800c371
 800c2c4:	0800c371 	.word	0x0800c371
 800c2c8:	0800c371 	.word	0x0800c371
 800c2cc:	0800c371 	.word	0x0800c371
 800c2d0:	0800c371 	.word	0x0800c371
 800c2d4:	0800c371 	.word	0x0800c371
 800c2d8:	0800c371 	.word	0x0800c371
 800c2dc:	0800c351 	.word	0x0800c351
 800c2e0:	0800c371 	.word	0x0800c371
 800c2e4:	0800c371 	.word	0x0800c371
 800c2e8:	0800c371 	.word	0x0800c371
 800c2ec:	0800c371 	.word	0x0800c371
 800c2f0:	0800c371 	.word	0x0800c371
 800c2f4:	0800c371 	.word	0x0800c371
 800c2f8:	0800c371 	.word	0x0800c371
 800c2fc:	0800c359 	.word	0x0800c359
 800c300:	0800c371 	.word	0x0800c371
 800c304:	0800c371 	.word	0x0800c371
 800c308:	0800c371 	.word	0x0800c371
 800c30c:	0800c371 	.word	0x0800c371
 800c310:	0800c371 	.word	0x0800c371
 800c314:	0800c371 	.word	0x0800c371
 800c318:	0800c371 	.word	0x0800c371
 800c31c:	0800c361 	.word	0x0800c361
 800c320:	0800c371 	.word	0x0800c371
 800c324:	0800c371 	.word	0x0800c371
 800c328:	0800c371 	.word	0x0800c371
 800c32c:	0800c371 	.word	0x0800c371
 800c330:	0800c371 	.word	0x0800c371
 800c334:	0800c371 	.word	0x0800c371
 800c338:	0800c371 	.word	0x0800c371
 800c33c:	0800c369 	.word	0x0800c369
 800c340:	2301      	movs	r3, #1
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c346:	e050      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c348:	2304      	movs	r3, #4
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34e:	e04c      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c350:	2308      	movs	r3, #8
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c356:	e048      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c358:	2310      	movs	r3, #16
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35e:	e044      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c360:	2320      	movs	r3, #32
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c366:	e040      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c368:	2340      	movs	r3, #64	; 0x40
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36e:	e03c      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c370:	2380      	movs	r3, #128	; 0x80
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c376:	e038      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a71      	ldr	r2, [pc, #452]	; (800c544 <UART_SetConfig+0x908>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d130      	bne.n	800c3e4 <UART_SetConfig+0x7a8>
 800c382:	4b6f      	ldr	r3, [pc, #444]	; (800c540 <UART_SetConfig+0x904>)
 800c384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	d826      	bhi.n	800c3dc <UART_SetConfig+0x7a0>
 800c38e:	a201      	add	r2, pc, #4	; (adr r2, 800c394 <UART_SetConfig+0x758>)
 800c390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c394:	0800c3ad 	.word	0x0800c3ad
 800c398:	0800c3b5 	.word	0x0800c3b5
 800c39c:	0800c3bd 	.word	0x0800c3bd
 800c3a0:	0800c3c5 	.word	0x0800c3c5
 800c3a4:	0800c3cd 	.word	0x0800c3cd
 800c3a8:	0800c3d5 	.word	0x0800c3d5
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b2:	e01a      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c3b4:	2304      	movs	r3, #4
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ba:	e016      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c3bc:	2308      	movs	r3, #8
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c2:	e012      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c3c4:	2310      	movs	r3, #16
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ca:	e00e      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c3cc:	2320      	movs	r3, #32
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d2:	e00a      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c3d4:	2340      	movs	r3, #64	; 0x40
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3da:	e006      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c3dc:	2380      	movs	r3, #128	; 0x80
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e2:	e002      	b.n	800c3ea <UART_SetConfig+0x7ae>
 800c3e4:	2380      	movs	r3, #128	; 0x80
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a55      	ldr	r2, [pc, #340]	; (800c544 <UART_SetConfig+0x908>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	f040 80f8 	bne.w	800c5e6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3fa:	2b20      	cmp	r3, #32
 800c3fc:	dc46      	bgt.n	800c48c <UART_SetConfig+0x850>
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	db75      	blt.n	800c4ee <UART_SetConfig+0x8b2>
 800c402:	3b02      	subs	r3, #2
 800c404:	2b1e      	cmp	r3, #30
 800c406:	d872      	bhi.n	800c4ee <UART_SetConfig+0x8b2>
 800c408:	a201      	add	r2, pc, #4	; (adr r2, 800c410 <UART_SetConfig+0x7d4>)
 800c40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40e:	bf00      	nop
 800c410:	0800c493 	.word	0x0800c493
 800c414:	0800c4ef 	.word	0x0800c4ef
 800c418:	0800c49b 	.word	0x0800c49b
 800c41c:	0800c4ef 	.word	0x0800c4ef
 800c420:	0800c4ef 	.word	0x0800c4ef
 800c424:	0800c4ef 	.word	0x0800c4ef
 800c428:	0800c4ab 	.word	0x0800c4ab
 800c42c:	0800c4ef 	.word	0x0800c4ef
 800c430:	0800c4ef 	.word	0x0800c4ef
 800c434:	0800c4ef 	.word	0x0800c4ef
 800c438:	0800c4ef 	.word	0x0800c4ef
 800c43c:	0800c4ef 	.word	0x0800c4ef
 800c440:	0800c4ef 	.word	0x0800c4ef
 800c444:	0800c4ef 	.word	0x0800c4ef
 800c448:	0800c4bb 	.word	0x0800c4bb
 800c44c:	0800c4ef 	.word	0x0800c4ef
 800c450:	0800c4ef 	.word	0x0800c4ef
 800c454:	0800c4ef 	.word	0x0800c4ef
 800c458:	0800c4ef 	.word	0x0800c4ef
 800c45c:	0800c4ef 	.word	0x0800c4ef
 800c460:	0800c4ef 	.word	0x0800c4ef
 800c464:	0800c4ef 	.word	0x0800c4ef
 800c468:	0800c4ef 	.word	0x0800c4ef
 800c46c:	0800c4ef 	.word	0x0800c4ef
 800c470:	0800c4ef 	.word	0x0800c4ef
 800c474:	0800c4ef 	.word	0x0800c4ef
 800c478:	0800c4ef 	.word	0x0800c4ef
 800c47c:	0800c4ef 	.word	0x0800c4ef
 800c480:	0800c4ef 	.word	0x0800c4ef
 800c484:	0800c4ef 	.word	0x0800c4ef
 800c488:	0800c4e1 	.word	0x0800c4e1
 800c48c:	2b40      	cmp	r3, #64	; 0x40
 800c48e:	d02a      	beq.n	800c4e6 <UART_SetConfig+0x8aa>
 800c490:	e02d      	b.n	800c4ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c492:	f7fd f97f 	bl	8009794 <HAL_RCCEx_GetD3PCLK1Freq>
 800c496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c498:	e02f      	b.n	800c4fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c49a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7fd f98e 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a8:	e027      	b.n	800c4fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4aa:	f107 0318 	add.w	r3, r7, #24
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fd fada 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4b4:	69fb      	ldr	r3, [r7, #28]
 800c4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b8:	e01f      	b.n	800c4fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4ba:	4b21      	ldr	r3, [pc, #132]	; (800c540 <UART_SetConfig+0x904>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0320 	and.w	r3, r3, #32
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d009      	beq.n	800c4da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4c6:	4b1e      	ldr	r3, [pc, #120]	; (800c540 <UART_SetConfig+0x904>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	08db      	lsrs	r3, r3, #3
 800c4cc:	f003 0303 	and.w	r3, r3, #3
 800c4d0:	4a1d      	ldr	r2, [pc, #116]	; (800c548 <UART_SetConfig+0x90c>)
 800c4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4d8:	e00f      	b.n	800c4fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c4da:	4b1b      	ldr	r3, [pc, #108]	; (800c548 <UART_SetConfig+0x90c>)
 800c4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4de:	e00c      	b.n	800c4fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4e0:	4b1a      	ldr	r3, [pc, #104]	; (800c54c <UART_SetConfig+0x910>)
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e4:	e009      	b.n	800c4fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ec:	e005      	b.n	800c4fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c4f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 81ee 	beq.w	800c8de <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c506:	4a12      	ldr	r2, [pc, #72]	; (800c550 <UART_SetConfig+0x914>)
 800c508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c50c:	461a      	mov	r2, r3
 800c50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c510:	fbb3 f3f2 	udiv	r3, r3, r2
 800c514:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	685a      	ldr	r2, [r3, #4]
 800c51a:	4613      	mov	r3, r2
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4413      	add	r3, r2
 800c520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c522:	429a      	cmp	r2, r3
 800c524:	d305      	bcc.n	800c532 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c52e:	429a      	cmp	r2, r3
 800c530:	d910      	bls.n	800c554 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c538:	e1d1      	b.n	800c8de <UART_SetConfig+0xca2>
 800c53a:	bf00      	nop
 800c53c:	40011c00 	.word	0x40011c00
 800c540:	58024400 	.word	0x58024400
 800c544:	58000c00 	.word	0x58000c00
 800c548:	03d09000 	.word	0x03d09000
 800c54c:	003d0900 	.word	0x003d0900
 800c550:	0800d9f4 	.word	0x0800d9f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c556:	2200      	movs	r2, #0
 800c558:	60bb      	str	r3, [r7, #8]
 800c55a:	60fa      	str	r2, [r7, #12]
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c560:	4ac0      	ldr	r2, [pc, #768]	; (800c864 <UART_SetConfig+0xc28>)
 800c562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c566:	b29b      	uxth	r3, r3
 800c568:	2200      	movs	r2, #0
 800c56a:	603b      	str	r3, [r7, #0]
 800c56c:	607a      	str	r2, [r7, #4]
 800c56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c576:	f7f3 fed3 	bl	8000320 <__aeabi_uldivmod>
 800c57a:	4602      	mov	r2, r0
 800c57c:	460b      	mov	r3, r1
 800c57e:	4610      	mov	r0, r2
 800c580:	4619      	mov	r1, r3
 800c582:	f04f 0200 	mov.w	r2, #0
 800c586:	f04f 0300 	mov.w	r3, #0
 800c58a:	020b      	lsls	r3, r1, #8
 800c58c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c590:	0202      	lsls	r2, r0, #8
 800c592:	6979      	ldr	r1, [r7, #20]
 800c594:	6849      	ldr	r1, [r1, #4]
 800c596:	0849      	lsrs	r1, r1, #1
 800c598:	2000      	movs	r0, #0
 800c59a:	460c      	mov	r4, r1
 800c59c:	4605      	mov	r5, r0
 800c59e:	eb12 0804 	adds.w	r8, r2, r4
 800c5a2:	eb43 0905 	adc.w	r9, r3, r5
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	469a      	mov	sl, r3
 800c5ae:	4693      	mov	fp, r2
 800c5b0:	4652      	mov	r2, sl
 800c5b2:	465b      	mov	r3, fp
 800c5b4:	4640      	mov	r0, r8
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	f7f3 feb2 	bl	8000320 <__aeabi_uldivmod>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5ca:	d308      	bcc.n	800c5de <UART_SetConfig+0x9a2>
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5d2:	d204      	bcs.n	800c5de <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5da:	60da      	str	r2, [r3, #12]
 800c5dc:	e17f      	b.n	800c8de <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5e4:	e17b      	b.n	800c8de <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	69db      	ldr	r3, [r3, #28]
 800c5ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5ee:	f040 80bd 	bne.w	800c76c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c5f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5f6:	2b20      	cmp	r3, #32
 800c5f8:	dc48      	bgt.n	800c68c <UART_SetConfig+0xa50>
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	db7b      	blt.n	800c6f6 <UART_SetConfig+0xaba>
 800c5fe:	2b20      	cmp	r3, #32
 800c600:	d879      	bhi.n	800c6f6 <UART_SetConfig+0xaba>
 800c602:	a201      	add	r2, pc, #4	; (adr r2, 800c608 <UART_SetConfig+0x9cc>)
 800c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c608:	0800c693 	.word	0x0800c693
 800c60c:	0800c69b 	.word	0x0800c69b
 800c610:	0800c6f7 	.word	0x0800c6f7
 800c614:	0800c6f7 	.word	0x0800c6f7
 800c618:	0800c6a3 	.word	0x0800c6a3
 800c61c:	0800c6f7 	.word	0x0800c6f7
 800c620:	0800c6f7 	.word	0x0800c6f7
 800c624:	0800c6f7 	.word	0x0800c6f7
 800c628:	0800c6b3 	.word	0x0800c6b3
 800c62c:	0800c6f7 	.word	0x0800c6f7
 800c630:	0800c6f7 	.word	0x0800c6f7
 800c634:	0800c6f7 	.word	0x0800c6f7
 800c638:	0800c6f7 	.word	0x0800c6f7
 800c63c:	0800c6f7 	.word	0x0800c6f7
 800c640:	0800c6f7 	.word	0x0800c6f7
 800c644:	0800c6f7 	.word	0x0800c6f7
 800c648:	0800c6c3 	.word	0x0800c6c3
 800c64c:	0800c6f7 	.word	0x0800c6f7
 800c650:	0800c6f7 	.word	0x0800c6f7
 800c654:	0800c6f7 	.word	0x0800c6f7
 800c658:	0800c6f7 	.word	0x0800c6f7
 800c65c:	0800c6f7 	.word	0x0800c6f7
 800c660:	0800c6f7 	.word	0x0800c6f7
 800c664:	0800c6f7 	.word	0x0800c6f7
 800c668:	0800c6f7 	.word	0x0800c6f7
 800c66c:	0800c6f7 	.word	0x0800c6f7
 800c670:	0800c6f7 	.word	0x0800c6f7
 800c674:	0800c6f7 	.word	0x0800c6f7
 800c678:	0800c6f7 	.word	0x0800c6f7
 800c67c:	0800c6f7 	.word	0x0800c6f7
 800c680:	0800c6f7 	.word	0x0800c6f7
 800c684:	0800c6f7 	.word	0x0800c6f7
 800c688:	0800c6e9 	.word	0x0800c6e9
 800c68c:	2b40      	cmp	r3, #64	; 0x40
 800c68e:	d02e      	beq.n	800c6ee <UART_SetConfig+0xab2>
 800c690:	e031      	b.n	800c6f6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c692:	f7fc f959 	bl	8008948 <HAL_RCC_GetPCLK1Freq>
 800c696:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c698:	e033      	b.n	800c702 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c69a:	f7fc f96b 	bl	8008974 <HAL_RCC_GetPCLK2Freq>
 800c69e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6a0:	e02f      	b.n	800c702 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fd f88a 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b0:	e027      	b.n	800c702 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6b2:	f107 0318 	add.w	r3, r7, #24
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fd f9d6 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c0:	e01f      	b.n	800c702 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6c2:	4b69      	ldr	r3, [pc, #420]	; (800c868 <UART_SetConfig+0xc2c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 0320 	and.w	r3, r3, #32
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d009      	beq.n	800c6e2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6ce:	4b66      	ldr	r3, [pc, #408]	; (800c868 <UART_SetConfig+0xc2c>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	08db      	lsrs	r3, r3, #3
 800c6d4:	f003 0303 	and.w	r3, r3, #3
 800c6d8:	4a64      	ldr	r2, [pc, #400]	; (800c86c <UART_SetConfig+0xc30>)
 800c6da:	fa22 f303 	lsr.w	r3, r2, r3
 800c6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6e0:	e00f      	b.n	800c702 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c6e2:	4b62      	ldr	r3, [pc, #392]	; (800c86c <UART_SetConfig+0xc30>)
 800c6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e6:	e00c      	b.n	800c702 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6e8:	4b61      	ldr	r3, [pc, #388]	; (800c870 <UART_SetConfig+0xc34>)
 800c6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ec:	e009      	b.n	800c702 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f4:	e005      	b.n	800c702 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c700:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 80ea 	beq.w	800c8de <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70e:	4a55      	ldr	r2, [pc, #340]	; (800c864 <UART_SetConfig+0xc28>)
 800c710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c714:	461a      	mov	r2, r3
 800c716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c718:	fbb3 f3f2 	udiv	r3, r3, r2
 800c71c:	005a      	lsls	r2, r3, #1
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	085b      	lsrs	r3, r3, #1
 800c724:	441a      	add	r2, r3
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c72e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	2b0f      	cmp	r3, #15
 800c734:	d916      	bls.n	800c764 <UART_SetConfig+0xb28>
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c73c:	d212      	bcs.n	800c764 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	b29b      	uxth	r3, r3
 800c742:	f023 030f 	bic.w	r3, r3, #15
 800c746:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	085b      	lsrs	r3, r3, #1
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	f003 0307 	and.w	r3, r3, #7
 800c752:	b29a      	uxth	r2, r3
 800c754:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c756:	4313      	orrs	r3, r2
 800c758:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c760:	60da      	str	r2, [r3, #12]
 800c762:	e0bc      	b.n	800c8de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c76a:	e0b8      	b.n	800c8de <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c76c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c770:	2b20      	cmp	r3, #32
 800c772:	dc4b      	bgt.n	800c80c <UART_SetConfig+0xbd0>
 800c774:	2b00      	cmp	r3, #0
 800c776:	f2c0 8087 	blt.w	800c888 <UART_SetConfig+0xc4c>
 800c77a:	2b20      	cmp	r3, #32
 800c77c:	f200 8084 	bhi.w	800c888 <UART_SetConfig+0xc4c>
 800c780:	a201      	add	r2, pc, #4	; (adr r2, 800c788 <UART_SetConfig+0xb4c>)
 800c782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c786:	bf00      	nop
 800c788:	0800c813 	.word	0x0800c813
 800c78c:	0800c81b 	.word	0x0800c81b
 800c790:	0800c889 	.word	0x0800c889
 800c794:	0800c889 	.word	0x0800c889
 800c798:	0800c823 	.word	0x0800c823
 800c79c:	0800c889 	.word	0x0800c889
 800c7a0:	0800c889 	.word	0x0800c889
 800c7a4:	0800c889 	.word	0x0800c889
 800c7a8:	0800c833 	.word	0x0800c833
 800c7ac:	0800c889 	.word	0x0800c889
 800c7b0:	0800c889 	.word	0x0800c889
 800c7b4:	0800c889 	.word	0x0800c889
 800c7b8:	0800c889 	.word	0x0800c889
 800c7bc:	0800c889 	.word	0x0800c889
 800c7c0:	0800c889 	.word	0x0800c889
 800c7c4:	0800c889 	.word	0x0800c889
 800c7c8:	0800c843 	.word	0x0800c843
 800c7cc:	0800c889 	.word	0x0800c889
 800c7d0:	0800c889 	.word	0x0800c889
 800c7d4:	0800c889 	.word	0x0800c889
 800c7d8:	0800c889 	.word	0x0800c889
 800c7dc:	0800c889 	.word	0x0800c889
 800c7e0:	0800c889 	.word	0x0800c889
 800c7e4:	0800c889 	.word	0x0800c889
 800c7e8:	0800c889 	.word	0x0800c889
 800c7ec:	0800c889 	.word	0x0800c889
 800c7f0:	0800c889 	.word	0x0800c889
 800c7f4:	0800c889 	.word	0x0800c889
 800c7f8:	0800c889 	.word	0x0800c889
 800c7fc:	0800c889 	.word	0x0800c889
 800c800:	0800c889 	.word	0x0800c889
 800c804:	0800c889 	.word	0x0800c889
 800c808:	0800c87b 	.word	0x0800c87b
 800c80c:	2b40      	cmp	r3, #64	; 0x40
 800c80e:	d037      	beq.n	800c880 <UART_SetConfig+0xc44>
 800c810:	e03a      	b.n	800c888 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c812:	f7fc f899 	bl	8008948 <HAL_RCC_GetPCLK1Freq>
 800c816:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c818:	e03c      	b.n	800c894 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c81a:	f7fc f8ab 	bl	8008974 <HAL_RCC_GetPCLK2Freq>
 800c81e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c820:	e038      	b.n	800c894 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c826:	4618      	mov	r0, r3
 800c828:	f7fc ffca 	bl	80097c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c830:	e030      	b.n	800c894 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c832:	f107 0318 	add.w	r3, r7, #24
 800c836:	4618      	mov	r0, r3
 800c838:	f7fd f916 	bl	8009a68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c840:	e028      	b.n	800c894 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c842:	4b09      	ldr	r3, [pc, #36]	; (800c868 <UART_SetConfig+0xc2c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d012      	beq.n	800c874 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c84e:	4b06      	ldr	r3, [pc, #24]	; (800c868 <UART_SetConfig+0xc2c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	08db      	lsrs	r3, r3, #3
 800c854:	f003 0303 	and.w	r3, r3, #3
 800c858:	4a04      	ldr	r2, [pc, #16]	; (800c86c <UART_SetConfig+0xc30>)
 800c85a:	fa22 f303 	lsr.w	r3, r2, r3
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c860:	e018      	b.n	800c894 <UART_SetConfig+0xc58>
 800c862:	bf00      	nop
 800c864:	0800d9f4 	.word	0x0800d9f4
 800c868:	58024400 	.word	0x58024400
 800c86c:	03d09000 	.word	0x03d09000
 800c870:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c874:	4b24      	ldr	r3, [pc, #144]	; (800c908 <UART_SetConfig+0xccc>)
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c878:	e00c      	b.n	800c894 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c87a:	4b24      	ldr	r3, [pc, #144]	; (800c90c <UART_SetConfig+0xcd0>)
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87e:	e009      	b.n	800c894 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c886:	e005      	b.n	800c894 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c888:	2300      	movs	r3, #0
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c892:	bf00      	nop
    }

    if (pclk != 0U)
 800c894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d021      	beq.n	800c8de <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89e:	4a1c      	ldr	r2, [pc, #112]	; (800c910 <UART_SetConfig+0xcd4>)
 800c8a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	085b      	lsrs	r3, r3, #1
 800c8b2:	441a      	add	r2, r3
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8bc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c0:	2b0f      	cmp	r3, #15
 800c8c2:	d909      	bls.n	800c8d8 <UART_SetConfig+0xc9c>
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8ca:	d205      	bcs.n	800c8d8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	60da      	str	r2, [r3, #12]
 800c8d6:	e002      	b.n	800c8de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c8fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3748      	adds	r7, #72	; 0x48
 800c902:	46bd      	mov	sp, r7
 800c904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c908:	03d09000 	.word	0x03d09000
 800c90c:	003d0900 	.word	0x003d0900
 800c910:	0800d9f4 	.word	0x0800d9f4

0800c914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c920:	f003 0301 	and.w	r3, r3, #1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00a      	beq.n	800c93e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	430a      	orrs	r2, r1
 800c93c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c942:	f003 0302 	and.w	r3, r3, #2
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00a      	beq.n	800c960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	430a      	orrs	r2, r1
 800c95e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c964:	f003 0304 	and.w	r3, r3, #4
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00a      	beq.n	800c982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	430a      	orrs	r2, r1
 800c980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c986:	f003 0308 	and.w	r3, r3, #8
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00a      	beq.n	800c9a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	430a      	orrs	r2, r1
 800c9a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a8:	f003 0310 	and.w	r3, r3, #16
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00a      	beq.n	800c9c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	430a      	orrs	r2, r1
 800c9c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ca:	f003 0320 	and.w	r3, r3, #32
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00a      	beq.n	800c9e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	430a      	orrs	r2, r1
 800c9e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01a      	beq.n	800ca2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	430a      	orrs	r2, r1
 800ca08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca12:	d10a      	bne.n	800ca2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	430a      	orrs	r2, r1
 800ca28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00a      	beq.n	800ca4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	430a      	orrs	r2, r1
 800ca4a:	605a      	str	r2, [r3, #4]
  }
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af02      	add	r7, sp, #8
 800ca5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca68:	f7f8 f9ba 	bl	8004de0 <HAL_GetTick>
 800ca6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f003 0308 	and.w	r3, r3, #8
 800ca78:	2b08      	cmp	r3, #8
 800ca7a:	d10e      	bne.n	800ca9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 f82f 	bl	800caee <UART_WaitOnFlagUntilTimeout>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d001      	beq.n	800ca9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca96:	2303      	movs	r3, #3
 800ca98:	e025      	b.n	800cae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 0304 	and.w	r3, r3, #4
 800caa4:	2b04      	cmp	r3, #4
 800caa6:	d10e      	bne.n	800cac6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800caa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f819 	bl	800caee <UART_WaitOnFlagUntilTimeout>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cac2:	2303      	movs	r3, #3
 800cac4:	e00f      	b.n	800cae6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2220      	movs	r2, #32
 800caca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2220      	movs	r2, #32
 800cad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b09c      	sub	sp, #112	; 0x70
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	60b9      	str	r1, [r7, #8]
 800caf8:	603b      	str	r3, [r7, #0]
 800cafa:	4613      	mov	r3, r2
 800cafc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cafe:	e0a9      	b.n	800cc54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb06:	f000 80a5 	beq.w	800cc54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb0a:	f7f8 f969 	bl	8004de0 <HAL_GetTick>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	1ad3      	subs	r3, r2, r3
 800cb14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d302      	bcc.n	800cb20 <UART_WaitOnFlagUntilTimeout+0x32>
 800cb1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d140      	bne.n	800cba2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb28:	e853 3f00 	ldrex	r3, [r3]
 800cb2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb34:	667b      	str	r3, [r7, #100]	; 0x64
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb46:	e841 2300 	strex	r3, r2, [r1]
 800cb4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cb4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d1e6      	bne.n	800cb20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	3308      	adds	r3, #8
 800cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb5c:	e853 3f00 	ldrex	r3, [r3]
 800cb60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	f023 0301 	bic.w	r3, r3, #1
 800cb68:	663b      	str	r3, [r7, #96]	; 0x60
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	3308      	adds	r3, #8
 800cb70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb72:	64ba      	str	r2, [r7, #72]	; 0x48
 800cb74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb7a:	e841 2300 	strex	r3, r2, [r1]
 800cb7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1e5      	bne.n	800cb52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2220      	movs	r2, #32
 800cb8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2220      	movs	r2, #32
 800cb92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e069      	b.n	800cc76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f003 0304 	and.w	r3, r3, #4
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d051      	beq.n	800cc54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	69db      	ldr	r3, [r3, #28]
 800cbb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbbe:	d149      	bne.n	800cc54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	e853 3f00 	ldrex	r3, [r3]
 800cbd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cbde:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbe8:	637b      	str	r3, [r7, #52]	; 0x34
 800cbea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbf0:	e841 2300 	strex	r3, r2, [r1]
 800cbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e6      	bne.n	800cbca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	3308      	adds	r3, #8
 800cc02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	613b      	str	r3, [r7, #16]
   return(result);
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	f023 0301 	bic.w	r3, r3, #1
 800cc12:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3308      	adds	r3, #8
 800cc1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc1c:	623a      	str	r2, [r7, #32]
 800cc1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc20:	69f9      	ldr	r1, [r7, #28]
 800cc22:	6a3a      	ldr	r2, [r7, #32]
 800cc24:	e841 2300 	strex	r3, r2, [r1]
 800cc28:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1e5      	bne.n	800cbfc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2220      	movs	r2, #32
 800cc34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2220      	movs	r2, #32
 800cc3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2220      	movs	r2, #32
 800cc44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cc50:	2303      	movs	r3, #3
 800cc52:	e010      	b.n	800cc76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	69da      	ldr	r2, [r3, #28]
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	bf0c      	ite	eq
 800cc64:	2301      	moveq	r3, #1
 800cc66:	2300      	movne	r3, #0
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	79fb      	ldrb	r3, [r7, #7]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	f43f af46 	beq.w	800cb00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3770      	adds	r7, #112	; 0x70
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
	...

0800cc80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b096      	sub	sp, #88	; 0x58
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	88fa      	ldrh	r2, [r7, #6]
 800cc98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2222      	movs	r2, #34	; 0x22
 800cca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d02c      	beq.n	800cd0e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccb8:	4a42      	ldr	r2, [pc, #264]	; (800cdc4 <UART_Start_Receive_DMA+0x144>)
 800ccba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccc0:	4a41      	ldr	r2, [pc, #260]	; (800cdc8 <UART_Start_Receive_DMA+0x148>)
 800ccc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccc8:	4a40      	ldr	r2, [pc, #256]	; (800cdcc <UART_Start_Receive_DMA+0x14c>)
 800ccca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3324      	adds	r3, #36	; 0x24
 800ccde:	4619      	mov	r1, r3
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cce4:	461a      	mov	r2, r3
 800cce6:	88fb      	ldrh	r3, [r7, #6]
 800cce8:	f7f8 fea6 	bl	8005a38 <HAL_DMA_Start_IT>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00d      	beq.n	800cd0e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2210      	movs	r2, #16
 800ccf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2220      	movs	r2, #32
 800cd06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e055      	b.n	800cdba <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	691b      	ldr	r3, [r3, #16]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d018      	beq.n	800cd50 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd26:	e853 3f00 	ldrex	r3, [r3]
 800cd2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd32:	657b      	str	r3, [r7, #84]	; 0x54
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	461a      	mov	r2, r3
 800cd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd3e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd44:	e841 2300 	strex	r3, r2, [r1]
 800cd48:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1e6      	bne.n	800cd1e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3308      	adds	r3, #8
 800cd56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5a:	e853 3f00 	ldrex	r3, [r3]
 800cd5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd62:	f043 0301 	orr.w	r3, r3, #1
 800cd66:	653b      	str	r3, [r7, #80]	; 0x50
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd70:	637a      	str	r2, [r7, #52]	; 0x34
 800cd72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd78:	e841 2300 	strex	r3, r2, [r1]
 800cd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1e5      	bne.n	800cd50 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	e853 3f00 	ldrex	r3, [r3]
 800cd92:	613b      	str	r3, [r7, #16]
   return(result);
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3308      	adds	r3, #8
 800cda2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cda4:	623a      	str	r2, [r7, #32]
 800cda6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda8:	69f9      	ldr	r1, [r7, #28]
 800cdaa:	6a3a      	ldr	r2, [r7, #32]
 800cdac:	e841 2300 	strex	r3, r2, [r1]
 800cdb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1e5      	bne.n	800cd84 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800cdb8:	2300      	movs	r3, #0
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3758      	adds	r7, #88	; 0x58
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	0800cfd3 	.word	0x0800cfd3
 800cdc8:	0800d0f5 	.word	0x0800d0f5
 800cdcc:	0800d12d 	.word	0x0800d12d

0800cdd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b08f      	sub	sp, #60	; 0x3c
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdde:	6a3b      	ldr	r3, [r7, #32]
 800cde0:	e853 3f00 	ldrex	r3, [r3]
 800cde4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cdec:	637b      	str	r3, [r7, #52]	; 0x34
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdf8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdfe:	e841 2300 	strex	r3, r2, [r1]
 800ce02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1e6      	bne.n	800cdd8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	3308      	adds	r3, #8
 800ce10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	e853 3f00 	ldrex	r3, [r3]
 800ce18:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ce20:	633b      	str	r3, [r7, #48]	; 0x30
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	3308      	adds	r3, #8
 800ce28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce2a:	61ba      	str	r2, [r7, #24]
 800ce2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2e:	6979      	ldr	r1, [r7, #20]
 800ce30:	69ba      	ldr	r2, [r7, #24]
 800ce32:	e841 2300 	strex	r3, r2, [r1]
 800ce36:	613b      	str	r3, [r7, #16]
   return(result);
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1e5      	bne.n	800ce0a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2220      	movs	r2, #32
 800ce42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ce46:	bf00      	nop
 800ce48:	373c      	adds	r7, #60	; 0x3c
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
	...

0800ce54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b095      	sub	sp, #84	; 0x54
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce64:	e853 3f00 	ldrex	r3, [r3]
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	461a      	mov	r2, r3
 800ce78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce7a:	643b      	str	r3, [r7, #64]	; 0x40
 800ce7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce82:	e841 2300 	strex	r3, r2, [r1]
 800ce86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1e6      	bne.n	800ce5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	3308      	adds	r3, #8
 800ce94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce96:	6a3b      	ldr	r3, [r7, #32]
 800ce98:	e853 3f00 	ldrex	r3, [r3]
 800ce9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce9e:	69fa      	ldr	r2, [r7, #28]
 800cea0:	4b1e      	ldr	r3, [pc, #120]	; (800cf1c <UART_EndRxTransfer+0xc8>)
 800cea2:	4013      	ands	r3, r2
 800cea4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3308      	adds	r3, #8
 800ceac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ceb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceb6:	e841 2300 	strex	r3, r2, [r1]
 800ceba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1e5      	bne.n	800ce8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d118      	bne.n	800cefc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	e853 3f00 	ldrex	r3, [r3]
 800ced6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	f023 0310 	bic.w	r3, r3, #16
 800cede:	647b      	str	r3, [r7, #68]	; 0x44
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	461a      	mov	r2, r3
 800cee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cee8:	61bb      	str	r3, [r7, #24]
 800ceea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceec:	6979      	ldr	r1, [r7, #20]
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	e841 2300 	strex	r3, r2, [r1]
 800cef4:	613b      	str	r3, [r7, #16]
   return(result);
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d1e6      	bne.n	800ceca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2220      	movs	r2, #32
 800cf00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cf10:	bf00      	nop
 800cf12:	3754      	adds	r7, #84	; 0x54
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	effffffe 	.word	0xeffffffe

0800cf20 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b090      	sub	sp, #64	; 0x40
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	69db      	ldr	r3, [r3, #28]
 800cf32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf36:	d037      	beq.n	800cfa8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cf38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3308      	adds	r3, #8
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf4a:	e853 3f00 	ldrex	r3, [r3]
 800cf4e:	623b      	str	r3, [r7, #32]
   return(result);
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf56:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf60:	633a      	str	r2, [r7, #48]	; 0x30
 800cf62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf68:	e841 2300 	strex	r3, r2, [r1]
 800cf6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1e5      	bne.n	800cf40 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	e853 3f00 	ldrex	r3, [r3]
 800cf80:	60fb      	str	r3, [r7, #12]
   return(result);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf88:	637b      	str	r3, [r7, #52]	; 0x34
 800cf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf92:	61fb      	str	r3, [r7, #28]
 800cf94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf96:	69b9      	ldr	r1, [r7, #24]
 800cf98:	69fa      	ldr	r2, [r7, #28]
 800cf9a:	e841 2300 	strex	r3, r2, [r1]
 800cf9e:	617b      	str	r3, [r7, #20]
   return(result);
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1e6      	bne.n	800cf74 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cfa6:	e002      	b.n	800cfae <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cfa8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cfaa:	f7f6 f91d 	bl	80031e8 <HAL_UART_TxCpltCallback>
}
 800cfae:	bf00      	nop
 800cfb0:	3740      	adds	r7, #64	; 0x40
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b084      	sub	sp, #16
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f7fe fe0f 	bl	800bbe8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfca:	bf00      	nop
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b09c      	sub	sp, #112	; 0x70
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfde:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfe8:	d071      	beq.n	800d0ce <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800cfea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfec:	2200      	movs	r2, #0
 800cfee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cffa:	e853 3f00 	ldrex	r3, [r3]
 800cffe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d006:	66bb      	str	r3, [r7, #104]	; 0x68
 800d008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	461a      	mov	r2, r3
 800d00e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d010:	65bb      	str	r3, [r7, #88]	; 0x58
 800d012:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d014:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d016:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d018:	e841 2300 	strex	r3, r2, [r1]
 800d01c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d01e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1e6      	bne.n	800cff2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	3308      	adds	r3, #8
 800d02a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02e:	e853 3f00 	ldrex	r3, [r3]
 800d032:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d036:	f023 0301 	bic.w	r3, r3, #1
 800d03a:	667b      	str	r3, [r7, #100]	; 0x64
 800d03c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3308      	adds	r3, #8
 800d042:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d044:	647a      	str	r2, [r7, #68]	; 0x44
 800d046:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d048:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d04a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d04c:	e841 2300 	strex	r3, r2, [r1]
 800d050:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1e5      	bne.n	800d024 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	3308      	adds	r3, #8
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	e853 3f00 	ldrex	r3, [r3]
 800d066:	623b      	str	r3, [r7, #32]
   return(result);
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d06e:	663b      	str	r3, [r7, #96]	; 0x60
 800d070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3308      	adds	r3, #8
 800d076:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d078:	633a      	str	r2, [r7, #48]	; 0x30
 800d07a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d07e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d080:	e841 2300 	strex	r3, r2, [r1]
 800d084:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1e5      	bne.n	800d058 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d08e:	2220      	movs	r2, #32
 800d090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d118      	bne.n	800d0ce <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d09c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	e853 3f00 	ldrex	r3, [r3]
 800d0a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f023 0310 	bic.w	r3, r3, #16
 800d0b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0ba:	61fb      	str	r3, [r7, #28]
 800d0bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0be:	69b9      	ldr	r1, [r7, #24]
 800d0c0:	69fa      	ldr	r2, [r7, #28]
 800d0c2:	e841 2300 	strex	r3, r2, [r1]
 800d0c6:	617b      	str	r3, [r7, #20]
   return(result);
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1e6      	bne.n	800d09c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d107      	bne.n	800d0e6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d0d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d0e0:	f7fe fda0 	bl	800bc24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d0e4:	e002      	b.n	800d0ec <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d0e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d0e8:	f7fe fd88 	bl	800bbfc <HAL_UART_RxCpltCallback>
}
 800d0ec:	bf00      	nop
 800d0ee:	3770      	adds	r7, #112	; 0x70
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d100:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d106:	2b01      	cmp	r3, #1
 800d108:	d109      	bne.n	800d11e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d110:	085b      	lsrs	r3, r3, #1
 800d112:	b29b      	uxth	r3, r3
 800d114:	4619      	mov	r1, r3
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f7fe fd84 	bl	800bc24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d11c:	e002      	b.n	800d124 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d11e:	68f8      	ldr	r0, [r7, #12]
 800d120:	f7fe fd76 	bl	800bc10 <HAL_UART_RxHalfCpltCallback>
}
 800d124:	bf00      	nop
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d138:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d140:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d148:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d154:	2b80      	cmp	r3, #128	; 0x80
 800d156:	d109      	bne.n	800d16c <UART_DMAError+0x40>
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	2b21      	cmp	r3, #33	; 0x21
 800d15c:	d106      	bne.n	800d16c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	2200      	movs	r2, #0
 800d162:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d166:	6978      	ldr	r0, [r7, #20]
 800d168:	f7ff fe32 	bl	800cdd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d176:	2b40      	cmp	r3, #64	; 0x40
 800d178:	d109      	bne.n	800d18e <UART_DMAError+0x62>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2b22      	cmp	r3, #34	; 0x22
 800d17e:	d106      	bne.n	800d18e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	2200      	movs	r2, #0
 800d184:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d188:	6978      	ldr	r0, [r7, #20]
 800d18a:	f7ff fe63 	bl	800ce54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d194:	f043 0210 	orr.w	r2, r3, #16
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d19e:	6978      	ldr	r0, [r7, #20]
 800d1a0:	f7f6 f800 	bl	80031a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1a4:	bf00      	nop
 800d1a6:	3718      	adds	r7, #24
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d101      	bne.n	800d1c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800d1be:	2302      	movs	r3, #2
 800d1c0:	e027      	b.n	800d212 <HAL_UARTEx_DisableFifoMode+0x66>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2224      	movs	r2, #36	; 0x24
 800d1ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f022 0201 	bic.w	r2, r2, #1
 800d1e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d1f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2220      	movs	r2, #32
 800d204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b084      	sub	sp, #16
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d101      	bne.n	800d236 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d232:	2302      	movs	r3, #2
 800d234:	e02d      	b.n	800d292 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2224      	movs	r2, #36	; 0x24
 800d242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f022 0201 	bic.w	r2, r2, #1
 800d25c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	430a      	orrs	r2, r1
 800d270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f850 	bl	800d318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2220      	movs	r2, #32
 800d284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d101      	bne.n	800d2b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	e02d      	b.n	800d30e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2224      	movs	r2, #36	; 0x24
 800d2be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f022 0201 	bic.w	r2, r2, #1
 800d2d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	430a      	orrs	r2, r1
 800d2ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 f812 	bl	800d318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2220      	movs	r2, #32
 800d300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d30c:	2300      	movs	r3, #0
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
	...

0800d318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d324:	2b00      	cmp	r3, #0
 800d326:	d108      	bne.n	800d33a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2201      	movs	r2, #1
 800d32c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d338:	e031      	b.n	800d39e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d33a:	2310      	movs	r3, #16
 800d33c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d33e:	2310      	movs	r3, #16
 800d340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	0e5b      	lsrs	r3, r3, #25
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	f003 0307 	and.w	r3, r3, #7
 800d350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	0f5b      	lsrs	r3, r3, #29
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	f003 0307 	and.w	r3, r3, #7
 800d360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d362:	7bbb      	ldrb	r3, [r7, #14]
 800d364:	7b3a      	ldrb	r2, [r7, #12]
 800d366:	4911      	ldr	r1, [pc, #68]	; (800d3ac <UARTEx_SetNbDataToProcess+0x94>)
 800d368:	5c8a      	ldrb	r2, [r1, r2]
 800d36a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d36e:	7b3a      	ldrb	r2, [r7, #12]
 800d370:	490f      	ldr	r1, [pc, #60]	; (800d3b0 <UARTEx_SetNbDataToProcess+0x98>)
 800d372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d374:	fb93 f3f2 	sdiv	r3, r3, r2
 800d378:	b29a      	uxth	r2, r3
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	7b7a      	ldrb	r2, [r7, #13]
 800d384:	4909      	ldr	r1, [pc, #36]	; (800d3ac <UARTEx_SetNbDataToProcess+0x94>)
 800d386:	5c8a      	ldrb	r2, [r1, r2]
 800d388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d38c:	7b7a      	ldrb	r2, [r7, #13]
 800d38e:	4908      	ldr	r1, [pc, #32]	; (800d3b0 <UARTEx_SetNbDataToProcess+0x98>)
 800d390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d392:	fb93 f3f2 	sdiv	r3, r3, r2
 800d396:	b29a      	uxth	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d39e:	bf00      	nop
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	0800da0c 	.word	0x0800da0c
 800d3b0:	0800da14 	.word	0x0800da14

0800d3b4 <__cxa_pure_virtual>:
 800d3b4:	b508      	push	{r3, lr}
 800d3b6:	f000 f80d 	bl	800d3d4 <_ZSt9terminatev>

0800d3ba <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d3ba:	b508      	push	{r3, lr}
 800d3bc:	4780      	blx	r0
 800d3be:	f000 f80e 	bl	800d3de <abort>
	...

0800d3c4 <_ZSt13get_terminatev>:
 800d3c4:	4b02      	ldr	r3, [pc, #8]	; (800d3d0 <_ZSt13get_terminatev+0xc>)
 800d3c6:	6818      	ldr	r0, [r3, #0]
 800d3c8:	f3bf 8f5b 	dmb	ish
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	240001d8 	.word	0x240001d8

0800d3d4 <_ZSt9terminatev>:
 800d3d4:	b508      	push	{r3, lr}
 800d3d6:	f7ff fff5 	bl	800d3c4 <_ZSt13get_terminatev>
 800d3da:	f7ff ffee 	bl	800d3ba <_ZN10__cxxabiv111__terminateEPFvvE>

0800d3de <abort>:
 800d3de:	b508      	push	{r3, lr}
 800d3e0:	2006      	movs	r0, #6
 800d3e2:	f000 f873 	bl	800d4cc <raise>
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	f7f7 fb92 	bl	8004b10 <_exit>

0800d3ec <__errno>:
 800d3ec:	4b01      	ldr	r3, [pc, #4]	; (800d3f4 <__errno+0x8>)
 800d3ee:	6818      	ldr	r0, [r3, #0]
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	240001dc 	.word	0x240001dc

0800d3f8 <__libc_init_array>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	4d0d      	ldr	r5, [pc, #52]	; (800d430 <__libc_init_array+0x38>)
 800d3fc:	4c0d      	ldr	r4, [pc, #52]	; (800d434 <__libc_init_array+0x3c>)
 800d3fe:	1b64      	subs	r4, r4, r5
 800d400:	10a4      	asrs	r4, r4, #2
 800d402:	2600      	movs	r6, #0
 800d404:	42a6      	cmp	r6, r4
 800d406:	d109      	bne.n	800d41c <__libc_init_array+0x24>
 800d408:	4d0b      	ldr	r5, [pc, #44]	; (800d438 <__libc_init_array+0x40>)
 800d40a:	4c0c      	ldr	r4, [pc, #48]	; (800d43c <__libc_init_array+0x44>)
 800d40c:	f000 f9b0 	bl	800d770 <_init>
 800d410:	1b64      	subs	r4, r4, r5
 800d412:	10a4      	asrs	r4, r4, #2
 800d414:	2600      	movs	r6, #0
 800d416:	42a6      	cmp	r6, r4
 800d418:	d105      	bne.n	800d426 <__libc_init_array+0x2e>
 800d41a:	bd70      	pop	{r4, r5, r6, pc}
 800d41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d420:	4798      	blx	r3
 800d422:	3601      	adds	r6, #1
 800d424:	e7ee      	b.n	800d404 <__libc_init_array+0xc>
 800d426:	f855 3b04 	ldr.w	r3, [r5], #4
 800d42a:	4798      	blx	r3
 800d42c:	3601      	adds	r6, #1
 800d42e:	e7f2      	b.n	800d416 <__libc_init_array+0x1e>
 800d430:	0800da24 	.word	0x0800da24
 800d434:	0800da24 	.word	0x0800da24
 800d438:	0800da24 	.word	0x0800da24
 800d43c:	0800da34 	.word	0x0800da34

0800d440 <memcpy>:
 800d440:	440a      	add	r2, r1
 800d442:	4291      	cmp	r1, r2
 800d444:	f100 33ff 	add.w	r3, r0, #4294967295
 800d448:	d100      	bne.n	800d44c <memcpy+0xc>
 800d44a:	4770      	bx	lr
 800d44c:	b510      	push	{r4, lr}
 800d44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d456:	4291      	cmp	r1, r2
 800d458:	d1f9      	bne.n	800d44e <memcpy+0xe>
 800d45a:	bd10      	pop	{r4, pc}

0800d45c <memset>:
 800d45c:	4402      	add	r2, r0
 800d45e:	4603      	mov	r3, r0
 800d460:	4293      	cmp	r3, r2
 800d462:	d100      	bne.n	800d466 <memset+0xa>
 800d464:	4770      	bx	lr
 800d466:	f803 1b01 	strb.w	r1, [r3], #1
 800d46a:	e7f9      	b.n	800d460 <memset+0x4>

0800d46c <realloc>:
 800d46c:	4b02      	ldr	r3, [pc, #8]	; (800d478 <realloc+0xc>)
 800d46e:	460a      	mov	r2, r1
 800d470:	4601      	mov	r1, r0
 800d472:	6818      	ldr	r0, [r3, #0]
 800d474:	f000 b8da 	b.w	800d62c <_realloc_r>
 800d478:	240001dc 	.word	0x240001dc

0800d47c <_raise_r>:
 800d47c:	291f      	cmp	r1, #31
 800d47e:	b538      	push	{r3, r4, r5, lr}
 800d480:	4604      	mov	r4, r0
 800d482:	460d      	mov	r5, r1
 800d484:	d904      	bls.n	800d490 <_raise_r+0x14>
 800d486:	2316      	movs	r3, #22
 800d488:	6003      	str	r3, [r0, #0]
 800d48a:	f04f 30ff 	mov.w	r0, #4294967295
 800d48e:	bd38      	pop	{r3, r4, r5, pc}
 800d490:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d492:	b112      	cbz	r2, 800d49a <_raise_r+0x1e>
 800d494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d498:	b94b      	cbnz	r3, 800d4ae <_raise_r+0x32>
 800d49a:	4620      	mov	r0, r4
 800d49c:	f000 f830 	bl	800d500 <_getpid_r>
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4aa:	f000 b817 	b.w	800d4dc <_kill_r>
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d00a      	beq.n	800d4c8 <_raise_r+0x4c>
 800d4b2:	1c59      	adds	r1, r3, #1
 800d4b4:	d103      	bne.n	800d4be <_raise_r+0x42>
 800d4b6:	2316      	movs	r3, #22
 800d4b8:	6003      	str	r3, [r0, #0]
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	e7e7      	b.n	800d48e <_raise_r+0x12>
 800d4be:	2400      	movs	r4, #0
 800d4c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	4798      	blx	r3
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	e7e0      	b.n	800d48e <_raise_r+0x12>

0800d4cc <raise>:
 800d4cc:	4b02      	ldr	r3, [pc, #8]	; (800d4d8 <raise+0xc>)
 800d4ce:	4601      	mov	r1, r0
 800d4d0:	6818      	ldr	r0, [r3, #0]
 800d4d2:	f7ff bfd3 	b.w	800d47c <_raise_r>
 800d4d6:	bf00      	nop
 800d4d8:	240001dc 	.word	0x240001dc

0800d4dc <_kill_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	4d07      	ldr	r5, [pc, #28]	; (800d4fc <_kill_r+0x20>)
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	4608      	mov	r0, r1
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	602b      	str	r3, [r5, #0]
 800d4ea:	f7f7 fb01 	bl	8004af0 <_kill>
 800d4ee:	1c43      	adds	r3, r0, #1
 800d4f0:	d102      	bne.n	800d4f8 <_kill_r+0x1c>
 800d4f2:	682b      	ldr	r3, [r5, #0]
 800d4f4:	b103      	cbz	r3, 800d4f8 <_kill_r+0x1c>
 800d4f6:	6023      	str	r3, [r4, #0]
 800d4f8:	bd38      	pop	{r3, r4, r5, pc}
 800d4fa:	bf00      	nop
 800d4fc:	24001e4c 	.word	0x24001e4c

0800d500 <_getpid_r>:
 800d500:	f7f7 baee 	b.w	8004ae0 <_getpid>

0800d504 <sbrk_aligned>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	4e0e      	ldr	r6, [pc, #56]	; (800d540 <sbrk_aligned+0x3c>)
 800d508:	460c      	mov	r4, r1
 800d50a:	6831      	ldr	r1, [r6, #0]
 800d50c:	4605      	mov	r5, r0
 800d50e:	b911      	cbnz	r1, 800d516 <sbrk_aligned+0x12>
 800d510:	f000 f8bc 	bl	800d68c <_sbrk_r>
 800d514:	6030      	str	r0, [r6, #0]
 800d516:	4621      	mov	r1, r4
 800d518:	4628      	mov	r0, r5
 800d51a:	f000 f8b7 	bl	800d68c <_sbrk_r>
 800d51e:	1c43      	adds	r3, r0, #1
 800d520:	d00a      	beq.n	800d538 <sbrk_aligned+0x34>
 800d522:	1cc4      	adds	r4, r0, #3
 800d524:	f024 0403 	bic.w	r4, r4, #3
 800d528:	42a0      	cmp	r0, r4
 800d52a:	d007      	beq.n	800d53c <sbrk_aligned+0x38>
 800d52c:	1a21      	subs	r1, r4, r0
 800d52e:	4628      	mov	r0, r5
 800d530:	f000 f8ac 	bl	800d68c <_sbrk_r>
 800d534:	3001      	adds	r0, #1
 800d536:	d101      	bne.n	800d53c <sbrk_aligned+0x38>
 800d538:	f04f 34ff 	mov.w	r4, #4294967295
 800d53c:	4620      	mov	r0, r4
 800d53e:	bd70      	pop	{r4, r5, r6, pc}
 800d540:	24001e48 	.word	0x24001e48

0800d544 <_malloc_r>:
 800d544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d548:	1ccd      	adds	r5, r1, #3
 800d54a:	f025 0503 	bic.w	r5, r5, #3
 800d54e:	3508      	adds	r5, #8
 800d550:	2d0c      	cmp	r5, #12
 800d552:	bf38      	it	cc
 800d554:	250c      	movcc	r5, #12
 800d556:	2d00      	cmp	r5, #0
 800d558:	4607      	mov	r7, r0
 800d55a:	db01      	blt.n	800d560 <_malloc_r+0x1c>
 800d55c:	42a9      	cmp	r1, r5
 800d55e:	d905      	bls.n	800d56c <_malloc_r+0x28>
 800d560:	230c      	movs	r3, #12
 800d562:	603b      	str	r3, [r7, #0]
 800d564:	2600      	movs	r6, #0
 800d566:	4630      	mov	r0, r6
 800d568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d56c:	4e2e      	ldr	r6, [pc, #184]	; (800d628 <_malloc_r+0xe4>)
 800d56e:	f000 f89d 	bl	800d6ac <__malloc_lock>
 800d572:	6833      	ldr	r3, [r6, #0]
 800d574:	461c      	mov	r4, r3
 800d576:	bb34      	cbnz	r4, 800d5c6 <_malloc_r+0x82>
 800d578:	4629      	mov	r1, r5
 800d57a:	4638      	mov	r0, r7
 800d57c:	f7ff ffc2 	bl	800d504 <sbrk_aligned>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	4604      	mov	r4, r0
 800d584:	d14d      	bne.n	800d622 <_malloc_r+0xde>
 800d586:	6834      	ldr	r4, [r6, #0]
 800d588:	4626      	mov	r6, r4
 800d58a:	2e00      	cmp	r6, #0
 800d58c:	d140      	bne.n	800d610 <_malloc_r+0xcc>
 800d58e:	6823      	ldr	r3, [r4, #0]
 800d590:	4631      	mov	r1, r6
 800d592:	4638      	mov	r0, r7
 800d594:	eb04 0803 	add.w	r8, r4, r3
 800d598:	f000 f878 	bl	800d68c <_sbrk_r>
 800d59c:	4580      	cmp	r8, r0
 800d59e:	d13a      	bne.n	800d616 <_malloc_r+0xd2>
 800d5a0:	6821      	ldr	r1, [r4, #0]
 800d5a2:	3503      	adds	r5, #3
 800d5a4:	1a6d      	subs	r5, r5, r1
 800d5a6:	f025 0503 	bic.w	r5, r5, #3
 800d5aa:	3508      	adds	r5, #8
 800d5ac:	2d0c      	cmp	r5, #12
 800d5ae:	bf38      	it	cc
 800d5b0:	250c      	movcc	r5, #12
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	4638      	mov	r0, r7
 800d5b6:	f7ff ffa5 	bl	800d504 <sbrk_aligned>
 800d5ba:	3001      	adds	r0, #1
 800d5bc:	d02b      	beq.n	800d616 <_malloc_r+0xd2>
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	442b      	add	r3, r5
 800d5c2:	6023      	str	r3, [r4, #0]
 800d5c4:	e00e      	b.n	800d5e4 <_malloc_r+0xa0>
 800d5c6:	6822      	ldr	r2, [r4, #0]
 800d5c8:	1b52      	subs	r2, r2, r5
 800d5ca:	d41e      	bmi.n	800d60a <_malloc_r+0xc6>
 800d5cc:	2a0b      	cmp	r2, #11
 800d5ce:	d916      	bls.n	800d5fe <_malloc_r+0xba>
 800d5d0:	1961      	adds	r1, r4, r5
 800d5d2:	42a3      	cmp	r3, r4
 800d5d4:	6025      	str	r5, [r4, #0]
 800d5d6:	bf18      	it	ne
 800d5d8:	6059      	strne	r1, [r3, #4]
 800d5da:	6863      	ldr	r3, [r4, #4]
 800d5dc:	bf08      	it	eq
 800d5de:	6031      	streq	r1, [r6, #0]
 800d5e0:	5162      	str	r2, [r4, r5]
 800d5e2:	604b      	str	r3, [r1, #4]
 800d5e4:	4638      	mov	r0, r7
 800d5e6:	f104 060b 	add.w	r6, r4, #11
 800d5ea:	f000 f865 	bl	800d6b8 <__malloc_unlock>
 800d5ee:	f026 0607 	bic.w	r6, r6, #7
 800d5f2:	1d23      	adds	r3, r4, #4
 800d5f4:	1af2      	subs	r2, r6, r3
 800d5f6:	d0b6      	beq.n	800d566 <_malloc_r+0x22>
 800d5f8:	1b9b      	subs	r3, r3, r6
 800d5fa:	50a3      	str	r3, [r4, r2]
 800d5fc:	e7b3      	b.n	800d566 <_malloc_r+0x22>
 800d5fe:	6862      	ldr	r2, [r4, #4]
 800d600:	42a3      	cmp	r3, r4
 800d602:	bf0c      	ite	eq
 800d604:	6032      	streq	r2, [r6, #0]
 800d606:	605a      	strne	r2, [r3, #4]
 800d608:	e7ec      	b.n	800d5e4 <_malloc_r+0xa0>
 800d60a:	4623      	mov	r3, r4
 800d60c:	6864      	ldr	r4, [r4, #4]
 800d60e:	e7b2      	b.n	800d576 <_malloc_r+0x32>
 800d610:	4634      	mov	r4, r6
 800d612:	6876      	ldr	r6, [r6, #4]
 800d614:	e7b9      	b.n	800d58a <_malloc_r+0x46>
 800d616:	230c      	movs	r3, #12
 800d618:	603b      	str	r3, [r7, #0]
 800d61a:	4638      	mov	r0, r7
 800d61c:	f000 f84c 	bl	800d6b8 <__malloc_unlock>
 800d620:	e7a1      	b.n	800d566 <_malloc_r+0x22>
 800d622:	6025      	str	r5, [r4, #0]
 800d624:	e7de      	b.n	800d5e4 <_malloc_r+0xa0>
 800d626:	bf00      	nop
 800d628:	24001e44 	.word	0x24001e44

0800d62c <_realloc_r>:
 800d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d630:	4680      	mov	r8, r0
 800d632:	4614      	mov	r4, r2
 800d634:	460e      	mov	r6, r1
 800d636:	b921      	cbnz	r1, 800d642 <_realloc_r+0x16>
 800d638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d63c:	4611      	mov	r1, r2
 800d63e:	f7ff bf81 	b.w	800d544 <_malloc_r>
 800d642:	b92a      	cbnz	r2, 800d650 <_realloc_r+0x24>
 800d644:	f000 f83e 	bl	800d6c4 <_free_r>
 800d648:	4625      	mov	r5, r4
 800d64a:	4628      	mov	r0, r5
 800d64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d650:	f000 f884 	bl	800d75c <_malloc_usable_size_r>
 800d654:	4284      	cmp	r4, r0
 800d656:	4607      	mov	r7, r0
 800d658:	d802      	bhi.n	800d660 <_realloc_r+0x34>
 800d65a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d65e:	d812      	bhi.n	800d686 <_realloc_r+0x5a>
 800d660:	4621      	mov	r1, r4
 800d662:	4640      	mov	r0, r8
 800d664:	f7ff ff6e 	bl	800d544 <_malloc_r>
 800d668:	4605      	mov	r5, r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d0ed      	beq.n	800d64a <_realloc_r+0x1e>
 800d66e:	42bc      	cmp	r4, r7
 800d670:	4622      	mov	r2, r4
 800d672:	4631      	mov	r1, r6
 800d674:	bf28      	it	cs
 800d676:	463a      	movcs	r2, r7
 800d678:	f7ff fee2 	bl	800d440 <memcpy>
 800d67c:	4631      	mov	r1, r6
 800d67e:	4640      	mov	r0, r8
 800d680:	f000 f820 	bl	800d6c4 <_free_r>
 800d684:	e7e1      	b.n	800d64a <_realloc_r+0x1e>
 800d686:	4635      	mov	r5, r6
 800d688:	e7df      	b.n	800d64a <_realloc_r+0x1e>
	...

0800d68c <_sbrk_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4d06      	ldr	r5, [pc, #24]	; (800d6a8 <_sbrk_r+0x1c>)
 800d690:	2300      	movs	r3, #0
 800d692:	4604      	mov	r4, r0
 800d694:	4608      	mov	r0, r1
 800d696:	602b      	str	r3, [r5, #0]
 800d698:	f7f7 fa44 	bl	8004b24 <_sbrk>
 800d69c:	1c43      	adds	r3, r0, #1
 800d69e:	d102      	bne.n	800d6a6 <_sbrk_r+0x1a>
 800d6a0:	682b      	ldr	r3, [r5, #0]
 800d6a2:	b103      	cbz	r3, 800d6a6 <_sbrk_r+0x1a>
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	bd38      	pop	{r3, r4, r5, pc}
 800d6a8:	24001e4c 	.word	0x24001e4c

0800d6ac <__malloc_lock>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	; (800d6b4 <__malloc_lock+0x8>)
 800d6ae:	f000 b85d 	b.w	800d76c <__retarget_lock_acquire_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	24001e50 	.word	0x24001e50

0800d6b8 <__malloc_unlock>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	; (800d6c0 <__malloc_unlock+0x8>)
 800d6ba:	f000 b858 	b.w	800d76e <__retarget_lock_release_recursive>
 800d6be:	bf00      	nop
 800d6c0:	24001e50 	.word	0x24001e50

0800d6c4 <_free_r>:
 800d6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	d044      	beq.n	800d754 <_free_r+0x90>
 800d6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ce:	9001      	str	r0, [sp, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f1a1 0404 	sub.w	r4, r1, #4
 800d6d6:	bfb8      	it	lt
 800d6d8:	18e4      	addlt	r4, r4, r3
 800d6da:	f7ff ffe7 	bl	800d6ac <__malloc_lock>
 800d6de:	4a1e      	ldr	r2, [pc, #120]	; (800d758 <_free_r+0x94>)
 800d6e0:	9801      	ldr	r0, [sp, #4]
 800d6e2:	6813      	ldr	r3, [r2, #0]
 800d6e4:	b933      	cbnz	r3, 800d6f4 <_free_r+0x30>
 800d6e6:	6063      	str	r3, [r4, #4]
 800d6e8:	6014      	str	r4, [r2, #0]
 800d6ea:	b003      	add	sp, #12
 800d6ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6f0:	f7ff bfe2 	b.w	800d6b8 <__malloc_unlock>
 800d6f4:	42a3      	cmp	r3, r4
 800d6f6:	d908      	bls.n	800d70a <_free_r+0x46>
 800d6f8:	6825      	ldr	r5, [r4, #0]
 800d6fa:	1961      	adds	r1, r4, r5
 800d6fc:	428b      	cmp	r3, r1
 800d6fe:	bf01      	itttt	eq
 800d700:	6819      	ldreq	r1, [r3, #0]
 800d702:	685b      	ldreq	r3, [r3, #4]
 800d704:	1949      	addeq	r1, r1, r5
 800d706:	6021      	streq	r1, [r4, #0]
 800d708:	e7ed      	b.n	800d6e6 <_free_r+0x22>
 800d70a:	461a      	mov	r2, r3
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	b10b      	cbz	r3, 800d714 <_free_r+0x50>
 800d710:	42a3      	cmp	r3, r4
 800d712:	d9fa      	bls.n	800d70a <_free_r+0x46>
 800d714:	6811      	ldr	r1, [r2, #0]
 800d716:	1855      	adds	r5, r2, r1
 800d718:	42a5      	cmp	r5, r4
 800d71a:	d10b      	bne.n	800d734 <_free_r+0x70>
 800d71c:	6824      	ldr	r4, [r4, #0]
 800d71e:	4421      	add	r1, r4
 800d720:	1854      	adds	r4, r2, r1
 800d722:	42a3      	cmp	r3, r4
 800d724:	6011      	str	r1, [r2, #0]
 800d726:	d1e0      	bne.n	800d6ea <_free_r+0x26>
 800d728:	681c      	ldr	r4, [r3, #0]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	6053      	str	r3, [r2, #4]
 800d72e:	4421      	add	r1, r4
 800d730:	6011      	str	r1, [r2, #0]
 800d732:	e7da      	b.n	800d6ea <_free_r+0x26>
 800d734:	d902      	bls.n	800d73c <_free_r+0x78>
 800d736:	230c      	movs	r3, #12
 800d738:	6003      	str	r3, [r0, #0]
 800d73a:	e7d6      	b.n	800d6ea <_free_r+0x26>
 800d73c:	6825      	ldr	r5, [r4, #0]
 800d73e:	1961      	adds	r1, r4, r5
 800d740:	428b      	cmp	r3, r1
 800d742:	bf04      	itt	eq
 800d744:	6819      	ldreq	r1, [r3, #0]
 800d746:	685b      	ldreq	r3, [r3, #4]
 800d748:	6063      	str	r3, [r4, #4]
 800d74a:	bf04      	itt	eq
 800d74c:	1949      	addeq	r1, r1, r5
 800d74e:	6021      	streq	r1, [r4, #0]
 800d750:	6054      	str	r4, [r2, #4]
 800d752:	e7ca      	b.n	800d6ea <_free_r+0x26>
 800d754:	b003      	add	sp, #12
 800d756:	bd30      	pop	{r4, r5, pc}
 800d758:	24001e44 	.word	0x24001e44

0800d75c <_malloc_usable_size_r>:
 800d75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d760:	1f18      	subs	r0, r3, #4
 800d762:	2b00      	cmp	r3, #0
 800d764:	bfbc      	itt	lt
 800d766:	580b      	ldrlt	r3, [r1, r0]
 800d768:	18c0      	addlt	r0, r0, r3
 800d76a:	4770      	bx	lr

0800d76c <__retarget_lock_acquire_recursive>:
 800d76c:	4770      	bx	lr

0800d76e <__retarget_lock_release_recursive>:
 800d76e:	4770      	bx	lr

0800d770 <_init>:
 800d770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d772:	bf00      	nop
 800d774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d776:	bc08      	pop	{r3}
 800d778:	469e      	mov	lr, r3
 800d77a:	4770      	bx	lr

0800d77c <_fini>:
 800d77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d77e:	bf00      	nop
 800d780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d782:	bc08      	pop	{r3}
 800d784:	469e      	mov	lr, r3
 800d786:	4770      	bx	lr
